
F091-TestGps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010740  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b38  08010800  08010800  00020800  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011338  08011338  000301e4  2**0
                  CONTENTS
  4 .ARM          00000000  08011338  08011338  000301e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011338  08011338  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011338  08011338  00021338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801133c  0801133c  0002133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011340  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002518  200001e8  08011524  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002700  08011524  00032700  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020819  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004727  00000000  00000000  00050a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001640  00000000  00000000  00055150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001468  00000000  00000000  00056790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209f7  00000000  00000000  00057bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c154  00000000  00000000  000785ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b52cf  00000000  00000000  00094743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149a12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006498  00000000  00000000  00149a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  0014ff00  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  0014ff3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080107e8 	.word	0x080107e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	080107e8 	.word	0x080107e8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	1c10      	adds	r0, r2, #0
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	1c19      	adds	r1, r3, #0
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ffa3 	bl	8001388 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 feed 	bl	800122c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff95 	bl	8001388 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff8b 	bl	8001388 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff0f 	bl	80012a4 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff05 	bl	80012a4 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fdef 	bl	80020a0 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa38 	bl	8001940 <__aeabi_dsub>
 80004d0:	f001 fde6 	bl	80020a0 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff9d 	bl	8001468 <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fe1a 	bl	800216c <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff94 	bl	8001468 <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 f9fa 	bl	8001940 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fdd3 	bl	800210c <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff7d 	bl	8001468 <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fdfa 	bl	800216c <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	46d6      	mov	lr, sl
 800058e:	4646      	mov	r6, r8
 8000590:	000d      	movs	r5, r1
 8000592:	0001      	movs	r1, r0
 8000594:	0018      	movs	r0, r3
 8000596:	b5c0      	push	{r6, r7, lr}
 8000598:	0017      	movs	r7, r2
 800059a:	032b      	lsls	r3, r5, #12
 800059c:	0a5a      	lsrs	r2, r3, #9
 800059e:	0f4b      	lsrs	r3, r1, #29
 80005a0:	4313      	orrs	r3, r2
 80005a2:	00ca      	lsls	r2, r1, #3
 80005a4:	4691      	mov	r9, r2
 80005a6:	0302      	lsls	r2, r0, #12
 80005a8:	006e      	lsls	r6, r5, #1
 80005aa:	0041      	lsls	r1, r0, #1
 80005ac:	0a52      	lsrs	r2, r2, #9
 80005ae:	0fec      	lsrs	r4, r5, #31
 80005b0:	0f7d      	lsrs	r5, r7, #29
 80005b2:	4315      	orrs	r5, r2
 80005b4:	0d76      	lsrs	r6, r6, #21
 80005b6:	0d49      	lsrs	r1, r1, #21
 80005b8:	0fc0      	lsrs	r0, r0, #31
 80005ba:	4682      	mov	sl, r0
 80005bc:	46ac      	mov	ip, r5
 80005be:	00ff      	lsls	r7, r7, #3
 80005c0:	1a72      	subs	r2, r6, r1
 80005c2:	4284      	cmp	r4, r0
 80005c4:	d100      	bne.n	80005c8 <__aeabi_dadd+0x40>
 80005c6:	e098      	b.n	80006fa <__aeabi_dadd+0x172>
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	dc00      	bgt.n	80005ce <__aeabi_dadd+0x46>
 80005cc:	e081      	b.n	80006d2 <__aeabi_dadd+0x14a>
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d100      	bne.n	80005d4 <__aeabi_dadd+0x4c>
 80005d2:	e0b6      	b.n	8000742 <__aeabi_dadd+0x1ba>
 80005d4:	49c9      	ldr	r1, [pc, #804]	; (80008fc <__aeabi_dadd+0x374>)
 80005d6:	428e      	cmp	r6, r1
 80005d8:	d100      	bne.n	80005dc <__aeabi_dadd+0x54>
 80005da:	e172      	b.n	80008c2 <__aeabi_dadd+0x33a>
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0028      	movs	r0, r5
 80005e0:	0409      	lsls	r1, r1, #16
 80005e2:	4308      	orrs	r0, r1
 80005e4:	4684      	mov	ip, r0
 80005e6:	2a38      	cmp	r2, #56	; 0x38
 80005e8:	dd00      	ble.n	80005ec <__aeabi_dadd+0x64>
 80005ea:	e15e      	b.n	80008aa <__aeabi_dadd+0x322>
 80005ec:	2a1f      	cmp	r2, #31
 80005ee:	dd00      	ble.n	80005f2 <__aeabi_dadd+0x6a>
 80005f0:	e1ee      	b.n	80009d0 <__aeabi_dadd+0x448>
 80005f2:	2020      	movs	r0, #32
 80005f4:	0039      	movs	r1, r7
 80005f6:	4665      	mov	r5, ip
 80005f8:	1a80      	subs	r0, r0, r2
 80005fa:	4087      	lsls	r7, r0
 80005fc:	40d1      	lsrs	r1, r2
 80005fe:	4085      	lsls	r5, r0
 8000600:	430d      	orrs	r5, r1
 8000602:	0039      	movs	r1, r7
 8000604:	1e4f      	subs	r7, r1, #1
 8000606:	41b9      	sbcs	r1, r7
 8000608:	4667      	mov	r7, ip
 800060a:	40d7      	lsrs	r7, r2
 800060c:	4329      	orrs	r1, r5
 800060e:	1bdb      	subs	r3, r3, r7
 8000610:	464a      	mov	r2, r9
 8000612:	1a55      	subs	r5, r2, r1
 8000614:	45a9      	cmp	r9, r5
 8000616:	4189      	sbcs	r1, r1
 8000618:	4249      	negs	r1, r1
 800061a:	1a5b      	subs	r3, r3, r1
 800061c:	4698      	mov	r8, r3
 800061e:	4643      	mov	r3, r8
 8000620:	021b      	lsls	r3, r3, #8
 8000622:	d400      	bmi.n	8000626 <__aeabi_dadd+0x9e>
 8000624:	e0cc      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000626:	4643      	mov	r3, r8
 8000628:	025b      	lsls	r3, r3, #9
 800062a:	0a5b      	lsrs	r3, r3, #9
 800062c:	4698      	mov	r8, r3
 800062e:	4643      	mov	r3, r8
 8000630:	2b00      	cmp	r3, #0
 8000632:	d100      	bne.n	8000636 <__aeabi_dadd+0xae>
 8000634:	e12c      	b.n	8000890 <__aeabi_dadd+0x308>
 8000636:	4640      	mov	r0, r8
 8000638:	f001 fdbe 	bl	80021b8 <__clzsi2>
 800063c:	0001      	movs	r1, r0
 800063e:	3908      	subs	r1, #8
 8000640:	2220      	movs	r2, #32
 8000642:	0028      	movs	r0, r5
 8000644:	4643      	mov	r3, r8
 8000646:	1a52      	subs	r2, r2, r1
 8000648:	408b      	lsls	r3, r1
 800064a:	40d0      	lsrs	r0, r2
 800064c:	408d      	lsls	r5, r1
 800064e:	4303      	orrs	r3, r0
 8000650:	428e      	cmp	r6, r1
 8000652:	dd00      	ble.n	8000656 <__aeabi_dadd+0xce>
 8000654:	e117      	b.n	8000886 <__aeabi_dadd+0x2fe>
 8000656:	1b8e      	subs	r6, r1, r6
 8000658:	1c72      	adds	r2, r6, #1
 800065a:	2a1f      	cmp	r2, #31
 800065c:	dd00      	ble.n	8000660 <__aeabi_dadd+0xd8>
 800065e:	e1a7      	b.n	80009b0 <__aeabi_dadd+0x428>
 8000660:	2120      	movs	r1, #32
 8000662:	0018      	movs	r0, r3
 8000664:	002e      	movs	r6, r5
 8000666:	1a89      	subs	r1, r1, r2
 8000668:	408d      	lsls	r5, r1
 800066a:	4088      	lsls	r0, r1
 800066c:	40d6      	lsrs	r6, r2
 800066e:	40d3      	lsrs	r3, r2
 8000670:	1e69      	subs	r1, r5, #1
 8000672:	418d      	sbcs	r5, r1
 8000674:	4330      	orrs	r0, r6
 8000676:	4698      	mov	r8, r3
 8000678:	2600      	movs	r6, #0
 800067a:	4305      	orrs	r5, r0
 800067c:	076b      	lsls	r3, r5, #29
 800067e:	d009      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000680:	230f      	movs	r3, #15
 8000682:	402b      	ands	r3, r5
 8000684:	2b04      	cmp	r3, #4
 8000686:	d005      	beq.n	8000694 <__aeabi_dadd+0x10c>
 8000688:	1d2b      	adds	r3, r5, #4
 800068a:	42ab      	cmp	r3, r5
 800068c:	41ad      	sbcs	r5, r5
 800068e:	426d      	negs	r5, r5
 8000690:	44a8      	add	r8, r5
 8000692:	001d      	movs	r5, r3
 8000694:	4643      	mov	r3, r8
 8000696:	021b      	lsls	r3, r3, #8
 8000698:	d400      	bmi.n	800069c <__aeabi_dadd+0x114>
 800069a:	e094      	b.n	80007c6 <__aeabi_dadd+0x23e>
 800069c:	4b97      	ldr	r3, [pc, #604]	; (80008fc <__aeabi_dadd+0x374>)
 800069e:	1c72      	adds	r2, r6, #1
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d100      	bne.n	80006a6 <__aeabi_dadd+0x11e>
 80006a4:	e09d      	b.n	80007e2 <__aeabi_dadd+0x25a>
 80006a6:	4641      	mov	r1, r8
 80006a8:	4b95      	ldr	r3, [pc, #596]	; (8000900 <__aeabi_dadd+0x378>)
 80006aa:	08ed      	lsrs	r5, r5, #3
 80006ac:	4019      	ands	r1, r3
 80006ae:	000b      	movs	r3, r1
 80006b0:	0552      	lsls	r2, r2, #21
 80006b2:	0749      	lsls	r1, r1, #29
 80006b4:	025b      	lsls	r3, r3, #9
 80006b6:	4329      	orrs	r1, r5
 80006b8:	0b1b      	lsrs	r3, r3, #12
 80006ba:	0d52      	lsrs	r2, r2, #21
 80006bc:	0512      	lsls	r2, r2, #20
 80006be:	4313      	orrs	r3, r2
 80006c0:	07e4      	lsls	r4, r4, #31
 80006c2:	4323      	orrs	r3, r4
 80006c4:	0008      	movs	r0, r1
 80006c6:	0019      	movs	r1, r3
 80006c8:	bce0      	pop	{r5, r6, r7}
 80006ca:	46ba      	mov	sl, r7
 80006cc:	46b1      	mov	r9, r6
 80006ce:	46a8      	mov	r8, r5
 80006d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d2:	2a00      	cmp	r2, #0
 80006d4:	d043      	beq.n	800075e <__aeabi_dadd+0x1d6>
 80006d6:	1b8a      	subs	r2, r1, r6
 80006d8:	2e00      	cmp	r6, #0
 80006da:	d000      	beq.n	80006de <__aeabi_dadd+0x156>
 80006dc:	e12a      	b.n	8000934 <__aeabi_dadd+0x3ac>
 80006de:	464c      	mov	r4, r9
 80006e0:	431c      	orrs	r4, r3
 80006e2:	d100      	bne.n	80006e6 <__aeabi_dadd+0x15e>
 80006e4:	e1d1      	b.n	8000a8a <__aeabi_dadd+0x502>
 80006e6:	1e54      	subs	r4, r2, #1
 80006e8:	2a01      	cmp	r2, #1
 80006ea:	d100      	bne.n	80006ee <__aeabi_dadd+0x166>
 80006ec:	e21f      	b.n	8000b2e <__aeabi_dadd+0x5a6>
 80006ee:	4d83      	ldr	r5, [pc, #524]	; (80008fc <__aeabi_dadd+0x374>)
 80006f0:	42aa      	cmp	r2, r5
 80006f2:	d100      	bne.n	80006f6 <__aeabi_dadd+0x16e>
 80006f4:	e272      	b.n	8000bdc <__aeabi_dadd+0x654>
 80006f6:	0022      	movs	r2, r4
 80006f8:	e123      	b.n	8000942 <__aeabi_dadd+0x3ba>
 80006fa:	2a00      	cmp	r2, #0
 80006fc:	dc00      	bgt.n	8000700 <__aeabi_dadd+0x178>
 80006fe:	e098      	b.n	8000832 <__aeabi_dadd+0x2aa>
 8000700:	2900      	cmp	r1, #0
 8000702:	d042      	beq.n	800078a <__aeabi_dadd+0x202>
 8000704:	497d      	ldr	r1, [pc, #500]	; (80008fc <__aeabi_dadd+0x374>)
 8000706:	428e      	cmp	r6, r1
 8000708:	d100      	bne.n	800070c <__aeabi_dadd+0x184>
 800070a:	e0da      	b.n	80008c2 <__aeabi_dadd+0x33a>
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	0028      	movs	r0, r5
 8000710:	0409      	lsls	r1, r1, #16
 8000712:	4308      	orrs	r0, r1
 8000714:	4684      	mov	ip, r0
 8000716:	2a38      	cmp	r2, #56	; 0x38
 8000718:	dd00      	ble.n	800071c <__aeabi_dadd+0x194>
 800071a:	e129      	b.n	8000970 <__aeabi_dadd+0x3e8>
 800071c:	2a1f      	cmp	r2, #31
 800071e:	dc00      	bgt.n	8000722 <__aeabi_dadd+0x19a>
 8000720:	e187      	b.n	8000a32 <__aeabi_dadd+0x4aa>
 8000722:	0011      	movs	r1, r2
 8000724:	4665      	mov	r5, ip
 8000726:	3920      	subs	r1, #32
 8000728:	40cd      	lsrs	r5, r1
 800072a:	2a20      	cmp	r2, #32
 800072c:	d004      	beq.n	8000738 <__aeabi_dadd+0x1b0>
 800072e:	2040      	movs	r0, #64	; 0x40
 8000730:	4661      	mov	r1, ip
 8000732:	1a82      	subs	r2, r0, r2
 8000734:	4091      	lsls	r1, r2
 8000736:	430f      	orrs	r7, r1
 8000738:	0039      	movs	r1, r7
 800073a:	1e4f      	subs	r7, r1, #1
 800073c:	41b9      	sbcs	r1, r7
 800073e:	430d      	orrs	r5, r1
 8000740:	e11b      	b.n	800097a <__aeabi_dadd+0x3f2>
 8000742:	0029      	movs	r1, r5
 8000744:	4339      	orrs	r1, r7
 8000746:	d100      	bne.n	800074a <__aeabi_dadd+0x1c2>
 8000748:	e0b5      	b.n	80008b6 <__aeabi_dadd+0x32e>
 800074a:	1e51      	subs	r1, r2, #1
 800074c:	2a01      	cmp	r2, #1
 800074e:	d100      	bne.n	8000752 <__aeabi_dadd+0x1ca>
 8000750:	e1ab      	b.n	8000aaa <__aeabi_dadd+0x522>
 8000752:	486a      	ldr	r0, [pc, #424]	; (80008fc <__aeabi_dadd+0x374>)
 8000754:	4282      	cmp	r2, r0
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x1d2>
 8000758:	e1b2      	b.n	8000ac0 <__aeabi_dadd+0x538>
 800075a:	000a      	movs	r2, r1
 800075c:	e743      	b.n	80005e6 <__aeabi_dadd+0x5e>
 800075e:	4969      	ldr	r1, [pc, #420]	; (8000904 <__aeabi_dadd+0x37c>)
 8000760:	1c75      	adds	r5, r6, #1
 8000762:	420d      	tst	r5, r1
 8000764:	d000      	beq.n	8000768 <__aeabi_dadd+0x1e0>
 8000766:	e0cf      	b.n	8000908 <__aeabi_dadd+0x380>
 8000768:	2e00      	cmp	r6, #0
 800076a:	d000      	beq.n	800076e <__aeabi_dadd+0x1e6>
 800076c:	e193      	b.n	8000a96 <__aeabi_dadd+0x50e>
 800076e:	4649      	mov	r1, r9
 8000770:	4319      	orrs	r1, r3
 8000772:	d100      	bne.n	8000776 <__aeabi_dadd+0x1ee>
 8000774:	e1d1      	b.n	8000b1a <__aeabi_dadd+0x592>
 8000776:	4661      	mov	r1, ip
 8000778:	4339      	orrs	r1, r7
 800077a:	d000      	beq.n	800077e <__aeabi_dadd+0x1f6>
 800077c:	e1e3      	b.n	8000b46 <__aeabi_dadd+0x5be>
 800077e:	4649      	mov	r1, r9
 8000780:	0758      	lsls	r0, r3, #29
 8000782:	08c9      	lsrs	r1, r1, #3
 8000784:	4301      	orrs	r1, r0
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	e026      	b.n	80007d8 <__aeabi_dadd+0x250>
 800078a:	0029      	movs	r1, r5
 800078c:	4339      	orrs	r1, r7
 800078e:	d100      	bne.n	8000792 <__aeabi_dadd+0x20a>
 8000790:	e091      	b.n	80008b6 <__aeabi_dadd+0x32e>
 8000792:	1e51      	subs	r1, r2, #1
 8000794:	2a01      	cmp	r2, #1
 8000796:	d005      	beq.n	80007a4 <__aeabi_dadd+0x21c>
 8000798:	4858      	ldr	r0, [pc, #352]	; (80008fc <__aeabi_dadd+0x374>)
 800079a:	4282      	cmp	r2, r0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x218>
 800079e:	e18f      	b.n	8000ac0 <__aeabi_dadd+0x538>
 80007a0:	000a      	movs	r2, r1
 80007a2:	e7b8      	b.n	8000716 <__aeabi_dadd+0x18e>
 80007a4:	003d      	movs	r5, r7
 80007a6:	444d      	add	r5, r9
 80007a8:	454d      	cmp	r5, r9
 80007aa:	4189      	sbcs	r1, r1
 80007ac:	4463      	add	r3, ip
 80007ae:	4698      	mov	r8, r3
 80007b0:	4249      	negs	r1, r1
 80007b2:	4488      	add	r8, r1
 80007b4:	4643      	mov	r3, r8
 80007b6:	2602      	movs	r6, #2
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	d500      	bpl.n	80007be <__aeabi_dadd+0x236>
 80007bc:	e0eb      	b.n	8000996 <__aeabi_dadd+0x40e>
 80007be:	3e01      	subs	r6, #1
 80007c0:	076b      	lsls	r3, r5, #29
 80007c2:	d000      	beq.n	80007c6 <__aeabi_dadd+0x23e>
 80007c4:	e75c      	b.n	8000680 <__aeabi_dadd+0xf8>
 80007c6:	4643      	mov	r3, r8
 80007c8:	08e9      	lsrs	r1, r5, #3
 80007ca:	075a      	lsls	r2, r3, #29
 80007cc:	4311      	orrs	r1, r2
 80007ce:	0032      	movs	r2, r6
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	484a      	ldr	r0, [pc, #296]	; (80008fc <__aeabi_dadd+0x374>)
 80007d4:	4282      	cmp	r2, r0
 80007d6:	d021      	beq.n	800081c <__aeabi_dadd+0x294>
 80007d8:	031b      	lsls	r3, r3, #12
 80007da:	0552      	lsls	r2, r2, #21
 80007dc:	0b1b      	lsrs	r3, r3, #12
 80007de:	0d52      	lsrs	r2, r2, #21
 80007e0:	e76c      	b.n	80006bc <__aeabi_dadd+0x134>
 80007e2:	2300      	movs	r3, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	e769      	b.n	80006bc <__aeabi_dadd+0x134>
 80007e8:	002a      	movs	r2, r5
 80007ea:	433a      	orrs	r2, r7
 80007ec:	d069      	beq.n	80008c2 <__aeabi_dadd+0x33a>
 80007ee:	464a      	mov	r2, r9
 80007f0:	0758      	lsls	r0, r3, #29
 80007f2:	08d1      	lsrs	r1, r2, #3
 80007f4:	08da      	lsrs	r2, r3, #3
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	031b      	lsls	r3, r3, #12
 80007fa:	4308      	orrs	r0, r1
 80007fc:	421a      	tst	r2, r3
 80007fe:	d007      	beq.n	8000810 <__aeabi_dadd+0x288>
 8000800:	0029      	movs	r1, r5
 8000802:	08ed      	lsrs	r5, r5, #3
 8000804:	421d      	tst	r5, r3
 8000806:	d103      	bne.n	8000810 <__aeabi_dadd+0x288>
 8000808:	002a      	movs	r2, r5
 800080a:	08ff      	lsrs	r7, r7, #3
 800080c:	0748      	lsls	r0, r1, #29
 800080e:	4338      	orrs	r0, r7
 8000810:	0f43      	lsrs	r3, r0, #29
 8000812:	00c1      	lsls	r1, r0, #3
 8000814:	075b      	lsls	r3, r3, #29
 8000816:	08c9      	lsrs	r1, r1, #3
 8000818:	4319      	orrs	r1, r3
 800081a:	0013      	movs	r3, r2
 800081c:	000a      	movs	r2, r1
 800081e:	431a      	orrs	r2, r3
 8000820:	d100      	bne.n	8000824 <__aeabi_dadd+0x29c>
 8000822:	e213      	b.n	8000c4c <__aeabi_dadd+0x6c4>
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0312      	lsls	r2, r2, #12
 8000828:	4313      	orrs	r3, r2
 800082a:	031b      	lsls	r3, r3, #12
 800082c:	4a33      	ldr	r2, [pc, #204]	; (80008fc <__aeabi_dadd+0x374>)
 800082e:	0b1b      	lsrs	r3, r3, #12
 8000830:	e744      	b.n	80006bc <__aeabi_dadd+0x134>
 8000832:	2a00      	cmp	r2, #0
 8000834:	d04b      	beq.n	80008ce <__aeabi_dadd+0x346>
 8000836:	1b8a      	subs	r2, r1, r6
 8000838:	2e00      	cmp	r6, #0
 800083a:	d100      	bne.n	800083e <__aeabi_dadd+0x2b6>
 800083c:	e0e7      	b.n	8000a0e <__aeabi_dadd+0x486>
 800083e:	482f      	ldr	r0, [pc, #188]	; (80008fc <__aeabi_dadd+0x374>)
 8000840:	4281      	cmp	r1, r0
 8000842:	d100      	bne.n	8000846 <__aeabi_dadd+0x2be>
 8000844:	e195      	b.n	8000b72 <__aeabi_dadd+0x5ea>
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	0400      	lsls	r0, r0, #16
 800084a:	4303      	orrs	r3, r0
 800084c:	2a38      	cmp	r2, #56	; 0x38
 800084e:	dd00      	ble.n	8000852 <__aeabi_dadd+0x2ca>
 8000850:	e143      	b.n	8000ada <__aeabi_dadd+0x552>
 8000852:	2a1f      	cmp	r2, #31
 8000854:	dd00      	ble.n	8000858 <__aeabi_dadd+0x2d0>
 8000856:	e1db      	b.n	8000c10 <__aeabi_dadd+0x688>
 8000858:	2020      	movs	r0, #32
 800085a:	001d      	movs	r5, r3
 800085c:	464e      	mov	r6, r9
 800085e:	1a80      	subs	r0, r0, r2
 8000860:	4085      	lsls	r5, r0
 8000862:	40d6      	lsrs	r6, r2
 8000864:	4335      	orrs	r5, r6
 8000866:	464e      	mov	r6, r9
 8000868:	4086      	lsls	r6, r0
 800086a:	0030      	movs	r0, r6
 800086c:	40d3      	lsrs	r3, r2
 800086e:	1e46      	subs	r6, r0, #1
 8000870:	41b0      	sbcs	r0, r6
 8000872:	449c      	add	ip, r3
 8000874:	4305      	orrs	r5, r0
 8000876:	19ed      	adds	r5, r5, r7
 8000878:	42bd      	cmp	r5, r7
 800087a:	419b      	sbcs	r3, r3
 800087c:	425b      	negs	r3, r3
 800087e:	4463      	add	r3, ip
 8000880:	4698      	mov	r8, r3
 8000882:	000e      	movs	r6, r1
 8000884:	e07f      	b.n	8000986 <__aeabi_dadd+0x3fe>
 8000886:	4a1e      	ldr	r2, [pc, #120]	; (8000900 <__aeabi_dadd+0x378>)
 8000888:	1a76      	subs	r6, r6, r1
 800088a:	4013      	ands	r3, r2
 800088c:	4698      	mov	r8, r3
 800088e:	e6f5      	b.n	800067c <__aeabi_dadd+0xf4>
 8000890:	0028      	movs	r0, r5
 8000892:	f001 fc91 	bl	80021b8 <__clzsi2>
 8000896:	0001      	movs	r1, r0
 8000898:	3118      	adds	r1, #24
 800089a:	291f      	cmp	r1, #31
 800089c:	dc00      	bgt.n	80008a0 <__aeabi_dadd+0x318>
 800089e:	e6cf      	b.n	8000640 <__aeabi_dadd+0xb8>
 80008a0:	002b      	movs	r3, r5
 80008a2:	3808      	subs	r0, #8
 80008a4:	4083      	lsls	r3, r0
 80008a6:	2500      	movs	r5, #0
 80008a8:	e6d2      	b.n	8000650 <__aeabi_dadd+0xc8>
 80008aa:	4662      	mov	r2, ip
 80008ac:	433a      	orrs	r2, r7
 80008ae:	0011      	movs	r1, r2
 80008b0:	1e4f      	subs	r7, r1, #1
 80008b2:	41b9      	sbcs	r1, r7
 80008b4:	e6ac      	b.n	8000610 <__aeabi_dadd+0x88>
 80008b6:	4649      	mov	r1, r9
 80008b8:	0758      	lsls	r0, r3, #29
 80008ba:	08c9      	lsrs	r1, r1, #3
 80008bc:	4301      	orrs	r1, r0
 80008be:	08db      	lsrs	r3, r3, #3
 80008c0:	e787      	b.n	80007d2 <__aeabi_dadd+0x24a>
 80008c2:	4649      	mov	r1, r9
 80008c4:	075a      	lsls	r2, r3, #29
 80008c6:	08c9      	lsrs	r1, r1, #3
 80008c8:	4311      	orrs	r1, r2
 80008ca:	08db      	lsrs	r3, r3, #3
 80008cc:	e7a6      	b.n	800081c <__aeabi_dadd+0x294>
 80008ce:	490d      	ldr	r1, [pc, #52]	; (8000904 <__aeabi_dadd+0x37c>)
 80008d0:	1c70      	adds	r0, r6, #1
 80008d2:	4208      	tst	r0, r1
 80008d4:	d000      	beq.n	80008d8 <__aeabi_dadd+0x350>
 80008d6:	e0bb      	b.n	8000a50 <__aeabi_dadd+0x4c8>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d000      	beq.n	80008de <__aeabi_dadd+0x356>
 80008dc:	e114      	b.n	8000b08 <__aeabi_dadd+0x580>
 80008de:	4649      	mov	r1, r9
 80008e0:	4319      	orrs	r1, r3
 80008e2:	d100      	bne.n	80008e6 <__aeabi_dadd+0x35e>
 80008e4:	e175      	b.n	8000bd2 <__aeabi_dadd+0x64a>
 80008e6:	0029      	movs	r1, r5
 80008e8:	4339      	orrs	r1, r7
 80008ea:	d000      	beq.n	80008ee <__aeabi_dadd+0x366>
 80008ec:	e17e      	b.n	8000bec <__aeabi_dadd+0x664>
 80008ee:	4649      	mov	r1, r9
 80008f0:	0758      	lsls	r0, r3, #29
 80008f2:	08c9      	lsrs	r1, r1, #3
 80008f4:	4301      	orrs	r1, r0
 80008f6:	08db      	lsrs	r3, r3, #3
 80008f8:	e76e      	b.n	80007d8 <__aeabi_dadd+0x250>
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	000007ff 	.word	0x000007ff
 8000900:	ff7fffff 	.word	0xff7fffff
 8000904:	000007fe 	.word	0x000007fe
 8000908:	4649      	mov	r1, r9
 800090a:	1bcd      	subs	r5, r1, r7
 800090c:	4661      	mov	r1, ip
 800090e:	1a58      	subs	r0, r3, r1
 8000910:	45a9      	cmp	r9, r5
 8000912:	4189      	sbcs	r1, r1
 8000914:	4249      	negs	r1, r1
 8000916:	4688      	mov	r8, r1
 8000918:	0001      	movs	r1, r0
 800091a:	4640      	mov	r0, r8
 800091c:	1a09      	subs	r1, r1, r0
 800091e:	4688      	mov	r8, r1
 8000920:	0209      	lsls	r1, r1, #8
 8000922:	d500      	bpl.n	8000926 <__aeabi_dadd+0x39e>
 8000924:	e0a6      	b.n	8000a74 <__aeabi_dadd+0x4ec>
 8000926:	4641      	mov	r1, r8
 8000928:	4329      	orrs	r1, r5
 800092a:	d000      	beq.n	800092e <__aeabi_dadd+0x3a6>
 800092c:	e67f      	b.n	800062e <__aeabi_dadd+0xa6>
 800092e:	2300      	movs	r3, #0
 8000930:	2400      	movs	r4, #0
 8000932:	e751      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000934:	4cc7      	ldr	r4, [pc, #796]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000936:	42a1      	cmp	r1, r4
 8000938:	d100      	bne.n	800093c <__aeabi_dadd+0x3b4>
 800093a:	e0c7      	b.n	8000acc <__aeabi_dadd+0x544>
 800093c:	2480      	movs	r4, #128	; 0x80
 800093e:	0424      	lsls	r4, r4, #16
 8000940:	4323      	orrs	r3, r4
 8000942:	2a38      	cmp	r2, #56	; 0x38
 8000944:	dc54      	bgt.n	80009f0 <__aeabi_dadd+0x468>
 8000946:	2a1f      	cmp	r2, #31
 8000948:	dd00      	ble.n	800094c <__aeabi_dadd+0x3c4>
 800094a:	e0cc      	b.n	8000ae6 <__aeabi_dadd+0x55e>
 800094c:	2420      	movs	r4, #32
 800094e:	4648      	mov	r0, r9
 8000950:	1aa4      	subs	r4, r4, r2
 8000952:	001d      	movs	r5, r3
 8000954:	464e      	mov	r6, r9
 8000956:	40a0      	lsls	r0, r4
 8000958:	40d6      	lsrs	r6, r2
 800095a:	40a5      	lsls	r5, r4
 800095c:	0004      	movs	r4, r0
 800095e:	40d3      	lsrs	r3, r2
 8000960:	4662      	mov	r2, ip
 8000962:	4335      	orrs	r5, r6
 8000964:	1e66      	subs	r6, r4, #1
 8000966:	41b4      	sbcs	r4, r6
 8000968:	1ad3      	subs	r3, r2, r3
 800096a:	469c      	mov	ip, r3
 800096c:	4325      	orrs	r5, r4
 800096e:	e044      	b.n	80009fa <__aeabi_dadd+0x472>
 8000970:	4662      	mov	r2, ip
 8000972:	433a      	orrs	r2, r7
 8000974:	0015      	movs	r5, r2
 8000976:	1e6f      	subs	r7, r5, #1
 8000978:	41bd      	sbcs	r5, r7
 800097a:	444d      	add	r5, r9
 800097c:	454d      	cmp	r5, r9
 800097e:	4189      	sbcs	r1, r1
 8000980:	4249      	negs	r1, r1
 8000982:	4688      	mov	r8, r1
 8000984:	4498      	add	r8, r3
 8000986:	4643      	mov	r3, r8
 8000988:	021b      	lsls	r3, r3, #8
 800098a:	d400      	bmi.n	800098e <__aeabi_dadd+0x406>
 800098c:	e718      	b.n	80007c0 <__aeabi_dadd+0x238>
 800098e:	4bb1      	ldr	r3, [pc, #708]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000990:	3601      	adds	r6, #1
 8000992:	429e      	cmp	r6, r3
 8000994:	d049      	beq.n	8000a2a <__aeabi_dadd+0x4a2>
 8000996:	4642      	mov	r2, r8
 8000998:	4baf      	ldr	r3, [pc, #700]	; (8000c58 <__aeabi_dadd+0x6d0>)
 800099a:	2101      	movs	r1, #1
 800099c:	401a      	ands	r2, r3
 800099e:	0013      	movs	r3, r2
 80009a0:	086a      	lsrs	r2, r5, #1
 80009a2:	400d      	ands	r5, r1
 80009a4:	4315      	orrs	r5, r2
 80009a6:	07d9      	lsls	r1, r3, #31
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	4698      	mov	r8, r3
 80009ac:	430d      	orrs	r5, r1
 80009ae:	e665      	b.n	800067c <__aeabi_dadd+0xf4>
 80009b0:	0018      	movs	r0, r3
 80009b2:	3e1f      	subs	r6, #31
 80009b4:	40f0      	lsrs	r0, r6
 80009b6:	2a20      	cmp	r2, #32
 80009b8:	d003      	beq.n	80009c2 <__aeabi_dadd+0x43a>
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	1a8a      	subs	r2, r1, r2
 80009be:	4093      	lsls	r3, r2
 80009c0:	431d      	orrs	r5, r3
 80009c2:	1e69      	subs	r1, r5, #1
 80009c4:	418d      	sbcs	r5, r1
 80009c6:	2300      	movs	r3, #0
 80009c8:	2600      	movs	r6, #0
 80009ca:	4698      	mov	r8, r3
 80009cc:	4305      	orrs	r5, r0
 80009ce:	e6f7      	b.n	80007c0 <__aeabi_dadd+0x238>
 80009d0:	0011      	movs	r1, r2
 80009d2:	4665      	mov	r5, ip
 80009d4:	3920      	subs	r1, #32
 80009d6:	40cd      	lsrs	r5, r1
 80009d8:	2a20      	cmp	r2, #32
 80009da:	d004      	beq.n	80009e6 <__aeabi_dadd+0x45e>
 80009dc:	2040      	movs	r0, #64	; 0x40
 80009de:	4661      	mov	r1, ip
 80009e0:	1a82      	subs	r2, r0, r2
 80009e2:	4091      	lsls	r1, r2
 80009e4:	430f      	orrs	r7, r1
 80009e6:	0039      	movs	r1, r7
 80009e8:	1e4f      	subs	r7, r1, #1
 80009ea:	41b9      	sbcs	r1, r7
 80009ec:	4329      	orrs	r1, r5
 80009ee:	e60f      	b.n	8000610 <__aeabi_dadd+0x88>
 80009f0:	464a      	mov	r2, r9
 80009f2:	4313      	orrs	r3, r2
 80009f4:	001d      	movs	r5, r3
 80009f6:	1e6b      	subs	r3, r5, #1
 80009f8:	419d      	sbcs	r5, r3
 80009fa:	1b7d      	subs	r5, r7, r5
 80009fc:	42af      	cmp	r7, r5
 80009fe:	419b      	sbcs	r3, r3
 8000a00:	4662      	mov	r2, ip
 8000a02:	425b      	negs	r3, r3
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	4698      	mov	r8, r3
 8000a08:	4654      	mov	r4, sl
 8000a0a:	000e      	movs	r6, r1
 8000a0c:	e607      	b.n	800061e <__aeabi_dadd+0x96>
 8000a0e:	4648      	mov	r0, r9
 8000a10:	4318      	orrs	r0, r3
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x48e>
 8000a14:	e0b3      	b.n	8000b7e <__aeabi_dadd+0x5f6>
 8000a16:	1e50      	subs	r0, r2, #1
 8000a18:	2a01      	cmp	r2, #1
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_dadd+0x496>
 8000a1c:	e10d      	b.n	8000c3a <__aeabi_dadd+0x6b2>
 8000a1e:	4d8d      	ldr	r5, [pc, #564]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000a20:	42aa      	cmp	r2, r5
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0x49e>
 8000a24:	e0a5      	b.n	8000b72 <__aeabi_dadd+0x5ea>
 8000a26:	0002      	movs	r2, r0
 8000a28:	e710      	b.n	800084c <__aeabi_dadd+0x2c4>
 8000a2a:	0032      	movs	r2, r6
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e644      	b.n	80006bc <__aeabi_dadd+0x134>
 8000a32:	2120      	movs	r1, #32
 8000a34:	0038      	movs	r0, r7
 8000a36:	1a89      	subs	r1, r1, r2
 8000a38:	4665      	mov	r5, ip
 8000a3a:	408f      	lsls	r7, r1
 8000a3c:	408d      	lsls	r5, r1
 8000a3e:	40d0      	lsrs	r0, r2
 8000a40:	1e79      	subs	r1, r7, #1
 8000a42:	418f      	sbcs	r7, r1
 8000a44:	4305      	orrs	r5, r0
 8000a46:	433d      	orrs	r5, r7
 8000a48:	4667      	mov	r7, ip
 8000a4a:	40d7      	lsrs	r7, r2
 8000a4c:	19db      	adds	r3, r3, r7
 8000a4e:	e794      	b.n	800097a <__aeabi_dadd+0x3f2>
 8000a50:	4a80      	ldr	r2, [pc, #512]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000a52:	4290      	cmp	r0, r2
 8000a54:	d100      	bne.n	8000a58 <__aeabi_dadd+0x4d0>
 8000a56:	e0ec      	b.n	8000c32 <__aeabi_dadd+0x6aa>
 8000a58:	0039      	movs	r1, r7
 8000a5a:	4449      	add	r1, r9
 8000a5c:	4549      	cmp	r1, r9
 8000a5e:	4192      	sbcs	r2, r2
 8000a60:	4463      	add	r3, ip
 8000a62:	4252      	negs	r2, r2
 8000a64:	189b      	adds	r3, r3, r2
 8000a66:	07dd      	lsls	r5, r3, #31
 8000a68:	0849      	lsrs	r1, r1, #1
 8000a6a:	085b      	lsrs	r3, r3, #1
 8000a6c:	4698      	mov	r8, r3
 8000a6e:	0006      	movs	r6, r0
 8000a70:	430d      	orrs	r5, r1
 8000a72:	e6a5      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000a74:	464a      	mov	r2, r9
 8000a76:	1abd      	subs	r5, r7, r2
 8000a78:	42af      	cmp	r7, r5
 8000a7a:	4189      	sbcs	r1, r1
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	4249      	negs	r1, r1
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	1a5b      	subs	r3, r3, r1
 8000a84:	4698      	mov	r8, r3
 8000a86:	4654      	mov	r4, sl
 8000a88:	e5d1      	b.n	800062e <__aeabi_dadd+0xa6>
 8000a8a:	076c      	lsls	r4, r5, #29
 8000a8c:	08f9      	lsrs	r1, r7, #3
 8000a8e:	4321      	orrs	r1, r4
 8000a90:	08eb      	lsrs	r3, r5, #3
 8000a92:	0004      	movs	r4, r0
 8000a94:	e69d      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a96:	464a      	mov	r2, r9
 8000a98:	431a      	orrs	r2, r3
 8000a9a:	d175      	bne.n	8000b88 <__aeabi_dadd+0x600>
 8000a9c:	4661      	mov	r1, ip
 8000a9e:	4339      	orrs	r1, r7
 8000aa0:	d114      	bne.n	8000acc <__aeabi_dadd+0x544>
 8000aa2:	2380      	movs	r3, #128	; 0x80
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	031b      	lsls	r3, r3, #12
 8000aa8:	e6bc      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000aaa:	464a      	mov	r2, r9
 8000aac:	1bd5      	subs	r5, r2, r7
 8000aae:	45a9      	cmp	r9, r5
 8000ab0:	4189      	sbcs	r1, r1
 8000ab2:	4662      	mov	r2, ip
 8000ab4:	4249      	negs	r1, r1
 8000ab6:	1a9b      	subs	r3, r3, r2
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	4698      	mov	r8, r3
 8000abc:	2601      	movs	r6, #1
 8000abe:	e5ae      	b.n	800061e <__aeabi_dadd+0x96>
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	08d1      	lsrs	r1, r2, #3
 8000ac4:	075a      	lsls	r2, r3, #29
 8000ac6:	4311      	orrs	r1, r2
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	e6a7      	b.n	800081c <__aeabi_dadd+0x294>
 8000acc:	4663      	mov	r3, ip
 8000ace:	08f9      	lsrs	r1, r7, #3
 8000ad0:	075a      	lsls	r2, r3, #29
 8000ad2:	4654      	mov	r4, sl
 8000ad4:	4311      	orrs	r1, r2
 8000ad6:	08db      	lsrs	r3, r3, #3
 8000ad8:	e6a0      	b.n	800081c <__aeabi_dadd+0x294>
 8000ada:	464a      	mov	r2, r9
 8000adc:	4313      	orrs	r3, r2
 8000ade:	001d      	movs	r5, r3
 8000ae0:	1e6b      	subs	r3, r5, #1
 8000ae2:	419d      	sbcs	r5, r3
 8000ae4:	e6c7      	b.n	8000876 <__aeabi_dadd+0x2ee>
 8000ae6:	0014      	movs	r4, r2
 8000ae8:	001e      	movs	r6, r3
 8000aea:	3c20      	subs	r4, #32
 8000aec:	40e6      	lsrs	r6, r4
 8000aee:	2a20      	cmp	r2, #32
 8000af0:	d005      	beq.n	8000afe <__aeabi_dadd+0x576>
 8000af2:	2440      	movs	r4, #64	; 0x40
 8000af4:	1aa2      	subs	r2, r4, r2
 8000af6:	4093      	lsls	r3, r2
 8000af8:	464a      	mov	r2, r9
 8000afa:	431a      	orrs	r2, r3
 8000afc:	4691      	mov	r9, r2
 8000afe:	464d      	mov	r5, r9
 8000b00:	1e6b      	subs	r3, r5, #1
 8000b02:	419d      	sbcs	r5, r3
 8000b04:	4335      	orrs	r5, r6
 8000b06:	e778      	b.n	80009fa <__aeabi_dadd+0x472>
 8000b08:	464a      	mov	r2, r9
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_dadd+0x588>
 8000b0e:	e66b      	b.n	80007e8 <__aeabi_dadd+0x260>
 8000b10:	076b      	lsls	r3, r5, #29
 8000b12:	08f9      	lsrs	r1, r7, #3
 8000b14:	4319      	orrs	r1, r3
 8000b16:	08eb      	lsrs	r3, r5, #3
 8000b18:	e680      	b.n	800081c <__aeabi_dadd+0x294>
 8000b1a:	4661      	mov	r1, ip
 8000b1c:	4339      	orrs	r1, r7
 8000b1e:	d054      	beq.n	8000bca <__aeabi_dadd+0x642>
 8000b20:	4663      	mov	r3, ip
 8000b22:	08f9      	lsrs	r1, r7, #3
 8000b24:	075c      	lsls	r4, r3, #29
 8000b26:	4321      	orrs	r1, r4
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	0004      	movs	r4, r0
 8000b2c:	e654      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000b2e:	464a      	mov	r2, r9
 8000b30:	1abd      	subs	r5, r7, r2
 8000b32:	42af      	cmp	r7, r5
 8000b34:	4189      	sbcs	r1, r1
 8000b36:	4662      	mov	r2, ip
 8000b38:	4249      	negs	r1, r1
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	4698      	mov	r8, r3
 8000b40:	0004      	movs	r4, r0
 8000b42:	2601      	movs	r6, #1
 8000b44:	e56b      	b.n	800061e <__aeabi_dadd+0x96>
 8000b46:	464a      	mov	r2, r9
 8000b48:	1bd5      	subs	r5, r2, r7
 8000b4a:	45a9      	cmp	r9, r5
 8000b4c:	4189      	sbcs	r1, r1
 8000b4e:	4662      	mov	r2, ip
 8000b50:	4249      	negs	r1, r1
 8000b52:	1a9a      	subs	r2, r3, r2
 8000b54:	1a52      	subs	r2, r2, r1
 8000b56:	4690      	mov	r8, r2
 8000b58:	0212      	lsls	r2, r2, #8
 8000b5a:	d532      	bpl.n	8000bc2 <__aeabi_dadd+0x63a>
 8000b5c:	464a      	mov	r2, r9
 8000b5e:	1abd      	subs	r5, r7, r2
 8000b60:	42af      	cmp	r7, r5
 8000b62:	4189      	sbcs	r1, r1
 8000b64:	4662      	mov	r2, ip
 8000b66:	4249      	negs	r1, r1
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	1a5b      	subs	r3, r3, r1
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	0004      	movs	r4, r0
 8000b70:	e584      	b.n	800067c <__aeabi_dadd+0xf4>
 8000b72:	4663      	mov	r3, ip
 8000b74:	08f9      	lsrs	r1, r7, #3
 8000b76:	075a      	lsls	r2, r3, #29
 8000b78:	4311      	orrs	r1, r2
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	e64e      	b.n	800081c <__aeabi_dadd+0x294>
 8000b7e:	08f9      	lsrs	r1, r7, #3
 8000b80:	0768      	lsls	r0, r5, #29
 8000b82:	4301      	orrs	r1, r0
 8000b84:	08eb      	lsrs	r3, r5, #3
 8000b86:	e624      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000b88:	4662      	mov	r2, ip
 8000b8a:	433a      	orrs	r2, r7
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x608>
 8000b8e:	e698      	b.n	80008c2 <__aeabi_dadd+0x33a>
 8000b90:	464a      	mov	r2, r9
 8000b92:	08d1      	lsrs	r1, r2, #3
 8000b94:	075a      	lsls	r2, r3, #29
 8000b96:	4311      	orrs	r1, r2
 8000b98:	08da      	lsrs	r2, r3, #3
 8000b9a:	2380      	movs	r3, #128	; 0x80
 8000b9c:	031b      	lsls	r3, r3, #12
 8000b9e:	421a      	tst	r2, r3
 8000ba0:	d008      	beq.n	8000bb4 <__aeabi_dadd+0x62c>
 8000ba2:	4660      	mov	r0, ip
 8000ba4:	08c5      	lsrs	r5, r0, #3
 8000ba6:	421d      	tst	r5, r3
 8000ba8:	d104      	bne.n	8000bb4 <__aeabi_dadd+0x62c>
 8000baa:	4654      	mov	r4, sl
 8000bac:	002a      	movs	r2, r5
 8000bae:	08f9      	lsrs	r1, r7, #3
 8000bb0:	0743      	lsls	r3, r0, #29
 8000bb2:	4319      	orrs	r1, r3
 8000bb4:	0f4b      	lsrs	r3, r1, #29
 8000bb6:	00c9      	lsls	r1, r1, #3
 8000bb8:	075b      	lsls	r3, r3, #29
 8000bba:	08c9      	lsrs	r1, r1, #3
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	0013      	movs	r3, r2
 8000bc0:	e62c      	b.n	800081c <__aeabi_dadd+0x294>
 8000bc2:	4641      	mov	r1, r8
 8000bc4:	4329      	orrs	r1, r5
 8000bc6:	d000      	beq.n	8000bca <__aeabi_dadd+0x642>
 8000bc8:	e5fa      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000bca:	2300      	movs	r3, #0
 8000bcc:	000a      	movs	r2, r1
 8000bce:	2400      	movs	r4, #0
 8000bd0:	e602      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000bd2:	076b      	lsls	r3, r5, #29
 8000bd4:	08f9      	lsrs	r1, r7, #3
 8000bd6:	4319      	orrs	r1, r3
 8000bd8:	08eb      	lsrs	r3, r5, #3
 8000bda:	e5fd      	b.n	80007d8 <__aeabi_dadd+0x250>
 8000bdc:	4663      	mov	r3, ip
 8000bde:	08f9      	lsrs	r1, r7, #3
 8000be0:	075b      	lsls	r3, r3, #29
 8000be2:	4319      	orrs	r1, r3
 8000be4:	4663      	mov	r3, ip
 8000be6:	0004      	movs	r4, r0
 8000be8:	08db      	lsrs	r3, r3, #3
 8000bea:	e617      	b.n	800081c <__aeabi_dadd+0x294>
 8000bec:	003d      	movs	r5, r7
 8000bee:	444d      	add	r5, r9
 8000bf0:	4463      	add	r3, ip
 8000bf2:	454d      	cmp	r5, r9
 8000bf4:	4189      	sbcs	r1, r1
 8000bf6:	4698      	mov	r8, r3
 8000bf8:	4249      	negs	r1, r1
 8000bfa:	4488      	add	r8, r1
 8000bfc:	4643      	mov	r3, r8
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	d400      	bmi.n	8000c04 <__aeabi_dadd+0x67c>
 8000c02:	e5dd      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000c04:	4642      	mov	r2, r8
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <__aeabi_dadd+0x6d0>)
 8000c08:	2601      	movs	r6, #1
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	4690      	mov	r8, r2
 8000c0e:	e5d7      	b.n	80007c0 <__aeabi_dadd+0x238>
 8000c10:	0010      	movs	r0, r2
 8000c12:	001e      	movs	r6, r3
 8000c14:	3820      	subs	r0, #32
 8000c16:	40c6      	lsrs	r6, r0
 8000c18:	2a20      	cmp	r2, #32
 8000c1a:	d005      	beq.n	8000c28 <__aeabi_dadd+0x6a0>
 8000c1c:	2040      	movs	r0, #64	; 0x40
 8000c1e:	1a82      	subs	r2, r0, r2
 8000c20:	4093      	lsls	r3, r2
 8000c22:	464a      	mov	r2, r9
 8000c24:	431a      	orrs	r2, r3
 8000c26:	4691      	mov	r9, r2
 8000c28:	464d      	mov	r5, r9
 8000c2a:	1e6b      	subs	r3, r5, #1
 8000c2c:	419d      	sbcs	r5, r3
 8000c2e:	4335      	orrs	r5, r6
 8000c30:	e621      	b.n	8000876 <__aeabi_dadd+0x2ee>
 8000c32:	0002      	movs	r2, r0
 8000c34:	2300      	movs	r3, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	e540      	b.n	80006bc <__aeabi_dadd+0x134>
 8000c3a:	464a      	mov	r2, r9
 8000c3c:	19d5      	adds	r5, r2, r7
 8000c3e:	42bd      	cmp	r5, r7
 8000c40:	4189      	sbcs	r1, r1
 8000c42:	4463      	add	r3, ip
 8000c44:	4698      	mov	r8, r3
 8000c46:	4249      	negs	r1, r1
 8000c48:	4488      	add	r8, r1
 8000c4a:	e5b3      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4a01      	ldr	r2, [pc, #4]	; (8000c54 <__aeabi_dadd+0x6cc>)
 8000c50:	000b      	movs	r3, r1
 8000c52:	e533      	b.n	80006bc <__aeabi_dadd+0x134>
 8000c54:	000007ff 	.word	0x000007ff
 8000c58:	ff7fffff 	.word	0xff7fffff

08000c5c <__aeabi_ddiv>:
 8000c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c5e:	4657      	mov	r7, sl
 8000c60:	464e      	mov	r6, r9
 8000c62:	4645      	mov	r5, r8
 8000c64:	46de      	mov	lr, fp
 8000c66:	b5e0      	push	{r5, r6, r7, lr}
 8000c68:	4681      	mov	r9, r0
 8000c6a:	0005      	movs	r5, r0
 8000c6c:	030c      	lsls	r4, r1, #12
 8000c6e:	0048      	lsls	r0, r1, #1
 8000c70:	4692      	mov	sl, r2
 8000c72:	001f      	movs	r7, r3
 8000c74:	b085      	sub	sp, #20
 8000c76:	0b24      	lsrs	r4, r4, #12
 8000c78:	0d40      	lsrs	r0, r0, #21
 8000c7a:	0fce      	lsrs	r6, r1, #31
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d059      	beq.n	8000d34 <__aeabi_ddiv+0xd8>
 8000c80:	4b87      	ldr	r3, [pc, #540]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d100      	bne.n	8000c88 <__aeabi_ddiv+0x2c>
 8000c86:	e098      	b.n	8000dba <__aeabi_ddiv+0x15e>
 8000c88:	0f6b      	lsrs	r3, r5, #29
 8000c8a:	00e4      	lsls	r4, r4, #3
 8000c8c:	431c      	orrs	r4, r3
 8000c8e:	2380      	movs	r3, #128	; 0x80
 8000c90:	041b      	lsls	r3, r3, #16
 8000c92:	4323      	orrs	r3, r4
 8000c94:	4698      	mov	r8, r3
 8000c96:	4b83      	ldr	r3, [pc, #524]	; (8000ea4 <__aeabi_ddiv+0x248>)
 8000c98:	00ed      	lsls	r5, r5, #3
 8000c9a:	469b      	mov	fp, r3
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	4483      	add	fp, r0
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	033c      	lsls	r4, r7, #12
 8000ca6:	007b      	lsls	r3, r7, #1
 8000ca8:	4650      	mov	r0, sl
 8000caa:	0b24      	lsrs	r4, r4, #12
 8000cac:	0d5b      	lsrs	r3, r3, #21
 8000cae:	0fff      	lsrs	r7, r7, #31
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d067      	beq.n	8000d84 <__aeabi_ddiv+0x128>
 8000cb4:	4a7a      	ldr	r2, [pc, #488]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d018      	beq.n	8000cec <__aeabi_ddiv+0x90>
 8000cba:	497a      	ldr	r1, [pc, #488]	; (8000ea4 <__aeabi_ddiv+0x248>)
 8000cbc:	0f42      	lsrs	r2, r0, #29
 8000cbe:	468c      	mov	ip, r1
 8000cc0:	00e4      	lsls	r4, r4, #3
 8000cc2:	4659      	mov	r1, fp
 8000cc4:	4314      	orrs	r4, r2
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	4463      	add	r3, ip
 8000cca:	0412      	lsls	r2, r2, #16
 8000ccc:	1acb      	subs	r3, r1, r3
 8000cce:	4314      	orrs	r4, r2
 8000cd0:	469b      	mov	fp, r3
 8000cd2:	00c2      	lsls	r2, r0, #3
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	0033      	movs	r3, r6
 8000cd8:	407b      	eors	r3, r7
 8000cda:	469a      	mov	sl, r3
 8000cdc:	464b      	mov	r3, r9
 8000cde:	2b0f      	cmp	r3, #15
 8000ce0:	d900      	bls.n	8000ce4 <__aeabi_ddiv+0x88>
 8000ce2:	e0ef      	b.n	8000ec4 <__aeabi_ddiv+0x268>
 8000ce4:	4970      	ldr	r1, [pc, #448]	; (8000ea8 <__aeabi_ddiv+0x24c>)
 8000ce6:	009b      	lsls	r3, r3, #2
 8000ce8:	58cb      	ldr	r3, [r1, r3]
 8000cea:	469f      	mov	pc, r3
 8000cec:	4b6f      	ldr	r3, [pc, #444]	; (8000eac <__aeabi_ddiv+0x250>)
 8000cee:	4652      	mov	r2, sl
 8000cf0:	469c      	mov	ip, r3
 8000cf2:	4322      	orrs	r2, r4
 8000cf4:	44e3      	add	fp, ip
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d000      	beq.n	8000cfc <__aeabi_ddiv+0xa0>
 8000cfa:	e095      	b.n	8000e28 <__aeabi_ddiv+0x1cc>
 8000cfc:	4649      	mov	r1, r9
 8000cfe:	2302      	movs	r3, #2
 8000d00:	4319      	orrs	r1, r3
 8000d02:	4689      	mov	r9, r1
 8000d04:	2400      	movs	r4, #0
 8000d06:	2002      	movs	r0, #2
 8000d08:	e7e5      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	2400      	movs	r4, #0
 8000d0e:	2500      	movs	r5, #0
 8000d10:	4652      	mov	r2, sl
 8000d12:	051b      	lsls	r3, r3, #20
 8000d14:	4323      	orrs	r3, r4
 8000d16:	07d2      	lsls	r2, r2, #31
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	0028      	movs	r0, r5
 8000d1c:	0019      	movs	r1, r3
 8000d1e:	b005      	add	sp, #20
 8000d20:	bcf0      	pop	{r4, r5, r6, r7}
 8000d22:	46bb      	mov	fp, r7
 8000d24:	46b2      	mov	sl, r6
 8000d26:	46a9      	mov	r9, r5
 8000d28:	46a0      	mov	r8, r4
 8000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2c:	2400      	movs	r4, #0
 8000d2e:	2500      	movs	r5, #0
 8000d30:	4b5b      	ldr	r3, [pc, #364]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000d32:	e7ed      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000d34:	464b      	mov	r3, r9
 8000d36:	4323      	orrs	r3, r4
 8000d38:	4698      	mov	r8, r3
 8000d3a:	d100      	bne.n	8000d3e <__aeabi_ddiv+0xe2>
 8000d3c:	e089      	b.n	8000e52 <__aeabi_ddiv+0x1f6>
 8000d3e:	2c00      	cmp	r4, #0
 8000d40:	d100      	bne.n	8000d44 <__aeabi_ddiv+0xe8>
 8000d42:	e1e0      	b.n	8001106 <__aeabi_ddiv+0x4aa>
 8000d44:	0020      	movs	r0, r4
 8000d46:	f001 fa37 	bl	80021b8 <__clzsi2>
 8000d4a:	0001      	movs	r1, r0
 8000d4c:	0002      	movs	r2, r0
 8000d4e:	390b      	subs	r1, #11
 8000d50:	231d      	movs	r3, #29
 8000d52:	1a5b      	subs	r3, r3, r1
 8000d54:	4649      	mov	r1, r9
 8000d56:	0010      	movs	r0, r2
 8000d58:	40d9      	lsrs	r1, r3
 8000d5a:	3808      	subs	r0, #8
 8000d5c:	4084      	lsls	r4, r0
 8000d5e:	000b      	movs	r3, r1
 8000d60:	464d      	mov	r5, r9
 8000d62:	4323      	orrs	r3, r4
 8000d64:	4698      	mov	r8, r3
 8000d66:	4085      	lsls	r5, r0
 8000d68:	4851      	ldr	r0, [pc, #324]	; (8000eb0 <__aeabi_ddiv+0x254>)
 8000d6a:	033c      	lsls	r4, r7, #12
 8000d6c:	1a83      	subs	r3, r0, r2
 8000d6e:	469b      	mov	fp, r3
 8000d70:	2300      	movs	r3, #0
 8000d72:	4699      	mov	r9, r3
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	007b      	lsls	r3, r7, #1
 8000d78:	4650      	mov	r0, sl
 8000d7a:	0b24      	lsrs	r4, r4, #12
 8000d7c:	0d5b      	lsrs	r3, r3, #21
 8000d7e:	0fff      	lsrs	r7, r7, #31
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d197      	bne.n	8000cb4 <__aeabi_ddiv+0x58>
 8000d84:	4652      	mov	r2, sl
 8000d86:	4322      	orrs	r2, r4
 8000d88:	d055      	beq.n	8000e36 <__aeabi_ddiv+0x1da>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d100      	bne.n	8000d90 <__aeabi_ddiv+0x134>
 8000d8e:	e1ca      	b.n	8001126 <__aeabi_ddiv+0x4ca>
 8000d90:	0020      	movs	r0, r4
 8000d92:	f001 fa11 	bl	80021b8 <__clzsi2>
 8000d96:	0002      	movs	r2, r0
 8000d98:	3a0b      	subs	r2, #11
 8000d9a:	231d      	movs	r3, #29
 8000d9c:	0001      	movs	r1, r0
 8000d9e:	1a9b      	subs	r3, r3, r2
 8000da0:	4652      	mov	r2, sl
 8000da2:	3908      	subs	r1, #8
 8000da4:	40da      	lsrs	r2, r3
 8000da6:	408c      	lsls	r4, r1
 8000da8:	4314      	orrs	r4, r2
 8000daa:	4652      	mov	r2, sl
 8000dac:	408a      	lsls	r2, r1
 8000dae:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <__aeabi_ddiv+0x258>)
 8000db0:	4458      	add	r0, fp
 8000db2:	469b      	mov	fp, r3
 8000db4:	4483      	add	fp, r0
 8000db6:	2000      	movs	r0, #0
 8000db8:	e78d      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000dba:	464b      	mov	r3, r9
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	4698      	mov	r8, r3
 8000dc0:	d140      	bne.n	8000e44 <__aeabi_ddiv+0x1e8>
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	3b06      	subs	r3, #6
 8000dc8:	2500      	movs	r5, #0
 8000dca:	4683      	mov	fp, r0
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	e769      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000dd0:	46b2      	mov	sl, r6
 8000dd2:	9b00      	ldr	r3, [sp, #0]
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d0a9      	beq.n	8000d2c <__aeabi_ddiv+0xd0>
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d100      	bne.n	8000dde <__aeabi_ddiv+0x182>
 8000ddc:	e211      	b.n	8001202 <__aeabi_ddiv+0x5a6>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d093      	beq.n	8000d0a <__aeabi_ddiv+0xae>
 8000de2:	4a35      	ldr	r2, [pc, #212]	; (8000eb8 <__aeabi_ddiv+0x25c>)
 8000de4:	445a      	add	r2, fp
 8000de6:	2a00      	cmp	r2, #0
 8000de8:	dc00      	bgt.n	8000dec <__aeabi_ddiv+0x190>
 8000dea:	e13c      	b.n	8001066 <__aeabi_ddiv+0x40a>
 8000dec:	076b      	lsls	r3, r5, #29
 8000dee:	d000      	beq.n	8000df2 <__aeabi_ddiv+0x196>
 8000df0:	e1a7      	b.n	8001142 <__aeabi_ddiv+0x4e6>
 8000df2:	08ed      	lsrs	r5, r5, #3
 8000df4:	4643      	mov	r3, r8
 8000df6:	01db      	lsls	r3, r3, #7
 8000df8:	d506      	bpl.n	8000e08 <__aeabi_ddiv+0x1ac>
 8000dfa:	4642      	mov	r2, r8
 8000dfc:	4b2f      	ldr	r3, [pc, #188]	; (8000ebc <__aeabi_ddiv+0x260>)
 8000dfe:	401a      	ands	r2, r3
 8000e00:	4690      	mov	r8, r2
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	445a      	add	r2, fp
 8000e08:	4b2d      	ldr	r3, [pc, #180]	; (8000ec0 <__aeabi_ddiv+0x264>)
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	dc8e      	bgt.n	8000d2c <__aeabi_ddiv+0xd0>
 8000e0e:	4643      	mov	r3, r8
 8000e10:	0552      	lsls	r2, r2, #21
 8000e12:	0758      	lsls	r0, r3, #29
 8000e14:	025c      	lsls	r4, r3, #9
 8000e16:	4305      	orrs	r5, r0
 8000e18:	0b24      	lsrs	r4, r4, #12
 8000e1a:	0d53      	lsrs	r3, r2, #21
 8000e1c:	e778      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e1e:	46ba      	mov	sl, r7
 8000e20:	46a0      	mov	r8, r4
 8000e22:	0015      	movs	r5, r2
 8000e24:	9000      	str	r0, [sp, #0]
 8000e26:	e7d4      	b.n	8000dd2 <__aeabi_ddiv+0x176>
 8000e28:	464a      	mov	r2, r9
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	431a      	orrs	r2, r3
 8000e2e:	4691      	mov	r9, r2
 8000e30:	2003      	movs	r0, #3
 8000e32:	4652      	mov	r2, sl
 8000e34:	e74f      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000e36:	4649      	mov	r1, r9
 8000e38:	2301      	movs	r3, #1
 8000e3a:	4319      	orrs	r1, r3
 8000e3c:	4689      	mov	r9, r1
 8000e3e:	2400      	movs	r4, #0
 8000e40:	2001      	movs	r0, #1
 8000e42:	e748      	b.n	8000cd6 <__aeabi_ddiv+0x7a>
 8000e44:	230c      	movs	r3, #12
 8000e46:	4699      	mov	r9, r3
 8000e48:	3b09      	subs	r3, #9
 8000e4a:	46a0      	mov	r8, r4
 8000e4c:	4683      	mov	fp, r0
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	e728      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000e52:	2304      	movs	r3, #4
 8000e54:	4699      	mov	r9, r3
 8000e56:	2300      	movs	r3, #0
 8000e58:	469b      	mov	fp, r3
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	e720      	b.n	8000ca4 <__aeabi_ddiv+0x48>
 8000e62:	2300      	movs	r3, #0
 8000e64:	2480      	movs	r4, #128	; 0x80
 8000e66:	469a      	mov	sl, r3
 8000e68:	2500      	movs	r5, #0
 8000e6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e6c:	0324      	lsls	r4, r4, #12
 8000e6e:	e74f      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	4641      	mov	r1, r8
 8000e74:	031b      	lsls	r3, r3, #12
 8000e76:	4219      	tst	r1, r3
 8000e78:	d008      	beq.n	8000e8c <__aeabi_ddiv+0x230>
 8000e7a:	421c      	tst	r4, r3
 8000e7c:	d106      	bne.n	8000e8c <__aeabi_ddiv+0x230>
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	0324      	lsls	r4, r4, #12
 8000e82:	46ba      	mov	sl, r7
 8000e84:	0015      	movs	r5, r2
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e88:	0b24      	lsrs	r4, r4, #12
 8000e8a:	e741      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e8c:	2480      	movs	r4, #128	; 0x80
 8000e8e:	4643      	mov	r3, r8
 8000e90:	0324      	lsls	r4, r4, #12
 8000e92:	431c      	orrs	r4, r3
 8000e94:	0324      	lsls	r4, r4, #12
 8000e96:	46b2      	mov	sl, r6
 8000e98:	4b01      	ldr	r3, [pc, #4]	; (8000ea0 <__aeabi_ddiv+0x244>)
 8000e9a:	0b24      	lsrs	r4, r4, #12
 8000e9c:	e738      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	000007ff 	.word	0x000007ff
 8000ea4:	fffffc01 	.word	0xfffffc01
 8000ea8:	08010bac 	.word	0x08010bac
 8000eac:	fffff801 	.word	0xfffff801
 8000eb0:	fffffc0d 	.word	0xfffffc0d
 8000eb4:	000003f3 	.word	0x000003f3
 8000eb8:	000003ff 	.word	0x000003ff
 8000ebc:	feffffff 	.word	0xfeffffff
 8000ec0:	000007fe 	.word	0x000007fe
 8000ec4:	4544      	cmp	r4, r8
 8000ec6:	d200      	bcs.n	8000eca <__aeabi_ddiv+0x26e>
 8000ec8:	e116      	b.n	80010f8 <__aeabi_ddiv+0x49c>
 8000eca:	d100      	bne.n	8000ece <__aeabi_ddiv+0x272>
 8000ecc:	e111      	b.n	80010f2 <__aeabi_ddiv+0x496>
 8000ece:	2301      	movs	r3, #1
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	469c      	mov	ip, r3
 8000ed4:	002e      	movs	r6, r5
 8000ed6:	4640      	mov	r0, r8
 8000ed8:	2500      	movs	r5, #0
 8000eda:	44e3      	add	fp, ip
 8000edc:	0223      	lsls	r3, r4, #8
 8000ede:	0e14      	lsrs	r4, r2, #24
 8000ee0:	431c      	orrs	r4, r3
 8000ee2:	0c1b      	lsrs	r3, r3, #16
 8000ee4:	4699      	mov	r9, r3
 8000ee6:	0423      	lsls	r3, r4, #16
 8000ee8:	0c1f      	lsrs	r7, r3, #16
 8000eea:	0212      	lsls	r2, r2, #8
 8000eec:	4649      	mov	r1, r9
 8000eee:	9200      	str	r2, [sp, #0]
 8000ef0:	9701      	str	r7, [sp, #4]
 8000ef2:	f7ff f9ab 	bl	800024c <__aeabi_uidivmod>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	437a      	muls	r2, r7
 8000efa:	040b      	lsls	r3, r1, #16
 8000efc:	0c31      	lsrs	r1, r6, #16
 8000efe:	4680      	mov	r8, r0
 8000f00:	4319      	orrs	r1, r3
 8000f02:	428a      	cmp	r2, r1
 8000f04:	d90b      	bls.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f06:	2301      	movs	r3, #1
 8000f08:	425b      	negs	r3, r3
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	1909      	adds	r1, r1, r4
 8000f0e:	44e0      	add	r8, ip
 8000f10:	428c      	cmp	r4, r1
 8000f12:	d804      	bhi.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f14:	428a      	cmp	r2, r1
 8000f16:	d902      	bls.n	8000f1e <__aeabi_ddiv+0x2c2>
 8000f18:	1e83      	subs	r3, r0, #2
 8000f1a:	4698      	mov	r8, r3
 8000f1c:	1909      	adds	r1, r1, r4
 8000f1e:	1a88      	subs	r0, r1, r2
 8000f20:	4649      	mov	r1, r9
 8000f22:	f7ff f993 	bl	800024c <__aeabi_uidivmod>
 8000f26:	0409      	lsls	r1, r1, #16
 8000f28:	468c      	mov	ip, r1
 8000f2a:	0431      	lsls	r1, r6, #16
 8000f2c:	4666      	mov	r6, ip
 8000f2e:	9a01      	ldr	r2, [sp, #4]
 8000f30:	0c09      	lsrs	r1, r1, #16
 8000f32:	4342      	muls	r2, r0
 8000f34:	0003      	movs	r3, r0
 8000f36:	4331      	orrs	r1, r6
 8000f38:	428a      	cmp	r2, r1
 8000f3a:	d904      	bls.n	8000f46 <__aeabi_ddiv+0x2ea>
 8000f3c:	1909      	adds	r1, r1, r4
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	428c      	cmp	r4, r1
 8000f42:	d800      	bhi.n	8000f46 <__aeabi_ddiv+0x2ea>
 8000f44:	e111      	b.n	800116a <__aeabi_ddiv+0x50e>
 8000f46:	1a89      	subs	r1, r1, r2
 8000f48:	4642      	mov	r2, r8
 8000f4a:	9e00      	ldr	r6, [sp, #0]
 8000f4c:	0412      	lsls	r2, r2, #16
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	0c33      	lsrs	r3, r6, #16
 8000f52:	001f      	movs	r7, r3
 8000f54:	0c10      	lsrs	r0, r2, #16
 8000f56:	4690      	mov	r8, r2
 8000f58:	9302      	str	r3, [sp, #8]
 8000f5a:	0413      	lsls	r3, r2, #16
 8000f5c:	0432      	lsls	r2, r6, #16
 8000f5e:	0c16      	lsrs	r6, r2, #16
 8000f60:	0032      	movs	r2, r6
 8000f62:	0c1b      	lsrs	r3, r3, #16
 8000f64:	435a      	muls	r2, r3
 8000f66:	9603      	str	r6, [sp, #12]
 8000f68:	437b      	muls	r3, r7
 8000f6a:	4346      	muls	r6, r0
 8000f6c:	4378      	muls	r0, r7
 8000f6e:	0c17      	lsrs	r7, r2, #16
 8000f70:	46bc      	mov	ip, r7
 8000f72:	199b      	adds	r3, r3, r6
 8000f74:	4463      	add	r3, ip
 8000f76:	429e      	cmp	r6, r3
 8000f78:	d903      	bls.n	8000f82 <__aeabi_ddiv+0x326>
 8000f7a:	2680      	movs	r6, #128	; 0x80
 8000f7c:	0276      	lsls	r6, r6, #9
 8000f7e:	46b4      	mov	ip, r6
 8000f80:	4460      	add	r0, ip
 8000f82:	0c1e      	lsrs	r6, r3, #16
 8000f84:	1830      	adds	r0, r6, r0
 8000f86:	0416      	lsls	r6, r2, #16
 8000f88:	041b      	lsls	r3, r3, #16
 8000f8a:	0c36      	lsrs	r6, r6, #16
 8000f8c:	199e      	adds	r6, r3, r6
 8000f8e:	4281      	cmp	r1, r0
 8000f90:	d200      	bcs.n	8000f94 <__aeabi_ddiv+0x338>
 8000f92:	e09c      	b.n	80010ce <__aeabi_ddiv+0x472>
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x33c>
 8000f96:	e097      	b.n	80010c8 <__aeabi_ddiv+0x46c>
 8000f98:	1bae      	subs	r6, r5, r6
 8000f9a:	1a09      	subs	r1, r1, r0
 8000f9c:	42b5      	cmp	r5, r6
 8000f9e:	4180      	sbcs	r0, r0
 8000fa0:	4240      	negs	r0, r0
 8000fa2:	1a08      	subs	r0, r1, r0
 8000fa4:	4284      	cmp	r4, r0
 8000fa6:	d100      	bne.n	8000faa <__aeabi_ddiv+0x34e>
 8000fa8:	e111      	b.n	80011ce <__aeabi_ddiv+0x572>
 8000faa:	4649      	mov	r1, r9
 8000fac:	f7ff f94e 	bl	800024c <__aeabi_uidivmod>
 8000fb0:	9a01      	ldr	r2, [sp, #4]
 8000fb2:	040b      	lsls	r3, r1, #16
 8000fb4:	4342      	muls	r2, r0
 8000fb6:	0c31      	lsrs	r1, r6, #16
 8000fb8:	0005      	movs	r5, r0
 8000fba:	4319      	orrs	r1, r3
 8000fbc:	428a      	cmp	r2, r1
 8000fbe:	d907      	bls.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fc0:	1909      	adds	r1, r1, r4
 8000fc2:	3d01      	subs	r5, #1
 8000fc4:	428c      	cmp	r4, r1
 8000fc6:	d803      	bhi.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fc8:	428a      	cmp	r2, r1
 8000fca:	d901      	bls.n	8000fd0 <__aeabi_ddiv+0x374>
 8000fcc:	1e85      	subs	r5, r0, #2
 8000fce:	1909      	adds	r1, r1, r4
 8000fd0:	1a88      	subs	r0, r1, r2
 8000fd2:	4649      	mov	r1, r9
 8000fd4:	f7ff f93a 	bl	800024c <__aeabi_uidivmod>
 8000fd8:	0409      	lsls	r1, r1, #16
 8000fda:	468c      	mov	ip, r1
 8000fdc:	0431      	lsls	r1, r6, #16
 8000fde:	4666      	mov	r6, ip
 8000fe0:	9a01      	ldr	r2, [sp, #4]
 8000fe2:	0c09      	lsrs	r1, r1, #16
 8000fe4:	4342      	muls	r2, r0
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	4331      	orrs	r1, r6
 8000fea:	428a      	cmp	r2, r1
 8000fec:	d907      	bls.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000fee:	1909      	adds	r1, r1, r4
 8000ff0:	3b01      	subs	r3, #1
 8000ff2:	428c      	cmp	r4, r1
 8000ff4:	d803      	bhi.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000ff6:	428a      	cmp	r2, r1
 8000ff8:	d901      	bls.n	8000ffe <__aeabi_ddiv+0x3a2>
 8000ffa:	1e83      	subs	r3, r0, #2
 8000ffc:	1909      	adds	r1, r1, r4
 8000ffe:	9e03      	ldr	r6, [sp, #12]
 8001000:	1a89      	subs	r1, r1, r2
 8001002:	0032      	movs	r2, r6
 8001004:	042d      	lsls	r5, r5, #16
 8001006:	431d      	orrs	r5, r3
 8001008:	9f02      	ldr	r7, [sp, #8]
 800100a:	042b      	lsls	r3, r5, #16
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	435a      	muls	r2, r3
 8001010:	437b      	muls	r3, r7
 8001012:	469c      	mov	ip, r3
 8001014:	0c28      	lsrs	r0, r5, #16
 8001016:	4346      	muls	r6, r0
 8001018:	0c13      	lsrs	r3, r2, #16
 800101a:	44b4      	add	ip, r6
 800101c:	4463      	add	r3, ip
 800101e:	4378      	muls	r0, r7
 8001020:	429e      	cmp	r6, r3
 8001022:	d903      	bls.n	800102c <__aeabi_ddiv+0x3d0>
 8001024:	2680      	movs	r6, #128	; 0x80
 8001026:	0276      	lsls	r6, r6, #9
 8001028:	46b4      	mov	ip, r6
 800102a:	4460      	add	r0, ip
 800102c:	0c1e      	lsrs	r6, r3, #16
 800102e:	0412      	lsls	r2, r2, #16
 8001030:	041b      	lsls	r3, r3, #16
 8001032:	0c12      	lsrs	r2, r2, #16
 8001034:	1830      	adds	r0, r6, r0
 8001036:	189b      	adds	r3, r3, r2
 8001038:	4281      	cmp	r1, r0
 800103a:	d306      	bcc.n	800104a <__aeabi_ddiv+0x3ee>
 800103c:	d002      	beq.n	8001044 <__aeabi_ddiv+0x3e8>
 800103e:	2301      	movs	r3, #1
 8001040:	431d      	orrs	r5, r3
 8001042:	e6ce      	b.n	8000de2 <__aeabi_ddiv+0x186>
 8001044:	2b00      	cmp	r3, #0
 8001046:	d100      	bne.n	800104a <__aeabi_ddiv+0x3ee>
 8001048:	e6cb      	b.n	8000de2 <__aeabi_ddiv+0x186>
 800104a:	1861      	adds	r1, r4, r1
 800104c:	1e6e      	subs	r6, r5, #1
 800104e:	42a1      	cmp	r1, r4
 8001050:	d200      	bcs.n	8001054 <__aeabi_ddiv+0x3f8>
 8001052:	e0a4      	b.n	800119e <__aeabi_ddiv+0x542>
 8001054:	4281      	cmp	r1, r0
 8001056:	d200      	bcs.n	800105a <__aeabi_ddiv+0x3fe>
 8001058:	e0c9      	b.n	80011ee <__aeabi_ddiv+0x592>
 800105a:	d100      	bne.n	800105e <__aeabi_ddiv+0x402>
 800105c:	e0d9      	b.n	8001212 <__aeabi_ddiv+0x5b6>
 800105e:	0035      	movs	r5, r6
 8001060:	e7ed      	b.n	800103e <__aeabi_ddiv+0x3e2>
 8001062:	2501      	movs	r5, #1
 8001064:	426d      	negs	r5, r5
 8001066:	2101      	movs	r1, #1
 8001068:	1a89      	subs	r1, r1, r2
 800106a:	2938      	cmp	r1, #56	; 0x38
 800106c:	dd00      	ble.n	8001070 <__aeabi_ddiv+0x414>
 800106e:	e64c      	b.n	8000d0a <__aeabi_ddiv+0xae>
 8001070:	291f      	cmp	r1, #31
 8001072:	dc00      	bgt.n	8001076 <__aeabi_ddiv+0x41a>
 8001074:	e07f      	b.n	8001176 <__aeabi_ddiv+0x51a>
 8001076:	231f      	movs	r3, #31
 8001078:	425b      	negs	r3, r3
 800107a:	1a9a      	subs	r2, r3, r2
 800107c:	4643      	mov	r3, r8
 800107e:	40d3      	lsrs	r3, r2
 8001080:	2920      	cmp	r1, #32
 8001082:	d004      	beq.n	800108e <__aeabi_ddiv+0x432>
 8001084:	4644      	mov	r4, r8
 8001086:	4a65      	ldr	r2, [pc, #404]	; (800121c <__aeabi_ddiv+0x5c0>)
 8001088:	445a      	add	r2, fp
 800108a:	4094      	lsls	r4, r2
 800108c:	4325      	orrs	r5, r4
 800108e:	1e6a      	subs	r2, r5, #1
 8001090:	4195      	sbcs	r5, r2
 8001092:	2207      	movs	r2, #7
 8001094:	432b      	orrs	r3, r5
 8001096:	0015      	movs	r5, r2
 8001098:	2400      	movs	r4, #0
 800109a:	401d      	ands	r5, r3
 800109c:	421a      	tst	r2, r3
 800109e:	d100      	bne.n	80010a2 <__aeabi_ddiv+0x446>
 80010a0:	e0a1      	b.n	80011e6 <__aeabi_ddiv+0x58a>
 80010a2:	220f      	movs	r2, #15
 80010a4:	2400      	movs	r4, #0
 80010a6:	401a      	ands	r2, r3
 80010a8:	2a04      	cmp	r2, #4
 80010aa:	d100      	bne.n	80010ae <__aeabi_ddiv+0x452>
 80010ac:	e098      	b.n	80011e0 <__aeabi_ddiv+0x584>
 80010ae:	1d1a      	adds	r2, r3, #4
 80010b0:	429a      	cmp	r2, r3
 80010b2:	419b      	sbcs	r3, r3
 80010b4:	425b      	negs	r3, r3
 80010b6:	18e4      	adds	r4, r4, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	0222      	lsls	r2, r4, #8
 80010bc:	d400      	bmi.n	80010c0 <__aeabi_ddiv+0x464>
 80010be:	e08f      	b.n	80011e0 <__aeabi_ddiv+0x584>
 80010c0:	2301      	movs	r3, #1
 80010c2:	2400      	movs	r4, #0
 80010c4:	2500      	movs	r5, #0
 80010c6:	e623      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 80010c8:	42b5      	cmp	r5, r6
 80010ca:	d300      	bcc.n	80010ce <__aeabi_ddiv+0x472>
 80010cc:	e764      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80010ce:	4643      	mov	r3, r8
 80010d0:	1e5a      	subs	r2, r3, #1
 80010d2:	9b00      	ldr	r3, [sp, #0]
 80010d4:	469c      	mov	ip, r3
 80010d6:	4465      	add	r5, ip
 80010d8:	001f      	movs	r7, r3
 80010da:	429d      	cmp	r5, r3
 80010dc:	419b      	sbcs	r3, r3
 80010de:	425b      	negs	r3, r3
 80010e0:	191b      	adds	r3, r3, r4
 80010e2:	18c9      	adds	r1, r1, r3
 80010e4:	428c      	cmp	r4, r1
 80010e6:	d23a      	bcs.n	800115e <__aeabi_ddiv+0x502>
 80010e8:	4288      	cmp	r0, r1
 80010ea:	d863      	bhi.n	80011b4 <__aeabi_ddiv+0x558>
 80010ec:	d060      	beq.n	80011b0 <__aeabi_ddiv+0x554>
 80010ee:	4690      	mov	r8, r2
 80010f0:	e752      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80010f2:	42aa      	cmp	r2, r5
 80010f4:	d900      	bls.n	80010f8 <__aeabi_ddiv+0x49c>
 80010f6:	e6ea      	b.n	8000ece <__aeabi_ddiv+0x272>
 80010f8:	4643      	mov	r3, r8
 80010fa:	07de      	lsls	r6, r3, #31
 80010fc:	0858      	lsrs	r0, r3, #1
 80010fe:	086b      	lsrs	r3, r5, #1
 8001100:	431e      	orrs	r6, r3
 8001102:	07ed      	lsls	r5, r5, #31
 8001104:	e6ea      	b.n	8000edc <__aeabi_ddiv+0x280>
 8001106:	4648      	mov	r0, r9
 8001108:	f001 f856 	bl	80021b8 <__clzsi2>
 800110c:	0001      	movs	r1, r0
 800110e:	0002      	movs	r2, r0
 8001110:	3115      	adds	r1, #21
 8001112:	3220      	adds	r2, #32
 8001114:	291c      	cmp	r1, #28
 8001116:	dc00      	bgt.n	800111a <__aeabi_ddiv+0x4be>
 8001118:	e61a      	b.n	8000d50 <__aeabi_ddiv+0xf4>
 800111a:	464b      	mov	r3, r9
 800111c:	3808      	subs	r0, #8
 800111e:	4083      	lsls	r3, r0
 8001120:	2500      	movs	r5, #0
 8001122:	4698      	mov	r8, r3
 8001124:	e620      	b.n	8000d68 <__aeabi_ddiv+0x10c>
 8001126:	f001 f847 	bl	80021b8 <__clzsi2>
 800112a:	0003      	movs	r3, r0
 800112c:	001a      	movs	r2, r3
 800112e:	3215      	adds	r2, #21
 8001130:	3020      	adds	r0, #32
 8001132:	2a1c      	cmp	r2, #28
 8001134:	dc00      	bgt.n	8001138 <__aeabi_ddiv+0x4dc>
 8001136:	e630      	b.n	8000d9a <__aeabi_ddiv+0x13e>
 8001138:	4654      	mov	r4, sl
 800113a:	3b08      	subs	r3, #8
 800113c:	2200      	movs	r2, #0
 800113e:	409c      	lsls	r4, r3
 8001140:	e635      	b.n	8000dae <__aeabi_ddiv+0x152>
 8001142:	230f      	movs	r3, #15
 8001144:	402b      	ands	r3, r5
 8001146:	2b04      	cmp	r3, #4
 8001148:	d100      	bne.n	800114c <__aeabi_ddiv+0x4f0>
 800114a:	e652      	b.n	8000df2 <__aeabi_ddiv+0x196>
 800114c:	2305      	movs	r3, #5
 800114e:	425b      	negs	r3, r3
 8001150:	42ab      	cmp	r3, r5
 8001152:	419b      	sbcs	r3, r3
 8001154:	3504      	adds	r5, #4
 8001156:	425b      	negs	r3, r3
 8001158:	08ed      	lsrs	r5, r5, #3
 800115a:	4498      	add	r8, r3
 800115c:	e64a      	b.n	8000df4 <__aeabi_ddiv+0x198>
 800115e:	428c      	cmp	r4, r1
 8001160:	d1c5      	bne.n	80010ee <__aeabi_ddiv+0x492>
 8001162:	42af      	cmp	r7, r5
 8001164:	d9c0      	bls.n	80010e8 <__aeabi_ddiv+0x48c>
 8001166:	4690      	mov	r8, r2
 8001168:	e716      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 800116a:	428a      	cmp	r2, r1
 800116c:	d800      	bhi.n	8001170 <__aeabi_ddiv+0x514>
 800116e:	e6ea      	b.n	8000f46 <__aeabi_ddiv+0x2ea>
 8001170:	1e83      	subs	r3, r0, #2
 8001172:	1909      	adds	r1, r1, r4
 8001174:	e6e7      	b.n	8000f46 <__aeabi_ddiv+0x2ea>
 8001176:	4a2a      	ldr	r2, [pc, #168]	; (8001220 <__aeabi_ddiv+0x5c4>)
 8001178:	0028      	movs	r0, r5
 800117a:	445a      	add	r2, fp
 800117c:	4643      	mov	r3, r8
 800117e:	4095      	lsls	r5, r2
 8001180:	4093      	lsls	r3, r2
 8001182:	40c8      	lsrs	r0, r1
 8001184:	1e6a      	subs	r2, r5, #1
 8001186:	4195      	sbcs	r5, r2
 8001188:	4644      	mov	r4, r8
 800118a:	4303      	orrs	r3, r0
 800118c:	432b      	orrs	r3, r5
 800118e:	40cc      	lsrs	r4, r1
 8001190:	075a      	lsls	r2, r3, #29
 8001192:	d092      	beq.n	80010ba <__aeabi_ddiv+0x45e>
 8001194:	220f      	movs	r2, #15
 8001196:	401a      	ands	r2, r3
 8001198:	2a04      	cmp	r2, #4
 800119a:	d188      	bne.n	80010ae <__aeabi_ddiv+0x452>
 800119c:	e78d      	b.n	80010ba <__aeabi_ddiv+0x45e>
 800119e:	0035      	movs	r5, r6
 80011a0:	4281      	cmp	r1, r0
 80011a2:	d000      	beq.n	80011a6 <__aeabi_ddiv+0x54a>
 80011a4:	e74b      	b.n	800103e <__aeabi_ddiv+0x3e2>
 80011a6:	9a00      	ldr	r2, [sp, #0]
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d000      	beq.n	80011ae <__aeabi_ddiv+0x552>
 80011ac:	e747      	b.n	800103e <__aeabi_ddiv+0x3e2>
 80011ae:	e618      	b.n	8000de2 <__aeabi_ddiv+0x186>
 80011b0:	42ae      	cmp	r6, r5
 80011b2:	d99c      	bls.n	80010ee <__aeabi_ddiv+0x492>
 80011b4:	2302      	movs	r3, #2
 80011b6:	425b      	negs	r3, r3
 80011b8:	469c      	mov	ip, r3
 80011ba:	9b00      	ldr	r3, [sp, #0]
 80011bc:	44e0      	add	r8, ip
 80011be:	469c      	mov	ip, r3
 80011c0:	4465      	add	r5, ip
 80011c2:	429d      	cmp	r5, r3
 80011c4:	419b      	sbcs	r3, r3
 80011c6:	425b      	negs	r3, r3
 80011c8:	191b      	adds	r3, r3, r4
 80011ca:	18c9      	adds	r1, r1, r3
 80011cc:	e6e4      	b.n	8000f98 <__aeabi_ddiv+0x33c>
 80011ce:	4a15      	ldr	r2, [pc, #84]	; (8001224 <__aeabi_ddiv+0x5c8>)
 80011d0:	445a      	add	r2, fp
 80011d2:	2a00      	cmp	r2, #0
 80011d4:	dc00      	bgt.n	80011d8 <__aeabi_ddiv+0x57c>
 80011d6:	e744      	b.n	8001062 <__aeabi_ddiv+0x406>
 80011d8:	2301      	movs	r3, #1
 80011da:	2500      	movs	r5, #0
 80011dc:	4498      	add	r8, r3
 80011de:	e609      	b.n	8000df4 <__aeabi_ddiv+0x198>
 80011e0:	0765      	lsls	r5, r4, #29
 80011e2:	0264      	lsls	r4, r4, #9
 80011e4:	0b24      	lsrs	r4, r4, #12
 80011e6:	08db      	lsrs	r3, r3, #3
 80011e8:	431d      	orrs	r5, r3
 80011ea:	2300      	movs	r3, #0
 80011ec:	e590      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 80011ee:	9e00      	ldr	r6, [sp, #0]
 80011f0:	3d02      	subs	r5, #2
 80011f2:	0072      	lsls	r2, r6, #1
 80011f4:	42b2      	cmp	r2, r6
 80011f6:	41bf      	sbcs	r7, r7
 80011f8:	427f      	negs	r7, r7
 80011fa:	193c      	adds	r4, r7, r4
 80011fc:	1909      	adds	r1, r1, r4
 80011fe:	9200      	str	r2, [sp, #0]
 8001200:	e7ce      	b.n	80011a0 <__aeabi_ddiv+0x544>
 8001202:	2480      	movs	r4, #128	; 0x80
 8001204:	4643      	mov	r3, r8
 8001206:	0324      	lsls	r4, r4, #12
 8001208:	431c      	orrs	r4, r3
 800120a:	0324      	lsls	r4, r4, #12
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <__aeabi_ddiv+0x5cc>)
 800120e:	0b24      	lsrs	r4, r4, #12
 8001210:	e57e      	b.n	8000d10 <__aeabi_ddiv+0xb4>
 8001212:	9a00      	ldr	r2, [sp, #0]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3ea      	bcc.n	80011ee <__aeabi_ddiv+0x592>
 8001218:	0035      	movs	r5, r6
 800121a:	e7c4      	b.n	80011a6 <__aeabi_ddiv+0x54a>
 800121c:	0000043e 	.word	0x0000043e
 8001220:	0000041e 	.word	0x0000041e
 8001224:	000003ff 	.word	0x000003ff
 8001228:	000007ff 	.word	0x000007ff

0800122c <__eqdf2>:
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	464f      	mov	r7, r9
 8001230:	4646      	mov	r6, r8
 8001232:	46d6      	mov	lr, sl
 8001234:	4694      	mov	ip, r2
 8001236:	4691      	mov	r9, r2
 8001238:	031a      	lsls	r2, r3, #12
 800123a:	0b12      	lsrs	r2, r2, #12
 800123c:	4d18      	ldr	r5, [pc, #96]	; (80012a0 <__eqdf2+0x74>)
 800123e:	b5c0      	push	{r6, r7, lr}
 8001240:	004c      	lsls	r4, r1, #1
 8001242:	030f      	lsls	r7, r1, #12
 8001244:	4692      	mov	sl, r2
 8001246:	005a      	lsls	r2, r3, #1
 8001248:	0006      	movs	r6, r0
 800124a:	4680      	mov	r8, r0
 800124c:	0b3f      	lsrs	r7, r7, #12
 800124e:	2001      	movs	r0, #1
 8001250:	0d64      	lsrs	r4, r4, #21
 8001252:	0fc9      	lsrs	r1, r1, #31
 8001254:	0d52      	lsrs	r2, r2, #21
 8001256:	0fdb      	lsrs	r3, r3, #31
 8001258:	42ac      	cmp	r4, r5
 800125a:	d00a      	beq.n	8001272 <__eqdf2+0x46>
 800125c:	42aa      	cmp	r2, r5
 800125e:	d003      	beq.n	8001268 <__eqdf2+0x3c>
 8001260:	4294      	cmp	r4, r2
 8001262:	d101      	bne.n	8001268 <__eqdf2+0x3c>
 8001264:	4557      	cmp	r7, sl
 8001266:	d00d      	beq.n	8001284 <__eqdf2+0x58>
 8001268:	bce0      	pop	{r5, r6, r7}
 800126a:	46ba      	mov	sl, r7
 800126c:	46b1      	mov	r9, r6
 800126e:	46a8      	mov	r8, r5
 8001270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001272:	003d      	movs	r5, r7
 8001274:	4335      	orrs	r5, r6
 8001276:	d1f7      	bne.n	8001268 <__eqdf2+0x3c>
 8001278:	42a2      	cmp	r2, r4
 800127a:	d1f5      	bne.n	8001268 <__eqdf2+0x3c>
 800127c:	4652      	mov	r2, sl
 800127e:	4665      	mov	r5, ip
 8001280:	432a      	orrs	r2, r5
 8001282:	d1f1      	bne.n	8001268 <__eqdf2+0x3c>
 8001284:	2001      	movs	r0, #1
 8001286:	45c8      	cmp	r8, r9
 8001288:	d1ee      	bne.n	8001268 <__eqdf2+0x3c>
 800128a:	4299      	cmp	r1, r3
 800128c:	d006      	beq.n	800129c <__eqdf2+0x70>
 800128e:	2c00      	cmp	r4, #0
 8001290:	d1ea      	bne.n	8001268 <__eqdf2+0x3c>
 8001292:	433e      	orrs	r6, r7
 8001294:	0030      	movs	r0, r6
 8001296:	1e46      	subs	r6, r0, #1
 8001298:	41b0      	sbcs	r0, r6
 800129a:	e7e5      	b.n	8001268 <__eqdf2+0x3c>
 800129c:	2000      	movs	r0, #0
 800129e:	e7e3      	b.n	8001268 <__eqdf2+0x3c>
 80012a0:	000007ff 	.word	0x000007ff

080012a4 <__gedf2>:
 80012a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a6:	464e      	mov	r6, r9
 80012a8:	4645      	mov	r5, r8
 80012aa:	4657      	mov	r7, sl
 80012ac:	46de      	mov	lr, fp
 80012ae:	0004      	movs	r4, r0
 80012b0:	0018      	movs	r0, r3
 80012b2:	b5e0      	push	{r5, r6, r7, lr}
 80012b4:	0016      	movs	r6, r2
 80012b6:	031b      	lsls	r3, r3, #12
 80012b8:	0b1b      	lsrs	r3, r3, #12
 80012ba:	4d32      	ldr	r5, [pc, #200]	; (8001384 <__gedf2+0xe0>)
 80012bc:	030f      	lsls	r7, r1, #12
 80012be:	004a      	lsls	r2, r1, #1
 80012c0:	4699      	mov	r9, r3
 80012c2:	0043      	lsls	r3, r0, #1
 80012c4:	46a4      	mov	ip, r4
 80012c6:	46b0      	mov	r8, r6
 80012c8:	0b3f      	lsrs	r7, r7, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	0d5b      	lsrs	r3, r3, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	42aa      	cmp	r2, r5
 80012d4:	d029      	beq.n	800132a <__gedf2+0x86>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d018      	beq.n	800130c <__gedf2+0x68>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d12a      	bne.n	8001334 <__gedf2+0x90>
 80012de:	433c      	orrs	r4, r7
 80012e0:	46a3      	mov	fp, r4
 80012e2:	4265      	negs	r5, r4
 80012e4:	4165      	adcs	r5, r4
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <__gedf2+0x4c>
 80012ea:	464c      	mov	r4, r9
 80012ec:	4326      	orrs	r6, r4
 80012ee:	d027      	beq.n	8001340 <__gedf2+0x9c>
 80012f0:	2d00      	cmp	r5, #0
 80012f2:	d115      	bne.n	8001320 <__gedf2+0x7c>
 80012f4:	4281      	cmp	r1, r0
 80012f6:	d028      	beq.n	800134a <__gedf2+0xa6>
 80012f8:	2002      	movs	r0, #2
 80012fa:	3901      	subs	r1, #1
 80012fc:	4008      	ands	r0, r1
 80012fe:	3801      	subs	r0, #1
 8001300:	bcf0      	pop	{r4, r5, r6, r7}
 8001302:	46bb      	mov	fp, r7
 8001304:	46b2      	mov	sl, r6
 8001306:	46a9      	mov	r9, r5
 8001308:	46a0      	mov	r8, r4
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130c:	464d      	mov	r5, r9
 800130e:	432e      	orrs	r6, r5
 8001310:	d12f      	bne.n	8001372 <__gedf2+0xce>
 8001312:	2a00      	cmp	r2, #0
 8001314:	d1ee      	bne.n	80012f4 <__gedf2+0x50>
 8001316:	433c      	orrs	r4, r7
 8001318:	4265      	negs	r5, r4
 800131a:	4165      	adcs	r5, r4
 800131c:	2d00      	cmp	r5, #0
 800131e:	d0e9      	beq.n	80012f4 <__gedf2+0x50>
 8001320:	2800      	cmp	r0, #0
 8001322:	d1ed      	bne.n	8001300 <__gedf2+0x5c>
 8001324:	2001      	movs	r0, #1
 8001326:	4240      	negs	r0, r0
 8001328:	e7ea      	b.n	8001300 <__gedf2+0x5c>
 800132a:	003d      	movs	r5, r7
 800132c:	4325      	orrs	r5, r4
 800132e:	d120      	bne.n	8001372 <__gedf2+0xce>
 8001330:	4293      	cmp	r3, r2
 8001332:	d0eb      	beq.n	800130c <__gedf2+0x68>
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1dd      	bne.n	80012f4 <__gedf2+0x50>
 8001338:	464c      	mov	r4, r9
 800133a:	4326      	orrs	r6, r4
 800133c:	d1da      	bne.n	80012f4 <__gedf2+0x50>
 800133e:	e7db      	b.n	80012f8 <__gedf2+0x54>
 8001340:	465b      	mov	r3, fp
 8001342:	2000      	movs	r0, #0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0db      	beq.n	8001300 <__gedf2+0x5c>
 8001348:	e7d6      	b.n	80012f8 <__gedf2+0x54>
 800134a:	429a      	cmp	r2, r3
 800134c:	dc0a      	bgt.n	8001364 <__gedf2+0xc0>
 800134e:	dbe7      	blt.n	8001320 <__gedf2+0x7c>
 8001350:	454f      	cmp	r7, r9
 8001352:	d8d1      	bhi.n	80012f8 <__gedf2+0x54>
 8001354:	d010      	beq.n	8001378 <__gedf2+0xd4>
 8001356:	2000      	movs	r0, #0
 8001358:	454f      	cmp	r7, r9
 800135a:	d2d1      	bcs.n	8001300 <__gedf2+0x5c>
 800135c:	2900      	cmp	r1, #0
 800135e:	d0e1      	beq.n	8001324 <__gedf2+0x80>
 8001360:	0008      	movs	r0, r1
 8001362:	e7cd      	b.n	8001300 <__gedf2+0x5c>
 8001364:	4243      	negs	r3, r0
 8001366:	4158      	adcs	r0, r3
 8001368:	2302      	movs	r3, #2
 800136a:	4240      	negs	r0, r0
 800136c:	4018      	ands	r0, r3
 800136e:	3801      	subs	r0, #1
 8001370:	e7c6      	b.n	8001300 <__gedf2+0x5c>
 8001372:	2002      	movs	r0, #2
 8001374:	4240      	negs	r0, r0
 8001376:	e7c3      	b.n	8001300 <__gedf2+0x5c>
 8001378:	45c4      	cmp	ip, r8
 800137a:	d8bd      	bhi.n	80012f8 <__gedf2+0x54>
 800137c:	2000      	movs	r0, #0
 800137e:	45c4      	cmp	ip, r8
 8001380:	d2be      	bcs.n	8001300 <__gedf2+0x5c>
 8001382:	e7eb      	b.n	800135c <__gedf2+0xb8>
 8001384:	000007ff 	.word	0x000007ff

08001388 <__ledf2>:
 8001388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800138a:	464e      	mov	r6, r9
 800138c:	4645      	mov	r5, r8
 800138e:	4657      	mov	r7, sl
 8001390:	46de      	mov	lr, fp
 8001392:	0004      	movs	r4, r0
 8001394:	0018      	movs	r0, r3
 8001396:	b5e0      	push	{r5, r6, r7, lr}
 8001398:	0016      	movs	r6, r2
 800139a:	031b      	lsls	r3, r3, #12
 800139c:	0b1b      	lsrs	r3, r3, #12
 800139e:	4d31      	ldr	r5, [pc, #196]	; (8001464 <__ledf2+0xdc>)
 80013a0:	030f      	lsls	r7, r1, #12
 80013a2:	004a      	lsls	r2, r1, #1
 80013a4:	4699      	mov	r9, r3
 80013a6:	0043      	lsls	r3, r0, #1
 80013a8:	46a4      	mov	ip, r4
 80013aa:	46b0      	mov	r8, r6
 80013ac:	0b3f      	lsrs	r7, r7, #12
 80013ae:	0d52      	lsrs	r2, r2, #21
 80013b0:	0fc9      	lsrs	r1, r1, #31
 80013b2:	0d5b      	lsrs	r3, r3, #21
 80013b4:	0fc0      	lsrs	r0, r0, #31
 80013b6:	42aa      	cmp	r2, r5
 80013b8:	d011      	beq.n	80013de <__ledf2+0x56>
 80013ba:	42ab      	cmp	r3, r5
 80013bc:	d014      	beq.n	80013e8 <__ledf2+0x60>
 80013be:	2a00      	cmp	r2, #0
 80013c0:	d12f      	bne.n	8001422 <__ledf2+0x9a>
 80013c2:	433c      	orrs	r4, r7
 80013c4:	46a3      	mov	fp, r4
 80013c6:	4265      	negs	r5, r4
 80013c8:	4165      	adcs	r5, r4
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d114      	bne.n	80013f8 <__ledf2+0x70>
 80013ce:	464c      	mov	r4, r9
 80013d0:	4326      	orrs	r6, r4
 80013d2:	d111      	bne.n	80013f8 <__ledf2+0x70>
 80013d4:	465b      	mov	r3, fp
 80013d6:	2000      	movs	r0, #0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d017      	beq.n	800140c <__ledf2+0x84>
 80013dc:	e010      	b.n	8001400 <__ledf2+0x78>
 80013de:	003d      	movs	r5, r7
 80013e0:	4325      	orrs	r5, r4
 80013e2:	d112      	bne.n	800140a <__ledf2+0x82>
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d11c      	bne.n	8001422 <__ledf2+0x9a>
 80013e8:	464d      	mov	r5, r9
 80013ea:	432e      	orrs	r6, r5
 80013ec:	d10d      	bne.n	800140a <__ledf2+0x82>
 80013ee:	2a00      	cmp	r2, #0
 80013f0:	d104      	bne.n	80013fc <__ledf2+0x74>
 80013f2:	433c      	orrs	r4, r7
 80013f4:	4265      	negs	r5, r4
 80013f6:	4165      	adcs	r5, r4
 80013f8:	2d00      	cmp	r5, #0
 80013fa:	d10d      	bne.n	8001418 <__ledf2+0x90>
 80013fc:	4281      	cmp	r1, r0
 80013fe:	d016      	beq.n	800142e <__ledf2+0xa6>
 8001400:	2002      	movs	r0, #2
 8001402:	3901      	subs	r1, #1
 8001404:	4008      	ands	r0, r1
 8001406:	3801      	subs	r0, #1
 8001408:	e000      	b.n	800140c <__ledf2+0x84>
 800140a:	2002      	movs	r0, #2
 800140c:	bcf0      	pop	{r4, r5, r6, r7}
 800140e:	46bb      	mov	fp, r7
 8001410:	46b2      	mov	sl, r6
 8001412:	46a9      	mov	r9, r5
 8001414:	46a0      	mov	r8, r4
 8001416:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001418:	2800      	cmp	r0, #0
 800141a:	d1f7      	bne.n	800140c <__ledf2+0x84>
 800141c:	2001      	movs	r0, #1
 800141e:	4240      	negs	r0, r0
 8001420:	e7f4      	b.n	800140c <__ledf2+0x84>
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1ea      	bne.n	80013fc <__ledf2+0x74>
 8001426:	464c      	mov	r4, r9
 8001428:	4326      	orrs	r6, r4
 800142a:	d1e7      	bne.n	80013fc <__ledf2+0x74>
 800142c:	e7e8      	b.n	8001400 <__ledf2+0x78>
 800142e:	429a      	cmp	r2, r3
 8001430:	dd06      	ble.n	8001440 <__ledf2+0xb8>
 8001432:	4243      	negs	r3, r0
 8001434:	4158      	adcs	r0, r3
 8001436:	2302      	movs	r3, #2
 8001438:	4240      	negs	r0, r0
 800143a:	4018      	ands	r0, r3
 800143c:	3801      	subs	r0, #1
 800143e:	e7e5      	b.n	800140c <__ledf2+0x84>
 8001440:	429a      	cmp	r2, r3
 8001442:	dbe9      	blt.n	8001418 <__ledf2+0x90>
 8001444:	454f      	cmp	r7, r9
 8001446:	d8db      	bhi.n	8001400 <__ledf2+0x78>
 8001448:	d006      	beq.n	8001458 <__ledf2+0xd0>
 800144a:	2000      	movs	r0, #0
 800144c:	454f      	cmp	r7, r9
 800144e:	d2dd      	bcs.n	800140c <__ledf2+0x84>
 8001450:	2900      	cmp	r1, #0
 8001452:	d0e3      	beq.n	800141c <__ledf2+0x94>
 8001454:	0008      	movs	r0, r1
 8001456:	e7d9      	b.n	800140c <__ledf2+0x84>
 8001458:	45c4      	cmp	ip, r8
 800145a:	d8d1      	bhi.n	8001400 <__ledf2+0x78>
 800145c:	2000      	movs	r0, #0
 800145e:	45c4      	cmp	ip, r8
 8001460:	d2d4      	bcs.n	800140c <__ledf2+0x84>
 8001462:	e7f5      	b.n	8001450 <__ledf2+0xc8>
 8001464:	000007ff 	.word	0x000007ff

08001468 <__aeabi_dmul>:
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800146a:	4657      	mov	r7, sl
 800146c:	464e      	mov	r6, r9
 800146e:	4645      	mov	r5, r8
 8001470:	46de      	mov	lr, fp
 8001472:	b5e0      	push	{r5, r6, r7, lr}
 8001474:	4698      	mov	r8, r3
 8001476:	030c      	lsls	r4, r1, #12
 8001478:	004b      	lsls	r3, r1, #1
 800147a:	0006      	movs	r6, r0
 800147c:	4692      	mov	sl, r2
 800147e:	b087      	sub	sp, #28
 8001480:	0b24      	lsrs	r4, r4, #12
 8001482:	0d5b      	lsrs	r3, r3, #21
 8001484:	0fcf      	lsrs	r7, r1, #31
 8001486:	2b00      	cmp	r3, #0
 8001488:	d06c      	beq.n	8001564 <__aeabi_dmul+0xfc>
 800148a:	4add      	ldr	r2, [pc, #884]	; (8001800 <__aeabi_dmul+0x398>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d100      	bne.n	8001492 <__aeabi_dmul+0x2a>
 8001490:	e086      	b.n	80015a0 <__aeabi_dmul+0x138>
 8001492:	0f42      	lsrs	r2, r0, #29
 8001494:	00e4      	lsls	r4, r4, #3
 8001496:	4314      	orrs	r4, r2
 8001498:	2280      	movs	r2, #128	; 0x80
 800149a:	0412      	lsls	r2, r2, #16
 800149c:	4314      	orrs	r4, r2
 800149e:	4ad9      	ldr	r2, [pc, #868]	; (8001804 <__aeabi_dmul+0x39c>)
 80014a0:	00c5      	lsls	r5, r0, #3
 80014a2:	4694      	mov	ip, r2
 80014a4:	4463      	add	r3, ip
 80014a6:	9300      	str	r3, [sp, #0]
 80014a8:	2300      	movs	r3, #0
 80014aa:	4699      	mov	r9, r3
 80014ac:	469b      	mov	fp, r3
 80014ae:	4643      	mov	r3, r8
 80014b0:	4642      	mov	r2, r8
 80014b2:	031e      	lsls	r6, r3, #12
 80014b4:	0fd2      	lsrs	r2, r2, #31
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	4650      	mov	r0, sl
 80014ba:	4690      	mov	r8, r2
 80014bc:	0b36      	lsrs	r6, r6, #12
 80014be:	0d5b      	lsrs	r3, r3, #21
 80014c0:	d100      	bne.n	80014c4 <__aeabi_dmul+0x5c>
 80014c2:	e078      	b.n	80015b6 <__aeabi_dmul+0x14e>
 80014c4:	4ace      	ldr	r2, [pc, #824]	; (8001800 <__aeabi_dmul+0x398>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d01d      	beq.n	8001506 <__aeabi_dmul+0x9e>
 80014ca:	49ce      	ldr	r1, [pc, #824]	; (8001804 <__aeabi_dmul+0x39c>)
 80014cc:	0f42      	lsrs	r2, r0, #29
 80014ce:	468c      	mov	ip, r1
 80014d0:	9900      	ldr	r1, [sp, #0]
 80014d2:	4463      	add	r3, ip
 80014d4:	00f6      	lsls	r6, r6, #3
 80014d6:	468c      	mov	ip, r1
 80014d8:	4316      	orrs	r6, r2
 80014da:	2280      	movs	r2, #128	; 0x80
 80014dc:	449c      	add	ip, r3
 80014de:	0412      	lsls	r2, r2, #16
 80014e0:	4663      	mov	r3, ip
 80014e2:	4316      	orrs	r6, r2
 80014e4:	00c2      	lsls	r2, r0, #3
 80014e6:	2000      	movs	r0, #0
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	9900      	ldr	r1, [sp, #0]
 80014ec:	4643      	mov	r3, r8
 80014ee:	3101      	adds	r1, #1
 80014f0:	468c      	mov	ip, r1
 80014f2:	4649      	mov	r1, r9
 80014f4:	407b      	eors	r3, r7
 80014f6:	9301      	str	r3, [sp, #4]
 80014f8:	290f      	cmp	r1, #15
 80014fa:	d900      	bls.n	80014fe <__aeabi_dmul+0x96>
 80014fc:	e07e      	b.n	80015fc <__aeabi_dmul+0x194>
 80014fe:	4bc2      	ldr	r3, [pc, #776]	; (8001808 <__aeabi_dmul+0x3a0>)
 8001500:	0089      	lsls	r1, r1, #2
 8001502:	5859      	ldr	r1, [r3, r1]
 8001504:	468f      	mov	pc, r1
 8001506:	4652      	mov	r2, sl
 8001508:	9b00      	ldr	r3, [sp, #0]
 800150a:	4332      	orrs	r2, r6
 800150c:	d000      	beq.n	8001510 <__aeabi_dmul+0xa8>
 800150e:	e156      	b.n	80017be <__aeabi_dmul+0x356>
 8001510:	49bb      	ldr	r1, [pc, #748]	; (8001800 <__aeabi_dmul+0x398>)
 8001512:	2600      	movs	r6, #0
 8001514:	468c      	mov	ip, r1
 8001516:	4463      	add	r3, ip
 8001518:	4649      	mov	r1, r9
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2302      	movs	r3, #2
 800151e:	4319      	orrs	r1, r3
 8001520:	4689      	mov	r9, r1
 8001522:	2002      	movs	r0, #2
 8001524:	e7e1      	b.n	80014ea <__aeabi_dmul+0x82>
 8001526:	4643      	mov	r3, r8
 8001528:	9301      	str	r3, [sp, #4]
 800152a:	0034      	movs	r4, r6
 800152c:	0015      	movs	r5, r2
 800152e:	4683      	mov	fp, r0
 8001530:	465b      	mov	r3, fp
 8001532:	2b02      	cmp	r3, #2
 8001534:	d05e      	beq.n	80015f4 <__aeabi_dmul+0x18c>
 8001536:	2b03      	cmp	r3, #3
 8001538:	d100      	bne.n	800153c <__aeabi_dmul+0xd4>
 800153a:	e1f3      	b.n	8001924 <__aeabi_dmul+0x4bc>
 800153c:	2b01      	cmp	r3, #1
 800153e:	d000      	beq.n	8001542 <__aeabi_dmul+0xda>
 8001540:	e118      	b.n	8001774 <__aeabi_dmul+0x30c>
 8001542:	2200      	movs	r2, #0
 8001544:	2400      	movs	r4, #0
 8001546:	2500      	movs	r5, #0
 8001548:	9b01      	ldr	r3, [sp, #4]
 800154a:	0512      	lsls	r2, r2, #20
 800154c:	4322      	orrs	r2, r4
 800154e:	07db      	lsls	r3, r3, #31
 8001550:	431a      	orrs	r2, r3
 8001552:	0028      	movs	r0, r5
 8001554:	0011      	movs	r1, r2
 8001556:	b007      	add	sp, #28
 8001558:	bcf0      	pop	{r4, r5, r6, r7}
 800155a:	46bb      	mov	fp, r7
 800155c:	46b2      	mov	sl, r6
 800155e:	46a9      	mov	r9, r5
 8001560:	46a0      	mov	r8, r4
 8001562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001564:	0025      	movs	r5, r4
 8001566:	4305      	orrs	r5, r0
 8001568:	d100      	bne.n	800156c <__aeabi_dmul+0x104>
 800156a:	e141      	b.n	80017f0 <__aeabi_dmul+0x388>
 800156c:	2c00      	cmp	r4, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_dmul+0x10a>
 8001570:	e1ad      	b.n	80018ce <__aeabi_dmul+0x466>
 8001572:	0020      	movs	r0, r4
 8001574:	f000 fe20 	bl	80021b8 <__clzsi2>
 8001578:	0001      	movs	r1, r0
 800157a:	0002      	movs	r2, r0
 800157c:	390b      	subs	r1, #11
 800157e:	231d      	movs	r3, #29
 8001580:	0010      	movs	r0, r2
 8001582:	1a5b      	subs	r3, r3, r1
 8001584:	0031      	movs	r1, r6
 8001586:	0035      	movs	r5, r6
 8001588:	3808      	subs	r0, #8
 800158a:	4084      	lsls	r4, r0
 800158c:	40d9      	lsrs	r1, r3
 800158e:	4085      	lsls	r5, r0
 8001590:	430c      	orrs	r4, r1
 8001592:	489e      	ldr	r0, [pc, #632]	; (800180c <__aeabi_dmul+0x3a4>)
 8001594:	1a83      	subs	r3, r0, r2
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	2300      	movs	r3, #0
 800159a:	4699      	mov	r9, r3
 800159c:	469b      	mov	fp, r3
 800159e:	e786      	b.n	80014ae <__aeabi_dmul+0x46>
 80015a0:	0005      	movs	r5, r0
 80015a2:	4325      	orrs	r5, r4
 80015a4:	d000      	beq.n	80015a8 <__aeabi_dmul+0x140>
 80015a6:	e11c      	b.n	80017e2 <__aeabi_dmul+0x37a>
 80015a8:	2208      	movs	r2, #8
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2302      	movs	r3, #2
 80015ae:	2400      	movs	r4, #0
 80015b0:	4691      	mov	r9, r2
 80015b2:	469b      	mov	fp, r3
 80015b4:	e77b      	b.n	80014ae <__aeabi_dmul+0x46>
 80015b6:	4652      	mov	r2, sl
 80015b8:	4332      	orrs	r2, r6
 80015ba:	d100      	bne.n	80015be <__aeabi_dmul+0x156>
 80015bc:	e10a      	b.n	80017d4 <__aeabi_dmul+0x36c>
 80015be:	2e00      	cmp	r6, #0
 80015c0:	d100      	bne.n	80015c4 <__aeabi_dmul+0x15c>
 80015c2:	e176      	b.n	80018b2 <__aeabi_dmul+0x44a>
 80015c4:	0030      	movs	r0, r6
 80015c6:	f000 fdf7 	bl	80021b8 <__clzsi2>
 80015ca:	0002      	movs	r2, r0
 80015cc:	3a0b      	subs	r2, #11
 80015ce:	231d      	movs	r3, #29
 80015d0:	0001      	movs	r1, r0
 80015d2:	1a9b      	subs	r3, r3, r2
 80015d4:	4652      	mov	r2, sl
 80015d6:	3908      	subs	r1, #8
 80015d8:	40da      	lsrs	r2, r3
 80015da:	408e      	lsls	r6, r1
 80015dc:	4316      	orrs	r6, r2
 80015de:	4652      	mov	r2, sl
 80015e0:	408a      	lsls	r2, r1
 80015e2:	9b00      	ldr	r3, [sp, #0]
 80015e4:	4989      	ldr	r1, [pc, #548]	; (800180c <__aeabi_dmul+0x3a4>)
 80015e6:	1a18      	subs	r0, r3, r0
 80015e8:	0003      	movs	r3, r0
 80015ea:	468c      	mov	ip, r1
 80015ec:	4463      	add	r3, ip
 80015ee:	2000      	movs	r0, #0
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	e77a      	b.n	80014ea <__aeabi_dmul+0x82>
 80015f4:	2400      	movs	r4, #0
 80015f6:	2500      	movs	r5, #0
 80015f8:	4a81      	ldr	r2, [pc, #516]	; (8001800 <__aeabi_dmul+0x398>)
 80015fa:	e7a5      	b.n	8001548 <__aeabi_dmul+0xe0>
 80015fc:	0c2f      	lsrs	r7, r5, #16
 80015fe:	042d      	lsls	r5, r5, #16
 8001600:	0c2d      	lsrs	r5, r5, #16
 8001602:	002b      	movs	r3, r5
 8001604:	0c11      	lsrs	r1, r2, #16
 8001606:	0412      	lsls	r2, r2, #16
 8001608:	0c12      	lsrs	r2, r2, #16
 800160a:	4353      	muls	r3, r2
 800160c:	4698      	mov	r8, r3
 800160e:	0013      	movs	r3, r2
 8001610:	0028      	movs	r0, r5
 8001612:	437b      	muls	r3, r7
 8001614:	4699      	mov	r9, r3
 8001616:	4348      	muls	r0, r1
 8001618:	4448      	add	r0, r9
 800161a:	4683      	mov	fp, r0
 800161c:	4640      	mov	r0, r8
 800161e:	000b      	movs	r3, r1
 8001620:	0c00      	lsrs	r0, r0, #16
 8001622:	4682      	mov	sl, r0
 8001624:	4658      	mov	r0, fp
 8001626:	437b      	muls	r3, r7
 8001628:	4450      	add	r0, sl
 800162a:	9302      	str	r3, [sp, #8]
 800162c:	4581      	cmp	r9, r0
 800162e:	d906      	bls.n	800163e <__aeabi_dmul+0x1d6>
 8001630:	469a      	mov	sl, r3
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	025b      	lsls	r3, r3, #9
 8001636:	4699      	mov	r9, r3
 8001638:	44ca      	add	sl, r9
 800163a:	4653      	mov	r3, sl
 800163c:	9302      	str	r3, [sp, #8]
 800163e:	0c03      	lsrs	r3, r0, #16
 8001640:	469b      	mov	fp, r3
 8001642:	4643      	mov	r3, r8
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	0400      	lsls	r0, r0, #16
 8001648:	0c1b      	lsrs	r3, r3, #16
 800164a:	4698      	mov	r8, r3
 800164c:	0003      	movs	r3, r0
 800164e:	4443      	add	r3, r8
 8001650:	9304      	str	r3, [sp, #16]
 8001652:	0c33      	lsrs	r3, r6, #16
 8001654:	4699      	mov	r9, r3
 8001656:	002b      	movs	r3, r5
 8001658:	0436      	lsls	r6, r6, #16
 800165a:	0c36      	lsrs	r6, r6, #16
 800165c:	4373      	muls	r3, r6
 800165e:	4698      	mov	r8, r3
 8001660:	0033      	movs	r3, r6
 8001662:	437b      	muls	r3, r7
 8001664:	469a      	mov	sl, r3
 8001666:	464b      	mov	r3, r9
 8001668:	435d      	muls	r5, r3
 800166a:	435f      	muls	r7, r3
 800166c:	4643      	mov	r3, r8
 800166e:	4455      	add	r5, sl
 8001670:	0c18      	lsrs	r0, r3, #16
 8001672:	1940      	adds	r0, r0, r5
 8001674:	4582      	cmp	sl, r0
 8001676:	d903      	bls.n	8001680 <__aeabi_dmul+0x218>
 8001678:	2380      	movs	r3, #128	; 0x80
 800167a:	025b      	lsls	r3, r3, #9
 800167c:	469a      	mov	sl, r3
 800167e:	4457      	add	r7, sl
 8001680:	0c05      	lsrs	r5, r0, #16
 8001682:	19eb      	adds	r3, r5, r7
 8001684:	9305      	str	r3, [sp, #20]
 8001686:	4643      	mov	r3, r8
 8001688:	041d      	lsls	r5, r3, #16
 800168a:	0c2d      	lsrs	r5, r5, #16
 800168c:	0400      	lsls	r0, r0, #16
 800168e:	1940      	adds	r0, r0, r5
 8001690:	0c25      	lsrs	r5, r4, #16
 8001692:	0424      	lsls	r4, r4, #16
 8001694:	0c24      	lsrs	r4, r4, #16
 8001696:	0027      	movs	r7, r4
 8001698:	4357      	muls	r7, r2
 800169a:	436a      	muls	r2, r5
 800169c:	4690      	mov	r8, r2
 800169e:	002a      	movs	r2, r5
 80016a0:	0c3b      	lsrs	r3, r7, #16
 80016a2:	469a      	mov	sl, r3
 80016a4:	434a      	muls	r2, r1
 80016a6:	4361      	muls	r1, r4
 80016a8:	4441      	add	r1, r8
 80016aa:	4451      	add	r1, sl
 80016ac:	4483      	add	fp, r0
 80016ae:	4588      	cmp	r8, r1
 80016b0:	d903      	bls.n	80016ba <__aeabi_dmul+0x252>
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	025b      	lsls	r3, r3, #9
 80016b6:	4698      	mov	r8, r3
 80016b8:	4442      	add	r2, r8
 80016ba:	043f      	lsls	r7, r7, #16
 80016bc:	0c0b      	lsrs	r3, r1, #16
 80016be:	0c3f      	lsrs	r7, r7, #16
 80016c0:	0409      	lsls	r1, r1, #16
 80016c2:	19c9      	adds	r1, r1, r7
 80016c4:	0027      	movs	r7, r4
 80016c6:	4698      	mov	r8, r3
 80016c8:	464b      	mov	r3, r9
 80016ca:	4377      	muls	r7, r6
 80016cc:	435c      	muls	r4, r3
 80016ce:	436e      	muls	r6, r5
 80016d0:	435d      	muls	r5, r3
 80016d2:	0c3b      	lsrs	r3, r7, #16
 80016d4:	4699      	mov	r9, r3
 80016d6:	19a4      	adds	r4, r4, r6
 80016d8:	444c      	add	r4, r9
 80016da:	4442      	add	r2, r8
 80016dc:	9503      	str	r5, [sp, #12]
 80016de:	42a6      	cmp	r6, r4
 80016e0:	d904      	bls.n	80016ec <__aeabi_dmul+0x284>
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	025b      	lsls	r3, r3, #9
 80016e6:	4698      	mov	r8, r3
 80016e8:	4445      	add	r5, r8
 80016ea:	9503      	str	r5, [sp, #12]
 80016ec:	9b02      	ldr	r3, [sp, #8]
 80016ee:	043f      	lsls	r7, r7, #16
 80016f0:	445b      	add	r3, fp
 80016f2:	001e      	movs	r6, r3
 80016f4:	4283      	cmp	r3, r0
 80016f6:	4180      	sbcs	r0, r0
 80016f8:	0423      	lsls	r3, r4, #16
 80016fa:	4698      	mov	r8, r3
 80016fc:	9b05      	ldr	r3, [sp, #20]
 80016fe:	0c3f      	lsrs	r7, r7, #16
 8001700:	4447      	add	r7, r8
 8001702:	4698      	mov	r8, r3
 8001704:	1876      	adds	r6, r6, r1
 8001706:	428e      	cmp	r6, r1
 8001708:	4189      	sbcs	r1, r1
 800170a:	4447      	add	r7, r8
 800170c:	4240      	negs	r0, r0
 800170e:	183d      	adds	r5, r7, r0
 8001710:	46a8      	mov	r8, r5
 8001712:	4693      	mov	fp, r2
 8001714:	4249      	negs	r1, r1
 8001716:	468a      	mov	sl, r1
 8001718:	44c3      	add	fp, r8
 800171a:	429f      	cmp	r7, r3
 800171c:	41bf      	sbcs	r7, r7
 800171e:	4580      	cmp	r8, r0
 8001720:	4180      	sbcs	r0, r0
 8001722:	9b03      	ldr	r3, [sp, #12]
 8001724:	44da      	add	sl, fp
 8001726:	4698      	mov	r8, r3
 8001728:	4653      	mov	r3, sl
 800172a:	4240      	negs	r0, r0
 800172c:	427f      	negs	r7, r7
 800172e:	4307      	orrs	r7, r0
 8001730:	0c24      	lsrs	r4, r4, #16
 8001732:	4593      	cmp	fp, r2
 8001734:	4192      	sbcs	r2, r2
 8001736:	458a      	cmp	sl, r1
 8001738:	4189      	sbcs	r1, r1
 800173a:	193f      	adds	r7, r7, r4
 800173c:	0ddc      	lsrs	r4, r3, #23
 800173e:	9b04      	ldr	r3, [sp, #16]
 8001740:	0275      	lsls	r5, r6, #9
 8001742:	431d      	orrs	r5, r3
 8001744:	1e68      	subs	r0, r5, #1
 8001746:	4185      	sbcs	r5, r0
 8001748:	4653      	mov	r3, sl
 800174a:	4252      	negs	r2, r2
 800174c:	4249      	negs	r1, r1
 800174e:	430a      	orrs	r2, r1
 8001750:	18bf      	adds	r7, r7, r2
 8001752:	4447      	add	r7, r8
 8001754:	0df6      	lsrs	r6, r6, #23
 8001756:	027f      	lsls	r7, r7, #9
 8001758:	4335      	orrs	r5, r6
 800175a:	025a      	lsls	r2, r3, #9
 800175c:	433c      	orrs	r4, r7
 800175e:	4315      	orrs	r5, r2
 8001760:	01fb      	lsls	r3, r7, #7
 8001762:	d400      	bmi.n	8001766 <__aeabi_dmul+0x2fe>
 8001764:	e0c1      	b.n	80018ea <__aeabi_dmul+0x482>
 8001766:	2101      	movs	r1, #1
 8001768:	086a      	lsrs	r2, r5, #1
 800176a:	400d      	ands	r5, r1
 800176c:	4315      	orrs	r5, r2
 800176e:	07e2      	lsls	r2, r4, #31
 8001770:	4315      	orrs	r5, r2
 8001772:	0864      	lsrs	r4, r4, #1
 8001774:	4926      	ldr	r1, [pc, #152]	; (8001810 <__aeabi_dmul+0x3a8>)
 8001776:	4461      	add	r1, ip
 8001778:	2900      	cmp	r1, #0
 800177a:	dd56      	ble.n	800182a <__aeabi_dmul+0x3c2>
 800177c:	076b      	lsls	r3, r5, #29
 800177e:	d009      	beq.n	8001794 <__aeabi_dmul+0x32c>
 8001780:	220f      	movs	r2, #15
 8001782:	402a      	ands	r2, r5
 8001784:	2a04      	cmp	r2, #4
 8001786:	d005      	beq.n	8001794 <__aeabi_dmul+0x32c>
 8001788:	1d2a      	adds	r2, r5, #4
 800178a:	42aa      	cmp	r2, r5
 800178c:	41ad      	sbcs	r5, r5
 800178e:	426d      	negs	r5, r5
 8001790:	1964      	adds	r4, r4, r5
 8001792:	0015      	movs	r5, r2
 8001794:	01e3      	lsls	r3, r4, #7
 8001796:	d504      	bpl.n	80017a2 <__aeabi_dmul+0x33a>
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	4a1e      	ldr	r2, [pc, #120]	; (8001814 <__aeabi_dmul+0x3ac>)
 800179c:	00c9      	lsls	r1, r1, #3
 800179e:	4014      	ands	r4, r2
 80017a0:	4461      	add	r1, ip
 80017a2:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <__aeabi_dmul+0x3b0>)
 80017a4:	4291      	cmp	r1, r2
 80017a6:	dd00      	ble.n	80017aa <__aeabi_dmul+0x342>
 80017a8:	e724      	b.n	80015f4 <__aeabi_dmul+0x18c>
 80017aa:	0762      	lsls	r2, r4, #29
 80017ac:	08ed      	lsrs	r5, r5, #3
 80017ae:	0264      	lsls	r4, r4, #9
 80017b0:	0549      	lsls	r1, r1, #21
 80017b2:	4315      	orrs	r5, r2
 80017b4:	0b24      	lsrs	r4, r4, #12
 80017b6:	0d4a      	lsrs	r2, r1, #21
 80017b8:	e6c6      	b.n	8001548 <__aeabi_dmul+0xe0>
 80017ba:	9701      	str	r7, [sp, #4]
 80017bc:	e6b8      	b.n	8001530 <__aeabi_dmul+0xc8>
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <__aeabi_dmul+0x398>)
 80017c0:	2003      	movs	r0, #3
 80017c2:	4694      	mov	ip, r2
 80017c4:	4463      	add	r3, ip
 80017c6:	464a      	mov	r2, r9
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2303      	movs	r3, #3
 80017cc:	431a      	orrs	r2, r3
 80017ce:	4691      	mov	r9, r2
 80017d0:	4652      	mov	r2, sl
 80017d2:	e68a      	b.n	80014ea <__aeabi_dmul+0x82>
 80017d4:	4649      	mov	r1, r9
 80017d6:	2301      	movs	r3, #1
 80017d8:	4319      	orrs	r1, r3
 80017da:	4689      	mov	r9, r1
 80017dc:	2600      	movs	r6, #0
 80017de:	2001      	movs	r0, #1
 80017e0:	e683      	b.n	80014ea <__aeabi_dmul+0x82>
 80017e2:	220c      	movs	r2, #12
 80017e4:	9300      	str	r3, [sp, #0]
 80017e6:	2303      	movs	r3, #3
 80017e8:	0005      	movs	r5, r0
 80017ea:	4691      	mov	r9, r2
 80017ec:	469b      	mov	fp, r3
 80017ee:	e65e      	b.n	80014ae <__aeabi_dmul+0x46>
 80017f0:	2304      	movs	r3, #4
 80017f2:	4699      	mov	r9, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	2400      	movs	r4, #0
 80017fc:	469b      	mov	fp, r3
 80017fe:	e656      	b.n	80014ae <__aeabi_dmul+0x46>
 8001800:	000007ff 	.word	0x000007ff
 8001804:	fffffc01 	.word	0xfffffc01
 8001808:	08010bec 	.word	0x08010bec
 800180c:	fffffc0d 	.word	0xfffffc0d
 8001810:	000003ff 	.word	0x000003ff
 8001814:	feffffff 	.word	0xfeffffff
 8001818:	000007fe 	.word	0x000007fe
 800181c:	2300      	movs	r3, #0
 800181e:	2480      	movs	r4, #128	; 0x80
 8001820:	2500      	movs	r5, #0
 8001822:	4a44      	ldr	r2, [pc, #272]	; (8001934 <__aeabi_dmul+0x4cc>)
 8001824:	9301      	str	r3, [sp, #4]
 8001826:	0324      	lsls	r4, r4, #12
 8001828:	e68e      	b.n	8001548 <__aeabi_dmul+0xe0>
 800182a:	2001      	movs	r0, #1
 800182c:	1a40      	subs	r0, r0, r1
 800182e:	2838      	cmp	r0, #56	; 0x38
 8001830:	dd00      	ble.n	8001834 <__aeabi_dmul+0x3cc>
 8001832:	e686      	b.n	8001542 <__aeabi_dmul+0xda>
 8001834:	281f      	cmp	r0, #31
 8001836:	dd5b      	ble.n	80018f0 <__aeabi_dmul+0x488>
 8001838:	221f      	movs	r2, #31
 800183a:	0023      	movs	r3, r4
 800183c:	4252      	negs	r2, r2
 800183e:	1a51      	subs	r1, r2, r1
 8001840:	40cb      	lsrs	r3, r1
 8001842:	0019      	movs	r1, r3
 8001844:	2820      	cmp	r0, #32
 8001846:	d003      	beq.n	8001850 <__aeabi_dmul+0x3e8>
 8001848:	4a3b      	ldr	r2, [pc, #236]	; (8001938 <__aeabi_dmul+0x4d0>)
 800184a:	4462      	add	r2, ip
 800184c:	4094      	lsls	r4, r2
 800184e:	4325      	orrs	r5, r4
 8001850:	1e6a      	subs	r2, r5, #1
 8001852:	4195      	sbcs	r5, r2
 8001854:	002a      	movs	r2, r5
 8001856:	430a      	orrs	r2, r1
 8001858:	2107      	movs	r1, #7
 800185a:	000d      	movs	r5, r1
 800185c:	2400      	movs	r4, #0
 800185e:	4015      	ands	r5, r2
 8001860:	4211      	tst	r1, r2
 8001862:	d05b      	beq.n	800191c <__aeabi_dmul+0x4b4>
 8001864:	210f      	movs	r1, #15
 8001866:	2400      	movs	r4, #0
 8001868:	4011      	ands	r1, r2
 800186a:	2904      	cmp	r1, #4
 800186c:	d053      	beq.n	8001916 <__aeabi_dmul+0x4ae>
 800186e:	1d11      	adds	r1, r2, #4
 8001870:	4291      	cmp	r1, r2
 8001872:	4192      	sbcs	r2, r2
 8001874:	4252      	negs	r2, r2
 8001876:	18a4      	adds	r4, r4, r2
 8001878:	000a      	movs	r2, r1
 800187a:	0223      	lsls	r3, r4, #8
 800187c:	d54b      	bpl.n	8001916 <__aeabi_dmul+0x4ae>
 800187e:	2201      	movs	r2, #1
 8001880:	2400      	movs	r4, #0
 8001882:	2500      	movs	r5, #0
 8001884:	e660      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001886:	2380      	movs	r3, #128	; 0x80
 8001888:	031b      	lsls	r3, r3, #12
 800188a:	421c      	tst	r4, r3
 800188c:	d009      	beq.n	80018a2 <__aeabi_dmul+0x43a>
 800188e:	421e      	tst	r6, r3
 8001890:	d107      	bne.n	80018a2 <__aeabi_dmul+0x43a>
 8001892:	4333      	orrs	r3, r6
 8001894:	031c      	lsls	r4, r3, #12
 8001896:	4643      	mov	r3, r8
 8001898:	0015      	movs	r5, r2
 800189a:	0b24      	lsrs	r4, r4, #12
 800189c:	4a25      	ldr	r2, [pc, #148]	; (8001934 <__aeabi_dmul+0x4cc>)
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	e652      	b.n	8001548 <__aeabi_dmul+0xe0>
 80018a2:	2280      	movs	r2, #128	; 0x80
 80018a4:	0312      	lsls	r2, r2, #12
 80018a6:	4314      	orrs	r4, r2
 80018a8:	0324      	lsls	r4, r4, #12
 80018aa:	4a22      	ldr	r2, [pc, #136]	; (8001934 <__aeabi_dmul+0x4cc>)
 80018ac:	0b24      	lsrs	r4, r4, #12
 80018ae:	9701      	str	r7, [sp, #4]
 80018b0:	e64a      	b.n	8001548 <__aeabi_dmul+0xe0>
 80018b2:	f000 fc81 	bl	80021b8 <__clzsi2>
 80018b6:	0003      	movs	r3, r0
 80018b8:	001a      	movs	r2, r3
 80018ba:	3215      	adds	r2, #21
 80018bc:	3020      	adds	r0, #32
 80018be:	2a1c      	cmp	r2, #28
 80018c0:	dc00      	bgt.n	80018c4 <__aeabi_dmul+0x45c>
 80018c2:	e684      	b.n	80015ce <__aeabi_dmul+0x166>
 80018c4:	4656      	mov	r6, sl
 80018c6:	3b08      	subs	r3, #8
 80018c8:	2200      	movs	r2, #0
 80018ca:	409e      	lsls	r6, r3
 80018cc:	e689      	b.n	80015e2 <__aeabi_dmul+0x17a>
 80018ce:	f000 fc73 	bl	80021b8 <__clzsi2>
 80018d2:	0001      	movs	r1, r0
 80018d4:	0002      	movs	r2, r0
 80018d6:	3115      	adds	r1, #21
 80018d8:	3220      	adds	r2, #32
 80018da:	291c      	cmp	r1, #28
 80018dc:	dc00      	bgt.n	80018e0 <__aeabi_dmul+0x478>
 80018de:	e64e      	b.n	800157e <__aeabi_dmul+0x116>
 80018e0:	0034      	movs	r4, r6
 80018e2:	3808      	subs	r0, #8
 80018e4:	2500      	movs	r5, #0
 80018e6:	4084      	lsls	r4, r0
 80018e8:	e653      	b.n	8001592 <__aeabi_dmul+0x12a>
 80018ea:	9b00      	ldr	r3, [sp, #0]
 80018ec:	469c      	mov	ip, r3
 80018ee:	e741      	b.n	8001774 <__aeabi_dmul+0x30c>
 80018f0:	4912      	ldr	r1, [pc, #72]	; (800193c <__aeabi_dmul+0x4d4>)
 80018f2:	0022      	movs	r2, r4
 80018f4:	4461      	add	r1, ip
 80018f6:	002e      	movs	r6, r5
 80018f8:	408d      	lsls	r5, r1
 80018fa:	408a      	lsls	r2, r1
 80018fc:	40c6      	lsrs	r6, r0
 80018fe:	1e69      	subs	r1, r5, #1
 8001900:	418d      	sbcs	r5, r1
 8001902:	4332      	orrs	r2, r6
 8001904:	432a      	orrs	r2, r5
 8001906:	40c4      	lsrs	r4, r0
 8001908:	0753      	lsls	r3, r2, #29
 800190a:	d0b6      	beq.n	800187a <__aeabi_dmul+0x412>
 800190c:	210f      	movs	r1, #15
 800190e:	4011      	ands	r1, r2
 8001910:	2904      	cmp	r1, #4
 8001912:	d1ac      	bne.n	800186e <__aeabi_dmul+0x406>
 8001914:	e7b1      	b.n	800187a <__aeabi_dmul+0x412>
 8001916:	0765      	lsls	r5, r4, #29
 8001918:	0264      	lsls	r4, r4, #9
 800191a:	0b24      	lsrs	r4, r4, #12
 800191c:	08d2      	lsrs	r2, r2, #3
 800191e:	4315      	orrs	r5, r2
 8001920:	2200      	movs	r2, #0
 8001922:	e611      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001924:	2280      	movs	r2, #128	; 0x80
 8001926:	0312      	lsls	r2, r2, #12
 8001928:	4314      	orrs	r4, r2
 800192a:	0324      	lsls	r4, r4, #12
 800192c:	4a01      	ldr	r2, [pc, #4]	; (8001934 <__aeabi_dmul+0x4cc>)
 800192e:	0b24      	lsrs	r4, r4, #12
 8001930:	e60a      	b.n	8001548 <__aeabi_dmul+0xe0>
 8001932:	46c0      	nop			; (mov r8, r8)
 8001934:	000007ff 	.word	0x000007ff
 8001938:	0000043e 	.word	0x0000043e
 800193c:	0000041e 	.word	0x0000041e

08001940 <__aeabi_dsub>:
 8001940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001942:	4657      	mov	r7, sl
 8001944:	464e      	mov	r6, r9
 8001946:	4645      	mov	r5, r8
 8001948:	46de      	mov	lr, fp
 800194a:	0004      	movs	r4, r0
 800194c:	b5e0      	push	{r5, r6, r7, lr}
 800194e:	001f      	movs	r7, r3
 8001950:	0010      	movs	r0, r2
 8001952:	030b      	lsls	r3, r1, #12
 8001954:	0f62      	lsrs	r2, r4, #29
 8001956:	004e      	lsls	r6, r1, #1
 8001958:	0fcd      	lsrs	r5, r1, #31
 800195a:	0a5b      	lsrs	r3, r3, #9
 800195c:	0339      	lsls	r1, r7, #12
 800195e:	4313      	orrs	r3, r2
 8001960:	0a49      	lsrs	r1, r1, #9
 8001962:	00e2      	lsls	r2, r4, #3
 8001964:	0f44      	lsrs	r4, r0, #29
 8001966:	4321      	orrs	r1, r4
 8001968:	4cc2      	ldr	r4, [pc, #776]	; (8001c74 <__aeabi_dsub+0x334>)
 800196a:	4691      	mov	r9, r2
 800196c:	4692      	mov	sl, r2
 800196e:	00c0      	lsls	r0, r0, #3
 8001970:	007a      	lsls	r2, r7, #1
 8001972:	4680      	mov	r8, r0
 8001974:	0d76      	lsrs	r6, r6, #21
 8001976:	0d52      	lsrs	r2, r2, #21
 8001978:	0fff      	lsrs	r7, r7, #31
 800197a:	42a2      	cmp	r2, r4
 800197c:	d100      	bne.n	8001980 <__aeabi_dsub+0x40>
 800197e:	e0b4      	b.n	8001aea <__aeabi_dsub+0x1aa>
 8001980:	2401      	movs	r4, #1
 8001982:	4067      	eors	r7, r4
 8001984:	46bb      	mov	fp, r7
 8001986:	42bd      	cmp	r5, r7
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x4c>
 800198a:	e088      	b.n	8001a9e <__aeabi_dsub+0x15e>
 800198c:	1ab4      	subs	r4, r6, r2
 800198e:	46a4      	mov	ip, r4
 8001990:	2c00      	cmp	r4, #0
 8001992:	dc00      	bgt.n	8001996 <__aeabi_dsub+0x56>
 8001994:	e0b2      	b.n	8001afc <__aeabi_dsub+0x1bc>
 8001996:	2a00      	cmp	r2, #0
 8001998:	d100      	bne.n	800199c <__aeabi_dsub+0x5c>
 800199a:	e0c5      	b.n	8001b28 <__aeabi_dsub+0x1e8>
 800199c:	4ab5      	ldr	r2, [pc, #724]	; (8001c74 <__aeabi_dsub+0x334>)
 800199e:	4296      	cmp	r6, r2
 80019a0:	d100      	bne.n	80019a4 <__aeabi_dsub+0x64>
 80019a2:	e28b      	b.n	8001ebc <__aeabi_dsub+0x57c>
 80019a4:	2280      	movs	r2, #128	; 0x80
 80019a6:	0412      	lsls	r2, r2, #16
 80019a8:	4311      	orrs	r1, r2
 80019aa:	4662      	mov	r2, ip
 80019ac:	2a38      	cmp	r2, #56	; 0x38
 80019ae:	dd00      	ble.n	80019b2 <__aeabi_dsub+0x72>
 80019b0:	e1a1      	b.n	8001cf6 <__aeabi_dsub+0x3b6>
 80019b2:	2a1f      	cmp	r2, #31
 80019b4:	dd00      	ble.n	80019b8 <__aeabi_dsub+0x78>
 80019b6:	e216      	b.n	8001de6 <__aeabi_dsub+0x4a6>
 80019b8:	2720      	movs	r7, #32
 80019ba:	000c      	movs	r4, r1
 80019bc:	1abf      	subs	r7, r7, r2
 80019be:	40bc      	lsls	r4, r7
 80019c0:	0002      	movs	r2, r0
 80019c2:	46a0      	mov	r8, r4
 80019c4:	4664      	mov	r4, ip
 80019c6:	40b8      	lsls	r0, r7
 80019c8:	40e2      	lsrs	r2, r4
 80019ca:	4644      	mov	r4, r8
 80019cc:	4314      	orrs	r4, r2
 80019ce:	0002      	movs	r2, r0
 80019d0:	1e50      	subs	r0, r2, #1
 80019d2:	4182      	sbcs	r2, r0
 80019d4:	4660      	mov	r0, ip
 80019d6:	40c1      	lsrs	r1, r0
 80019d8:	4322      	orrs	r2, r4
 80019da:	1a5b      	subs	r3, r3, r1
 80019dc:	4649      	mov	r1, r9
 80019de:	1a8c      	subs	r4, r1, r2
 80019e0:	45a1      	cmp	r9, r4
 80019e2:	4192      	sbcs	r2, r2
 80019e4:	4252      	negs	r2, r2
 80019e6:	1a9b      	subs	r3, r3, r2
 80019e8:	4698      	mov	r8, r3
 80019ea:	4643      	mov	r3, r8
 80019ec:	021b      	lsls	r3, r3, #8
 80019ee:	d400      	bmi.n	80019f2 <__aeabi_dsub+0xb2>
 80019f0:	e117      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 80019f2:	4643      	mov	r3, r8
 80019f4:	025b      	lsls	r3, r3, #9
 80019f6:	0a5b      	lsrs	r3, r3, #9
 80019f8:	4698      	mov	r8, r3
 80019fa:	4643      	mov	r3, r8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dsub+0xc2>
 8001a00:	e16c      	b.n	8001cdc <__aeabi_dsub+0x39c>
 8001a02:	4640      	mov	r0, r8
 8001a04:	f000 fbd8 	bl	80021b8 <__clzsi2>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	3a08      	subs	r2, #8
 8001a0c:	2120      	movs	r1, #32
 8001a0e:	0020      	movs	r0, r4
 8001a10:	4643      	mov	r3, r8
 8001a12:	1a89      	subs	r1, r1, r2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	40c8      	lsrs	r0, r1
 8001a18:	4094      	lsls	r4, r2
 8001a1a:	4303      	orrs	r3, r0
 8001a1c:	4296      	cmp	r6, r2
 8001a1e:	dd00      	ble.n	8001a22 <__aeabi_dsub+0xe2>
 8001a20:	e157      	b.n	8001cd2 <__aeabi_dsub+0x392>
 8001a22:	1b96      	subs	r6, r2, r6
 8001a24:	1c71      	adds	r1, r6, #1
 8001a26:	291f      	cmp	r1, #31
 8001a28:	dd00      	ble.n	8001a2c <__aeabi_dsub+0xec>
 8001a2a:	e1cb      	b.n	8001dc4 <__aeabi_dsub+0x484>
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	0018      	movs	r0, r3
 8001a30:	0026      	movs	r6, r4
 8001a32:	1a52      	subs	r2, r2, r1
 8001a34:	4094      	lsls	r4, r2
 8001a36:	4090      	lsls	r0, r2
 8001a38:	40ce      	lsrs	r6, r1
 8001a3a:	40cb      	lsrs	r3, r1
 8001a3c:	1e62      	subs	r2, r4, #1
 8001a3e:	4194      	sbcs	r4, r2
 8001a40:	4330      	orrs	r0, r6
 8001a42:	4698      	mov	r8, r3
 8001a44:	2600      	movs	r6, #0
 8001a46:	4304      	orrs	r4, r0
 8001a48:	0763      	lsls	r3, r4, #29
 8001a4a:	d009      	beq.n	8001a60 <__aeabi_dsub+0x120>
 8001a4c:	230f      	movs	r3, #15
 8001a4e:	4023      	ands	r3, r4
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d005      	beq.n	8001a60 <__aeabi_dsub+0x120>
 8001a54:	1d23      	adds	r3, r4, #4
 8001a56:	42a3      	cmp	r3, r4
 8001a58:	41a4      	sbcs	r4, r4
 8001a5a:	4264      	negs	r4, r4
 8001a5c:	44a0      	add	r8, r4
 8001a5e:	001c      	movs	r4, r3
 8001a60:	4643      	mov	r3, r8
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	d400      	bmi.n	8001a68 <__aeabi_dsub+0x128>
 8001a66:	e0df      	b.n	8001c28 <__aeabi_dsub+0x2e8>
 8001a68:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <__aeabi_dsub+0x334>)
 8001a6a:	3601      	adds	r6, #1
 8001a6c:	429e      	cmp	r6, r3
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dsub+0x132>
 8001a70:	e0fb      	b.n	8001c6a <__aeabi_dsub+0x32a>
 8001a72:	4642      	mov	r2, r8
 8001a74:	4b80      	ldr	r3, [pc, #512]	; (8001c78 <__aeabi_dsub+0x338>)
 8001a76:	08e4      	lsrs	r4, r4, #3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	0013      	movs	r3, r2
 8001a7c:	0571      	lsls	r1, r6, #21
 8001a7e:	0752      	lsls	r2, r2, #29
 8001a80:	025b      	lsls	r3, r3, #9
 8001a82:	4322      	orrs	r2, r4
 8001a84:	0b1b      	lsrs	r3, r3, #12
 8001a86:	0d49      	lsrs	r1, r1, #21
 8001a88:	0509      	lsls	r1, r1, #20
 8001a8a:	07ed      	lsls	r5, r5, #31
 8001a8c:	4319      	orrs	r1, r3
 8001a8e:	4329      	orrs	r1, r5
 8001a90:	0010      	movs	r0, r2
 8001a92:	bcf0      	pop	{r4, r5, r6, r7}
 8001a94:	46bb      	mov	fp, r7
 8001a96:	46b2      	mov	sl, r6
 8001a98:	46a9      	mov	r9, r5
 8001a9a:	46a0      	mov	r8, r4
 8001a9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a9e:	1ab4      	subs	r4, r6, r2
 8001aa0:	46a4      	mov	ip, r4
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	dd58      	ble.n	8001b58 <__aeabi_dsub+0x218>
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d100      	bne.n	8001aac <__aeabi_dsub+0x16c>
 8001aaa:	e09e      	b.n	8001bea <__aeabi_dsub+0x2aa>
 8001aac:	4a71      	ldr	r2, [pc, #452]	; (8001c74 <__aeabi_dsub+0x334>)
 8001aae:	4296      	cmp	r6, r2
 8001ab0:	d100      	bne.n	8001ab4 <__aeabi_dsub+0x174>
 8001ab2:	e13b      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001ab4:	2280      	movs	r2, #128	; 0x80
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	4311      	orrs	r1, r2
 8001aba:	4662      	mov	r2, ip
 8001abc:	2a38      	cmp	r2, #56	; 0x38
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dsub+0x182>
 8001ac0:	e0c1      	b.n	8001c46 <__aeabi_dsub+0x306>
 8001ac2:	2a1f      	cmp	r2, #31
 8001ac4:	dc00      	bgt.n	8001ac8 <__aeabi_dsub+0x188>
 8001ac6:	e1bb      	b.n	8001e40 <__aeabi_dsub+0x500>
 8001ac8:	000c      	movs	r4, r1
 8001aca:	3a20      	subs	r2, #32
 8001acc:	40d4      	lsrs	r4, r2
 8001ace:	0022      	movs	r2, r4
 8001ad0:	4664      	mov	r4, ip
 8001ad2:	2c20      	cmp	r4, #32
 8001ad4:	d004      	beq.n	8001ae0 <__aeabi_dsub+0x1a0>
 8001ad6:	2740      	movs	r7, #64	; 0x40
 8001ad8:	1b3f      	subs	r7, r7, r4
 8001ada:	40b9      	lsls	r1, r7
 8001adc:	4308      	orrs	r0, r1
 8001ade:	4680      	mov	r8, r0
 8001ae0:	4644      	mov	r4, r8
 8001ae2:	1e61      	subs	r1, r4, #1
 8001ae4:	418c      	sbcs	r4, r1
 8001ae6:	4314      	orrs	r4, r2
 8001ae8:	e0b1      	b.n	8001c4e <__aeabi_dsub+0x30e>
 8001aea:	000c      	movs	r4, r1
 8001aec:	4304      	orrs	r4, r0
 8001aee:	d02a      	beq.n	8001b46 <__aeabi_dsub+0x206>
 8001af0:	46bb      	mov	fp, r7
 8001af2:	42bd      	cmp	r5, r7
 8001af4:	d02d      	beq.n	8001b52 <__aeabi_dsub+0x212>
 8001af6:	4c61      	ldr	r4, [pc, #388]	; (8001c7c <__aeabi_dsub+0x33c>)
 8001af8:	46a4      	mov	ip, r4
 8001afa:	44b4      	add	ip, r6
 8001afc:	4664      	mov	r4, ip
 8001afe:	2c00      	cmp	r4, #0
 8001b00:	d05c      	beq.n	8001bbc <__aeabi_dsub+0x27c>
 8001b02:	1b94      	subs	r4, r2, r6
 8001b04:	46a4      	mov	ip, r4
 8001b06:	2e00      	cmp	r6, #0
 8001b08:	d000      	beq.n	8001b0c <__aeabi_dsub+0x1cc>
 8001b0a:	e115      	b.n	8001d38 <__aeabi_dsub+0x3f8>
 8001b0c:	464d      	mov	r5, r9
 8001b0e:	431d      	orrs	r5, r3
 8001b10:	d100      	bne.n	8001b14 <__aeabi_dsub+0x1d4>
 8001b12:	e1c3      	b.n	8001e9c <__aeabi_dsub+0x55c>
 8001b14:	1e65      	subs	r5, r4, #1
 8001b16:	2c01      	cmp	r4, #1
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dsub+0x1dc>
 8001b1a:	e20c      	b.n	8001f36 <__aeabi_dsub+0x5f6>
 8001b1c:	4e55      	ldr	r6, [pc, #340]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b1e:	42b4      	cmp	r4, r6
 8001b20:	d100      	bne.n	8001b24 <__aeabi_dsub+0x1e4>
 8001b22:	e1f8      	b.n	8001f16 <__aeabi_dsub+0x5d6>
 8001b24:	46ac      	mov	ip, r5
 8001b26:	e10e      	b.n	8001d46 <__aeabi_dsub+0x406>
 8001b28:	000a      	movs	r2, r1
 8001b2a:	4302      	orrs	r2, r0
 8001b2c:	d100      	bne.n	8001b30 <__aeabi_dsub+0x1f0>
 8001b2e:	e136      	b.n	8001d9e <__aeabi_dsub+0x45e>
 8001b30:	0022      	movs	r2, r4
 8001b32:	3a01      	subs	r2, #1
 8001b34:	2c01      	cmp	r4, #1
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0x1fa>
 8001b38:	e1c6      	b.n	8001ec8 <__aeabi_dsub+0x588>
 8001b3a:	4c4e      	ldr	r4, [pc, #312]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b3c:	45a4      	cmp	ip, r4
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x202>
 8001b40:	e0f4      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001b42:	4694      	mov	ip, r2
 8001b44:	e731      	b.n	80019aa <__aeabi_dsub+0x6a>
 8001b46:	2401      	movs	r4, #1
 8001b48:	4067      	eors	r7, r4
 8001b4a:	46bb      	mov	fp, r7
 8001b4c:	42bd      	cmp	r5, r7
 8001b4e:	d000      	beq.n	8001b52 <__aeabi_dsub+0x212>
 8001b50:	e71c      	b.n	800198c <__aeabi_dsub+0x4c>
 8001b52:	4c4a      	ldr	r4, [pc, #296]	; (8001c7c <__aeabi_dsub+0x33c>)
 8001b54:	46a4      	mov	ip, r4
 8001b56:	44b4      	add	ip, r6
 8001b58:	4664      	mov	r4, ip
 8001b5a:	2c00      	cmp	r4, #0
 8001b5c:	d100      	bne.n	8001b60 <__aeabi_dsub+0x220>
 8001b5e:	e0cf      	b.n	8001d00 <__aeabi_dsub+0x3c0>
 8001b60:	1b94      	subs	r4, r2, r6
 8001b62:	46a4      	mov	ip, r4
 8001b64:	2e00      	cmp	r6, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x22a>
 8001b68:	e15c      	b.n	8001e24 <__aeabi_dsub+0x4e4>
 8001b6a:	4e42      	ldr	r6, [pc, #264]	; (8001c74 <__aeabi_dsub+0x334>)
 8001b6c:	42b2      	cmp	r2, r6
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dsub+0x232>
 8001b70:	e1ec      	b.n	8001f4c <__aeabi_dsub+0x60c>
 8001b72:	2680      	movs	r6, #128	; 0x80
 8001b74:	0436      	lsls	r6, r6, #16
 8001b76:	4333      	orrs	r3, r6
 8001b78:	4664      	mov	r4, ip
 8001b7a:	2c38      	cmp	r4, #56	; 0x38
 8001b7c:	dd00      	ble.n	8001b80 <__aeabi_dsub+0x240>
 8001b7e:	e1b3      	b.n	8001ee8 <__aeabi_dsub+0x5a8>
 8001b80:	2c1f      	cmp	r4, #31
 8001b82:	dd00      	ble.n	8001b86 <__aeabi_dsub+0x246>
 8001b84:	e238      	b.n	8001ff8 <__aeabi_dsub+0x6b8>
 8001b86:	2620      	movs	r6, #32
 8001b88:	1b36      	subs	r6, r6, r4
 8001b8a:	001c      	movs	r4, r3
 8001b8c:	40b4      	lsls	r4, r6
 8001b8e:	464f      	mov	r7, r9
 8001b90:	46a0      	mov	r8, r4
 8001b92:	4664      	mov	r4, ip
 8001b94:	40e7      	lsrs	r7, r4
 8001b96:	4644      	mov	r4, r8
 8001b98:	433c      	orrs	r4, r7
 8001b9a:	464f      	mov	r7, r9
 8001b9c:	40b7      	lsls	r7, r6
 8001b9e:	003e      	movs	r6, r7
 8001ba0:	1e77      	subs	r7, r6, #1
 8001ba2:	41be      	sbcs	r6, r7
 8001ba4:	4334      	orrs	r4, r6
 8001ba6:	4666      	mov	r6, ip
 8001ba8:	40f3      	lsrs	r3, r6
 8001baa:	18c9      	adds	r1, r1, r3
 8001bac:	1824      	adds	r4, r4, r0
 8001bae:	4284      	cmp	r4, r0
 8001bb0:	419b      	sbcs	r3, r3
 8001bb2:	425b      	negs	r3, r3
 8001bb4:	4698      	mov	r8, r3
 8001bb6:	0016      	movs	r6, r2
 8001bb8:	4488      	add	r8, r1
 8001bba:	e04e      	b.n	8001c5a <__aeabi_dsub+0x31a>
 8001bbc:	4a30      	ldr	r2, [pc, #192]	; (8001c80 <__aeabi_dsub+0x340>)
 8001bbe:	1c74      	adds	r4, r6, #1
 8001bc0:	4214      	tst	r4, r2
 8001bc2:	d000      	beq.n	8001bc6 <__aeabi_dsub+0x286>
 8001bc4:	e0d6      	b.n	8001d74 <__aeabi_dsub+0x434>
 8001bc6:	464a      	mov	r2, r9
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	2e00      	cmp	r6, #0
 8001bcc:	d000      	beq.n	8001bd0 <__aeabi_dsub+0x290>
 8001bce:	e15b      	b.n	8001e88 <__aeabi_dsub+0x548>
 8001bd0:	2a00      	cmp	r2, #0
 8001bd2:	d100      	bne.n	8001bd6 <__aeabi_dsub+0x296>
 8001bd4:	e1a5      	b.n	8001f22 <__aeabi_dsub+0x5e2>
 8001bd6:	000a      	movs	r2, r1
 8001bd8:	4302      	orrs	r2, r0
 8001bda:	d000      	beq.n	8001bde <__aeabi_dsub+0x29e>
 8001bdc:	e1bb      	b.n	8001f56 <__aeabi_dsub+0x616>
 8001bde:	464a      	mov	r2, r9
 8001be0:	0759      	lsls	r1, r3, #29
 8001be2:	08d2      	lsrs	r2, r2, #3
 8001be4:	430a      	orrs	r2, r1
 8001be6:	08db      	lsrs	r3, r3, #3
 8001be8:	e027      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001bea:	000a      	movs	r2, r1
 8001bec:	4302      	orrs	r2, r0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x2b2>
 8001bf0:	e174      	b.n	8001edc <__aeabi_dsub+0x59c>
 8001bf2:	0022      	movs	r2, r4
 8001bf4:	3a01      	subs	r2, #1
 8001bf6:	2c01      	cmp	r4, #1
 8001bf8:	d005      	beq.n	8001c06 <__aeabi_dsub+0x2c6>
 8001bfa:	4c1e      	ldr	r4, [pc, #120]	; (8001c74 <__aeabi_dsub+0x334>)
 8001bfc:	45a4      	cmp	ip, r4
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dsub+0x2c2>
 8001c00:	e094      	b.n	8001d2c <__aeabi_dsub+0x3ec>
 8001c02:	4694      	mov	ip, r2
 8001c04:	e759      	b.n	8001aba <__aeabi_dsub+0x17a>
 8001c06:	4448      	add	r0, r9
 8001c08:	4548      	cmp	r0, r9
 8001c0a:	4192      	sbcs	r2, r2
 8001c0c:	185b      	adds	r3, r3, r1
 8001c0e:	4698      	mov	r8, r3
 8001c10:	0004      	movs	r4, r0
 8001c12:	4252      	negs	r2, r2
 8001c14:	4490      	add	r8, r2
 8001c16:	4643      	mov	r3, r8
 8001c18:	2602      	movs	r6, #2
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	d500      	bpl.n	8001c20 <__aeabi_dsub+0x2e0>
 8001c1e:	e0c4      	b.n	8001daa <__aeabi_dsub+0x46a>
 8001c20:	3e01      	subs	r6, #1
 8001c22:	0763      	lsls	r3, r4, #29
 8001c24:	d000      	beq.n	8001c28 <__aeabi_dsub+0x2e8>
 8001c26:	e711      	b.n	8001a4c <__aeabi_dsub+0x10c>
 8001c28:	4643      	mov	r3, r8
 8001c2a:	46b4      	mov	ip, r6
 8001c2c:	0759      	lsls	r1, r3, #29
 8001c2e:	08e2      	lsrs	r2, r4, #3
 8001c30:	430a      	orrs	r2, r1
 8001c32:	08db      	lsrs	r3, r3, #3
 8001c34:	490f      	ldr	r1, [pc, #60]	; (8001c74 <__aeabi_dsub+0x334>)
 8001c36:	458c      	cmp	ip, r1
 8001c38:	d040      	beq.n	8001cbc <__aeabi_dsub+0x37c>
 8001c3a:	4661      	mov	r1, ip
 8001c3c:	031b      	lsls	r3, r3, #12
 8001c3e:	0549      	lsls	r1, r1, #21
 8001c40:	0b1b      	lsrs	r3, r3, #12
 8001c42:	0d49      	lsrs	r1, r1, #21
 8001c44:	e720      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001c46:	4301      	orrs	r1, r0
 8001c48:	000c      	movs	r4, r1
 8001c4a:	1e61      	subs	r1, r4, #1
 8001c4c:	418c      	sbcs	r4, r1
 8001c4e:	444c      	add	r4, r9
 8001c50:	454c      	cmp	r4, r9
 8001c52:	4192      	sbcs	r2, r2
 8001c54:	4252      	negs	r2, r2
 8001c56:	4690      	mov	r8, r2
 8001c58:	4498      	add	r8, r3
 8001c5a:	4643      	mov	r3, r8
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	d5e0      	bpl.n	8001c22 <__aeabi_dsub+0x2e2>
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__aeabi_dsub+0x334>)
 8001c62:	3601      	adds	r6, #1
 8001c64:	429e      	cmp	r6, r3
 8001c66:	d000      	beq.n	8001c6a <__aeabi_dsub+0x32a>
 8001c68:	e09f      	b.n	8001daa <__aeabi_dsub+0x46a>
 8001c6a:	0031      	movs	r1, r6
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	2200      	movs	r2, #0
 8001c70:	e70a      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	000007ff 	.word	0x000007ff
 8001c78:	ff7fffff 	.word	0xff7fffff
 8001c7c:	fffff801 	.word	0xfffff801
 8001c80:	000007fe 	.word	0x000007fe
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dsub+0x34a>
 8001c88:	e160      	b.n	8001f4c <__aeabi_dsub+0x60c>
 8001c8a:	000a      	movs	r2, r1
 8001c8c:	4302      	orrs	r2, r0
 8001c8e:	d04d      	beq.n	8001d2c <__aeabi_dsub+0x3ec>
 8001c90:	464a      	mov	r2, r9
 8001c92:	075c      	lsls	r4, r3, #29
 8001c94:	08d2      	lsrs	r2, r2, #3
 8001c96:	4322      	orrs	r2, r4
 8001c98:	2480      	movs	r4, #128	; 0x80
 8001c9a:	08db      	lsrs	r3, r3, #3
 8001c9c:	0324      	lsls	r4, r4, #12
 8001c9e:	4223      	tst	r3, r4
 8001ca0:	d007      	beq.n	8001cb2 <__aeabi_dsub+0x372>
 8001ca2:	08ce      	lsrs	r6, r1, #3
 8001ca4:	4226      	tst	r6, r4
 8001ca6:	d104      	bne.n	8001cb2 <__aeabi_dsub+0x372>
 8001ca8:	465d      	mov	r5, fp
 8001caa:	0033      	movs	r3, r6
 8001cac:	08c2      	lsrs	r2, r0, #3
 8001cae:	0749      	lsls	r1, r1, #29
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	0f51      	lsrs	r1, r2, #29
 8001cb4:	00d2      	lsls	r2, r2, #3
 8001cb6:	08d2      	lsrs	r2, r2, #3
 8001cb8:	0749      	lsls	r1, r1, #29
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	4319      	orrs	r1, r3
 8001cc0:	d100      	bne.n	8001cc4 <__aeabi_dsub+0x384>
 8001cc2:	e1c8      	b.n	8002056 <__aeabi_dsub+0x716>
 8001cc4:	2180      	movs	r1, #128	; 0x80
 8001cc6:	0309      	lsls	r1, r1, #12
 8001cc8:	430b      	orrs	r3, r1
 8001cca:	031b      	lsls	r3, r3, #12
 8001ccc:	49d5      	ldr	r1, [pc, #852]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001cce:	0b1b      	lsrs	r3, r3, #12
 8001cd0:	e6da      	b.n	8001a88 <__aeabi_dsub+0x148>
 8001cd2:	49d5      	ldr	r1, [pc, #852]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001cd4:	1ab6      	subs	r6, r6, r2
 8001cd6:	400b      	ands	r3, r1
 8001cd8:	4698      	mov	r8, r3
 8001cda:	e6b5      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001cdc:	0020      	movs	r0, r4
 8001cde:	f000 fa6b 	bl	80021b8 <__clzsi2>
 8001ce2:	0002      	movs	r2, r0
 8001ce4:	3218      	adds	r2, #24
 8001ce6:	2a1f      	cmp	r2, #31
 8001ce8:	dc00      	bgt.n	8001cec <__aeabi_dsub+0x3ac>
 8001cea:	e68f      	b.n	8001a0c <__aeabi_dsub+0xcc>
 8001cec:	0023      	movs	r3, r4
 8001cee:	3808      	subs	r0, #8
 8001cf0:	4083      	lsls	r3, r0
 8001cf2:	2400      	movs	r4, #0
 8001cf4:	e692      	b.n	8001a1c <__aeabi_dsub+0xdc>
 8001cf6:	4308      	orrs	r0, r1
 8001cf8:	0002      	movs	r2, r0
 8001cfa:	1e50      	subs	r0, r2, #1
 8001cfc:	4182      	sbcs	r2, r0
 8001cfe:	e66d      	b.n	80019dc <__aeabi_dsub+0x9c>
 8001d00:	4cca      	ldr	r4, [pc, #808]	; (800202c <__aeabi_dsub+0x6ec>)
 8001d02:	1c72      	adds	r2, r6, #1
 8001d04:	4222      	tst	r2, r4
 8001d06:	d000      	beq.n	8001d0a <__aeabi_dsub+0x3ca>
 8001d08:	e0ad      	b.n	8001e66 <__aeabi_dsub+0x526>
 8001d0a:	464a      	mov	r2, r9
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	2e00      	cmp	r6, #0
 8001d10:	d1b8      	bne.n	8001c84 <__aeabi_dsub+0x344>
 8001d12:	2a00      	cmp	r2, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_dsub+0x3d8>
 8001d16:	e158      	b.n	8001fca <__aeabi_dsub+0x68a>
 8001d18:	000a      	movs	r2, r1
 8001d1a:	4302      	orrs	r2, r0
 8001d1c:	d000      	beq.n	8001d20 <__aeabi_dsub+0x3e0>
 8001d1e:	e159      	b.n	8001fd4 <__aeabi_dsub+0x694>
 8001d20:	464a      	mov	r2, r9
 8001d22:	0759      	lsls	r1, r3, #29
 8001d24:	08d2      	lsrs	r2, r2, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	08db      	lsrs	r3, r3, #3
 8001d2a:	e786      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001d2c:	464a      	mov	r2, r9
 8001d2e:	0759      	lsls	r1, r3, #29
 8001d30:	08d2      	lsrs	r2, r2, #3
 8001d32:	430a      	orrs	r2, r1
 8001d34:	08db      	lsrs	r3, r3, #3
 8001d36:	e7c1      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001d38:	4dba      	ldr	r5, [pc, #744]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001d3a:	42aa      	cmp	r2, r5
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x400>
 8001d3e:	e11e      	b.n	8001f7e <__aeabi_dsub+0x63e>
 8001d40:	2580      	movs	r5, #128	; 0x80
 8001d42:	042d      	lsls	r5, r5, #16
 8001d44:	432b      	orrs	r3, r5
 8001d46:	4664      	mov	r4, ip
 8001d48:	2c38      	cmp	r4, #56	; 0x38
 8001d4a:	dc5d      	bgt.n	8001e08 <__aeabi_dsub+0x4c8>
 8001d4c:	2c1f      	cmp	r4, #31
 8001d4e:	dd00      	ble.n	8001d52 <__aeabi_dsub+0x412>
 8001d50:	e0d0      	b.n	8001ef4 <__aeabi_dsub+0x5b4>
 8001d52:	2520      	movs	r5, #32
 8001d54:	4667      	mov	r7, ip
 8001d56:	1b2d      	subs	r5, r5, r4
 8001d58:	464e      	mov	r6, r9
 8001d5a:	001c      	movs	r4, r3
 8001d5c:	40fe      	lsrs	r6, r7
 8001d5e:	40ac      	lsls	r4, r5
 8001d60:	4334      	orrs	r4, r6
 8001d62:	464e      	mov	r6, r9
 8001d64:	40ae      	lsls	r6, r5
 8001d66:	0035      	movs	r5, r6
 8001d68:	40fb      	lsrs	r3, r7
 8001d6a:	1e6e      	subs	r6, r5, #1
 8001d6c:	41b5      	sbcs	r5, r6
 8001d6e:	1ac9      	subs	r1, r1, r3
 8001d70:	432c      	orrs	r4, r5
 8001d72:	e04e      	b.n	8001e12 <__aeabi_dsub+0x4d2>
 8001d74:	464a      	mov	r2, r9
 8001d76:	1a14      	subs	r4, r2, r0
 8001d78:	45a1      	cmp	r9, r4
 8001d7a:	4192      	sbcs	r2, r2
 8001d7c:	4252      	negs	r2, r2
 8001d7e:	4690      	mov	r8, r2
 8001d80:	1a5f      	subs	r7, r3, r1
 8001d82:	003a      	movs	r2, r7
 8001d84:	4647      	mov	r7, r8
 8001d86:	1bd2      	subs	r2, r2, r7
 8001d88:	4690      	mov	r8, r2
 8001d8a:	0212      	lsls	r2, r2, #8
 8001d8c:	d500      	bpl.n	8001d90 <__aeabi_dsub+0x450>
 8001d8e:	e08b      	b.n	8001ea8 <__aeabi_dsub+0x568>
 8001d90:	4642      	mov	r2, r8
 8001d92:	4322      	orrs	r2, r4
 8001d94:	d000      	beq.n	8001d98 <__aeabi_dsub+0x458>
 8001d96:	e630      	b.n	80019fa <__aeabi_dsub+0xba>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2500      	movs	r5, #0
 8001d9c:	e74d      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001d9e:	464a      	mov	r2, r9
 8001da0:	0759      	lsls	r1, r3, #29
 8001da2:	08d2      	lsrs	r2, r2, #3
 8001da4:	430a      	orrs	r2, r1
 8001da6:	08db      	lsrs	r3, r3, #3
 8001da8:	e744      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001daa:	4642      	mov	r2, r8
 8001dac:	4b9e      	ldr	r3, [pc, #632]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001dae:	0861      	lsrs	r1, r4, #1
 8001db0:	401a      	ands	r2, r3
 8001db2:	0013      	movs	r3, r2
 8001db4:	2201      	movs	r2, #1
 8001db6:	4014      	ands	r4, r2
 8001db8:	430c      	orrs	r4, r1
 8001dba:	07da      	lsls	r2, r3, #31
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	4698      	mov	r8, r3
 8001dc0:	4314      	orrs	r4, r2
 8001dc2:	e641      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	3e1f      	subs	r6, #31
 8001dc8:	40f2      	lsrs	r2, r6
 8001dca:	0016      	movs	r6, r2
 8001dcc:	2920      	cmp	r1, #32
 8001dce:	d003      	beq.n	8001dd8 <__aeabi_dsub+0x498>
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	1a51      	subs	r1, r2, r1
 8001dd4:	408b      	lsls	r3, r1
 8001dd6:	431c      	orrs	r4, r3
 8001dd8:	1e62      	subs	r2, r4, #1
 8001dda:	4194      	sbcs	r4, r2
 8001ddc:	2300      	movs	r3, #0
 8001dde:	4334      	orrs	r4, r6
 8001de0:	4698      	mov	r8, r3
 8001de2:	2600      	movs	r6, #0
 8001de4:	e71d      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001de6:	000c      	movs	r4, r1
 8001de8:	3a20      	subs	r2, #32
 8001dea:	40d4      	lsrs	r4, r2
 8001dec:	0022      	movs	r2, r4
 8001dee:	4664      	mov	r4, ip
 8001df0:	2c20      	cmp	r4, #32
 8001df2:	d004      	beq.n	8001dfe <__aeabi_dsub+0x4be>
 8001df4:	2740      	movs	r7, #64	; 0x40
 8001df6:	1b3f      	subs	r7, r7, r4
 8001df8:	40b9      	lsls	r1, r7
 8001dfa:	4308      	orrs	r0, r1
 8001dfc:	4680      	mov	r8, r0
 8001dfe:	4644      	mov	r4, r8
 8001e00:	1e61      	subs	r1, r4, #1
 8001e02:	418c      	sbcs	r4, r1
 8001e04:	4322      	orrs	r2, r4
 8001e06:	e5e9      	b.n	80019dc <__aeabi_dsub+0x9c>
 8001e08:	464c      	mov	r4, r9
 8001e0a:	4323      	orrs	r3, r4
 8001e0c:	001c      	movs	r4, r3
 8001e0e:	1e63      	subs	r3, r4, #1
 8001e10:	419c      	sbcs	r4, r3
 8001e12:	1b04      	subs	r4, r0, r4
 8001e14:	42a0      	cmp	r0, r4
 8001e16:	419b      	sbcs	r3, r3
 8001e18:	425b      	negs	r3, r3
 8001e1a:	1acb      	subs	r3, r1, r3
 8001e1c:	4698      	mov	r8, r3
 8001e1e:	465d      	mov	r5, fp
 8001e20:	0016      	movs	r6, r2
 8001e22:	e5e2      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001e24:	464e      	mov	r6, r9
 8001e26:	431e      	orrs	r6, r3
 8001e28:	d100      	bne.n	8001e2c <__aeabi_dsub+0x4ec>
 8001e2a:	e0ae      	b.n	8001f8a <__aeabi_dsub+0x64a>
 8001e2c:	1e66      	subs	r6, r4, #1
 8001e2e:	2c01      	cmp	r4, #1
 8001e30:	d100      	bne.n	8001e34 <__aeabi_dsub+0x4f4>
 8001e32:	e0fd      	b.n	8002030 <__aeabi_dsub+0x6f0>
 8001e34:	4f7b      	ldr	r7, [pc, #492]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001e36:	42bc      	cmp	r4, r7
 8001e38:	d100      	bne.n	8001e3c <__aeabi_dsub+0x4fc>
 8001e3a:	e107      	b.n	800204c <__aeabi_dsub+0x70c>
 8001e3c:	46b4      	mov	ip, r6
 8001e3e:	e69b      	b.n	8001b78 <__aeabi_dsub+0x238>
 8001e40:	4664      	mov	r4, ip
 8001e42:	2220      	movs	r2, #32
 8001e44:	1b12      	subs	r2, r2, r4
 8001e46:	000c      	movs	r4, r1
 8001e48:	4094      	lsls	r4, r2
 8001e4a:	0007      	movs	r7, r0
 8001e4c:	4090      	lsls	r0, r2
 8001e4e:	46a0      	mov	r8, r4
 8001e50:	4664      	mov	r4, ip
 8001e52:	1e42      	subs	r2, r0, #1
 8001e54:	4190      	sbcs	r0, r2
 8001e56:	4662      	mov	r2, ip
 8001e58:	40e7      	lsrs	r7, r4
 8001e5a:	4644      	mov	r4, r8
 8001e5c:	40d1      	lsrs	r1, r2
 8001e5e:	433c      	orrs	r4, r7
 8001e60:	4304      	orrs	r4, r0
 8001e62:	185b      	adds	r3, r3, r1
 8001e64:	e6f3      	b.n	8001c4e <__aeabi_dsub+0x30e>
 8001e66:	4c6f      	ldr	r4, [pc, #444]	; (8002024 <__aeabi_dsub+0x6e4>)
 8001e68:	42a2      	cmp	r2, r4
 8001e6a:	d100      	bne.n	8001e6e <__aeabi_dsub+0x52e>
 8001e6c:	e0d5      	b.n	800201a <__aeabi_dsub+0x6da>
 8001e6e:	4448      	add	r0, r9
 8001e70:	185b      	adds	r3, r3, r1
 8001e72:	4548      	cmp	r0, r9
 8001e74:	4189      	sbcs	r1, r1
 8001e76:	4249      	negs	r1, r1
 8001e78:	185b      	adds	r3, r3, r1
 8001e7a:	07dc      	lsls	r4, r3, #31
 8001e7c:	0840      	lsrs	r0, r0, #1
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	4698      	mov	r8, r3
 8001e82:	0016      	movs	r6, r2
 8001e84:	4304      	orrs	r4, r0
 8001e86:	e6cc      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001e88:	2a00      	cmp	r2, #0
 8001e8a:	d000      	beq.n	8001e8e <__aeabi_dsub+0x54e>
 8001e8c:	e082      	b.n	8001f94 <__aeabi_dsub+0x654>
 8001e8e:	000a      	movs	r2, r1
 8001e90:	4302      	orrs	r2, r0
 8001e92:	d140      	bne.n	8001f16 <__aeabi_dsub+0x5d6>
 8001e94:	2380      	movs	r3, #128	; 0x80
 8001e96:	2500      	movs	r5, #0
 8001e98:	031b      	lsls	r3, r3, #12
 8001e9a:	e713      	b.n	8001cc4 <__aeabi_dsub+0x384>
 8001e9c:	074b      	lsls	r3, r1, #29
 8001e9e:	08c2      	lsrs	r2, r0, #3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	465d      	mov	r5, fp
 8001ea4:	08cb      	lsrs	r3, r1, #3
 8001ea6:	e6c5      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001ea8:	464a      	mov	r2, r9
 8001eaa:	1a84      	subs	r4, r0, r2
 8001eac:	42a0      	cmp	r0, r4
 8001eae:	4192      	sbcs	r2, r2
 8001eb0:	1acb      	subs	r3, r1, r3
 8001eb2:	4252      	negs	r2, r2
 8001eb4:	1a9b      	subs	r3, r3, r2
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	465d      	mov	r5, fp
 8001eba:	e59e      	b.n	80019fa <__aeabi_dsub+0xba>
 8001ebc:	464a      	mov	r2, r9
 8001ebe:	0759      	lsls	r1, r3, #29
 8001ec0:	08d2      	lsrs	r2, r2, #3
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	08db      	lsrs	r3, r3, #3
 8001ec6:	e6f9      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001ec8:	464a      	mov	r2, r9
 8001eca:	1a14      	subs	r4, r2, r0
 8001ecc:	45a1      	cmp	r9, r4
 8001ece:	4192      	sbcs	r2, r2
 8001ed0:	1a5b      	subs	r3, r3, r1
 8001ed2:	4252      	negs	r2, r2
 8001ed4:	1a9b      	subs	r3, r3, r2
 8001ed6:	4698      	mov	r8, r3
 8001ed8:	2601      	movs	r6, #1
 8001eda:	e586      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001edc:	464a      	mov	r2, r9
 8001ede:	0759      	lsls	r1, r3, #29
 8001ee0:	08d2      	lsrs	r2, r2, #3
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	e6a5      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001ee8:	464c      	mov	r4, r9
 8001eea:	4323      	orrs	r3, r4
 8001eec:	001c      	movs	r4, r3
 8001eee:	1e63      	subs	r3, r4, #1
 8001ef0:	419c      	sbcs	r4, r3
 8001ef2:	e65b      	b.n	8001bac <__aeabi_dsub+0x26c>
 8001ef4:	4665      	mov	r5, ip
 8001ef6:	001e      	movs	r6, r3
 8001ef8:	3d20      	subs	r5, #32
 8001efa:	40ee      	lsrs	r6, r5
 8001efc:	2c20      	cmp	r4, #32
 8001efe:	d005      	beq.n	8001f0c <__aeabi_dsub+0x5cc>
 8001f00:	2540      	movs	r5, #64	; 0x40
 8001f02:	1b2d      	subs	r5, r5, r4
 8001f04:	40ab      	lsls	r3, r5
 8001f06:	464c      	mov	r4, r9
 8001f08:	431c      	orrs	r4, r3
 8001f0a:	46a2      	mov	sl, r4
 8001f0c:	4654      	mov	r4, sl
 8001f0e:	1e63      	subs	r3, r4, #1
 8001f10:	419c      	sbcs	r4, r3
 8001f12:	4334      	orrs	r4, r6
 8001f14:	e77d      	b.n	8001e12 <__aeabi_dsub+0x4d2>
 8001f16:	074b      	lsls	r3, r1, #29
 8001f18:	08c2      	lsrs	r2, r0, #3
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	465d      	mov	r5, fp
 8001f1e:	08cb      	lsrs	r3, r1, #3
 8001f20:	e6cc      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f22:	000a      	movs	r2, r1
 8001f24:	4302      	orrs	r2, r0
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x5ea>
 8001f28:	e736      	b.n	8001d98 <__aeabi_dsub+0x458>
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	08c2      	lsrs	r2, r0, #3
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	465d      	mov	r5, fp
 8001f32:	08cb      	lsrs	r3, r1, #3
 8001f34:	e681      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001f36:	464a      	mov	r2, r9
 8001f38:	1a84      	subs	r4, r0, r2
 8001f3a:	42a0      	cmp	r0, r4
 8001f3c:	4192      	sbcs	r2, r2
 8001f3e:	1acb      	subs	r3, r1, r3
 8001f40:	4252      	negs	r2, r2
 8001f42:	1a9b      	subs	r3, r3, r2
 8001f44:	4698      	mov	r8, r3
 8001f46:	465d      	mov	r5, fp
 8001f48:	2601      	movs	r6, #1
 8001f4a:	e54e      	b.n	80019ea <__aeabi_dsub+0xaa>
 8001f4c:	074b      	lsls	r3, r1, #29
 8001f4e:	08c2      	lsrs	r2, r0, #3
 8001f50:	431a      	orrs	r2, r3
 8001f52:	08cb      	lsrs	r3, r1, #3
 8001f54:	e6b2      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f56:	464a      	mov	r2, r9
 8001f58:	1a14      	subs	r4, r2, r0
 8001f5a:	45a1      	cmp	r9, r4
 8001f5c:	4192      	sbcs	r2, r2
 8001f5e:	1a5f      	subs	r7, r3, r1
 8001f60:	4252      	negs	r2, r2
 8001f62:	1aba      	subs	r2, r7, r2
 8001f64:	4690      	mov	r8, r2
 8001f66:	0212      	lsls	r2, r2, #8
 8001f68:	d56b      	bpl.n	8002042 <__aeabi_dsub+0x702>
 8001f6a:	464a      	mov	r2, r9
 8001f6c:	1a84      	subs	r4, r0, r2
 8001f6e:	42a0      	cmp	r0, r4
 8001f70:	4192      	sbcs	r2, r2
 8001f72:	1acb      	subs	r3, r1, r3
 8001f74:	4252      	negs	r2, r2
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	4698      	mov	r8, r3
 8001f7a:	465d      	mov	r5, fp
 8001f7c:	e564      	b.n	8001a48 <__aeabi_dsub+0x108>
 8001f7e:	074b      	lsls	r3, r1, #29
 8001f80:	08c2      	lsrs	r2, r0, #3
 8001f82:	431a      	orrs	r2, r3
 8001f84:	465d      	mov	r5, fp
 8001f86:	08cb      	lsrs	r3, r1, #3
 8001f88:	e698      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001f8a:	074b      	lsls	r3, r1, #29
 8001f8c:	08c2      	lsrs	r2, r0, #3
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	08cb      	lsrs	r3, r1, #3
 8001f92:	e64f      	b.n	8001c34 <__aeabi_dsub+0x2f4>
 8001f94:	000a      	movs	r2, r1
 8001f96:	4302      	orrs	r2, r0
 8001f98:	d090      	beq.n	8001ebc <__aeabi_dsub+0x57c>
 8001f9a:	464a      	mov	r2, r9
 8001f9c:	075c      	lsls	r4, r3, #29
 8001f9e:	08d2      	lsrs	r2, r2, #3
 8001fa0:	4314      	orrs	r4, r2
 8001fa2:	2280      	movs	r2, #128	; 0x80
 8001fa4:	08db      	lsrs	r3, r3, #3
 8001fa6:	0312      	lsls	r2, r2, #12
 8001fa8:	4213      	tst	r3, r2
 8001faa:	d008      	beq.n	8001fbe <__aeabi_dsub+0x67e>
 8001fac:	08ce      	lsrs	r6, r1, #3
 8001fae:	4216      	tst	r6, r2
 8001fb0:	d105      	bne.n	8001fbe <__aeabi_dsub+0x67e>
 8001fb2:	08c0      	lsrs	r0, r0, #3
 8001fb4:	0749      	lsls	r1, r1, #29
 8001fb6:	4308      	orrs	r0, r1
 8001fb8:	0004      	movs	r4, r0
 8001fba:	465d      	mov	r5, fp
 8001fbc:	0033      	movs	r3, r6
 8001fbe:	0f61      	lsrs	r1, r4, #29
 8001fc0:	00e2      	lsls	r2, r4, #3
 8001fc2:	0749      	lsls	r1, r1, #29
 8001fc4:	08d2      	lsrs	r2, r2, #3
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	e678      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8001fca:	074b      	lsls	r3, r1, #29
 8001fcc:	08c2      	lsrs	r2, r0, #3
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	08cb      	lsrs	r3, r1, #3
 8001fd2:	e632      	b.n	8001c3a <__aeabi_dsub+0x2fa>
 8001fd4:	4448      	add	r0, r9
 8001fd6:	185b      	adds	r3, r3, r1
 8001fd8:	4548      	cmp	r0, r9
 8001fda:	4192      	sbcs	r2, r2
 8001fdc:	4698      	mov	r8, r3
 8001fde:	4252      	negs	r2, r2
 8001fe0:	4490      	add	r8, r2
 8001fe2:	4643      	mov	r3, r8
 8001fe4:	0004      	movs	r4, r0
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	d400      	bmi.n	8001fec <__aeabi_dsub+0x6ac>
 8001fea:	e61a      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001fec:	4642      	mov	r2, r8
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <__aeabi_dsub+0x6e8>)
 8001ff0:	2601      	movs	r6, #1
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	4690      	mov	r8, r2
 8001ff6:	e614      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 8001ff8:	4666      	mov	r6, ip
 8001ffa:	001f      	movs	r7, r3
 8001ffc:	3e20      	subs	r6, #32
 8001ffe:	40f7      	lsrs	r7, r6
 8002000:	2c20      	cmp	r4, #32
 8002002:	d005      	beq.n	8002010 <__aeabi_dsub+0x6d0>
 8002004:	2640      	movs	r6, #64	; 0x40
 8002006:	1b36      	subs	r6, r6, r4
 8002008:	40b3      	lsls	r3, r6
 800200a:	464c      	mov	r4, r9
 800200c:	431c      	orrs	r4, r3
 800200e:	46a2      	mov	sl, r4
 8002010:	4654      	mov	r4, sl
 8002012:	1e63      	subs	r3, r4, #1
 8002014:	419c      	sbcs	r4, r3
 8002016:	433c      	orrs	r4, r7
 8002018:	e5c8      	b.n	8001bac <__aeabi_dsub+0x26c>
 800201a:	0011      	movs	r1, r2
 800201c:	2300      	movs	r3, #0
 800201e:	2200      	movs	r2, #0
 8002020:	e532      	b.n	8001a88 <__aeabi_dsub+0x148>
 8002022:	46c0      	nop			; (mov r8, r8)
 8002024:	000007ff 	.word	0x000007ff
 8002028:	ff7fffff 	.word	0xff7fffff
 800202c:	000007fe 	.word	0x000007fe
 8002030:	464a      	mov	r2, r9
 8002032:	1814      	adds	r4, r2, r0
 8002034:	4284      	cmp	r4, r0
 8002036:	4192      	sbcs	r2, r2
 8002038:	185b      	adds	r3, r3, r1
 800203a:	4698      	mov	r8, r3
 800203c:	4252      	negs	r2, r2
 800203e:	4490      	add	r8, r2
 8002040:	e5e9      	b.n	8001c16 <__aeabi_dsub+0x2d6>
 8002042:	4642      	mov	r2, r8
 8002044:	4322      	orrs	r2, r4
 8002046:	d100      	bne.n	800204a <__aeabi_dsub+0x70a>
 8002048:	e6a6      	b.n	8001d98 <__aeabi_dsub+0x458>
 800204a:	e5ea      	b.n	8001c22 <__aeabi_dsub+0x2e2>
 800204c:	074b      	lsls	r3, r1, #29
 800204e:	08c2      	lsrs	r2, r0, #3
 8002050:	431a      	orrs	r2, r3
 8002052:	08cb      	lsrs	r3, r1, #3
 8002054:	e632      	b.n	8001cbc <__aeabi_dsub+0x37c>
 8002056:	2200      	movs	r2, #0
 8002058:	4901      	ldr	r1, [pc, #4]	; (8002060 <__aeabi_dsub+0x720>)
 800205a:	0013      	movs	r3, r2
 800205c:	e514      	b.n	8001a88 <__aeabi_dsub+0x148>
 800205e:	46c0      	nop			; (mov r8, r8)
 8002060:	000007ff 	.word	0x000007ff

08002064 <__aeabi_dcmpun>:
 8002064:	b570      	push	{r4, r5, r6, lr}
 8002066:	0005      	movs	r5, r0
 8002068:	480c      	ldr	r0, [pc, #48]	; (800209c <__aeabi_dcmpun+0x38>)
 800206a:	030c      	lsls	r4, r1, #12
 800206c:	0016      	movs	r6, r2
 800206e:	0049      	lsls	r1, r1, #1
 8002070:	031a      	lsls	r2, r3, #12
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	0b24      	lsrs	r4, r4, #12
 8002076:	0d49      	lsrs	r1, r1, #21
 8002078:	0b12      	lsrs	r2, r2, #12
 800207a:	0d5b      	lsrs	r3, r3, #21
 800207c:	4281      	cmp	r1, r0
 800207e:	d008      	beq.n	8002092 <__aeabi_dcmpun+0x2e>
 8002080:	4906      	ldr	r1, [pc, #24]	; (800209c <__aeabi_dcmpun+0x38>)
 8002082:	2000      	movs	r0, #0
 8002084:	428b      	cmp	r3, r1
 8002086:	d103      	bne.n	8002090 <__aeabi_dcmpun+0x2c>
 8002088:	4332      	orrs	r2, r6
 800208a:	0010      	movs	r0, r2
 800208c:	1e42      	subs	r2, r0, #1
 800208e:	4190      	sbcs	r0, r2
 8002090:	bd70      	pop	{r4, r5, r6, pc}
 8002092:	2001      	movs	r0, #1
 8002094:	432c      	orrs	r4, r5
 8002096:	d1fb      	bne.n	8002090 <__aeabi_dcmpun+0x2c>
 8002098:	e7f2      	b.n	8002080 <__aeabi_dcmpun+0x1c>
 800209a:	46c0      	nop			; (mov r8, r8)
 800209c:	000007ff 	.word	0x000007ff

080020a0 <__aeabi_d2iz>:
 80020a0:	000a      	movs	r2, r1
 80020a2:	b530      	push	{r4, r5, lr}
 80020a4:	4c13      	ldr	r4, [pc, #76]	; (80020f4 <__aeabi_d2iz+0x54>)
 80020a6:	0053      	lsls	r3, r2, #1
 80020a8:	0309      	lsls	r1, r1, #12
 80020aa:	0005      	movs	r5, r0
 80020ac:	0b09      	lsrs	r1, r1, #12
 80020ae:	2000      	movs	r0, #0
 80020b0:	0d5b      	lsrs	r3, r3, #21
 80020b2:	0fd2      	lsrs	r2, r2, #31
 80020b4:	42a3      	cmp	r3, r4
 80020b6:	dd04      	ble.n	80020c2 <__aeabi_d2iz+0x22>
 80020b8:	480f      	ldr	r0, [pc, #60]	; (80020f8 <__aeabi_d2iz+0x58>)
 80020ba:	4283      	cmp	r3, r0
 80020bc:	dd02      	ble.n	80020c4 <__aeabi_d2iz+0x24>
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <__aeabi_d2iz+0x5c>)
 80020c0:	18d0      	adds	r0, r2, r3
 80020c2:	bd30      	pop	{r4, r5, pc}
 80020c4:	2080      	movs	r0, #128	; 0x80
 80020c6:	0340      	lsls	r0, r0, #13
 80020c8:	4301      	orrs	r1, r0
 80020ca:	480d      	ldr	r0, [pc, #52]	; (8002100 <__aeabi_d2iz+0x60>)
 80020cc:	1ac0      	subs	r0, r0, r3
 80020ce:	281f      	cmp	r0, #31
 80020d0:	dd08      	ble.n	80020e4 <__aeabi_d2iz+0x44>
 80020d2:	480c      	ldr	r0, [pc, #48]	; (8002104 <__aeabi_d2iz+0x64>)
 80020d4:	1ac3      	subs	r3, r0, r3
 80020d6:	40d9      	lsrs	r1, r3
 80020d8:	000b      	movs	r3, r1
 80020da:	4258      	negs	r0, r3
 80020dc:	2a00      	cmp	r2, #0
 80020de:	d1f0      	bne.n	80020c2 <__aeabi_d2iz+0x22>
 80020e0:	0018      	movs	r0, r3
 80020e2:	e7ee      	b.n	80020c2 <__aeabi_d2iz+0x22>
 80020e4:	4c08      	ldr	r4, [pc, #32]	; (8002108 <__aeabi_d2iz+0x68>)
 80020e6:	40c5      	lsrs	r5, r0
 80020e8:	46a4      	mov	ip, r4
 80020ea:	4463      	add	r3, ip
 80020ec:	4099      	lsls	r1, r3
 80020ee:	000b      	movs	r3, r1
 80020f0:	432b      	orrs	r3, r5
 80020f2:	e7f2      	b.n	80020da <__aeabi_d2iz+0x3a>
 80020f4:	000003fe 	.word	0x000003fe
 80020f8:	0000041d 	.word	0x0000041d
 80020fc:	7fffffff 	.word	0x7fffffff
 8002100:	00000433 	.word	0x00000433
 8002104:	00000413 	.word	0x00000413
 8002108:	fffffbed 	.word	0xfffffbed

0800210c <__aeabi_i2d>:
 800210c:	b570      	push	{r4, r5, r6, lr}
 800210e:	2800      	cmp	r0, #0
 8002110:	d016      	beq.n	8002140 <__aeabi_i2d+0x34>
 8002112:	17c3      	asrs	r3, r0, #31
 8002114:	18c5      	adds	r5, r0, r3
 8002116:	405d      	eors	r5, r3
 8002118:	0fc4      	lsrs	r4, r0, #31
 800211a:	0028      	movs	r0, r5
 800211c:	f000 f84c 	bl	80021b8 <__clzsi2>
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <__aeabi_i2d+0x5c>)
 8002122:	1a12      	subs	r2, r2, r0
 8002124:	280a      	cmp	r0, #10
 8002126:	dc16      	bgt.n	8002156 <__aeabi_i2d+0x4a>
 8002128:	0003      	movs	r3, r0
 800212a:	002e      	movs	r6, r5
 800212c:	3315      	adds	r3, #21
 800212e:	409e      	lsls	r6, r3
 8002130:	230b      	movs	r3, #11
 8002132:	1a18      	subs	r0, r3, r0
 8002134:	40c5      	lsrs	r5, r0
 8002136:	0553      	lsls	r3, r2, #21
 8002138:	032d      	lsls	r5, r5, #12
 800213a:	0b2d      	lsrs	r5, r5, #12
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	e003      	b.n	8002148 <__aeabi_i2d+0x3c>
 8002140:	2400      	movs	r4, #0
 8002142:	2300      	movs	r3, #0
 8002144:	2500      	movs	r5, #0
 8002146:	2600      	movs	r6, #0
 8002148:	051b      	lsls	r3, r3, #20
 800214a:	432b      	orrs	r3, r5
 800214c:	07e4      	lsls	r4, r4, #31
 800214e:	4323      	orrs	r3, r4
 8002150:	0030      	movs	r0, r6
 8002152:	0019      	movs	r1, r3
 8002154:	bd70      	pop	{r4, r5, r6, pc}
 8002156:	380b      	subs	r0, #11
 8002158:	4085      	lsls	r5, r0
 800215a:	0553      	lsls	r3, r2, #21
 800215c:	032d      	lsls	r5, r5, #12
 800215e:	2600      	movs	r6, #0
 8002160:	0b2d      	lsrs	r5, r5, #12
 8002162:	0d5b      	lsrs	r3, r3, #21
 8002164:	e7f0      	b.n	8002148 <__aeabi_i2d+0x3c>
 8002166:	46c0      	nop			; (mov r8, r8)
 8002168:	0000041e 	.word	0x0000041e

0800216c <__aeabi_ui2d>:
 800216c:	b510      	push	{r4, lr}
 800216e:	1e04      	subs	r4, r0, #0
 8002170:	d010      	beq.n	8002194 <__aeabi_ui2d+0x28>
 8002172:	f000 f821 	bl	80021b8 <__clzsi2>
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <__aeabi_ui2d+0x48>)
 8002178:	1a1b      	subs	r3, r3, r0
 800217a:	280a      	cmp	r0, #10
 800217c:	dc11      	bgt.n	80021a2 <__aeabi_ui2d+0x36>
 800217e:	220b      	movs	r2, #11
 8002180:	0021      	movs	r1, r4
 8002182:	1a12      	subs	r2, r2, r0
 8002184:	40d1      	lsrs	r1, r2
 8002186:	3015      	adds	r0, #21
 8002188:	030a      	lsls	r2, r1, #12
 800218a:	055b      	lsls	r3, r3, #21
 800218c:	4084      	lsls	r4, r0
 800218e:	0b12      	lsrs	r2, r2, #12
 8002190:	0d5b      	lsrs	r3, r3, #21
 8002192:	e001      	b.n	8002198 <__aeabi_ui2d+0x2c>
 8002194:	2300      	movs	r3, #0
 8002196:	2200      	movs	r2, #0
 8002198:	051b      	lsls	r3, r3, #20
 800219a:	4313      	orrs	r3, r2
 800219c:	0020      	movs	r0, r4
 800219e:	0019      	movs	r1, r3
 80021a0:	bd10      	pop	{r4, pc}
 80021a2:	0022      	movs	r2, r4
 80021a4:	380b      	subs	r0, #11
 80021a6:	4082      	lsls	r2, r0
 80021a8:	055b      	lsls	r3, r3, #21
 80021aa:	0312      	lsls	r2, r2, #12
 80021ac:	2400      	movs	r4, #0
 80021ae:	0b12      	lsrs	r2, r2, #12
 80021b0:	0d5b      	lsrs	r3, r3, #21
 80021b2:	e7f1      	b.n	8002198 <__aeabi_ui2d+0x2c>
 80021b4:	0000041e 	.word	0x0000041e

080021b8 <__clzsi2>:
 80021b8:	211c      	movs	r1, #28
 80021ba:	2301      	movs	r3, #1
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	4298      	cmp	r0, r3
 80021c0:	d301      	bcc.n	80021c6 <__clzsi2+0xe>
 80021c2:	0c00      	lsrs	r0, r0, #16
 80021c4:	3910      	subs	r1, #16
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	4298      	cmp	r0, r3
 80021ca:	d301      	bcc.n	80021d0 <__clzsi2+0x18>
 80021cc:	0a00      	lsrs	r0, r0, #8
 80021ce:	3908      	subs	r1, #8
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	4298      	cmp	r0, r3
 80021d4:	d301      	bcc.n	80021da <__clzsi2+0x22>
 80021d6:	0900      	lsrs	r0, r0, #4
 80021d8:	3904      	subs	r1, #4
 80021da:	a202      	add	r2, pc, #8	; (adr r2, 80021e4 <__clzsi2+0x2c>)
 80021dc:	5c10      	ldrb	r0, [r2, r0]
 80021de:	1840      	adds	r0, r0, r1
 80021e0:	4770      	bx	lr
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	02020304 	.word	0x02020304
 80021e8:	01010101 	.word	0x01010101
	...

080021f4 <WDTCheck_InitFW>:

void WDTCheck_Task(void *pvParameters);


void WDTCheck_InitFW(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af02      	add	r7, sp, #8
  xTaskCreate(WDTCheck_Task,         // Function that implements the task.
 80021fa:	4906      	ldr	r1, [pc, #24]	; (8002214 <WDTCheck_InitFW+0x20>)
 80021fc:	4806      	ldr	r0, [pc, #24]	; (8002218 <WDTCheck_InitFW+0x24>)
 80021fe:	4b07      	ldr	r3, [pc, #28]	; (800221c <WDTCheck_InitFW+0x28>)
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	2300      	movs	r3, #0
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	2301      	movs	r3, #1
 8002208:	22fa      	movs	r2, #250	; 0xfa
 800220a:	f006 fa5f 	bl	80086cc <xTaskCreate>
              "wdt",                 // Text name for the task.
              250,                   // Stack size in words, not bytes.
              (void*) 1,             // Parameter passed into the task.
              osPriorityNormal,      // Priority at which the task is created.
              &WDTCheck_TaskHandle); // Used to pass out the created task's handle.
}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	08010800 	.word	0x08010800
 8002218:	08002221 	.word	0x08002221
 800221c:	20000204 	.word	0x20000204

08002220 <WDTCheck_Task>:


void WDTCheck_Task(void *pvParameters)
{
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  WDTCheck WdtCheck;
  pWdtCheck = &WdtCheck;
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <WDTCheck_Task+0xac>)
 800222a:	210c      	movs	r1, #12
 800222c:	187a      	adds	r2, r7, r1
 800222e:	601a      	str	r2, [r3, #0]

  WdtCheck.bUsePermanentValue = true;
 8002230:	187b      	adds	r3, r7, r1
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]
  WdtCheck.u8TimesBeforeReturn = 0;
 8002236:	187b      	adds	r3, r7, r1
 8002238:	2200      	movs	r2, #0
 800223a:	705a      	strb	r2, [r3, #1]
  WdtCheck.u16PeriodCurrent = WDT_CHECK_PERIOD;
 800223c:	187b      	adds	r3, r7, r1
 800223e:	22fa      	movs	r2, #250	; 0xfa
 8002240:	0092      	lsls	r2, r2, #2
 8002242:	805a      	strh	r2, [r3, #2]
  WdtCheck.u16PeriodTemp = 0;
 8002244:	187b      	adds	r3, r7, r1
 8002246:	2200      	movs	r2, #0
 8002248:	809a      	strh	r2, [r3, #4]

  WdtCheck.sHealth.u16CounterProcess = 0;
 800224a:	187b      	adds	r3, r7, r1
 800224c:	2200      	movs	r2, #0
 800224e:	811a      	strh	r2, [r3, #8]
  WdtCheck.sHealth.bCheckProcess = false;
 8002250:	187b      	adds	r3, r7, r1
 8002252:	2200      	movs	r2, #0
 8002254:	719a      	strb	r2, [r3, #6]
  WdtCheck.sHealth.bLaunchProcess = false;
 8002256:	187b      	adds	r3, r7, r1
 8002258:	2200      	movs	r2, #0
 800225a:	71da      	strb	r2, [r3, #7]
  WdtCheck.sHealth.sTask.Register = WDT_CHECK_WATCHED_TASKS;
 800225c:	187b      	adds	r3, r7, r1
 800225e:	2207      	movs	r2, #7
 8002260:	72da      	strb	r2, [r3, #11]

  vTaskDelay(300);
 8002262:	2396      	movs	r3, #150	; 0x96
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	0018      	movs	r0, r3
 8002268:	f006 fb5a 	bl	8008920 <vTaskDelay>
  printf("WDT task Ok\r\n");
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <WDTCheck_Task+0xb0>)
 800226e:	0018      	movs	r0, r3
 8002270:	f008 fc46 	bl	800ab00 <puts>
    uint16_t u16counterWdt = 0;
    MX_IWDG_Init();
  #endif
  for (;;)
  {
    if ( true==WdtCheck.bUsePermanentValue)
 8002274:	240c      	movs	r4, #12
 8002276:	193b      	adds	r3, r7, r4
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d00b      	beq.n	8002296 <WDTCheck_Task+0x76>
    {
      HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800227e:	2390      	movs	r3, #144	; 0x90
 8002280:	05db      	lsls	r3, r3, #23
 8002282:	2120      	movs	r1, #32
 8002284:	0018      	movs	r0, r3
 8002286:	f002 fe34 	bl	8004ef2 <HAL_GPIO_TogglePin>
      vTaskDelay(WdtCheck.u16PeriodCurrent);
 800228a:	193b      	adds	r3, r7, r4
 800228c:	885b      	ldrh	r3, [r3, #2]
 800228e:	0018      	movs	r0, r3
 8002290:	f006 fb46 	bl	8008920 <vTaskDelay>
 8002294:	e7ee      	b.n	8002274 <WDTCheck_Task+0x54>
    }
    else
    {
      do
      {
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002296:	2390      	movs	r3, #144	; 0x90
 8002298:	05db      	lsls	r3, r3, #23
 800229a:	2120      	movs	r1, #32
 800229c:	0018      	movs	r0, r3
 800229e:	f002 fe28 	bl	8004ef2 <HAL_GPIO_TogglePin>
        vTaskDelay(WdtCheck.u16PeriodTemp);
 80022a2:	240c      	movs	r4, #12
 80022a4:	193b      	adds	r3, r7, r4
 80022a6:	889b      	ldrh	r3, [r3, #4]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f006 fb39 	bl	8008920 <vTaskDelay>
        WdtCheck.u8TimesBeforeReturn--;
 80022ae:	0021      	movs	r1, r4
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	785b      	ldrb	r3, [r3, #1]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	705a      	strb	r2, [r3, #1]
        #if 1==DEBUG_WDT_CHECK_ACTIVE
          HAL_IWDG_Refresh(&hiwdg);
        #endif
      }
      while (0<WdtCheck.u8TimesBeforeReturn);
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	785b      	ldrb	r3, [r3, #1]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e8      	bne.n	8002296 <WDTCheck_Task+0x76>
      WdtCheck.bUsePermanentValue = true;
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
    if ( true==WdtCheck.bUsePermanentValue)
 80022ca:	e7d3      	b.n	8002274 <WDTCheck_Task+0x54>
 80022cc:	20000208 	.word	0x20000208
 80022d0:	08010804 	.word	0x08010804

080022d4 <WDTCheck_Period>:
  }
}


void WDTCheck_Period(bool bIsPermanent, uint16_t u16Period, uint8_t u8Times)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0004      	movs	r4, r0
 80022dc:	0008      	movs	r0, r1
 80022de:	0011      	movs	r1, r2
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	1c22      	adds	r2, r4, #0
 80022e4:	701a      	strb	r2, [r3, #0]
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	1c02      	adds	r2, r0, #0
 80022ea:	801a      	strh	r2, [r3, #0]
 80022ec:	1dbb      	adds	r3, r7, #6
 80022ee:	1c0a      	adds	r2, r1, #0
 80022f0:	701a      	strb	r2, [r3, #0]
  if (NULL==WDTCheck_TaskHandle)
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <WDTCheck_Period+0x74>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d021      	beq.n	800233e <WDTCheck_Period+0x6a>
  {
    return;
  }

  pWdtCheck->bUsePermanentValue = bIsPermanent;
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <WDTCheck_Period+0x78>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	1dfa      	adds	r2, r7, #7
 8002300:	7812      	ldrb	r2, [r2, #0]
 8002302:	701a      	strb	r2, [r3, #0]
  if (true == bIsPermanent)
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00d      	beq.n	8002328 <WDTCheck_Period+0x54>
  {
    pWdtCheck->u16PeriodCurrent = u16Period;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <WDTCheck_Period+0x78>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	1d3a      	adds	r2, r7, #4
 8002312:	8812      	ldrh	r2, [r2, #0]
 8002314:	805a      	strh	r2, [r3, #2]
    pWdtCheck->u16PeriodTemp = 0;
 8002316:	4b0d      	ldr	r3, [pc, #52]	; (800234c <WDTCheck_Period+0x78>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2200      	movs	r2, #0
 800231c:	809a      	strh	r2, [r3, #4]
    pWdtCheck->u8TimesBeforeReturn = 0;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <WDTCheck_Period+0x78>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2200      	movs	r2, #0
 8002324:	705a      	strb	r2, [r3, #1]
 8002326:	e00b      	b.n	8002340 <WDTCheck_Period+0x6c>
  }
  else
  {
    pWdtCheck->u16PeriodTemp = u16Period;
 8002328:	4b08      	ldr	r3, [pc, #32]	; (800234c <WDTCheck_Period+0x78>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1d3a      	adds	r2, r7, #4
 800232e:	8812      	ldrh	r2, [r2, #0]
 8002330:	809a      	strh	r2, [r3, #4]
    pWdtCheck->u8TimesBeforeReturn = u8Times;
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <WDTCheck_Period+0x78>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1dba      	adds	r2, r7, #6
 8002338:	7812      	ldrb	r2, [r2, #0]
 800233a:	705a      	strb	r2, [r3, #1]
 800233c:	e000      	b.n	8002340 <WDTCheck_Period+0x6c>
    return;
 800233e:	46c0      	nop			; (mov r8, r8)
  }
}
 8002340:	46bd      	mov	sp, r7
 8002342:	b003      	add	sp, #12
 8002344:	bd90      	pop	{r4, r7, pc}
 8002346:	46c0      	nop			; (mov r8, r8)
 8002348:	20000204 	.word	0x20000204
 800234c:	20000208 	.word	0x20000208

08002350 <WDTCheck_HealthResponse>:

}


void WDTCheck_HealthResponse(char code)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	0002      	movs	r2, r0
 8002358:	1dfb      	adds	r3, r7, #7
 800235a:	701a      	strb	r2, [r3, #0]
  HAL_IWDG_Refresh(&hiwdg);
 800235c:	4b13      	ldr	r3, [pc, #76]	; (80023ac <WDTCheck_HealthResponse+0x5c>)
 800235e:	0018      	movs	r0, r3
 8002360:	f002 fe08 	bl	8004f74 <HAL_IWDG_Refresh>
  switch (code)
 8002364:	1dfb      	adds	r3, r7, #7
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d013      	beq.n	8002394 <WDTCheck_HealthResponse+0x44>
 800236c:	dc19      	bgt.n	80023a2 <WDTCheck_HealthResponse+0x52>
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <WDTCheck_HealthResponse+0x28>
 8002372:	2b01      	cmp	r3, #1
 8002374:	d007      	beq.n	8002386 <WDTCheck_HealthResponse+0x36>
 8002376:	e014      	b.n	80023a2 <WDTCheck_HealthResponse+0x52>
  {
    case WDT_CHECK_TASK_GPS_CODE:
    {
      pWdtCheck->sHealth.sTask.Task.t0 = 1;
 8002378:	4b0d      	ldr	r3, [pc, #52]	; (80023b0 <WDTCheck_HealthResponse+0x60>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	7ada      	ldrb	r2, [r3, #11]
 800237e:	2101      	movs	r1, #1
 8002380:	430a      	orrs	r2, r1
 8002382:	72da      	strb	r2, [r3, #11]
      break;
 8002384:	e00e      	b.n	80023a4 <WDTCheck_HealthResponse+0x54>
    }
    case WDT_CHECK_TASK_SHELL_CODE:
    {
      pWdtCheck->sHealth.sTask.Task.t1 = 1;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <WDTCheck_HealthResponse+0x60>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	7ada      	ldrb	r2, [r3, #11]
 800238c:	2102      	movs	r1, #2
 800238e:	430a      	orrs	r2, r1
 8002390:	72da      	strb	r2, [r3, #11]
      break;
 8002392:	e007      	b.n	80023a4 <WDTCheck_HealthResponse+0x54>
    }
    case WDT_CHECK_TASK_CHECK_POS_CODE:
    {
      pWdtCheck->sHealth.sTask.Task.t2 = 1;
 8002394:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <WDTCheck_HealthResponse+0x60>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	7ada      	ldrb	r2, [r3, #11]
 800239a:	2104      	movs	r1, #4
 800239c:	430a      	orrs	r2, r1
 800239e:	72da      	strb	r2, [r3, #11]
      break;
 80023a0:	e000      	b.n	80023a4 <WDTCheck_HealthResponse+0x54>
    }
    default:
    {
      while(1);
 80023a2:	e7fe      	b.n	80023a2 <WDTCheck_HealthResponse+0x52>
    }
  }
}
 80023a4:	46c0      	nop			; (mov r8, r8)
 80023a6:	46bd      	mov	sp, r7
 80023a8:	b002      	add	sp, #8
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	20002490 	.word	0x20002490
 80023b0:	20000208 	.word	0x20000208

080023b4 <checkPos_InitFw>:
void checkPos_CheckDistance(void);
void checkPos_TimerCallback(TimerHandle_t xTimer);


void checkPos_InitFw(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af02      	add	r7, sp, #8
  //BaseType_t xReturned;
  if(NULL == checkPosHandleTask)
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <checkPos_InitFw+0x28>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <checkPos_InitFw+0x22>
  {
    xTaskCreate(checkPos_Task, // Function that implements the task
 80023c2:	4907      	ldr	r1, [pc, #28]	; (80023e0 <checkPos_InitFw+0x2c>)
 80023c4:	4807      	ldr	r0, [pc, #28]	; (80023e4 <checkPos_InitFw+0x30>)
 80023c6:	4b05      	ldr	r3, [pc, #20]	; (80023dc <checkPos_InitFw+0x28>)
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	2300      	movs	r3, #0
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2301      	movs	r3, #1
 80023d0:	22fa      	movs	r2, #250	; 0xfa
 80023d2:	f006 f97b 	bl	80086cc <xTaskCreate>
    250,                       // Stack size in words, not bytes
    (void*) 1,                 // Parameter passed into the task
    osPriorityNormal,          // Priority at which the task is created
    &checkPosHandleTask);      // Used to pass out the created task's handle
  }
}
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000020c 	.word	0x2000020c
 80023e0:	08010814 	.word	0x08010814
 80023e4:	080023e9 	.word	0x080023e9

080023e8 <checkPos_Task>:


void checkPos_Task(void *pvParameters)
{
 80023e8:	b590      	push	{r4, r7, lr}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
  checkPos_ResetVariables();
 80023f0:	f000 f86e 	bl	80024d0 <checkPos_ResetVariables>
  if(NULL == checkPosSemaphore)
 80023f4:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <checkPos_Task+0xcc>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d107      	bne.n	800240c <checkPos_Task+0x24>
  {
    checkPosSemaphore = xSemaphoreCreateBinary();
 80023fc:	2203      	movs	r2, #3
 80023fe:	2100      	movs	r1, #0
 8002400:	2001      	movs	r0, #1
 8002402:	f005 fbe3 	bl	8007bcc <xQueueGenericCreate>
 8002406:	0002      	movs	r2, r0
 8002408:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <checkPos_Task+0xcc>)
 800240a:	601a      	str	r2, [r3, #0]
  }

  if(NULL == checkPosTimer)
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <checkPos_Task+0xd0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <checkPos_Task+0x42>
  {
    checkPosTimer = xTimerCreate("TimerRxFromBle", CHECK_POS_CHECK_DISTANCE, pdTRUE,
 8002414:	4929      	ldr	r1, [pc, #164]	; (80024bc <checkPos_Task+0xd4>)
 8002416:	482a      	ldr	r0, [pc, #168]	; (80024c0 <checkPos_Task+0xd8>)
 8002418:	4b2a      	ldr	r3, [pc, #168]	; (80024c4 <checkPos_Task+0xdc>)
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2300      	movs	r3, #0
 800241e:	2201      	movs	r2, #1
 8002420:	f007 f88e 	bl	8009540 <xTimerCreate>
 8002424:	0002      	movs	r2, r0
 8002426:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <checkPos_Task+0xd0>)
 8002428:	601a      	str	r2, [r3, #0]
        (void*) 0, checkPos_TimerCallback);
  }

  vTaskDelay(400);
 800242a:	23c8      	movs	r3, #200	; 0xc8
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	0018      	movs	r0, r3
 8002430:	f006 fa76 	bl	8008920 <vTaskDelay>
  checkPos_ResetVariables();
 8002434:	f000 f84c 	bl	80024d0 <checkPos_ResetVariables>
  printf("check pos task ok\r\n");
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <checkPos_Task+0xe0>)
 800243a:	0018      	movs	r0, r3
 800243c:	f008 fb60 	bl	800ab00 <puts>
  checkPos_PrintHelp();
 8002440:	f000 f87a 	bl	8002538 <checkPos_PrintHelp>
  vTaskDelay(2000);
 8002444:	23fa      	movs	r3, #250	; 0xfa
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	0018      	movs	r0, r3
 800244a:	f006 fa69 	bl	8008920 <vTaskDelay>
  if(checkPosTimer!=NULL)
 800244e:	4b1a      	ldr	r3, [pc, #104]	; (80024b8 <checkPos_Task+0xd0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <checkPos_Task+0x86>
  {
    xTimerStart(checkPosTimer, 5);
 8002456:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <checkPos_Task+0xd0>)
 8002458:	681c      	ldr	r4, [r3, #0]
 800245a:	f006 fb73 	bl	8008b44 <xTaskGetTickCount>
 800245e:	0002      	movs	r2, r0
 8002460:	2305      	movs	r3, #5
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2300      	movs	r3, #0
 8002466:	2101      	movs	r1, #1
 8002468:	0020      	movs	r0, r4
 800246a:	f007 f8b5 	bl	80095d8 <xTimerGenericCommand>
  }
  for (;;)
  {
    if(xSemaphoreTake(checkPosSemaphore, portMAX_DELAY) == pdTRUE)
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <checkPos_Task+0xcc>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2201      	movs	r2, #1
 8002474:	4252      	negs	r2, r2
 8002476:	0011      	movs	r1, r2
 8002478:	0018      	movs	r0, r3
 800247a:	f005 fe4e 	bl	800811a <xQueueSemaphoreTake>
 800247e:	0003      	movs	r3, r0
 8002480:	2b01      	cmp	r3, #1
 8002482:	d1f4      	bne.n	800246e <checkPos_Task+0x86>
    {
      if(true == sCheckPos.sWakeupReason.bTimer)
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <checkPos_Task+0xe4>)
 8002486:	2220      	movs	r2, #32
 8002488:	5c9b      	ldrb	r3, [r3, r2]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d005      	beq.n	800249a <checkPos_Task+0xb2>
      {
        sCheckPos.sWakeupReason.bTimer = false;
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <checkPos_Task+0xe4>)
 8002490:	2220      	movs	r2, #32
 8002492:	2100      	movs	r1, #0
 8002494:	5499      	strb	r1, [r3, r2]
        checkPos_CheckDistance();
 8002496:	f000 f89b 	bl	80025d0 <checkPos_CheckDistance>
      }
      if(true == sCheckPos.sWakeupReason.bHealthRequest)
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <checkPos_Task+0xe4>)
 800249c:	2221      	movs	r2, #33	; 0x21
 800249e:	5c9b      	ldrb	r3, [r3, r2]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0e4      	beq.n	800246e <checkPos_Task+0x86>
      {
        sCheckPos.sWakeupReason.bHealthRequest = false;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <checkPos_Task+0xe4>)
 80024a6:	2221      	movs	r2, #33	; 0x21
 80024a8:	2100      	movs	r1, #0
 80024aa:	5499      	strb	r1, [r3, r2]
        WDTCheck_HealthResponse(WDT_CHECK_TASK_CHECK_POS_CODE);
 80024ac:	2002      	movs	r0, #2
 80024ae:	f7ff ff4f 	bl	8002350 <WDTCheck_HealthResponse>
    if(xSemaphoreTake(checkPosSemaphore, portMAX_DELAY) == pdTRUE)
 80024b2:	e7dc      	b.n	800246e <checkPos_Task+0x86>
 80024b4:	20000210 	.word	0x20000210
 80024b8:	20000214 	.word	0x20000214
 80024bc:	00001388 	.word	0x00001388
 80024c0:	08010820 	.word	0x08010820
 80024c4:	08002ae5 	.word	0x08002ae5
 80024c8:	08010830 	.word	0x08010830
 80024cc:	200024a0 	.word	0x200024a0

080024d0 <checkPos_ResetVariables>:
  }
}


void checkPos_ResetVariables(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  sCheckPos.dLatitude = 0;
 80024d4:	4914      	ldr	r1, [pc, #80]	; (8002528 <checkPos_ResetVariables+0x58>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	2300      	movs	r3, #0
 80024da:	600a      	str	r2, [r1, #0]
 80024dc:	604b      	str	r3, [r1, #4]
  sCheckPos.dLongitude = 0;
 80024de:	4912      	ldr	r1, [pc, #72]	; (8002528 <checkPos_ResetVariables+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	2300      	movs	r3, #0
 80024e4:	608a      	str	r2, [r1, #8]
 80024e6:	60cb      	str	r3, [r1, #12]
  sCheckPos.dDistance = 0;
 80024e8:	490f      	ldr	r1, [pc, #60]	; (8002528 <checkPos_ResetVariables+0x58>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	2300      	movs	r3, #0
 80024ee:	610a      	str	r2, [r1, #16]
 80024f0:	614b      	str	r3, [r1, #20]
  sCheckPos.dEarthRad = CHECK_POS_EARTH_RAD_DEFAULT;
 80024f2:	490d      	ldr	r1, [pc, #52]	; (8002528 <checkPos_ResetVariables+0x58>)
 80024f4:	4a0d      	ldr	r2, [pc, #52]	; (800252c <checkPos_ResetVariables+0x5c>)
 80024f6:	4b0e      	ldr	r3, [pc, #56]	; (8002530 <checkPos_ResetVariables+0x60>)
 80024f8:	618a      	str	r2, [r1, #24]
 80024fa:	61cb      	str	r3, [r1, #28]
  sCheckPos.sWakeupReason.bTimer = false;
 80024fc:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <checkPos_ResetVariables+0x58>)
 80024fe:	2220      	movs	r2, #32
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]
  sCheckPos.sDoCheck.Register = 0;
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <checkPos_ResetVariables+0x58>)
 8002506:	2222      	movs	r2, #34	; 0x22
 8002508:	2100      	movs	r1, #0
 800250a:	5499      	strb	r1, [r3, r2]
  sCheckPos.sWakeupReason.bHealthRequest = false;
 800250c:	4b06      	ldr	r3, [pc, #24]	; (8002528 <checkPos_ResetVariables+0x58>)
 800250e:	2221      	movs	r2, #33	; 0x21
 8002510:	2100      	movs	r1, #0
 8002512:	5499      	strb	r1, [r3, r2]
  WDTCheck_Period(true, CHECK_POS_BLINK_NO_CFG, 0);
 8002514:	4b07      	ldr	r3, [pc, #28]	; (8002534 <checkPos_ResetVariables+0x64>)
 8002516:	2200      	movs	r2, #0
 8002518:	0019      	movs	r1, r3
 800251a:	2001      	movs	r0, #1
 800251c:	f7ff feda 	bl	80022d4 <WDTCheck_Period>
}
 8002520:	46c0      	nop			; (mov r8, r8)
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	46c0      	nop			; (mov r8, r8)
 8002528:	200024a0 	.word	0x200024a0
 800252c:	9999999a 	.word	0x9999999a
 8002530:	40b8ea19 	.word	0x40b8ea19
 8002534:	000005dc 	.word	0x000005dc

08002538 <checkPos_PrintHelp>:


void checkPos_PrintHelp(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  printf("%s> How to config parameters:\r\n", CHECK_POS_PROMPT);
 800253c:	4a17      	ldr	r2, [pc, #92]	; (800259c <checkPos_PrintHelp+0x64>)
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <checkPos_PrintHelp+0x68>)
 8002540:	0011      	movs	r1, r2
 8002542:	0018      	movs	r0, r3
 8002544:	f008 fa50 	bl	800a9e8 <iprintf>
  printf("config latitude:\r\n");
 8002548:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <checkPos_PrintHelp+0x6c>)
 800254a:	0018      	movs	r0, r3
 800254c:	f008 fad8 	bl	800ab00 <puts>
  printf("   lat=<value>\r\n");
 8002550:	4b15      	ldr	r3, [pc, #84]	; (80025a8 <checkPos_PrintHelp+0x70>)
 8002552:	0018      	movs	r0, r3
 8002554:	f008 fad4 	bl	800ab00 <puts>
  printf("config longitude:\r\n");
 8002558:	4b14      	ldr	r3, [pc, #80]	; (80025ac <checkPos_PrintHelp+0x74>)
 800255a:	0018      	movs	r0, r3
 800255c:	f008 fad0 	bl	800ab00 <puts>
  printf("   lon=<value>\r\n");
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <checkPos_PrintHelp+0x78>)
 8002562:	0018      	movs	r0, r3
 8002564:	f008 facc 	bl	800ab00 <puts>
  printf("config earth radius[kms]: (default: %f)\r\n", CHECK_POS_EARTH_RAD_DEFAULT);
 8002568:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <checkPos_PrintHelp+0x7c>)
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <checkPos_PrintHelp+0x80>)
 800256c:	4913      	ldr	r1, [pc, #76]	; (80025bc <checkPos_PrintHelp+0x84>)
 800256e:	0008      	movs	r0, r1
 8002570:	f008 fa3a 	bl	800a9e8 <iprintf>
  printf("   rad=<value>\r\n");
 8002574:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <checkPos_PrintHelp+0x88>)
 8002576:	0018      	movs	r0, r3
 8002578:	f008 fac2 	bl	800ab00 <puts>
  printf("get parameters\r\n");
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <checkPos_PrintHelp+0x8c>)
 800257e:	0018      	movs	r0, r3
 8002580:	f008 fabe 	bl	800ab00 <puts>
  printf("   data\r\n");
 8002584:	4b10      	ldr	r3, [pc, #64]	; (80025c8 <checkPos_PrintHelp+0x90>)
 8002586:	0018      	movs	r0, r3
 8002588:	f008 faba 	bl	800ab00 <puts>
  printf("  parameters: Point:[lat,log] Radius:<radius> Kms  <==Response\r\n");
 800258c:	4b0f      	ldr	r3, [pc, #60]	; (80025cc <checkPos_PrintHelp+0x94>)
 800258e:	0018      	movs	r0, r3
 8002590:	f008 fab6 	bl	800ab00 <puts>
}
 8002594:	46c0      	nop			; (mov r8, r8)
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	08010844 	.word	0x08010844
 80025a0:	08010850 	.word	0x08010850
 80025a4:	08010870 	.word	0x08010870
 80025a8:	08010884 	.word	0x08010884
 80025ac:	08010894 	.word	0x08010894
 80025b0:	080108a8 	.word	0x080108a8
 80025b4:	9999999a 	.word	0x9999999a
 80025b8:	40b8ea19 	.word	0x40b8ea19
 80025bc:	080108b8 	.word	0x080108b8
 80025c0:	080108e4 	.word	0x080108e4
 80025c4:	080108f4 	.word	0x080108f4
 80025c8:	08010904 	.word	0x08010904
 80025cc:	08010910 	.word	0x08010910

080025d0 <checkPos_CheckDistance>:


void checkPos_CheckDistance(void)
{
 80025d0:	b5b0      	push	{r4, r5, r7, lr}
 80025d2:	b092      	sub	sp, #72	; 0x48
 80025d4:	af06      	add	r7, sp, #24
  double dLatitudeDD  = gps_GetLatitudeDegreeDecimals();
 80025d6:	f000 fc79 	bl	8002ecc <gps_GetLatitudeDegreeDecimals>
 80025da:	0002      	movs	r2, r0
 80025dc:	000b      	movs	r3, r1
 80025de:	62ba      	str	r2, [r7, #40]	; 0x28
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  double dLongitudeDD = gps_GetLongitudeDegreeDecimals();
 80025e2:	f000 fc7f 	bl	8002ee4 <gps_GetLongitudeDegreeDecimals>
 80025e6:	0002      	movs	r2, r0
 80025e8:	000b      	movs	r3, r1
 80025ea:	623a      	str	r2, [r7, #32]
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
  sCheckPos.sDoCheck.cfg.GpsOk = gps_IsValidFrame();
 80025ee:	f000 fc85 	bl	8002efc <gps_IsValidFrame>
 80025f2:	0003      	movs	r3, r0
 80025f4:	0018      	movs	r0, r3
 80025f6:	4bd2      	ldr	r3, [pc, #840]	; (8002940 <checkPos_CheckDistance+0x370>)
 80025f8:	2222      	movs	r2, #34	; 0x22
 80025fa:	2101      	movs	r1, #1
 80025fc:	4001      	ands	r1, r0
 80025fe:	008c      	lsls	r4, r1, #2
 8002600:	5c99      	ldrb	r1, [r3, r2]
 8002602:	2004      	movs	r0, #4
 8002604:	4381      	bics	r1, r0
 8002606:	1c08      	adds	r0, r1, #0
 8002608:	1c21      	adds	r1, r4, #0
 800260a:	4301      	orrs	r1, r0
 800260c:	5499      	strb	r1, [r3, r2]
  if (sCheckPos.sDoCheck.cfg.GpsOk == 1)
  {
  }
  if (sCheckPos.sDoCheck.cfg.GpsOk == 0)
 800260e:	4bcc      	ldr	r3, [pc, #816]	; (8002940 <checkPos_CheckDistance+0x370>)
 8002610:	2222      	movs	r2, #34	; 0x22
 8002612:	5c9b      	ldrb	r3, [r3, r2]
 8002614:	075b      	lsls	r3, r3, #29
 8002616:	0fdb      	lsrs	r3, r3, #31
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2201      	movs	r2, #1
 800261c:	4053      	eors	r3, r2
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00d      	beq.n	8002640 <checkPos_CheckDistance+0x70>
  {
    printf("%s> GPS [no valid data from gps]\r\n", CHECK_POS_PROMPT);
 8002624:	4ac7      	ldr	r2, [pc, #796]	; (8002944 <checkPos_CheckDistance+0x374>)
 8002626:	4bc8      	ldr	r3, [pc, #800]	; (8002948 <checkPos_CheckDistance+0x378>)
 8002628:	0011      	movs	r1, r2
 800262a:	0018      	movs	r0, r3
 800262c:	f008 f9dc 	bl	800a9e8 <iprintf>
    WDTCheck_Period(true, CHECK_POS_BLINK_FAR_AWAY, 0);
 8002630:	23fa      	movs	r3, #250	; 0xfa
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	2200      	movs	r2, #0
 8002636:	0019      	movs	r1, r3
 8002638:	2001      	movs	r0, #1
 800263a:	f7ff fe4b 	bl	80022d4 <WDTCheck_Period>
    return;
 800263e:	e17c      	b.n	800293a <checkPos_CheckDistance+0x36a>
  }
  if (sCheckPos.sDoCheck.Register < 0x07)
 8002640:	4bbf      	ldr	r3, [pc, #764]	; (8002940 <checkPos_CheckDistance+0x370>)
 8002642:	2222      	movs	r2, #34	; 0x22
 8002644:	5c9b      	ldrb	r3, [r3, r2]
 8002646:	2b06      	cmp	r3, #6
 8002648:	d80e      	bhi.n	8002668 <checkPos_CheckDistance+0x98>
  {
    printf("%s> GPS [%f,%f] configure parameters\r\n", CHECK_POS_PROMPT, dLatitudeDD, dLongitudeDD);
 800264a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800264c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800264e:	4dbd      	ldr	r5, [pc, #756]	; (8002944 <checkPos_CheckDistance+0x374>)
 8002650:	4cbe      	ldr	r4, [pc, #760]	; (800294c <checkPos_CheckDistance+0x37c>)
 8002652:	6a3a      	ldr	r2, [r7, #32]
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	9200      	str	r2, [sp, #0]
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	0002      	movs	r2, r0
 800265c:	000b      	movs	r3, r1
 800265e:	0029      	movs	r1, r5
 8002660:	0020      	movs	r0, r4
 8002662:	f008 f9c1 	bl	800a9e8 <iprintf>
    return;
 8002666:	e168      	b.n	800293a <checkPos_CheckDistance+0x36a>
  }
  printf("%s> GPS:[%f,%f]", CHECK_POS_PROMPT, dLatitudeDD, dLongitudeDD);
 8002668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800266a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800266c:	4db5      	ldr	r5, [pc, #724]	; (8002944 <checkPos_CheckDistance+0x374>)
 800266e:	4cb8      	ldr	r4, [pc, #736]	; (8002950 <checkPos_CheckDistance+0x380>)
 8002670:	6a3a      	ldr	r2, [r7, #32]
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	9200      	str	r2, [sp, #0]
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	0002      	movs	r2, r0
 800267a:	000b      	movs	r3, r1
 800267c:	0029      	movs	r1, r5
 800267e:	0020      	movs	r0, r4
 8002680:	f008 f9b2 	bl	800a9e8 <iprintf>
  double difLatitude =  (dLatitudeDD  - sCheckPos.dLatitude)   *M_PI/180;
 8002684:	4bae      	ldr	r3, [pc, #696]	; (8002940 <checkPos_CheckDistance+0x370>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800268c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800268e:	f7ff f957 	bl	8001940 <__aeabi_dsub>
 8002692:	0002      	movs	r2, r0
 8002694:	000b      	movs	r3, r1
 8002696:	0010      	movs	r0, r2
 8002698:	0019      	movs	r1, r3
 800269a:	4aae      	ldr	r2, [pc, #696]	; (8002954 <checkPos_CheckDistance+0x384>)
 800269c:	4bae      	ldr	r3, [pc, #696]	; (8002958 <checkPos_CheckDistance+0x388>)
 800269e:	f7fe fee3 	bl	8001468 <__aeabi_dmul>
 80026a2:	0002      	movs	r2, r0
 80026a4:	000b      	movs	r3, r1
 80026a6:	0010      	movs	r0, r2
 80026a8:	0019      	movs	r1, r3
 80026aa:	2200      	movs	r2, #0
 80026ac:	4bab      	ldr	r3, [pc, #684]	; (800295c <checkPos_CheckDistance+0x38c>)
 80026ae:	f7fe fad5 	bl	8000c5c <__aeabi_ddiv>
 80026b2:	0002      	movs	r2, r0
 80026b4:	000b      	movs	r3, r1
 80026b6:	61ba      	str	r2, [r7, #24]
 80026b8:	61fb      	str	r3, [r7, #28]
  double difLongitude = (dLongitudeDD - sCheckPos.dLongitude)  *M_PI/180;
 80026ba:	4ba1      	ldr	r3, [pc, #644]	; (8002940 <checkPos_CheckDistance+0x370>)
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	6a38      	ldr	r0, [r7, #32]
 80026c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c4:	f7ff f93c 	bl	8001940 <__aeabi_dsub>
 80026c8:	0002      	movs	r2, r0
 80026ca:	000b      	movs	r3, r1
 80026cc:	0010      	movs	r0, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	4aa0      	ldr	r2, [pc, #640]	; (8002954 <checkPos_CheckDistance+0x384>)
 80026d2:	4ba1      	ldr	r3, [pc, #644]	; (8002958 <checkPos_CheckDistance+0x388>)
 80026d4:	f7fe fec8 	bl	8001468 <__aeabi_dmul>
 80026d8:	0002      	movs	r2, r0
 80026da:	000b      	movs	r3, r1
 80026dc:	0010      	movs	r0, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	2200      	movs	r2, #0
 80026e2:	4b9e      	ldr	r3, [pc, #632]	; (800295c <checkPos_CheckDistance+0x38c>)
 80026e4:	f7fe faba 	bl	8000c5c <__aeabi_ddiv>
 80026e8:	0002      	movs	r2, r0
 80026ea:	000b      	movs	r3, r1
 80026ec:	613a      	str	r2, [r7, #16]
 80026ee:	617b      	str	r3, [r7, #20]
  dLatitudeDD  *= M_PI/180;
 80026f0:	4a9b      	ldr	r2, [pc, #620]	; (8002960 <checkPos_CheckDistance+0x390>)
 80026f2:	4b9c      	ldr	r3, [pc, #624]	; (8002964 <checkPos_CheckDistance+0x394>)
 80026f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026f8:	f7fe feb6 	bl	8001468 <__aeabi_dmul>
 80026fc:	0002      	movs	r2, r0
 80026fe:	000b      	movs	r3, r1
 8002700:	62ba      	str	r2, [r7, #40]	; 0x28
 8002702:	62fb      	str	r3, [r7, #44]	; 0x2c
  dLongitudeDD *= M_PI/180;
 8002704:	4a96      	ldr	r2, [pc, #600]	; (8002960 <checkPos_CheckDistance+0x390>)
 8002706:	4b97      	ldr	r3, [pc, #604]	; (8002964 <checkPos_CheckDistance+0x394>)
 8002708:	6a38      	ldr	r0, [r7, #32]
 800270a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800270c:	f7fe feac 	bl	8001468 <__aeabi_dmul>
 8002710:	0002      	movs	r2, r0
 8002712:	000b      	movs	r3, r1
 8002714:	623a      	str	r2, [r7, #32]
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
  sCheckPos.dDistance = pow(sin(difLatitude / 2), 2) +
 8002718:	2200      	movs	r2, #0
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	05db      	lsls	r3, r3, #23
 800271e:	69b8      	ldr	r0, [r7, #24]
 8002720:	69f9      	ldr	r1, [r7, #28]
 8002722:	f7fe fa9b 	bl	8000c5c <__aeabi_ddiv>
 8002726:	0002      	movs	r2, r0
 8002728:	000b      	movs	r3, r1
 800272a:	0010      	movs	r0, r2
 800272c:	0019      	movs	r1, r3
 800272e:	f00b ff01 	bl	800e534 <sin>
 8002732:	2200      	movs	r2, #0
 8002734:	2380      	movs	r3, #128	; 0x80
 8002736:	05db      	lsls	r3, r3, #23
 8002738:	f00b ff72 	bl	800e620 <pow>
 800273c:	0004      	movs	r4, r0
 800273e:	000d      	movs	r5, r1
                        pow(sin(difLongitude / 2), 2) * cos(dLatitudeDD*M_PI/180) * cos(sCheckPos.dLatitude*M_PI/180);
 8002740:	2200      	movs	r2, #0
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	05db      	lsls	r3, r3, #23
 8002746:	6938      	ldr	r0, [r7, #16]
 8002748:	6979      	ldr	r1, [r7, #20]
 800274a:	f7fe fa87 	bl	8000c5c <__aeabi_ddiv>
 800274e:	0002      	movs	r2, r0
 8002750:	000b      	movs	r3, r1
 8002752:	0010      	movs	r0, r2
 8002754:	0019      	movs	r1, r3
 8002756:	f00b feed 	bl	800e534 <sin>
 800275a:	2200      	movs	r2, #0
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	05db      	lsls	r3, r3, #23
 8002760:	f00b ff5e 	bl	800e620 <pow>
 8002764:	60b8      	str	r0, [r7, #8]
 8002766:	60f9      	str	r1, [r7, #12]
 8002768:	4a7a      	ldr	r2, [pc, #488]	; (8002954 <checkPos_CheckDistance+0x384>)
 800276a:	4b7b      	ldr	r3, [pc, #492]	; (8002958 <checkPos_CheckDistance+0x388>)
 800276c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800276e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002770:	f7fe fe7a 	bl	8001468 <__aeabi_dmul>
 8002774:	0002      	movs	r2, r0
 8002776:	000b      	movs	r3, r1
 8002778:	0010      	movs	r0, r2
 800277a:	0019      	movs	r1, r3
 800277c:	2200      	movs	r2, #0
 800277e:	4b77      	ldr	r3, [pc, #476]	; (800295c <checkPos_CheckDistance+0x38c>)
 8002780:	f7fe fa6c 	bl	8000c5c <__aeabi_ddiv>
 8002784:	0002      	movs	r2, r0
 8002786:	000b      	movs	r3, r1
 8002788:	0010      	movs	r0, r2
 800278a:	0019      	movs	r1, r3
 800278c:	f00b fe90 	bl	800e4b0 <cos>
 8002790:	0002      	movs	r2, r0
 8002792:	000b      	movs	r3, r1
 8002794:	68b8      	ldr	r0, [r7, #8]
 8002796:	68f9      	ldr	r1, [r7, #12]
 8002798:	f7fe fe66 	bl	8001468 <__aeabi_dmul>
 800279c:	0002      	movs	r2, r0
 800279e:	000b      	movs	r3, r1
 80027a0:	60ba      	str	r2, [r7, #8]
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	4b66      	ldr	r3, [pc, #408]	; (8002940 <checkPos_CheckDistance+0x370>)
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	6859      	ldr	r1, [r3, #4]
 80027aa:	4a6a      	ldr	r2, [pc, #424]	; (8002954 <checkPos_CheckDistance+0x384>)
 80027ac:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <checkPos_CheckDistance+0x388>)
 80027ae:	f7fe fe5b 	bl	8001468 <__aeabi_dmul>
 80027b2:	0002      	movs	r2, r0
 80027b4:	000b      	movs	r3, r1
 80027b6:	0010      	movs	r0, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	2200      	movs	r2, #0
 80027bc:	4b67      	ldr	r3, [pc, #412]	; (800295c <checkPos_CheckDistance+0x38c>)
 80027be:	f7fe fa4d 	bl	8000c5c <__aeabi_ddiv>
 80027c2:	0002      	movs	r2, r0
 80027c4:	000b      	movs	r3, r1
 80027c6:	0010      	movs	r0, r2
 80027c8:	0019      	movs	r1, r3
 80027ca:	f00b fe71 	bl	800e4b0 <cos>
 80027ce:	0002      	movs	r2, r0
 80027d0:	000b      	movs	r3, r1
 80027d2:	68b8      	ldr	r0, [r7, #8]
 80027d4:	68f9      	ldr	r1, [r7, #12]
 80027d6:	f7fe fe47 	bl	8001468 <__aeabi_dmul>
 80027da:	0002      	movs	r2, r0
 80027dc:	000b      	movs	r3, r1
  sCheckPos.dDistance = pow(sin(difLatitude / 2), 2) +
 80027de:	0020      	movs	r0, r4
 80027e0:	0029      	movs	r1, r5
 80027e2:	f7fd fed1 	bl	8000588 <__aeabi_dadd>
 80027e6:	0002      	movs	r2, r0
 80027e8:	000b      	movs	r3, r1
 80027ea:	4955      	ldr	r1, [pc, #340]	; (8002940 <checkPos_CheckDistance+0x370>)
 80027ec:	610a      	str	r2, [r1, #16]
 80027ee:	614b      	str	r3, [r1, #20]
  sCheckPos.dDistance = 2 * sCheckPos.dEarthRad * asin(sqrt(sCheckPos.dDistance))*1000;
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <checkPos_CheckDistance+0x370>)
 80027f2:	6998      	ldr	r0, [r3, #24]
 80027f4:	69d9      	ldr	r1, [r3, #28]
 80027f6:	0002      	movs	r2, r0
 80027f8:	000b      	movs	r3, r1
 80027fa:	f7fd fec5 	bl	8000588 <__aeabi_dadd>
 80027fe:	0002      	movs	r2, r0
 8002800:	000b      	movs	r3, r1
 8002802:	0014      	movs	r4, r2
 8002804:	001d      	movs	r5, r3
 8002806:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <checkPos_CheckDistance+0x370>)
 8002808:	691a      	ldr	r2, [r3, #16]
 800280a:	695b      	ldr	r3, [r3, #20]
 800280c:	0010      	movs	r0, r2
 800280e:	0019      	movs	r1, r3
 8002810:	f00b ffbe 	bl	800e790 <sqrt>
 8002814:	0002      	movs	r2, r0
 8002816:	000b      	movs	r3, r1
 8002818:	0010      	movs	r0, r2
 800281a:	0019      	movs	r1, r3
 800281c:	f00b fed0 	bl	800e5c0 <asin>
 8002820:	0002      	movs	r2, r0
 8002822:	000b      	movs	r3, r1
 8002824:	0020      	movs	r0, r4
 8002826:	0029      	movs	r1, r5
 8002828:	f7fe fe1e 	bl	8001468 <__aeabi_dmul>
 800282c:	0002      	movs	r2, r0
 800282e:	000b      	movs	r3, r1
 8002830:	0010      	movs	r0, r2
 8002832:	0019      	movs	r1, r3
 8002834:	2200      	movs	r2, #0
 8002836:	4b4c      	ldr	r3, [pc, #304]	; (8002968 <checkPos_CheckDistance+0x398>)
 8002838:	f7fe fe16 	bl	8001468 <__aeabi_dmul>
 800283c:	0002      	movs	r2, r0
 800283e:	000b      	movs	r3, r1
 8002840:	493f      	ldr	r1, [pc, #252]	; (8002940 <checkPos_CheckDistance+0x370>)
 8002842:	610a      	str	r2, [r1, #16]
 8002844:	614b      	str	r3, [r1, #20]
  printf(" TARGET:[%f,%f]  Distance:%.2f m %s\r\n",
 8002846:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <checkPos_CheckDistance+0x370>)
 8002848:	685c      	ldr	r4, [r3, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	60fc      	str	r4, [r7, #12]
 8002850:	4b3b      	ldr	r3, [pc, #236]	; (8002940 <checkPos_CheckDistance+0x370>)
 8002852:	689c      	ldr	r4, [r3, #8]
 8002854:	68dd      	ldr	r5, [r3, #12]
 8002856:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <checkPos_CheckDistance+0x370>)
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	603a      	str	r2, [r7, #0]
 800285e:	607b      	str	r3, [r7, #4]
									 sCheckPos.dLatitude, sCheckPos.dLongitude,
									 sCheckPos.dDistance,
									 (sCheckPos.dDistance<=100?" close to target!":""));
 8002860:	4b37      	ldr	r3, [pc, #220]	; (8002940 <checkPos_CheckDistance+0x370>)
 8002862:	6918      	ldr	r0, [r3, #16]
 8002864:	6959      	ldr	r1, [r3, #20]
  printf(" TARGET:[%f,%f]  Distance:%.2f m %s\r\n",
 8002866:	2200      	movs	r2, #0
 8002868:	4b40      	ldr	r3, [pc, #256]	; (800296c <checkPos_CheckDistance+0x39c>)
 800286a:	f7fd fdff 	bl	800046c <__aeabi_dcmple>
 800286e:	1e03      	subs	r3, r0, #0
 8002870:	d001      	beq.n	8002876 <checkPos_CheckDistance+0x2a6>
 8002872:	4b3f      	ldr	r3, [pc, #252]	; (8002970 <checkPos_CheckDistance+0x3a0>)
 8002874:	e000      	b.n	8002878 <checkPos_CheckDistance+0x2a8>
 8002876:	4b3f      	ldr	r3, [pc, #252]	; (8002974 <checkPos_CheckDistance+0x3a4>)
 8002878:	493f      	ldr	r1, [pc, #252]	; (8002978 <checkPos_CheckDistance+0x3a8>)
 800287a:	9304      	str	r3, [sp, #16]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	9202      	str	r2, [sp, #8]
 8002882:	9303      	str	r3, [sp, #12]
 8002884:	9400      	str	r4, [sp, #0]
 8002886:	9501      	str	r5, [sp, #4]
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	0008      	movs	r0, r1
 800288e:	f008 f8ab 	bl	800a9e8 <iprintf>
  if (sCheckPos.dDistance<=20)
 8002892:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <checkPos_CheckDistance+0x370>)
 8002894:	6918      	ldr	r0, [r3, #16]
 8002896:	6959      	ldr	r1, [r3, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	4b38      	ldr	r3, [pc, #224]	; (800297c <checkPos_CheckDistance+0x3ac>)
 800289c:	f7fd fde6 	bl	800046c <__aeabi_dcmple>
 80028a0:	1e03      	subs	r3, r0, #0
 80028a2:	d005      	beq.n	80028b0 <checkPos_CheckDistance+0x2e0>
  {
    WDTCheck_Period(true, CHECK_POS_BLINK_20_MTS, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2114      	movs	r1, #20
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7ff fd13 	bl	80022d4 <WDTCheck_Period>
 80028ae:	e044      	b.n	800293a <checkPos_CheckDistance+0x36a>
  }
  else if (sCheckPos.dDistance<=50)
 80028b0:	4b23      	ldr	r3, [pc, #140]	; (8002940 <checkPos_CheckDistance+0x370>)
 80028b2:	6918      	ldr	r0, [r3, #16]
 80028b4:	6959      	ldr	r1, [r3, #20]
 80028b6:	2200      	movs	r2, #0
 80028b8:	4b31      	ldr	r3, [pc, #196]	; (8002980 <checkPos_CheckDistance+0x3b0>)
 80028ba:	f7fd fdd7 	bl	800046c <__aeabi_dcmple>
 80028be:	1e03      	subs	r3, r0, #0
 80028c0:	d005      	beq.n	80028ce <checkPos_CheckDistance+0x2fe>
  {
    WDTCheck_Period(true, CHECK_POS_BLINK_50_MTS, 0);
 80028c2:	2200      	movs	r2, #0
 80028c4:	2132      	movs	r1, #50	; 0x32
 80028c6:	2001      	movs	r0, #1
 80028c8:	f7ff fd04 	bl	80022d4 <WDTCheck_Period>
 80028cc:	e035      	b.n	800293a <checkPos_CheckDistance+0x36a>
  }
  else if (sCheckPos.dDistance<=100)
 80028ce:	4b1c      	ldr	r3, [pc, #112]	; (8002940 <checkPos_CheckDistance+0x370>)
 80028d0:	6918      	ldr	r0, [r3, #16]
 80028d2:	6959      	ldr	r1, [r3, #20]
 80028d4:	2200      	movs	r2, #0
 80028d6:	4b25      	ldr	r3, [pc, #148]	; (800296c <checkPos_CheckDistance+0x39c>)
 80028d8:	f7fd fdc8 	bl	800046c <__aeabi_dcmple>
 80028dc:	1e03      	subs	r3, r0, #0
 80028de:	d005      	beq.n	80028ec <checkPos_CheckDistance+0x31c>
  {
    WDTCheck_Period(true, CHECK_POS_BLINK_100_MTS, 0);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2164      	movs	r1, #100	; 0x64
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7ff fcf5 	bl	80022d4 <WDTCheck_Period>
 80028ea:	e026      	b.n	800293a <checkPos_CheckDistance+0x36a>
  }
  else if (sCheckPos.dDistance<=250)
 80028ec:	4b14      	ldr	r3, [pc, #80]	; (8002940 <checkPos_CheckDistance+0x370>)
 80028ee:	6918      	ldr	r0, [r3, #16]
 80028f0:	6959      	ldr	r1, [r3, #20]
 80028f2:	2200      	movs	r2, #0
 80028f4:	4b23      	ldr	r3, [pc, #140]	; (8002984 <checkPos_CheckDistance+0x3b4>)
 80028f6:	f7fd fdb9 	bl	800046c <__aeabi_dcmple>
 80028fa:	1e03      	subs	r3, r0, #0
 80028fc:	d005      	beq.n	800290a <checkPos_CheckDistance+0x33a>
  {
    WDTCheck_Period(true, CHECK_POS_BLINK_250_MTS, 0);
 80028fe:	2200      	movs	r2, #0
 8002900:	21fa      	movs	r1, #250	; 0xfa
 8002902:	2001      	movs	r0, #1
 8002904:	f7ff fce6 	bl	80022d4 <WDTCheck_Period>
 8002908:	e017      	b.n	800293a <checkPos_CheckDistance+0x36a>
  }
  else if (sCheckPos.dDistance<=500)
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <checkPos_CheckDistance+0x370>)
 800290c:	6918      	ldr	r0, [r3, #16]
 800290e:	6959      	ldr	r1, [r3, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <checkPos_CheckDistance+0x3b8>)
 8002914:	f7fd fdaa 	bl	800046c <__aeabi_dcmple>
 8002918:	1e03      	subs	r3, r0, #0
 800291a:	d007      	beq.n	800292c <checkPos_CheckDistance+0x35c>
  {
    WDTCheck_Period(true, CHECK_POS_BLINK_500_MTS, 0);
 800291c:	23fa      	movs	r3, #250	; 0xfa
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	2200      	movs	r2, #0
 8002922:	0019      	movs	r1, r3
 8002924:	2001      	movs	r0, #1
 8002926:	f7ff fcd5 	bl	80022d4 <WDTCheck_Period>
 800292a:	e006      	b.n	800293a <checkPos_CheckDistance+0x36a>
  }
  else
  {
    WDTCheck_Period(true, CHECK_POS_BLINK_FAR_AWAY, 0);
 800292c:	23fa      	movs	r3, #250	; 0xfa
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	2200      	movs	r2, #0
 8002932:	0019      	movs	r1, r3
 8002934:	2001      	movs	r0, #1
 8002936:	f7ff fccd 	bl	80022d4 <WDTCheck_Period>
  }
}
 800293a:	46bd      	mov	sp, r7
 800293c:	b00c      	add	sp, #48	; 0x30
 800293e:	bdb0      	pop	{r4, r5, r7, pc}
 8002940:	200024a0 	.word	0x200024a0
 8002944:	08010844 	.word	0x08010844
 8002948:	08010950 	.word	0x08010950
 800294c:	08010974 	.word	0x08010974
 8002950:	0801099c 	.word	0x0801099c
 8002954:	54442d18 	.word	0x54442d18
 8002958:	400921fb 	.word	0x400921fb
 800295c:	40668000 	.word	0x40668000
 8002960:	a2529d39 	.word	0xa2529d39
 8002964:	3f91df46 	.word	0x3f91df46
 8002968:	408f4000 	.word	0x408f4000
 800296c:	40590000 	.word	0x40590000
 8002970:	080109ac 	.word	0x080109ac
 8002974:	080109c0 	.word	0x080109c0
 8002978:	080109c4 	.word	0x080109c4
 800297c:	40340000 	.word	0x40340000
 8002980:	40490000 	.word	0x40490000
 8002984:	406f4000 	.word	0x406f4000
 8002988:	407f4000 	.word	0x407f4000

0800298c <checkPos_SetLatitude>:


bool checkPos_SetLatitude(double dLat)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6038      	str	r0, [r7, #0]
 8002994:	6079      	str	r1, [r7, #4]
  if( (dLat >= -90) && (dLat <=  90) )
 8002996:	2200      	movs	r2, #0
 8002998:	4b10      	ldr	r3, [pc, #64]	; (80029dc <checkPos_SetLatitude+0x50>)
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	f7fd fd79 	bl	8000494 <__aeabi_dcmpge>
 80029a2:	1e03      	subs	r3, r0, #0
 80029a4:	d014      	beq.n	80029d0 <checkPos_SetLatitude+0x44>
 80029a6:	2200      	movs	r2, #0
 80029a8:	4b0d      	ldr	r3, [pc, #52]	; (80029e0 <checkPos_SetLatitude+0x54>)
 80029aa:	6838      	ldr	r0, [r7, #0]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	f7fd fd5d 	bl	800046c <__aeabi_dcmple>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d00c      	beq.n	80029d0 <checkPos_SetLatitude+0x44>
  {
    sCheckPos.sDoCheck.cfg.Lat = true;
 80029b6:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <checkPos_SetLatitude+0x58>)
 80029b8:	2222      	movs	r2, #34	; 0x22
 80029ba:	5c99      	ldrb	r1, [r3, r2]
 80029bc:	2001      	movs	r0, #1
 80029be:	4301      	orrs	r1, r0
 80029c0:	5499      	strb	r1, [r3, r2]
    sCheckPos.dLatitude = dLat;
 80029c2:	4908      	ldr	r1, [pc, #32]	; (80029e4 <checkPos_SetLatitude+0x58>)
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	600a      	str	r2, [r1, #0]
 80029ca:	604b      	str	r3, [r1, #4]
    return true;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <checkPos_SetLatitude+0x46>
  }
  return false;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	c0568000 	.word	0xc0568000
 80029e0:	40568000 	.word	0x40568000
 80029e4:	200024a0 	.word	0x200024a0

080029e8 <checkPos_GetLatitude>:


double checkPos_GetLatitude(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
  return sCheckPos.dLatitude;
 80029ec:	4b03      	ldr	r3, [pc, #12]	; (80029fc <checkPos_GetLatitude+0x14>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]

}
 80029f2:	0010      	movs	r0, r2
 80029f4:	0019      	movs	r1, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	200024a0 	.word	0x200024a0

08002a00 <checkPos_SetLongitude>:


bool checkPos_SetLongitude(double dLon)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6038      	str	r0, [r7, #0]
 8002a08:	6079      	str	r1, [r7, #4]
  if( (dLon >= -180) && (dLon <= 180) )
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <checkPos_SetLongitude+0x50>)
 8002a0e:	6838      	ldr	r0, [r7, #0]
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	f7fd fd3f 	bl	8000494 <__aeabi_dcmpge>
 8002a16:	1e03      	subs	r3, r0, #0
 8002a18:	d014      	beq.n	8002a44 <checkPos_SetLongitude+0x44>
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <checkPos_SetLongitude+0x54>)
 8002a1e:	6838      	ldr	r0, [r7, #0]
 8002a20:	6879      	ldr	r1, [r7, #4]
 8002a22:	f7fd fd23 	bl	800046c <__aeabi_dcmple>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d00c      	beq.n	8002a44 <checkPos_SetLongitude+0x44>
  {
    sCheckPos.sDoCheck.cfg.Lon = true;
 8002a2a:	4b0b      	ldr	r3, [pc, #44]	; (8002a58 <checkPos_SetLongitude+0x58>)
 8002a2c:	2222      	movs	r2, #34	; 0x22
 8002a2e:	5c99      	ldrb	r1, [r3, r2]
 8002a30:	2002      	movs	r0, #2
 8002a32:	4301      	orrs	r1, r0
 8002a34:	5499      	strb	r1, [r3, r2]
      sCheckPos.dLongitude = dLon;
 8002a36:	4908      	ldr	r1, [pc, #32]	; (8002a58 <checkPos_SetLongitude+0x58>)
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	608a      	str	r2, [r1, #8]
 8002a3e:	60cb      	str	r3, [r1, #12]
      return true;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <checkPos_SetLongitude+0x46>
  }
  return false;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b002      	add	sp, #8
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	c0668000 	.word	0xc0668000
 8002a54:	40668000 	.word	0x40668000
 8002a58:	200024a0 	.word	0x200024a0

08002a5c <checkPos_GetLongitude>:


double checkPos_GetLongitude(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  return sCheckPos.dLongitude;
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <checkPos_GetLongitude+0x14>)
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	68db      	ldr	r3, [r3, #12]
}
 8002a66:	0010      	movs	r0, r2
 8002a68:	0019      	movs	r1, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	46c0      	nop			; (mov r8, r8)
 8002a70:	200024a0 	.word	0x200024a0

08002a74 <checkPos_SetEarthRadius>:


bool checkPos_SetEarthRadius(double dRad)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6038      	str	r0, [r7, #0]
 8002a7c:	6079      	str	r1, [r7, #4]
  if( (dRad >= 6356.8) && (dRad <=6378.1) )
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <checkPos_SetEarthRadius+0x44>)
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <checkPos_SetEarthRadius+0x48>)
 8002a82:	6838      	ldr	r0, [r7, #0]
 8002a84:	6879      	ldr	r1, [r7, #4]
 8002a86:	f7fd fd05 	bl	8000494 <__aeabi_dcmpge>
 8002a8a:	1e03      	subs	r3, r0, #0
 8002a8c:	d00e      	beq.n	8002aac <checkPos_SetEarthRadius+0x38>
 8002a8e:	4a0c      	ldr	r2, [pc, #48]	; (8002ac0 <checkPos_SetEarthRadius+0x4c>)
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <checkPos_SetEarthRadius+0x50>)
 8002a92:	6838      	ldr	r0, [r7, #0]
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	f7fd fce9 	bl	800046c <__aeabi_dcmple>
 8002a9a:	1e03      	subs	r3, r0, #0
 8002a9c:	d006      	beq.n	8002aac <checkPos_SetEarthRadius+0x38>
  {
    sCheckPos.dEarthRad = dRad;
 8002a9e:	490a      	ldr	r1, [pc, #40]	; (8002ac8 <checkPos_SetEarthRadius+0x54>)
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	618a      	str	r2, [r1, #24]
 8002aa6:	61cb      	str	r3, [r1, #28]
    return true;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <checkPos_SetEarthRadius+0x3a>
  }
  return false;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	0018      	movs	r0, r3
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	b002      	add	sp, #8
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	46c0      	nop			; (mov r8, r8)
 8002ab8:	cccccccd 	.word	0xcccccccd
 8002abc:	40b8d4cc 	.word	0x40b8d4cc
 8002ac0:	9999999a 	.word	0x9999999a
 8002ac4:	40b8ea19 	.word	0x40b8ea19
 8002ac8:	200024a0 	.word	0x200024a0

08002acc <checkPos_GetEarthRadius>:


double checkPos_GetEarthRadius(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  return sCheckPos.dEarthRad;
 8002ad0:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <checkPos_GetEarthRadius+0x14>)
 8002ad2:	699a      	ldr	r2, [r3, #24]
 8002ad4:	69db      	ldr	r3, [r3, #28]
}
 8002ad6:	0010      	movs	r0, r2
 8002ad8:	0019      	movs	r1, r3
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	200024a0 	.word	0x200024a0

08002ae4 <checkPos_TimerCallback>:
  xSemaphoreGive(checkPosSemaphore);
}


void checkPos_TimerCallback(TimerHandle_t xTimer)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if(NULL == checkPosHandleTask || NULL == checkPosSemaphore)
 8002aec:	4b0b      	ldr	r3, [pc, #44]	; (8002b1c <checkPos_TimerCallback+0x38>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00f      	beq.n	8002b14 <checkPos_TimerCallback+0x30>
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <checkPos_TimerCallback+0x3c>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <checkPos_TimerCallback+0x30>
  {
    return;
  }
  sCheckPos.sWakeupReason.bTimer = true;
 8002afc:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <checkPos_TimerCallback+0x40>)
 8002afe:	2220      	movs	r2, #32
 8002b00:	2101      	movs	r1, #1
 8002b02:	5499      	strb	r1, [r3, r2]
  xSemaphoreGive(checkPosSemaphore);
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <checkPos_TimerCallback+0x3c>)
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	f005 f8b5 	bl	8007c7c <xQueueGenericSend>
 8002b12:	e000      	b.n	8002b16 <checkPos_TimerCallback+0x32>
    return;
 8002b14:	46c0      	nop			; (mov r8, r8)
}
 8002b16:	46bd      	mov	sp, r7
 8002b18:	b002      	add	sp, #8
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	2000020c 	.word	0x2000020c
 8002b20:	20000210 	.word	0x20000210
 8002b24:	200024a0 	.word	0x200024a0

08002b28 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <vApplicationGetIdleTaskMemory+0x28>)
 8002b38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	4a05      	ldr	r2, [pc, #20]	; (8002b54 <vApplicationGetIdleTaskMemory+0x2c>)
 8002b3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	b004      	add	sp, #16
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	20000218 	.word	0x20000218
 8002b54:	2000026c 	.word	0x2000026c

08002b58 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4a06      	ldr	r2, [pc, #24]	; (8002b80 <vApplicationGetTimerTaskMemory+0x28>)
 8002b68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <vApplicationGetTimerTaskMemory+0x2c>)
 8002b6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002b76:	46c0      	nop			; (mov r8, r8)
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	b004      	add	sp, #16
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	46c0      	nop			; (mov r8, r8)
 8002b80:	2000046c 	.word	0x2000046c
 8002b84:	200004c0 	.word	0x200004c0

08002b88 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002b88:	b590      	push	{r4, r7, lr}
 8002b8a:	b089      	sub	sp, #36	; 0x24
 8002b8c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	4a09      	ldr	r2, [pc, #36]	; (8002bb8 <MX_FREERTOS_Init+0x30>)
 8002b92:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b94:	c313      	stmia	r3!, {r0, r1, r4}
 8002b96:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002b98:	c313      	stmia	r3!, {r0, r1, r4}
 8002b9a:	6812      	ldr	r2, [r2, #0]
 8002b9c:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002b9e:	1d3b      	adds	r3, r7, #4
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	f004 fe69 	bl	800787a <osThreadCreate>
 8002ba8:	0002      	movs	r2, r0
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <MX_FREERTOS_Init+0x34>)
 8002bac:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b009      	add	sp, #36	; 0x24
 8002bb4:	bd90      	pop	{r4, r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	080109f8 	.word	0x080109f8
 8002bbc:	200024c8 	.word	0x200024c8

08002bc0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8002bc8:	2001      	movs	r0, #1
 8002bca:	f004 fea3 	bl	8007914 <osDelay>
 8002bce:	e7fb      	b.n	8002bc8 <StartDefaultTask+0x8>

08002bd0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002bd0:	b590      	push	{r4, r7, lr}
 8002bd2:	b08b      	sub	sp, #44	; 0x2c
 8002bd4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd6:	2414      	movs	r4, #20
 8002bd8:	193b      	adds	r3, r7, r4
 8002bda:	0018      	movs	r0, r3
 8002bdc:	2314      	movs	r3, #20
 8002bde:	001a      	movs	r2, r3
 8002be0:	2100      	movs	r1, #0
 8002be2:	f007 fa7e 	bl	800a0e2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be6:	4b44      	ldr	r3, [pc, #272]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002be8:	695a      	ldr	r2, [r3, #20]
 8002bea:	4b43      	ldr	r3, [pc, #268]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002bec:	2180      	movs	r1, #128	; 0x80
 8002bee:	0309      	lsls	r1, r1, #12
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	615a      	str	r2, [r3, #20]
 8002bf4:	4b40      	ldr	r3, [pc, #256]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002bf6:	695a      	ldr	r2, [r3, #20]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	031b      	lsls	r3, r3, #12
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c02:	4b3d      	ldr	r3, [pc, #244]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002c08:	2180      	movs	r1, #128	; 0x80
 8002c0a:	03c9      	lsls	r1, r1, #15
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	615a      	str	r2, [r3, #20]
 8002c10:	4b39      	ldr	r3, [pc, #228]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002c12:	695a      	ldr	r2, [r3, #20]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	03db      	lsls	r3, r3, #15
 8002c18:	4013      	ands	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1e:	4b36      	ldr	r3, [pc, #216]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	4b35      	ldr	r3, [pc, #212]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002c24:	2180      	movs	r1, #128	; 0x80
 8002c26:	0289      	lsls	r1, r1, #10
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	615a      	str	r2, [r3, #20]
 8002c2c:	4b32      	ldr	r3, [pc, #200]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	2380      	movs	r3, #128	; 0x80
 8002c32:	029b      	lsls	r3, r3, #10
 8002c34:	4013      	ands	r3, r2
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	4b2e      	ldr	r3, [pc, #184]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	02c9      	lsls	r1, r1, #11
 8002c44:	430a      	orrs	r2, r1
 8002c46:	615a      	str	r2, [r3, #20]
 8002c48:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <MX_GPIO_Init+0x128>)
 8002c4a:	695a      	ldr	r2, [r3, #20]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	02db      	lsls	r3, r3, #11
 8002c50:	4013      	ands	r3, r2
 8002c52:	607b      	str	r3, [r7, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002c56:	2390      	movs	r3, #144	; 0x90
 8002c58:	05db      	lsls	r3, r3, #23
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	2120      	movs	r1, #32
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f002 f92a 	bl	8004eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002c64:	193b      	adds	r3, r7, r4
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	0192      	lsls	r2, r2, #6
 8002c6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002c6c:	193b      	adds	r3, r7, r4
 8002c6e:	2284      	movs	r2, #132	; 0x84
 8002c70:	0392      	lsls	r2, r2, #14
 8002c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c74:	193b      	adds	r3, r7, r4
 8002c76:	2200      	movs	r2, #0
 8002c78:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c7a:	193b      	adds	r3, r7, r4
 8002c7c:	4a1f      	ldr	r2, [pc, #124]	; (8002cfc <MX_GPIO_Init+0x12c>)
 8002c7e:	0019      	movs	r1, r3
 8002c80:	0010      	movs	r0, r2
 8002c82:	f001 ffa1 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002c86:	193b      	adds	r3, r7, r4
 8002c88:	2220      	movs	r2, #32
 8002c8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c8c:	193b      	adds	r3, r7, r4
 8002c8e:	2201      	movs	r2, #1
 8002c90:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	193b      	adds	r3, r7, r4
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	193b      	adds	r3, r7, r4
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002c9e:	193a      	adds	r2, r7, r4
 8002ca0:	2390      	movs	r3, #144	; 0x90
 8002ca2:	05db      	lsls	r3, r3, #23
 8002ca4:	0011      	movs	r1, r2
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f001 ff8e 	bl	8004bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8002cac:	0021      	movs	r1, r4
 8002cae:	187b      	adds	r3, r7, r1
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002cb4:	187b      	adds	r3, r7, r1
 8002cb6:	2288      	movs	r2, #136	; 0x88
 8002cb8:	0352      	lsls	r2, r2, #13
 8002cba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbc:	187b      	adds	r3, r7, r1
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8002cc2:	187b      	adds	r3, r7, r1
 8002cc4:	4a0e      	ldr	r2, [pc, #56]	; (8002d00 <MX_GPIO_Init+0x130>)
 8002cc6:	0019      	movs	r1, r3
 8002cc8:	0010      	movs	r0, r2
 8002cca:	f001 ff7d 	bl	8004bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2103      	movs	r1, #3
 8002cd2:	2005      	movs	r0, #5
 8002cd4:	f001 fed6 	bl	8004a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002cd8:	2005      	movs	r0, #5
 8002cda:	f001 fee8 	bl	8004aae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8002cde:	2200      	movs	r2, #0
 8002ce0:	2103      	movs	r1, #3
 8002ce2:	2007      	movs	r0, #7
 8002ce4:	f001 fece 	bl	8004a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002ce8:	2007      	movs	r0, #7
 8002cea:	f001 fee0 	bl	8004aae <HAL_NVIC_EnableIRQ>

}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b00b      	add	sp, #44	; 0x2c
 8002cf4:	bd90      	pop	{r4, r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	48000800 	.word	0x48000800
 8002d00:	48000400 	.word	0x48000400

08002d04 <gps_InitFw>:

uint8_t gps_HexaCharToAscii(uint8_t uHexa);


void gps_InitFw(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af02      	add	r7, sp, #8
  if (NULL==gpsTaskHandle)
 8002d0a:	4b08      	ldr	r3, [pc, #32]	; (8002d2c <gps_InitFw+0x28>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <gps_InitFw+0x22>
  {
    xTaskCreate(gps_Task,         // Function that implements the task
 8002d12:	4907      	ldr	r1, [pc, #28]	; (8002d30 <gps_InitFw+0x2c>)
 8002d14:	4807      	ldr	r0, [pc, #28]	; (8002d34 <gps_InitFw+0x30>)
 8002d16:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <gps_InitFw+0x28>)
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	2301      	movs	r3, #1
 8002d20:	22c8      	movs	r2, #200	; 0xc8
 8002d22:	f005 fcd3 	bl	80086cc <xTaskCreate>
                200,              // Stack size in words, not bytes
                (void *) 1,       // Parameter passed into the task
                osPriorityNormal, // Priority at which the task is created
                &gpsTaskHandle);  // Used to pass out the created task's handle
  }
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	200006c0 	.word	0x200006c0
 8002d30:	08010a14 	.word	0x08010a14
 8002d34:	08002d79 	.word	0x08002d79

08002d38 <gps_InitHw>:


void gps_InitHw(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  MX_USART1_UART_Init(); //uart GPS
 8002d3c:	f001 fcc6 	bl	80046cc <MX_USART1_UART_Init>
  HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);    // USART1_IRQn interrupt configuration
 8002d40:	2200      	movs	r2, #0
 8002d42:	2103      	movs	r1, #3
 8002d44:	201b      	movs	r0, #27
 8002d46:	f001 fe9d 	bl	8004a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);            // USART1_IRQn interrupt configuration
 8002d4a:	201b      	movs	r0, #27
 8002d4c:	f001 feaf 	bl	8004aae <HAL_NVIC_EnableIRQ>
  __HAL_UART_ENABLE_IT(&huart1,UART_IT_RXNE); // Enable Receive Interrupt
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <gps_InitHw+0x38>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <gps_InitHw+0x38>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	2120      	movs	r1, #32
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]
  printf("GPS Hw Ok\r\n");
 8002d60:	4b04      	ldr	r3, [pc, #16]	; (8002d74 <gps_InitHw+0x3c>)
 8002d62:	0018      	movs	r0, r3
 8002d64:	f007 fecc 	bl	800ab00 <puts>
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	46c0      	nop			; (mov r8, r8)
 8002d70:	20002628 	.word	0x20002628
 8002d74:	08010a18 	.word	0x08010a18

08002d78 <gps_Task>:

void gps_Task(void * argument)
{
 8002d78:	b590      	push	{r4, r7, lr}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint8_t gpsFirstByte = 0;
 8002d80:	230f      	movs	r3, #15
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	2200      	movs	r2, #0
 8002d86:	701a      	strb	r2, [r3, #0]
  GpsData.bHealthRequest = false;
 8002d88:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <gps_Task+0xbc>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	705a      	strb	r2, [r3, #1]

  printf("Init GPS\r\n");
 8002d8e:	4b2a      	ldr	r3, [pc, #168]	; (8002e38 <gps_Task+0xc0>)
 8002d90:	0018      	movs	r0, r3
 8002d92:	f007 feb5 	bl	800ab00 <puts>


  if (NULL==gpsSemaphoreHandle)
 8002d96:	4b29      	ldr	r3, [pc, #164]	; (8002e3c <gps_Task+0xc4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d107      	bne.n	8002dae <gps_Task+0x36>
  {
    gpsSemaphoreHandle = xSemaphoreCreateBinary();
 8002d9e:	2203      	movs	r2, #3
 8002da0:	2100      	movs	r1, #0
 8002da2:	2001      	movs	r0, #1
 8002da4:	f004 ff12 	bl	8007bcc <xQueueGenericCreate>
 8002da8:	0002      	movs	r2, r0
 8002daa:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <gps_Task+0xc4>)
 8002dac:	601a      	str	r2, [r3, #0]
  }

  if (NULL==gpsRxQueue)
 8002dae:	4b24      	ldr	r3, [pc, #144]	; (8002e40 <gps_Task+0xc8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d107      	bne.n	8002dc6 <gps_Task+0x4e>
  {
    gpsRxQueue = xQueueCreate(GPS_RX_QUEUE_SIZE, sizeof(uint8_t));
 8002db6:	2200      	movs	r2, #0
 8002db8:	2101      	movs	r1, #1
 8002dba:	2050      	movs	r0, #80	; 0x50
 8002dbc:	f004 ff06 	bl	8007bcc <xQueueGenericCreate>
 8002dc0:	0002      	movs	r2, r0
 8002dc2:	4b1f      	ldr	r3, [pc, #124]	; (8002e40 <gps_Task+0xc8>)
 8002dc4:	601a      	str	r2, [r3, #0]
  }

  gps_InitValidationParameters(); // validation parameters setup
 8002dc6:	f000 f8a7 	bl	8002f18 <gps_InitValidationParameters>
  gps_InitHw(); // Init Hardware
 8002dca:	f7ff ffb5 	bl	8002d38 <gps_InitHw>

  printf("GPS Task Ok\r\n");
 8002dce:	4b1d      	ldr	r3, [pc, #116]	; (8002e44 <gps_Task+0xcc>)
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f007 fe95 	bl	800ab00 <puts>
  for (;;)
  {
    if( xSemaphoreTake( gpsSemaphoreHandle, portMAX_DELAY ) == pdTRUE) // wait until \n arrives from UART
 8002dd6:	4b19      	ldr	r3, [pc, #100]	; (8002e3c <gps_Task+0xc4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	4252      	negs	r2, r2
 8002dde:	0011      	movs	r1, r2
 8002de0:	0018      	movs	r0, r3
 8002de2:	f005 f99a 	bl	800811a <xQueueSemaphoreTake>
 8002de6:	0003      	movs	r3, r0
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d1f4      	bne.n	8002dd6 <gps_Task+0x5e>
    {
      if( xQueueReceive( gpsRxQueue, &gpsFirstByte, portMAX_DELAY ) == pdTRUE )
 8002dec:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <gps_Task+0xc8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2201      	movs	r2, #1
 8002df2:	4252      	negs	r2, r2
 8002df4:	240f      	movs	r4, #15
 8002df6:	1939      	adds	r1, r7, r4
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f005 f8d9 	bl	8007fb0 <xQueueReceive>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d105      	bne.n	8002e10 <gps_Task+0x98>
      {
        if(gpsFirstByte == '$')  // Verifies the head of Frame
 8002e04:	193b      	adds	r3, r7, r4
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b24      	cmp	r3, #36	; 0x24
 8002e0a:	d101      	bne.n	8002e10 <gps_Task+0x98>
        {
          gps_FrameDecoder();
 8002e0c:	f000 f8d4 	bl	8002fb8 <gps_FrameDecoder>
        }
      }
      if (false!=GpsData.bHealthRequest)  //Watchdog timer
 8002e10:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <gps_Task+0xbc>)
 8002e12:	785b      	ldrb	r3, [r3, #1]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <gps_Task+0xae>
      {
        WDTCheck_HealthResponse(WDT_CHECK_TASK_GPS_CODE);
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	f7ff fa98 	bl	8002350 <WDTCheck_HealthResponse>
        GpsData.bHealthRequest = false;
 8002e20:	4b04      	ldr	r3, [pc, #16]	; (8002e34 <gps_Task+0xbc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	705a      	strb	r2, [r3, #1]
      }
      xQueueReset(gpsRxQueue);
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <gps_Task+0xc8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	0018      	movs	r0, r3
 8002e2e:	f004 fe2e 	bl	8007a8e <xQueueGenericReset>
    if( xSemaphoreTake( gpsSemaphoreHandle, portMAX_DELAY ) == pdTRUE) // wait until \n arrives from UART
 8002e32:	e7d0      	b.n	8002dd6 <gps_Task+0x5e>
 8002e34:	200024f8 	.word	0x200024f8
 8002e38:	08010a24 	.word	0x08010a24
 8002e3c:	200006c8 	.word	0x200006c8
 8002e40:	200006c4 	.word	0x200006c4
 8002e44:	08010a30 	.word	0x08010a30

08002e48 <gps_ReceiveData>:
  }
}


void gps_ReceiveData(uint8_t pRxData)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	0002      	movs	r2, r0
 8002e50:	1dfb      	adds	r3, r7, #7
 8002e52:	701a      	strb	r2, [r3, #0]
  if (NULL==gpsTaskHandle || NULL == gpsSemaphoreHandle )
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <gps_ReceiveData+0x70>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d028      	beq.n	8002eae <gps_ReceiveData+0x66>
 8002e5c:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <gps_ReceiveData+0x74>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d024      	beq.n	8002eae <gps_ReceiveData+0x66>
  {
    return;
  }
  static portBASE_TYPE xHigherPriorityTaskWoken;
  xHigherPriorityTaskWoken = pdFALSE;
 8002e64:	4b16      	ldr	r3, [pc, #88]	; (8002ec0 <gps_ReceiveData+0x78>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	601a      	str	r2, [r3, #0]
  xQueueSendFromISR(gpsRxQueue, &pRxData, NULL);
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <gps_ReceiveData+0x7c>)
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	1df9      	adds	r1, r7, #7
 8002e70:	2300      	movs	r3, #0
 8002e72:	2200      	movs	r2, #0
 8002e74:	f004 ffc6 	bl	8007e04 <xQueueGenericSendFromISR>
  if( (pRxData == '\n') || (xQueueIsQueueFullFromISR(gpsRxQueue) != pdFALSE))
 8002e78:	1dfb      	adds	r3, r7, #7
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b0a      	cmp	r3, #10
 8002e7e:	d006      	beq.n	8002e8e <gps_ReceiveData+0x46>
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <gps_ReceiveData+0x7c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	0018      	movs	r0, r3
 8002e86:	f005 fb6a 	bl	800855e <xQueueIsQueueFullFromISR>
 8002e8a:	1e03      	subs	r3, r0, #0
 8002e8c:	d010      	beq.n	8002eb0 <gps_ReceiveData+0x68>
  {
    xSemaphoreGiveFromISR( gpsSemaphoreHandle, &xHigherPriorityTaskWoken );  //Semaphore signal
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <gps_ReceiveData+0x74>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <gps_ReceiveData+0x78>)
 8002e94:	0011      	movs	r1, r2
 8002e96:	0018      	movs	r0, r3
 8002e98:	f005 f825 	bl	8007ee6 <xQueueGiveFromISR>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <gps_ReceiveData+0x78>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <gps_ReceiveData+0x68>
 8002ea4:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <gps_ReceiveData+0x80>)
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	0552      	lsls	r2, r2, #21
 8002eaa:	601a      	str	r2, [r3, #0]
 8002eac:	e000      	b.n	8002eb0 <gps_ReceiveData+0x68>
    return;
 8002eae:	46c0      	nop			; (mov r8, r8)
  }
}
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b002      	add	sp, #8
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	200006c0 	.word	0x200006c0
 8002ebc:	200006c8 	.word	0x200006c8
 8002ec0:	200006cc 	.word	0x200006cc
 8002ec4:	200006c4 	.word	0x200006c4
 8002ec8:	e000ed04 	.word	0xe000ed04

08002ecc <gps_GetLatitudeDegreeDecimals>:
    return GpsData.sPos.sLatitude.cOrientation;
}


double gps_GetLatitudeDegreeDecimals(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  return GpsData.sPos.sLatitude.dValueDD;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <gps_GetLatitudeDegreeDecimals+0x14>)
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	695b      	ldr	r3, [r3, #20]
}
 8002ed6:	0010      	movs	r0, r2
 8002ed8:	0019      	movs	r1, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	200024f8 	.word	0x200024f8

08002ee4 <gps_GetLongitudeDegreeDecimals>:
    return GpsData.sPos.sLongitude.cOrientation;
}


double gps_GetLongitudeDegreeDecimals(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  return GpsData.sPos.sLongitude.dValueDD;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <gps_GetLongitudeDegreeDecimals+0x14>)
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8002eee:	0010      	movs	r0, r2
 8002ef0:	0019      	movs	r1, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	200024f8 	.word	0x200024f8

08002efc <gps_IsValidFrame>:


bool gps_IsValidFrame(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  if (GpsData.u32ValidDataAge <= 1)
 8002f00:	4b04      	ldr	r3, [pc, #16]	; (8002f14 <gps_IsValidFrame+0x18>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d801      	bhi.n	8002f0c <gps_IsValidFrame+0x10>
  {
    return true;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e000      	b.n	8002f0e <gps_IsValidFrame+0x12>
  }
  else
  {
    return false;
 8002f0c:	2300      	movs	r3, #0
  }
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	200024f8 	.word	0x200024f8

08002f18 <gps_InitValidationParameters>:
  return GpsData.u32ValidDataAge;
}


void gps_InitValidationParameters(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  GpsValidationParameters.Hour.min = 0;
 8002f1c:	4b23      	ldr	r3, [pc, #140]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	721a      	strb	r2, [r3, #8]
  GpsValidationParameters.Hour.max = 23;
 8002f22:	4b22      	ldr	r3, [pc, #136]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f24:	2217      	movs	r2, #23
 8002f26:	725a      	strb	r2, [r3, #9]
  GpsValidationParameters.Minute.min = 0;
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	709a      	strb	r2, [r3, #2]
  GpsValidationParameters.Minute.max = 59;
 8002f2e:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f30:	223b      	movs	r2, #59	; 0x3b
 8002f32:	70da      	strb	r2, [r3, #3]
  GpsValidationParameters.Second.min = 0;
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	711a      	strb	r2, [r3, #4]
  GpsValidationParameters.Second.max = 60;
 8002f3a:	4b1c      	ldr	r3, [pc, #112]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f3c:	223c      	movs	r2, #60	; 0x3c
 8002f3e:	715a      	strb	r2, [r3, #5]
  GpsValidationParameters.Status.min = 'A';
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f42:	2241      	movs	r2, #65	; 0x41
 8002f44:	701a      	strb	r2, [r3, #0]
  GpsValidationParameters.Status.max = 'A';
 8002f46:	4b19      	ldr	r3, [pc, #100]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f48:	2241      	movs	r2, #65	; 0x41
 8002f4a:	705a      	strb	r2, [r3, #1]
  GpsValidationParameters.Latitude.min = -90; // Convert to miliminutes
 8002f4c:	4b17      	ldr	r3, [pc, #92]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f4e:	225a      	movs	r2, #90	; 0x5a
 8002f50:	4252      	negs	r2, r2
 8002f52:	615a      	str	r2, [r3, #20]
  GpsValidationParameters.Latitude.max =  90; // Convert to miliminutes
 8002f54:	4b15      	ldr	r3, [pc, #84]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f56:	225a      	movs	r2, #90	; 0x5a
 8002f58:	619a      	str	r2, [r3, #24]
  GpsValidationParameters.LatitudeOrientation.min = 'N';  // Must to be compare, doesn't to search into a range
 8002f5a:	4b14      	ldr	r3, [pc, #80]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f5c:	224e      	movs	r2, #78	; 0x4e
 8002f5e:	731a      	strb	r2, [r3, #12]
  GpsValidationParameters.LatitudeOrientation.max = 'S';  // Must to be compare, doesn't to search into a range
 8002f60:	4b12      	ldr	r3, [pc, #72]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f62:	2253      	movs	r2, #83	; 0x53
 8002f64:	735a      	strb	r2, [r3, #13]
  GpsValidationParameters.Longitude.min = -180; // Convert to miliminutes
 8002f66:	4b11      	ldr	r3, [pc, #68]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f68:	22b4      	movs	r2, #180	; 0xb4
 8002f6a:	4252      	negs	r2, r2
 8002f6c:	61da      	str	r2, [r3, #28]
  GpsValidationParameters.Longitude.max =  180; // Convert to miliminutes
 8002f6e:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f70:	22b4      	movs	r2, #180	; 0xb4
 8002f72:	621a      	str	r2, [r3, #32]
  GpsValidationParameters.LongitudeOrientation.min = 'E'; // Must to be compare, doesn't to search into a range
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f76:	2245      	movs	r2, #69	; 0x45
 8002f78:	739a      	strb	r2, [r3, #14]
  GpsValidationParameters.LongitudeOrientation.max = 'O'; // Must to be compare, doesn't to search into a range
 8002f7a:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f7c:	224f      	movs	r2, #79	; 0x4f
 8002f7e:	73da      	strb	r2, [r3, #15]
  GpsValidationParameters.Day.min = 1;
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	719a      	strb	r2, [r3, #6]
  GpsValidationParameters.Day.max = 31;
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f88:	221f      	movs	r2, #31
 8002f8a:	71da      	strb	r2, [r3, #7]
  GpsValidationParameters.Month.min = 1;
 8002f8c:	4b07      	ldr	r3, [pc, #28]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	729a      	strb	r2, [r3, #10]
  GpsValidationParameters.Month.max = 12;
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f94:	220c      	movs	r2, #12
 8002f96:	72da      	strb	r2, [r3, #11]
  GpsValidationParameters.Year.min = 1970;
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <gps_InitValidationParameters+0x98>)
 8002f9c:	821a      	strh	r2, [r3, #16]
  GpsValidationParameters.Year.max = 2038;
 8002f9e:	4b03      	ldr	r3, [pc, #12]	; (8002fac <gps_InitValidationParameters+0x94>)
 8002fa0:	4a04      	ldr	r2, [pc, #16]	; (8002fb4 <gps_InitValidationParameters+0x9c>)
 8002fa2:	825a      	strh	r2, [r3, #18]
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	200024d0 	.word	0x200024d0
 8002fb0:	000007b2 	.word	0x000007b2
 8002fb4:	000007f6 	.word	0x000007f6

08002fb8 <gps_FrameDecoder>:


void gps_FrameDecoder(void)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b097      	sub	sp, #92	; 0x5c
 8002fbc:	af00      	add	r7, sp, #0
  uint8_t gpsRxBuff[GPS_RX_QUEUE_SIZE];
  uint8_t gpsRxSize = 0;
 8002fbe:	2456      	movs	r4, #86	; 0x56
 8002fc0:	193b      	adds	r3, r7, r4
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
  uint8_t gpsRxIndex = 0;
 8002fc6:	2357      	movs	r3, #87	; 0x57
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
  uint8_t gpsRxCurrentChar = 0;
 8002fce:	1cfb      	adds	r3, r7, #3
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	701a      	strb	r2, [r3, #0]
  gpsRxSize = uxQueueMessagesWaiting(gpsRxQueue);
 8002fd4:	4b21      	ldr	r3, [pc, #132]	; (800305c <gps_FrameDecoder+0xa4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f005 f978 	bl	80082ce <uxQueueMessagesWaiting>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	193b      	adds	r3, r7, r4
 8002fe2:	701a      	strb	r2, [r3, #0]
  if( gpsRxSize >= 3)
 8002fe4:	193b      	adds	r3, r7, r4
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d933      	bls.n	8003054 <gps_FrameDecoder+0x9c>
  {
    do
    {
      if( xQueueReceive( gpsRxQueue, &gpsRxCurrentChar, portMAX_DELAY == pdTRUE ) )
 8002fec:	4b1b      	ldr	r3, [pc, #108]	; (800305c <gps_FrameDecoder+0xa4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	1cf9      	adds	r1, r7, #3
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f004 ffdb 	bl	8007fb0 <xQueueReceive>
 8002ffa:	1e03      	subs	r3, r0, #0
 8002ffc:	d006      	beq.n	800300c <gps_FrameDecoder+0x54>
      {
        gpsRxBuff[gpsRxIndex] = gpsRxCurrentChar;
 8002ffe:	2357      	movs	r3, #87	; 0x57
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	1cfa      	adds	r2, r7, #3
 8003006:	7811      	ldrb	r1, [r2, #0]
 8003008:	1d3a      	adds	r2, r7, #4
 800300a:	54d1      	strb	r1, [r2, r3]
      }
      gpsRxIndex++;
 800300c:	2157      	movs	r1, #87	; 0x57
 800300e:	187b      	adds	r3, r7, r1
 8003010:	781a      	ldrb	r2, [r3, #0]
 8003012:	187b      	adds	r3, r7, r1
 8003014:	3201      	adds	r2, #1
 8003016:	701a      	strb	r2, [r3, #0]
    }while(gpsRxIndex <= (gpsRxSize-2) );  // Copy from queue to local buffer
 8003018:	2356      	movs	r3, #86	; 0x56
 800301a:	18fb      	adds	r3, r7, r3
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	1e5a      	subs	r2, r3, #1
 8003020:	187b      	adds	r3, r7, r1
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	dce1      	bgt.n	8002fec <gps_FrameDecoder+0x34>

    if( gps_VerifyChecksumNmea(gpsRxBuff) == true )
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	0018      	movs	r0, r3
 800302c:	f000 f86a 	bl	8003104 <gps_VerifyChecksumNmea>
 8003030:	1e03      	subs	r3, r0, #0
 8003032:	d00f      	beq.n	8003054 <gps_FrameDecoder+0x9c>
    {
      if(gps_FrameOfInterest(gpsRxBuff) == GPS_RMC_NMEA_FRAME_FOUND)
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	0018      	movs	r0, r3
 8003038:	f000 f842 	bl	80030c0 <gps_FrameOfInterest>
 800303c:	1e03      	subs	r3, r0, #0
 800303e:	d109      	bne.n	8003054 <gps_FrameDecoder+0x9c>
      {
        gps_ExtractDataRMC(gpsRxBuff);
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	0018      	movs	r0, r3
 8003044:	f000 f8f4 	bl	8003230 <gps_ExtractDataRMC>
        if ( gps_ValidationNMEAData() == true )
 8003048:	f000 f9ac 	bl	80033a4 <gps_ValidationNMEAData>
 800304c:	1e03      	subs	r3, r0, #0
 800304e:	d001      	beq.n	8003054 <gps_FrameDecoder+0x9c>
        {
          gps_UpdateGpsData();
 8003050:	f000 fa60 	bl	8003514 <gps_UpdateGpsData>
      else
      {
      }
    }
  }
}
 8003054:	46c0      	nop			; (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b017      	add	sp, #92	; 0x5c
 800305a:	bd90      	pop	{r4, r7, pc}
 800305c:	200006c4 	.word	0x200006c4

08003060 <gps_GetNextToken>:


uint8_t *gps_GetNextToken(uint8_t * pData)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint8_t ucFieldLenCtrl = 0;
 8003068:	230f      	movs	r3, #15
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	2200      	movs	r2, #0
 800306e:	701a      	strb	r2, [r3, #0]
  for(;( (ucFieldLenCtrl < GPS_MAX_FIELD_LEN) && ( *(pData + ucFieldLenCtrl) != GPS_FRAME_TOKEN)&& ( *(pData + ucFieldLenCtrl) != GPS_FRAME_END) ) ; ucFieldLenCtrl++ );
 8003070:	e005      	b.n	800307e <gps_GetNextToken+0x1e>
 8003072:	210f      	movs	r1, #15
 8003074:	187b      	adds	r3, r7, r1
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	187b      	adds	r3, r7, r1
 800307a:	3201      	adds	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	210f      	movs	r1, #15
 8003080:	187b      	adds	r3, r7, r1
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b0c      	cmp	r3, #12
 8003086:	d80d      	bhi.n	80030a4 <gps_GetNextToken+0x44>
 8003088:	187b      	adds	r3, r7, r1
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	18d3      	adds	r3, r2, r3
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b2c      	cmp	r3, #44	; 0x2c
 8003094:	d006      	beq.n	80030a4 <gps_GetNextToken+0x44>
 8003096:	187b      	adds	r3, r7, r1
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	18d3      	adds	r3, r2, r3
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	2b2a      	cmp	r3, #42	; 0x2a
 80030a2:	d1e6      	bne.n	8003072 <gps_GetNextToken+0x12>
  ucFieldLenCtrl++;
 80030a4:	210f      	movs	r1, #15
 80030a6:	187b      	adds	r3, r7, r1
 80030a8:	781a      	ldrb	r2, [r3, #0]
 80030aa:	187b      	adds	r3, r7, r1
 80030ac:	3201      	adds	r2, #1
 80030ae:	701a      	strb	r2, [r3, #0]
  return(pData + ucFieldLenCtrl);
 80030b0:	187b      	adds	r3, r7, r1
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	18d3      	adds	r3, r2, r3
}
 80030b8:	0018      	movs	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	b004      	add	sp, #16
 80030be:	bd80      	pop	{r7, pc}

080030c0 <gps_FrameOfInterest>:


uint8_t gps_FrameOfInterest(uint8_t *pData)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint8_t ucReturn = GPS_UNKNOWN_NMEA_FRAME;
 80030c8:	210f      	movs	r1, #15
 80030ca:	187b      	adds	r3, r7, r1
 80030cc:	22ff      	movs	r2, #255	; 0xff
 80030ce:	701a      	strb	r2, [r3, #0]
  if(  *(pData+2) && (*(pData+3) == 'M') && (*(pData+4) == 'C') )
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3302      	adds	r3, #2
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00c      	beq.n	80030f4 <gps_FrameOfInterest+0x34>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3303      	adds	r3, #3
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b4d      	cmp	r3, #77	; 0x4d
 80030e2:	d107      	bne.n	80030f4 <gps_FrameOfInterest+0x34>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3304      	adds	r3, #4
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b43      	cmp	r3, #67	; 0x43
 80030ec:	d102      	bne.n	80030f4 <gps_FrameOfInterest+0x34>
  {
    ucReturn = GPS_RMC_NMEA_FRAME_FOUND;  // RMC frame found
 80030ee:	187b      	adds	r3, r7, r1
 80030f0:	2200      	movs	r2, #0
 80030f2:	701a      	strb	r2, [r3, #0]
  }
  return(ucReturn);
 80030f4:	230f      	movs	r3, #15
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	781b      	ldrb	r3, [r3, #0]
}
 80030fa:	0018      	movs	r0, r3
 80030fc:	46bd      	mov	sp, r7
 80030fe:	b004      	add	sp, #16
 8003100:	bd80      	pop	{r7, pc}
	...

08003104 <gps_VerifyChecksumNmea>:


bool gps_VerifyChecksumNmea(unsigned char * pData)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  static uint8_t ucCalculatedChecksum;
  static bool ucVerificationResult;
  static uint8_t ucCurrentValue;
  static uint8_t u8TempResult;

  ucIndex = 0;
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <gps_VerifyChecksumNmea+0x118>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
  ucCalculatedChecksum = 0;
 8003112:	4b43      	ldr	r3, [pc, #268]	; (8003220 <gps_VerifyChecksumNmea+0x11c>)
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
  ucVerificationResult = false;
 8003118:	4b42      	ldr	r3, [pc, #264]	; (8003224 <gps_VerifyChecksumNmea+0x120>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
  u8TempResult = 0;
 800311e:	4b42      	ldr	r3, [pc, #264]	; (8003228 <gps_VerifyChecksumNmea+0x124>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]
  do
  {
    ucCurrentValue = *(pData + ucIndex);
 8003124:	4b3d      	ldr	r3, [pc, #244]	; (800321c <gps_VerifyChecksumNmea+0x118>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	001a      	movs	r2, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	189b      	adds	r3, r3, r2
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	4b3e      	ldr	r3, [pc, #248]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 8003132:	701a      	strb	r2, [r3, #0]
    ucIndex++;
 8003134:	4b39      	ldr	r3, [pc, #228]	; (800321c <gps_VerifyChecksumNmea+0x118>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	3301      	adds	r3, #1
 800313a:	b2da      	uxtb	r2, r3
 800313c:	4b37      	ldr	r3, [pc, #220]	; (800321c <gps_VerifyChecksumNmea+0x118>)
 800313e:	701a      	strb	r2, [r3, #0]
    if( ucCurrentValue == GPS_FRAME_END )
 8003140:	4b3a      	ldr	r3, [pc, #232]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b2a      	cmp	r3, #42	; 0x2a
 8003146:	d103      	bne.n	8003150 <gps_VerifyChecksumNmea+0x4c>
    {
      ucVerificationResult = true;
 8003148:	4b36      	ldr	r3, [pc, #216]	; (8003224 <gps_VerifyChecksumNmea+0x120>)
 800314a:	2201      	movs	r2, #1
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e007      	b.n	8003160 <gps_VerifyChecksumNmea+0x5c>
    }
    else
    {
      ucCalculatedChecksum ^= ucCurrentValue;
 8003150:	4b33      	ldr	r3, [pc, #204]	; (8003220 <gps_VerifyChecksumNmea+0x11c>)
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	4b35      	ldr	r3, [pc, #212]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4053      	eors	r3, r2
 800315a:	b2da      	uxtb	r2, r3
 800315c:	4b30      	ldr	r3, [pc, #192]	; (8003220 <gps_VerifyChecksumNmea+0x11c>)
 800315e:	701a      	strb	r2, [r3, #0]
    }
  }
  while( ucCurrentValue != GPS_FRAME_END &&  ucIndex < GPS_RX_QUEUE_SIZE );
 8003160:	4b32      	ldr	r3, [pc, #200]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b2a      	cmp	r3, #42	; 0x2a
 8003166:	d003      	beq.n	8003170 <gps_VerifyChecksumNmea+0x6c>
 8003168:	4b2c      	ldr	r3, [pc, #176]	; (800321c <gps_VerifyChecksumNmea+0x118>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b4f      	cmp	r3, #79	; 0x4f
 800316e:	d9d9      	bls.n	8003124 <gps_VerifyChecksumNmea+0x20>

  if( ucVerificationResult == true )
 8003170:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <gps_VerifyChecksumNmea+0x120>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d04a      	beq.n	800320e <gps_VerifyChecksumNmea+0x10a>
  {
     ucVerificationResult = false;
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <gps_VerifyChecksumNmea+0x120>)
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
     ucCurrentValue = ( ucCalculatedChecksum >> 4 );
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <gps_VerifyChecksumNmea+0x11c>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	091b      	lsrs	r3, r3, #4
 8003184:	b2da      	uxtb	r2, r3
 8003186:	4b29      	ldr	r3, [pc, #164]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 8003188:	701a      	strb	r2, [r3, #0]
     u8TempResult = gps_HexaCharToAscii(ucCurrentValue);
 800318a:	4b28      	ldr	r3, [pc, #160]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	0018      	movs	r0, r3
 8003190:	f000 fc22 	bl	80039d8 <gps_HexaCharToAscii>
 8003194:	0003      	movs	r3, r0
 8003196:	001a      	movs	r2, r3
 8003198:	4b23      	ldr	r3, [pc, #140]	; (8003228 <gps_VerifyChecksumNmea+0x124>)
 800319a:	701a      	strb	r2, [r3, #0]
     ucCurrentValue = *(pData + ucIndex);
 800319c:	4b1f      	ldr	r3, [pc, #124]	; (800321c <gps_VerifyChecksumNmea+0x118>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	001a      	movs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	189b      	adds	r3, r3, r2
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	4b20      	ldr	r3, [pc, #128]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 80031aa:	701a      	strb	r2, [r3, #0]
     if( ucCurrentValue == u8TempResult )
 80031ac:	4b1f      	ldr	r3, [pc, #124]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <gps_VerifyChecksumNmea+0x124>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d12a      	bne.n	800320e <gps_VerifyChecksumNmea+0x10a>
     {
       ucCurrentValue = ( ucCalculatedChecksum & 0x0F );
 80031b8:	4b19      	ldr	r3, [pc, #100]	; (8003220 <gps_VerifyChecksumNmea+0x11c>)
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	220f      	movs	r2, #15
 80031be:	4013      	ands	r3, r2
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	4b1a      	ldr	r3, [pc, #104]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 80031c4:	701a      	strb	r2, [r3, #0]
       u8TempResult = gps_HexaCharToAscii(ucCurrentValue);
 80031c6:	4b19      	ldr	r3, [pc, #100]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 fc04 	bl	80039d8 <gps_HexaCharToAscii>
 80031d0:	0003      	movs	r3, r0
 80031d2:	001a      	movs	r2, r3
 80031d4:	4b14      	ldr	r3, [pc, #80]	; (8003228 <gps_VerifyChecksumNmea+0x124>)
 80031d6:	701a      	strb	r2, [r3, #0]
       ucIndex++;
 80031d8:	4b10      	ldr	r3, [pc, #64]	; (800321c <gps_VerifyChecksumNmea+0x118>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	3301      	adds	r3, #1
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <gps_VerifyChecksumNmea+0x118>)
 80031e2:	701a      	strb	r2, [r3, #0]
       ucCurrentValue = *(pData + ucIndex);
 80031e4:	4b0d      	ldr	r3, [pc, #52]	; (800321c <gps_VerifyChecksumNmea+0x118>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	001a      	movs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	189b      	adds	r3, r3, r2
 80031ee:	781a      	ldrb	r2, [r3, #0]
 80031f0:	4b0e      	ldr	r3, [pc, #56]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 80031f2:	701a      	strb	r2, [r3, #0]
       if( ucCurrentValue == u8TempResult )
 80031f4:	4b0d      	ldr	r3, [pc, #52]	; (800322c <gps_VerifyChecksumNmea+0x128>)
 80031f6:	781a      	ldrb	r2, [r3, #0]
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <gps_VerifyChecksumNmea+0x124>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d103      	bne.n	8003208 <gps_VerifyChecksumNmea+0x104>
       {
         ucVerificationResult = true;
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <gps_VerifyChecksumNmea+0x120>)
 8003202:	2201      	movs	r2, #1
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	e002      	b.n	800320e <gps_VerifyChecksumNmea+0x10a>
       }
       else
       {
         ucVerificationResult = false;
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <gps_VerifyChecksumNmea+0x120>)
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
       }
     }
  }
  return(ucVerificationResult);
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <gps_VerifyChecksumNmea+0x120>)
 8003210:	781b      	ldrb	r3, [r3, #0]
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b002      	add	sp, #8
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	200006d0 	.word	0x200006d0
 8003220:	200006d1 	.word	0x200006d1
 8003224:	200006d2 	.word	0x200006d2
 8003228:	200006d3 	.word	0x200006d3
 800322c:	200006d4 	.word	0x200006d4

08003230 <gps_ExtractDataRMC>:


void gps_ExtractDataRMC(uint8_t *pframe)
{
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	b08b      	sub	sp, #44	; 0x2c
 8003234:	af00      	add	r7, sp, #0
 8003236:	61f8      	str	r0, [r7, #28]
  uint8_t *pData = pframe;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	627b      	str	r3, [r7, #36]	; 0x24

  pData = gps_GetNextToken(pData);
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	0018      	movs	r0, r3
 8003240:	f7ff ff0e 	bl	8003060 <gps_GetNextToken>
 8003244:	0003      	movs	r3, r0
 8003246:	627b      	str	r3, [r7, #36]	; 0x24
  gps_ExtractTime(pData);  // Extract HH:MM:SS
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	0018      	movs	r0, r3
 800324c:	f000 f9c0 	bl	80035d0 <gps_ExtractTime>

  pData = gps_GetNextToken(pData);
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	0018      	movs	r0, r3
 8003254:	f7ff ff04 	bl	8003060 <gps_GetNextToken>
 8003258:	0003      	movs	r3, r0
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  GpsDataRaw.cStatus = *pData;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	b25a      	sxtb	r2, r3
 8003262:	4b4f      	ldr	r3, [pc, #316]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 8003264:	701a      	strb	r2, [r3, #0]
  if(GpsDataRaw.cStatus != 'A')
 8003266:	4b4e      	ldr	r3, [pc, #312]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	b25b      	sxtb	r3, r3
 800326c:	2b41      	cmp	r3, #65	; 0x41
 800326e:	d000      	beq.n	8003272 <gps_ExtractDataRMC+0x42>
 8003270:	e092      	b.n	8003398 <gps_ExtractDataRMC+0x168>
  {
    return; // invalid frame, it doesn't continue analyzing
  }

  pData = gps_GetNextToken(pData);
 8003272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff fef3 	bl	8003060 <gps_GetNextToken>
 800327a:	0003      	movs	r3, r0
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
  GpsDataRaw.sLatitude = gps_ExtractCoordinate(pData);  // Extract latitude coordinate
 800327e:	4e48      	ldr	r6, [pc, #288]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 8003280:	2308      	movs	r3, #8
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003286:	0011      	movs	r1, r2
 8003288:	0018      	movs	r0, r3
 800328a:	f000 fa49 	bl	8003720 <gps_ExtractCoordinate>
 800328e:	2308      	movs	r3, #8
 8003290:	18fa      	adds	r2, r7, r3
 8003292:	0033      	movs	r3, r6
 8003294:	3308      	adds	r3, #8
 8003296:	0011      	movs	r1, r2
 8003298:	2210      	movs	r2, #16
 800329a:	0018      	movs	r0, r3
 800329c:	f006 ff18 	bl	800a0d0 <memcpy>

  pData = gps_GetNextToken(pData);
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7ff fedc 	bl	8003060 <gps_GetNextToken>
 80032a8:	0003      	movs	r3, r0
 80032aa:	627b      	str	r3, [r7, #36]	; 0x24
  if(*pData == 'N')  // Extract latitude orientation
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b4e      	cmp	r3, #78	; 0x4e
 80032b2:	d103      	bne.n	80032bc <gps_ExtractDataRMC+0x8c>
  {
    GpsDataRaw.sLatitude.cOrientation = 'N';
 80032b4:	4b3a      	ldr	r3, [pc, #232]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 80032b6:	224e      	movs	r2, #78	; 0x4e
 80032b8:	721a      	strb	r2, [r3, #8]
 80032ba:	e019      	b.n	80032f0 <gps_ExtractDataRMC+0xc0>
  }
  else
  {
    GpsDataRaw.sLatitude.cOrientation = 'S';
 80032bc:	4b38      	ldr	r3, [pc, #224]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 80032be:	2253      	movs	r2, #83	; 0x53
 80032c0:	721a      	strb	r2, [r3, #8]
    GpsDataRaw.sLatitude.dValueDD *= -1;
 80032c2:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 80032c4:	691a      	ldr	r2, [r3, #16]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	0011      	movs	r1, r2
 80032ca:	6039      	str	r1, [r7, #0]
 80032cc:	2180      	movs	r1, #128	; 0x80
 80032ce:	0609      	lsls	r1, r1, #24
 80032d0:	4059      	eors	r1, r3
 80032d2:	6079      	str	r1, [r7, #4]
 80032d4:	4b32      	ldr	r3, [pc, #200]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 80032d6:	6839      	ldr	r1, [r7, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6119      	str	r1, [r3, #16]
 80032dc:	615a      	str	r2, [r3, #20]
    GpsDataRaw.sLatitude.i16Degrees *= -1;
 80032de:	4b30      	ldr	r3, [pc, #192]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 80032e0:	895b      	ldrh	r3, [r3, #10]
 80032e2:	b21b      	sxth	r3, r3
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	425b      	negs	r3, r3
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	b21a      	sxth	r2, r3
 80032ec:	4b2c      	ldr	r3, [pc, #176]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 80032ee:	815a      	strh	r2, [r3, #10]
  }

  pData = gps_GetNextToken(pData);
 80032f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7ff feb4 	bl	8003060 <gps_GetNextToken>
 80032f8:	0003      	movs	r3, r0
 80032fa:	627b      	str	r3, [r7, #36]	; 0x24
  GpsDataRaw.sLongitude = gps_ExtractCoordinate(pData);  // Extract longitude coordinate
 80032fc:	4e28      	ldr	r6, [pc, #160]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 80032fe:	2308      	movs	r3, #8
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003304:	0011      	movs	r1, r2
 8003306:	0018      	movs	r0, r3
 8003308:	f000 fa0a 	bl	8003720 <gps_ExtractCoordinate>
 800330c:	2308      	movs	r3, #8
 800330e:	18fa      	adds	r2, r7, r3
 8003310:	0033      	movs	r3, r6
 8003312:	3318      	adds	r3, #24
 8003314:	0011      	movs	r1, r2
 8003316:	2210      	movs	r2, #16
 8003318:	0018      	movs	r0, r3
 800331a:	f006 fed9 	bl	800a0d0 <memcpy>
  pData = gps_GetNextToken(pData);
 800331e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff fe9d 	bl	8003060 <gps_GetNextToken>
 8003326:	0003      	movs	r3, r0
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
  if(*pData == 'E')  // Extract longitude orientation
 800332a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	2b45      	cmp	r3, #69	; 0x45
 8003330:	d103      	bne.n	800333a <gps_ExtractDataRMC+0x10a>
  {
    GpsDataRaw.sLongitude.cOrientation = 'E';
 8003332:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 8003334:	2245      	movs	r2, #69	; 0x45
 8003336:	761a      	strb	r2, [r3, #24]
 8003338:	e017      	b.n	800336a <gps_ExtractDataRMC+0x13a>
  }
  else
  {
    GpsDataRaw.sLongitude.cOrientation = 'W';
 800333a:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 800333c:	2257      	movs	r2, #87	; 0x57
 800333e:	761a      	strb	r2, [r3, #24]
    GpsDataRaw.sLongitude.dValueDD *= -1;
 8003340:	4b17      	ldr	r3, [pc, #92]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 8003342:	6a1a      	ldr	r2, [r3, #32]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	0011      	movs	r1, r2
 8003348:	000c      	movs	r4, r1
 800334a:	2180      	movs	r1, #128	; 0x80
 800334c:	0609      	lsls	r1, r1, #24
 800334e:	4059      	eors	r1, r3
 8003350:	000d      	movs	r5, r1
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 8003354:	621c      	str	r4, [r3, #32]
 8003356:	625d      	str	r5, [r3, #36]	; 0x24
    GpsDataRaw.sLongitude.i16Degrees *= -1;
 8003358:	4b11      	ldr	r3, [pc, #68]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 800335a:	8b5b      	ldrh	r3, [r3, #26]
 800335c:	b21b      	sxth	r3, r3
 800335e:	b29b      	uxth	r3, r3
 8003360:	425b      	negs	r3, r3
 8003362:	b29b      	uxth	r3, r3
 8003364:	b21a      	sxth	r2, r3
 8003366:	4b0e      	ldr	r3, [pc, #56]	; (80033a0 <gps_ExtractDataRMC+0x170>)
 8003368:	835a      	strh	r2, [r3, #26]
  }

  pData = gps_GetNextToken(pData);  // Speed en Knots. dont use it
 800336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336c:	0018      	movs	r0, r3
 800336e:	f7ff fe77 	bl	8003060 <gps_GetNextToken>
 8003372:	0003      	movs	r3, r0
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
  pData = gps_GetNextToken(pData);  // true track. dont use it
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	0018      	movs	r0, r3
 800337a:	f7ff fe71 	bl	8003060 <gps_GetNextToken>
 800337e:	0003      	movs	r3, r0
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
  pData = gps_GetNextToken(pData);
 8003382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003384:	0018      	movs	r0, r3
 8003386:	f7ff fe6b 	bl	8003060 <gps_GetNextToken>
 800338a:	0003      	movs	r3, r0
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  gps_ExtractDate(pData);  // Extract DD/MM/YYYY
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	0018      	movs	r0, r3
 8003392:	f000 f96f 	bl	8003674 <gps_ExtractDate>
 8003396:	e000      	b.n	800339a <gps_ExtractDataRMC+0x16a>
    return; // invalid frame, it doesn't continue analyzing
 8003398:	46c0      	nop			; (mov r8, r8)
}
 800339a:	46bd      	mov	sp, r7
 800339c:	b00b      	add	sp, #44	; 0x2c
 800339e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033a0:	20002530 	.word	0x20002530

080033a4 <gps_ValidationNMEAData>:


bool gps_ValidationNMEAData(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  if( (GpsDataRaw.cStatus != GpsValidationParameters.Status.min) )
 80033a8:	4b58      	ldr	r3, [pc, #352]	; (800350c <gps_ValidationNMEAData+0x168>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	b25a      	sxtb	r2, r3
 80033ae:	4b58      	ldr	r3, [pc, #352]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	b25b      	sxtb	r3, r3
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <gps_ValidationNMEAData+0x18>
  {
    return false;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e0a4      	b.n	8003506 <gps_ValidationNMEAData+0x162>
  }
  if( ((GpsDataRaw.u8Hour   >= GpsValidationParameters.Hour.min)   &&
 80033bc:	4b53      	ldr	r3, [pc, #332]	; (800350c <gps_ValidationNMEAData+0x168>)
 80033be:	785b      	ldrb	r3, [r3, #1]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4b53      	ldr	r3, [pc, #332]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 80033c4:	7a1b      	ldrb	r3, [r3, #8]
       (GpsDataRaw.u8Hour   <= GpsValidationParameters.Hour.max)   &&
       (GpsDataRaw.u8Minute >= GpsValidationParameters.Minute.min) &&
       (GpsDataRaw.u8Minute <= GpsValidationParameters.Minute.max) &&
       (GpsDataRaw.u8Second >= GpsValidationParameters.Second.min) &&
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d324      	bcc.n	8003414 <gps_ValidationNMEAData+0x70>
       (GpsDataRaw.u8Hour   <= GpsValidationParameters.Hour.max)   &&
 80033ca:	4b50      	ldr	r3, [pc, #320]	; (800350c <gps_ValidationNMEAData+0x168>)
 80033cc:	785b      	ldrb	r3, [r3, #1]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 80033d2:	7a5b      	ldrb	r3, [r3, #9]
  if( ((GpsDataRaw.u8Hour   >= GpsValidationParameters.Hour.min)   &&
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d81d      	bhi.n	8003414 <gps_ValidationNMEAData+0x70>
       (GpsDataRaw.u8Minute >= GpsValidationParameters.Minute.min) &&
 80033d8:	4b4c      	ldr	r3, [pc, #304]	; (800350c <gps_ValidationNMEAData+0x168>)
 80033da:	789b      	ldrb	r3, [r3, #2]
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 80033e0:	789b      	ldrb	r3, [r3, #2]
       (GpsDataRaw.u8Hour   <= GpsValidationParameters.Hour.max)   &&
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d316      	bcc.n	8003414 <gps_ValidationNMEAData+0x70>
       (GpsDataRaw.u8Minute <= GpsValidationParameters.Minute.max) &&
 80033e6:	4b49      	ldr	r3, [pc, #292]	; (800350c <gps_ValidationNMEAData+0x168>)
 80033e8:	789b      	ldrb	r3, [r3, #2]
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	4b48      	ldr	r3, [pc, #288]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 80033ee:	78db      	ldrb	r3, [r3, #3]
       (GpsDataRaw.u8Minute >= GpsValidationParameters.Minute.min) &&
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d80f      	bhi.n	8003414 <gps_ValidationNMEAData+0x70>
       (GpsDataRaw.u8Second >= GpsValidationParameters.Second.min) &&
 80033f4:	4b45      	ldr	r3, [pc, #276]	; (800350c <gps_ValidationNMEAData+0x168>)
 80033f6:	78db      	ldrb	r3, [r3, #3]
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	4b45      	ldr	r3, [pc, #276]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 80033fc:	791b      	ldrb	r3, [r3, #4]
       (GpsDataRaw.u8Minute <= GpsValidationParameters.Minute.max) &&
 80033fe:	429a      	cmp	r2, r3
 8003400:	d308      	bcc.n	8003414 <gps_ValidationNMEAData+0x70>
       (GpsDataRaw.u8Second <= GpsValidationParameters.Second.max)) == false )
 8003402:	4b42      	ldr	r3, [pc, #264]	; (800350c <gps_ValidationNMEAData+0x168>)
 8003404:	78db      	ldrb	r3, [r3, #3]
 8003406:	b2da      	uxtb	r2, r3
 8003408:	4b41      	ldr	r3, [pc, #260]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 800340a:	795b      	ldrb	r3, [r3, #5]
       (GpsDataRaw.u8Second >= GpsValidationParameters.Second.min) &&
 800340c:	429a      	cmp	r2, r3
 800340e:	d801      	bhi.n	8003414 <gps_ValidationNMEAData+0x70>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <gps_ValidationNMEAData+0x72>
 8003414:	2300      	movs	r3, #0
  if( ((GpsDataRaw.u8Hour   >= GpsValidationParameters.Hour.min)   &&
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <gps_ValidationNMEAData+0x7a>
  {
    return false;
 800341a:	2300      	movs	r3, #0
 800341c:	e073      	b.n	8003506 <gps_ValidationNMEAData+0x162>
  }

  if( ((GpsDataRaw.u16Year >= GpsValidationParameters.Year.min)  &&
 800341e:	4b3b      	ldr	r3, [pc, #236]	; (800350c <gps_ValidationNMEAData+0x168>)
 8003420:	88db      	ldrh	r3, [r3, #6]
 8003422:	b29a      	uxth	r2, r3
 8003424:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 8003426:	8a1b      	ldrh	r3, [r3, #16]
       (GpsDataRaw.u16Year <= GpsValidationParameters.Year.max)  &&
       (GpsDataRaw.u8Month >= GpsValidationParameters.Month.min) &&
       (GpsDataRaw.u8Month <= GpsValidationParameters.Month.max) &&
       (GpsDataRaw.u8Day   >= GpsValidationParameters.Day.min)   &&
 8003428:	429a      	cmp	r2, r3
 800342a:	d324      	bcc.n	8003476 <gps_ValidationNMEAData+0xd2>
       (GpsDataRaw.u16Year <= GpsValidationParameters.Year.max)  &&
 800342c:	4b37      	ldr	r3, [pc, #220]	; (800350c <gps_ValidationNMEAData+0x168>)
 800342e:	88db      	ldrh	r3, [r3, #6]
 8003430:	b29a      	uxth	r2, r3
 8003432:	4b37      	ldr	r3, [pc, #220]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 8003434:	8a5b      	ldrh	r3, [r3, #18]
  if( ((GpsDataRaw.u16Year >= GpsValidationParameters.Year.min)  &&
 8003436:	429a      	cmp	r2, r3
 8003438:	d81d      	bhi.n	8003476 <gps_ValidationNMEAData+0xd2>
       (GpsDataRaw.u8Month >= GpsValidationParameters.Month.min) &&
 800343a:	4b34      	ldr	r3, [pc, #208]	; (800350c <gps_ValidationNMEAData+0x168>)
 800343c:	791b      	ldrb	r3, [r3, #4]
 800343e:	b2da      	uxtb	r2, r3
 8003440:	4b33      	ldr	r3, [pc, #204]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 8003442:	7a9b      	ldrb	r3, [r3, #10]
       (GpsDataRaw.u16Year <= GpsValidationParameters.Year.max)  &&
 8003444:	429a      	cmp	r2, r3
 8003446:	d316      	bcc.n	8003476 <gps_ValidationNMEAData+0xd2>
       (GpsDataRaw.u8Month <= GpsValidationParameters.Month.max) &&
 8003448:	4b30      	ldr	r3, [pc, #192]	; (800350c <gps_ValidationNMEAData+0x168>)
 800344a:	791b      	ldrb	r3, [r3, #4]
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b30      	ldr	r3, [pc, #192]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 8003450:	7adb      	ldrb	r3, [r3, #11]
       (GpsDataRaw.u8Month >= GpsValidationParameters.Month.min) &&
 8003452:	429a      	cmp	r2, r3
 8003454:	d80f      	bhi.n	8003476 <gps_ValidationNMEAData+0xd2>
       (GpsDataRaw.u8Day   >= GpsValidationParameters.Day.min)   &&
 8003456:	4b2d      	ldr	r3, [pc, #180]	; (800350c <gps_ValidationNMEAData+0x168>)
 8003458:	795b      	ldrb	r3, [r3, #5]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 800345e:	799b      	ldrb	r3, [r3, #6]
       (GpsDataRaw.u8Month <= GpsValidationParameters.Month.max) &&
 8003460:	429a      	cmp	r2, r3
 8003462:	d308      	bcc.n	8003476 <gps_ValidationNMEAData+0xd2>
       (GpsDataRaw.u8Day   <= GpsValidationParameters.Day.max) ) == false )
 8003464:	4b29      	ldr	r3, [pc, #164]	; (800350c <gps_ValidationNMEAData+0x168>)
 8003466:	795b      	ldrb	r3, [r3, #5]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 800346c:	79db      	ldrb	r3, [r3, #7]
       (GpsDataRaw.u8Day   >= GpsValidationParameters.Day.min)   &&
 800346e:	429a      	cmp	r2, r3
 8003470:	d801      	bhi.n	8003476 <gps_ValidationNMEAData+0xd2>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <gps_ValidationNMEAData+0xd4>
 8003476:	2300      	movs	r3, #0
  if( ((GpsDataRaw.u16Year >= GpsValidationParameters.Year.min)  &&
 8003478:	2b00      	cmp	r3, #0
 800347a:	d101      	bne.n	8003480 <gps_ValidationNMEAData+0xdc>
  {
    return false;
 800347c:	2300      	movs	r3, #0
 800347e:	e042      	b.n	8003506 <gps_ValidationNMEAData+0x162>
  }
  if( ((GpsDataRaw.sLatitude.i16Degrees >= GpsValidationParameters.Latitude.min ) &&
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <gps_ValidationNMEAData+0x168>)
 8003482:	895b      	ldrh	r3, [r3, #10]
 8003484:	b21b      	sxth	r3, r3
 8003486:	001a      	movs	r2, r3
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 800348a:	695b      	ldr	r3, [r3, #20]
       (GpsDataRaw.sLatitude.i16Degrees <= GpsValidationParameters.Latitude.max) &&
 800348c:	429a      	cmp	r2, r3
 800348e:	db13      	blt.n	80034b8 <gps_ValidationNMEAData+0x114>
 8003490:	4b1e      	ldr	r3, [pc, #120]	; (800350c <gps_ValidationNMEAData+0x168>)
 8003492:	895b      	ldrh	r3, [r3, #10]
 8003494:	b21b      	sxth	r3, r3
 8003496:	001a      	movs	r2, r3
 8003498:	4b1d      	ldr	r3, [pc, #116]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 800349a:	699b      	ldr	r3, [r3, #24]
  if( ((GpsDataRaw.sLatitude.i16Degrees >= GpsValidationParameters.Latitude.min ) &&
 800349c:	429a      	cmp	r2, r3
 800349e:	dc0b      	bgt.n	80034b8 <gps_ValidationNMEAData+0x114>
       (GpsDataRaw.sLatitude.cOrientation == 'N' || GpsDataRaw.sLatitude.cOrientation == 'S') ) == false )
 80034a0:	4b1a      	ldr	r3, [pc, #104]	; (800350c <gps_ValidationNMEAData+0x168>)
 80034a2:	7a1b      	ldrb	r3, [r3, #8]
 80034a4:	b2db      	uxtb	r3, r3
       (GpsDataRaw.sLatitude.i16Degrees <= GpsValidationParameters.Latitude.max) &&
 80034a6:	2b4e      	cmp	r3, #78	; 0x4e
 80034a8:	d004      	beq.n	80034b4 <gps_ValidationNMEAData+0x110>
       (GpsDataRaw.sLatitude.cOrientation == 'N' || GpsDataRaw.sLatitude.cOrientation == 'S') ) == false )
 80034aa:	4b18      	ldr	r3, [pc, #96]	; (800350c <gps_ValidationNMEAData+0x168>)
 80034ac:	7a1b      	ldrb	r3, [r3, #8]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b53      	cmp	r3, #83	; 0x53
 80034b2:	d101      	bne.n	80034b8 <gps_ValidationNMEAData+0x114>
       (GpsDataRaw.sLatitude.i16Degrees <= GpsValidationParameters.Latitude.max) &&
 80034b4:	2301      	movs	r3, #1
 80034b6:	e000      	b.n	80034ba <gps_ValidationNMEAData+0x116>
 80034b8:	2300      	movs	r3, #0
  if( ((GpsDataRaw.sLatitude.i16Degrees >= GpsValidationParameters.Latitude.min ) &&
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <gps_ValidationNMEAData+0x11e>
  {
    return false;
 80034be:	2300      	movs	r3, #0
 80034c0:	e021      	b.n	8003506 <gps_ValidationNMEAData+0x162>
  }
  if( ((GpsDataRaw.sLongitude.i16Degrees >= GpsValidationParameters.Longitude.min ) &&
 80034c2:	4b12      	ldr	r3, [pc, #72]	; (800350c <gps_ValidationNMEAData+0x168>)
 80034c4:	8b5b      	ldrh	r3, [r3, #26]
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	001a      	movs	r2, r3
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 80034cc:	69db      	ldr	r3, [r3, #28]
       (GpsDataRaw.sLongitude.i16Degrees <= GpsValidationParameters.Longitude.max) &&
 80034ce:	429a      	cmp	r2, r3
 80034d0:	db13      	blt.n	80034fa <gps_ValidationNMEAData+0x156>
 80034d2:	4b0e      	ldr	r3, [pc, #56]	; (800350c <gps_ValidationNMEAData+0x168>)
 80034d4:	8b5b      	ldrh	r3, [r3, #26]
 80034d6:	b21b      	sxth	r3, r3
 80034d8:	001a      	movs	r2, r3
 80034da:	4b0d      	ldr	r3, [pc, #52]	; (8003510 <gps_ValidationNMEAData+0x16c>)
 80034dc:	6a1b      	ldr	r3, [r3, #32]
  if( ((GpsDataRaw.sLongitude.i16Degrees >= GpsValidationParameters.Longitude.min ) &&
 80034de:	429a      	cmp	r2, r3
 80034e0:	dc0b      	bgt.n	80034fa <gps_ValidationNMEAData+0x156>
       (GpsDataRaw.sLongitude.cOrientation == 'E' || GpsDataRaw.sLongitude.cOrientation == 'W') ) == false )
 80034e2:	4b0a      	ldr	r3, [pc, #40]	; (800350c <gps_ValidationNMEAData+0x168>)
 80034e4:	7e1b      	ldrb	r3, [r3, #24]
 80034e6:	b2db      	uxtb	r3, r3
       (GpsDataRaw.sLongitude.i16Degrees <= GpsValidationParameters.Longitude.max) &&
 80034e8:	2b45      	cmp	r3, #69	; 0x45
 80034ea:	d004      	beq.n	80034f6 <gps_ValidationNMEAData+0x152>
       (GpsDataRaw.sLongitude.cOrientation == 'E' || GpsDataRaw.sLongitude.cOrientation == 'W') ) == false )
 80034ec:	4b07      	ldr	r3, [pc, #28]	; (800350c <gps_ValidationNMEAData+0x168>)
 80034ee:	7e1b      	ldrb	r3, [r3, #24]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b57      	cmp	r3, #87	; 0x57
 80034f4:	d101      	bne.n	80034fa <gps_ValidationNMEAData+0x156>
       (GpsDataRaw.sLongitude.i16Degrees <= GpsValidationParameters.Longitude.max) &&
 80034f6:	2301      	movs	r3, #1
 80034f8:	e000      	b.n	80034fc <gps_ValidationNMEAData+0x158>
 80034fa:	2300      	movs	r3, #0
  if( ((GpsDataRaw.sLongitude.i16Degrees >= GpsValidationParameters.Longitude.min ) &&
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <gps_ValidationNMEAData+0x160>
  {
    return false;
 8003500:	2300      	movs	r3, #0
 8003502:	e000      	b.n	8003506 <gps_ValidationNMEAData+0x162>
  }
  return true;
 8003504:	2301      	movs	r3, #1
}
 8003506:	0018      	movs	r0, r3
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	20002530 	.word	0x20002530
 8003510:	200024d0 	.word	0x200024d0

08003514 <gps_UpdateGpsData>:


void gps_UpdateGpsData(void)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
  // Valid frame
  GpsData.bValidFrame = true;
 8003518:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
  GpsData.u32ValidDataAge = 0;
 800351e:	4b20      	ldr	r3, [pc, #128]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 8003520:	2200      	movs	r2, #0
 8003522:	605a      	str	r2, [r3, #4]

  // Satellite status
  GpsData.sSatInfo.cStatus  = GpsDataRaw.cStatus;
 8003524:	4b1f      	ldr	r3, [pc, #124]	; (80035a4 <gps_UpdateGpsData+0x90>)
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b259      	sxtb	r1, r3
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 800352c:	2230      	movs	r2, #48	; 0x30
 800352e:	5499      	strb	r1, [r3, r2]

   // Date time
  GpsData.sDateTime.sDate.u8Day = GpsDataRaw.u8Day;
 8003530:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <gps_UpdateGpsData+0x90>)
 8003532:	795b      	ldrb	r3, [r3, #5]
 8003534:	b2d9      	uxtb	r1, r3
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 8003538:	2228      	movs	r2, #40	; 0x28
 800353a:	5499      	strb	r1, [r3, r2]
  GpsData.sDateTime.sDate.u8Month = GpsDataRaw.u8Month;
 800353c:	4b19      	ldr	r3, [pc, #100]	; (80035a4 <gps_UpdateGpsData+0x90>)
 800353e:	791b      	ldrb	r3, [r3, #4]
 8003540:	b2d9      	uxtb	r1, r3
 8003542:	4b17      	ldr	r3, [pc, #92]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 8003544:	2229      	movs	r2, #41	; 0x29
 8003546:	5499      	strb	r1, [r3, r2]
  GpsData.sDateTime.sDate.u16Year = GpsDataRaw.u16Year;
 8003548:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <gps_UpdateGpsData+0x90>)
 800354a:	88db      	ldrh	r3, [r3, #6]
 800354c:	b29a      	uxth	r2, r3
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 8003550:	855a      	strh	r2, [r3, #42]	; 0x2a
  GpsData.sDateTime.sTime.u8Hour = GpsDataRaw.u8Hour;
 8003552:	4b14      	ldr	r3, [pc, #80]	; (80035a4 <gps_UpdateGpsData+0x90>)
 8003554:	785b      	ldrb	r3, [r3, #1]
 8003556:	b2d9      	uxtb	r1, r3
 8003558:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 800355a:	222c      	movs	r2, #44	; 0x2c
 800355c:	5499      	strb	r1, [r3, r2]
  GpsData.sDateTime.sTime.u8Min = GpsDataRaw.u8Minute;
 800355e:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <gps_UpdateGpsData+0x90>)
 8003560:	789b      	ldrb	r3, [r3, #2]
 8003562:	b2d9      	uxtb	r1, r3
 8003564:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 8003566:	222d      	movs	r2, #45	; 0x2d
 8003568:	5499      	strb	r1, [r3, r2]
  GpsData.sDateTime.sTime.u8Sec = GpsDataRaw.u8Second;
 800356a:	4b0e      	ldr	r3, [pc, #56]	; (80035a4 <gps_UpdateGpsData+0x90>)
 800356c:	78db      	ldrb	r3, [r3, #3]
 800356e:	b2d9      	uxtb	r1, r3
 8003570:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 8003572:	222e      	movs	r2, #46	; 0x2e
 8003574:	5499      	strb	r1, [r3, r2]

  // position
  GpsData.sPos.sLatitude = GpsDataRaw.sLatitude;
 8003576:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <gps_UpdateGpsData+0x90>)
 800357a:	3208      	adds	r2, #8
 800357c:	0010      	movs	r0, r2
 800357e:	3308      	adds	r3, #8
 8003580:	2210      	movs	r2, #16
 8003582:	0019      	movs	r1, r3
 8003584:	f006 fda4 	bl	800a0d0 <memcpy>
  GpsData.sPos.sLongitude = GpsDataRaw.sLongitude;
 8003588:	4a05      	ldr	r2, [pc, #20]	; (80035a0 <gps_UpdateGpsData+0x8c>)
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <gps_UpdateGpsData+0x90>)
 800358c:	3218      	adds	r2, #24
 800358e:	0010      	movs	r0, r2
 8003590:	3318      	adds	r3, #24
 8003592:	2210      	movs	r2, #16
 8003594:	0019      	movs	r1, r3
 8003596:	f006 fd9b 	bl	800a0d0 <memcpy>

}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	200024f8 	.word	0x200024f8
 80035a4:	20002530 	.word	0x20002530

080035a8 <gps_PPSReceived>:


void gps_PPSReceived(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  GpsData.u32ValidDataAge +=1;
 80035ac:	4b07      	ldr	r3, [pc, #28]	; (80035cc <gps_PPSReceived+0x24>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	4b06      	ldr	r3, [pc, #24]	; (80035cc <gps_PPSReceived+0x24>)
 80035b4:	605a      	str	r2, [r3, #4]
  if (GpsData.u32ValidDataAge > 1)
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <gps_PPSReceived+0x24>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d902      	bls.n	80035c4 <gps_PPSReceived+0x1c>
  {
    GpsData.bValidFrame = false;
 80035be:	4b03      	ldr	r3, [pc, #12]	; (80035cc <gps_PPSReceived+0x24>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
  }
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	200024f8 	.word	0x200024f8

080035d0 <gps_ExtractTime>:
  GpsData.bHealthRequest = true;
}


void gps_ExtractTime(uint8_t *pData)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  // Hour
  GpsDataRaw.u8Hour = (*pData - 0x30) * 10;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	1c1a      	adds	r2, r3, #0
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	18d3      	adds	r3, r2, r3
 80035e2:	18db      	adds	r3, r3, r3
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	3320      	adds	r3, #32
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <gps_ExtractTime+0xa0>)
 80035ec:	705a      	strb	r2, [r3, #1]
  GpsDataRaw.u8Hour += (*(pData+1) - 0x30);
 80035ee:	4b20      	ldr	r3, [pc, #128]	; (8003670 <gps_ExtractTime+0xa0>)
 80035f0:	785b      	ldrb	r3, [r3, #1]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3301      	adds	r3, #1
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	18d3      	adds	r3, r2, r3
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	3b30      	subs	r3, #48	; 0x30
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <gps_ExtractTime+0xa0>)
 8003604:	705a      	strb	r2, [r3, #1]
  // Minutes
  GpsDataRaw.u8Minute = (*(pData + 2) - 0x30) * 10;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3302      	adds	r3, #2
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	1c1a      	adds	r2, r3, #0
 800360e:	0092      	lsls	r2, r2, #2
 8003610:	18d3      	adds	r3, r2, r3
 8003612:	18db      	adds	r3, r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	3320      	adds	r3, #32
 8003618:	b2da      	uxtb	r2, r3
 800361a:	4b15      	ldr	r3, [pc, #84]	; (8003670 <gps_ExtractTime+0xa0>)
 800361c:	709a      	strb	r2, [r3, #2]
  GpsDataRaw.u8Minute += (*(pData + 3) - 0x30);
 800361e:	4b14      	ldr	r3, [pc, #80]	; (8003670 <gps_ExtractTime+0xa0>)
 8003620:	789b      	ldrb	r3, [r3, #2]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3303      	adds	r3, #3
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	18d3      	adds	r3, r2, r3
 800362c:	b2db      	uxtb	r3, r3
 800362e:	3b30      	subs	r3, #48	; 0x30
 8003630:	b2da      	uxtb	r2, r3
 8003632:	4b0f      	ldr	r3, [pc, #60]	; (8003670 <gps_ExtractTime+0xa0>)
 8003634:	709a      	strb	r2, [r3, #2]
  // Seconds
  GpsDataRaw.u8Second = (*(pData + 4) - 0x30) * 10;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3304      	adds	r3, #4
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	1c1a      	adds	r2, r3, #0
 800363e:	0092      	lsls	r2, r2, #2
 8003640:	18d3      	adds	r3, r2, r3
 8003642:	18db      	adds	r3, r3, r3
 8003644:	b2db      	uxtb	r3, r3
 8003646:	3320      	adds	r3, #32
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4b09      	ldr	r3, [pc, #36]	; (8003670 <gps_ExtractTime+0xa0>)
 800364c:	70da      	strb	r2, [r3, #3]
  GpsDataRaw.u8Second += (*(pData + 5) - 0x30);
 800364e:	4b08      	ldr	r3, [pc, #32]	; (8003670 <gps_ExtractTime+0xa0>)
 8003650:	78db      	ldrb	r3, [r3, #3]
 8003652:	b2da      	uxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3305      	adds	r3, #5
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	18d3      	adds	r3, r2, r3
 800365c:	b2db      	uxtb	r3, r3
 800365e:	3b30      	subs	r3, #48	; 0x30
 8003660:	b2da      	uxtb	r2, r3
 8003662:	4b03      	ldr	r3, [pc, #12]	; (8003670 <gps_ExtractTime+0xa0>)
 8003664:	70da      	strb	r2, [r3, #3]
}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b002      	add	sp, #8
 800366c:	bd80      	pop	{r7, pc}
 800366e:	46c0      	nop			; (mov r8, r8)
 8003670:	20002530 	.word	0x20002530

08003674 <gps_ExtractDate>:


void gps_ExtractDate(uint8_t *pData)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  //Yearh
  GpsDataRaw.u16Year = (*(pData+4) -0x30) *10;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3304      	adds	r3, #4
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	3b30      	subs	r3, #48	; 0x30
 8003684:	b29b      	uxth	r3, r3
 8003686:	1c1a      	adds	r2, r3, #0
 8003688:	0092      	lsls	r2, r2, #2
 800368a:	18d3      	adds	r3, r2, r3
 800368c:	18db      	adds	r3, r3, r3
 800368e:	b29a      	uxth	r2, r3
 8003690:	4b22      	ldr	r3, [pc, #136]	; (800371c <gps_ExtractDate+0xa8>)
 8003692:	80da      	strh	r2, [r3, #6]
  GpsDataRaw.u16Year += (*(pData+5) -0x30) + 2000;
 8003694:	4b21      	ldr	r3, [pc, #132]	; (800371c <gps_ExtractDate+0xa8>)
 8003696:	88db      	ldrh	r3, [r3, #6]
 8003698:	b29a      	uxth	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3305      	adds	r3, #5
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	18d3      	adds	r3, r2, r3
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	22f4      	movs	r2, #244	; 0xf4
 80036a8:	00d2      	lsls	r2, r2, #3
 80036aa:	4694      	mov	ip, r2
 80036ac:	4463      	add	r3, ip
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	4b1a      	ldr	r3, [pc, #104]	; (800371c <gps_ExtractDate+0xa8>)
 80036b2:	80da      	strh	r2, [r3, #6]
  //Month
  GpsDataRaw.u8Month = (*(pData+2) -0x30) *10;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3302      	adds	r3, #2
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	1c1a      	adds	r2, r3, #0
 80036bc:	0092      	lsls	r2, r2, #2
 80036be:	18d3      	adds	r3, r2, r3
 80036c0:	18db      	adds	r3, r3, r3
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	3320      	adds	r3, #32
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4b14      	ldr	r3, [pc, #80]	; (800371c <gps_ExtractDate+0xa8>)
 80036ca:	711a      	strb	r2, [r3, #4]
  GpsDataRaw.u8Month += (*(pData+3) -0x30);
 80036cc:	4b13      	ldr	r3, [pc, #76]	; (800371c <gps_ExtractDate+0xa8>)
 80036ce:	791b      	ldrb	r3, [r3, #4]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3303      	adds	r3, #3
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	18d3      	adds	r3, r2, r3
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	3b30      	subs	r3, #48	; 0x30
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	4b0e      	ldr	r3, [pc, #56]	; (800371c <gps_ExtractDate+0xa8>)
 80036e2:	711a      	strb	r2, [r3, #4]
  //Day
  GpsDataRaw.u8Day = (*(pData) -0x30) *10;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	1c1a      	adds	r2, r3, #0
 80036ea:	0092      	lsls	r2, r2, #2
 80036ec:	18d3      	adds	r3, r2, r3
 80036ee:	18db      	adds	r3, r3, r3
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	3320      	adds	r3, #32
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4b09      	ldr	r3, [pc, #36]	; (800371c <gps_ExtractDate+0xa8>)
 80036f8:	715a      	strb	r2, [r3, #5]
  GpsDataRaw.u8Day += (*(pData+1) -0x30);
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <gps_ExtractDate+0xa8>)
 80036fc:	795b      	ldrb	r3, [r3, #5]
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3301      	adds	r3, #1
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	18d3      	adds	r3, r2, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	3b30      	subs	r3, #48	; 0x30
 800370c:	b2da      	uxtb	r2, r3
 800370e:	4b03      	ldr	r3, [pc, #12]	; (800371c <gps_ExtractDate+0xa8>)
 8003710:	715a      	strb	r2, [r3, #5]
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bd80      	pop	{r7, pc}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	20002530 	.word	0x20002530

08003720 <gps_ExtractCoordinate>:



sGpsCoordinate gps_ExtractCoordinate(uint8_t *pData)
{
 8003720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003722:	b091      	sub	sp, #68	; 0x44
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
  uint8_t u8DataSize = 0;
 800372a:	2537      	movs	r5, #55	; 0x37
 800372c:	2008      	movs	r0, #8
 800372e:	183b      	adds	r3, r7, r0
 8003730:	195b      	adds	r3, r3, r5
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
  uint8_t *pNextData;
  uint32_t u32Multiply = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t u8PointPos = 0;
 800373a:	262f      	movs	r6, #47	; 0x2f
 800373c:	183b      	adds	r3, r7, r0
 800373e:	199b      	adds	r3, r3, r6
 8003740:	2200      	movs	r2, #0
 8003742:	701a      	strb	r2, [r3, #0]
  double decimals = 0;
 8003744:	2200      	movs	r2, #0
 8003746:	2300      	movs	r3, #0
 8003748:	62ba      	str	r2, [r7, #40]	; 0x28
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sGpsCoordinate sPos = {0, 0, 0, 0};
 800374c:	2408      	movs	r4, #8
 800374e:	183b      	adds	r3, r7, r0
 8003750:	191b      	adds	r3, r3, r4
 8003752:	0018      	movs	r0, r3
 8003754:	2310      	movs	r3, #16
 8003756:	001a      	movs	r2, r3
 8003758:	2100      	movs	r1, #0
 800375a:	f006 fcc2 	bl	800a0e2 <memset>
  pNextData = gps_GetNextToken(pData);
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	0018      	movs	r0, r3
 8003762:	f7ff fc7d 	bl	8003060 <gps_GetNextToken>
 8003766:	0003      	movs	r3, r0
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
  // Get Field size
  u8DataSize = (uint8_t)(pNextData - pData)-1;
 800376a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	b2da      	uxtb	r2, r3
 8003772:	2008      	movs	r0, #8
 8003774:	183b      	adds	r3, r7, r0
 8003776:	195b      	adds	r3, r3, r5
 8003778:	3a01      	subs	r2, #1
 800377a:	701a      	strb	r2, [r3, #0]
  if (*(pData+5)=='.')
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	3305      	adds	r3, #5
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b2e      	cmp	r3, #46	; 0x2e
 8003784:	d14f      	bne.n	8003826 <gps_ExtractCoordinate+0x106>
  {
    sPos.i16Degrees = (*pData - 0x30) * 100;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	3b30      	subs	r3, #48	; 0x30
 800378c:	b29b      	uxth	r3, r3
 800378e:	2264      	movs	r2, #100	; 0x64
 8003790:	4353      	muls	r3, r2
 8003792:	b29b      	uxth	r3, r3
 8003794:	b21a      	sxth	r2, r3
 8003796:	183b      	adds	r3, r7, r0
 8003798:	191b      	adds	r3, r3, r4
 800379a:	805a      	strh	r2, [r3, #2]
    sPos.i16Degrees += (*(pData + 1) - 0x30) * 10;
 800379c:	183b      	adds	r3, r7, r0
 800379e:	191b      	adds	r3, r3, r4
 80037a0:	2202      	movs	r2, #2
 80037a2:	5e9b      	ldrsh	r3, [r3, r2]
 80037a4:	b29a      	uxth	r2, r3
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3301      	adds	r3, #1
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3b30      	subs	r3, #48	; 0x30
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	1c19      	adds	r1, r3, #0
 80037b2:	0089      	lsls	r1, r1, #2
 80037b4:	18cb      	adds	r3, r1, r3
 80037b6:	18db      	adds	r3, r3, r3
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	18d3      	adds	r3, r2, r3
 80037bc:	b29b      	uxth	r3, r3
 80037be:	b21a      	sxth	r2, r3
 80037c0:	183b      	adds	r3, r7, r0
 80037c2:	191b      	adds	r3, r3, r4
 80037c4:	805a      	strh	r2, [r3, #2]
    sPos.i16Degrees += (*(pData + 2) - 0x30);
 80037c6:	183b      	adds	r3, r7, r0
 80037c8:	191b      	adds	r3, r3, r4
 80037ca:	2202      	movs	r2, #2
 80037cc:	5e9b      	ldrsh	r3, [r3, r2]
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	3302      	adds	r3, #2
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	18d3      	adds	r3, r2, r3
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b30      	subs	r3, #48	; 0x30
 80037de:	b29b      	uxth	r3, r3
 80037e0:	b21a      	sxth	r2, r3
 80037e2:	183b      	adds	r3, r7, r0
 80037e4:	191b      	adds	r3, r3, r4
 80037e6:	805a      	strh	r2, [r3, #2]
    sPos.u8Minutes = (*(pData+3) - 0x30) * 10;
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	3303      	adds	r3, #3
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	1c1a      	adds	r2, r3, #0
 80037f0:	0092      	lsls	r2, r2, #2
 80037f2:	18d3      	adds	r3, r2, r3
 80037f4:	18db      	adds	r3, r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3320      	adds	r3, #32
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	183b      	adds	r3, r7, r0
 80037fe:	191b      	adds	r3, r3, r4
 8003800:	705a      	strb	r2, [r3, #1]
    sPos.u8Minutes += (*(pData+4) - 0x30);
 8003802:	183b      	adds	r3, r7, r0
 8003804:	191b      	adds	r3, r3, r4
 8003806:	785a      	ldrb	r2, [r3, #1]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	3304      	adds	r3, #4
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	18d3      	adds	r3, r2, r3
 8003810:	b2db      	uxtb	r3, r3
 8003812:	3b30      	subs	r3, #48	; 0x30
 8003814:	b2da      	uxtb	r2, r3
 8003816:	183b      	adds	r3, r7, r0
 8003818:	191b      	adds	r3, r3, r4
 800381a:	705a      	strb	r2, [r3, #1]
    u8PointPos = 6;
 800381c:	183b      	adds	r3, r7, r0
 800381e:	199b      	adds	r3, r3, r6
 8003820:	2206      	movs	r2, #6
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e067      	b.n	80038f6 <gps_ExtractCoordinate+0x1d6>
  }
  else
  {
    sPos.i16Degrees = (*pData - 0x30) * 10;
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	3b30      	subs	r3, #48	; 0x30
 800382c:	b29b      	uxth	r3, r3
 800382e:	1c1a      	adds	r2, r3, #0
 8003830:	0092      	lsls	r2, r2, #2
 8003832:	18d3      	adds	r3, r2, r3
 8003834:	18db      	adds	r3, r3, r3
 8003836:	b29b      	uxth	r3, r3
 8003838:	b21a      	sxth	r2, r3
 800383a:	2108      	movs	r1, #8
 800383c:	2008      	movs	r0, #8
 800383e:	183b      	adds	r3, r7, r0
 8003840:	185b      	adds	r3, r3, r1
 8003842:	805a      	strh	r2, [r3, #2]
    sPos.i16Degrees += (*(pData+1) - 0x30);
 8003844:	183b      	adds	r3, r7, r0
 8003846:	185b      	adds	r3, r3, r1
 8003848:	2202      	movs	r2, #2
 800384a:	5e9b      	ldrsh	r3, [r3, r2]
 800384c:	b29a      	uxth	r2, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	3301      	adds	r3, #1
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	18d3      	adds	r3, r2, r3
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b30      	subs	r3, #48	; 0x30
 800385c:	b29b      	uxth	r3, r3
 800385e:	b21a      	sxth	r2, r3
 8003860:	183b      	adds	r3, r7, r0
 8003862:	185b      	adds	r3, r3, r1
 8003864:	805a      	strh	r2, [r3, #2]
    sPos.u8Minutes = (*(pData+2) - 0x30) * 10;
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3302      	adds	r3, #2
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	1c1a      	adds	r2, r3, #0
 800386e:	0092      	lsls	r2, r2, #2
 8003870:	18d3      	adds	r3, r2, r3
 8003872:	18db      	adds	r3, r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	3320      	adds	r3, #32
 8003878:	b2da      	uxtb	r2, r3
 800387a:	183b      	adds	r3, r7, r0
 800387c:	185b      	adds	r3, r3, r1
 800387e:	705a      	strb	r2, [r3, #1]
    sPos.u8Minutes += (*(pData+3) - 0x30);
 8003880:	183b      	adds	r3, r7, r0
 8003882:	185b      	adds	r3, r3, r1
 8003884:	785a      	ldrb	r2, [r3, #1]
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	3303      	adds	r3, #3
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	18d3      	adds	r3, r2, r3
 800388e:	b2db      	uxtb	r3, r3
 8003890:	3b30      	subs	r3, #48	; 0x30
 8003892:	b2da      	uxtb	r2, r3
 8003894:	183b      	adds	r3, r7, r0
 8003896:	185b      	adds	r3, r3, r1
 8003898:	705a      	strb	r2, [r3, #1]
    u8PointPos = 5;
 800389a:	232f      	movs	r3, #47	; 0x2f
 800389c:	2208      	movs	r2, #8
 800389e:	4694      	mov	ip, r2
 80038a0:	44bc      	add	ip, r7
 80038a2:	4463      	add	r3, ip
 80038a4:	2205      	movs	r2, #5
 80038a6:	701a      	strb	r2, [r3, #0]
  }
  while(u8DataSize>u8PointPos)
 80038a8:	e025      	b.n	80038f6 <gps_ExtractCoordinate+0x1d6>
  {
    u8DataSize--;
 80038aa:	2137      	movs	r1, #55	; 0x37
 80038ac:	2008      	movs	r0, #8
 80038ae:	183b      	adds	r3, r7, r0
 80038b0:	185b      	adds	r3, r3, r1
 80038b2:	781a      	ldrb	r2, [r3, #0]
 80038b4:	183b      	adds	r3, r7, r0
 80038b6:	185b      	adds	r3, r3, r1
 80038b8:	3a01      	subs	r2, #1
 80038ba:	701a      	strb	r2, [r3, #0]
    decimals += (*(pData+u8DataSize) - 0x30) * u32Multiply;
 80038bc:	183b      	adds	r3, r7, r0
 80038be:	185b      	adds	r3, r3, r1
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	18d3      	adds	r3, r2, r3
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	3b30      	subs	r3, #48	; 0x30
 80038ca:	001a      	movs	r2, r3
 80038cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ce:	4353      	muls	r3, r2
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7fe fc4b 	bl	800216c <__aeabi_ui2d>
 80038d6:	0002      	movs	r2, r0
 80038d8:	000b      	movs	r3, r1
 80038da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038de:	f7fc fe53 	bl	8000588 <__aeabi_dadd>
 80038e2:	0002      	movs	r2, r0
 80038e4:	000b      	movs	r3, r1
 80038e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    u32Multiply *=10;
 80038ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038ec:	0013      	movs	r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	189b      	adds	r3, r3, r2
 80038f2:	005b      	lsls	r3, r3, #1
 80038f4:	63bb      	str	r3, [r7, #56]	; 0x38
  while(u8DataSize>u8PointPos)
 80038f6:	2337      	movs	r3, #55	; 0x37
 80038f8:	2408      	movs	r4, #8
 80038fa:	193a      	adds	r2, r7, r4
 80038fc:	18d2      	adds	r2, r2, r3
 80038fe:	232f      	movs	r3, #47	; 0x2f
 8003900:	2108      	movs	r1, #8
 8003902:	468c      	mov	ip, r1
 8003904:	44bc      	add	ip, r7
 8003906:	4463      	add	r3, ip
 8003908:	7812      	ldrb	r2, [r2, #0]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d8cc      	bhi.n	80038aa <gps_ExtractCoordinate+0x18a>
  }

  decimals += (sPos.u8Minutes *u32Multiply);
 8003910:	2608      	movs	r6, #8
 8003912:	193b      	adds	r3, r7, r4
 8003914:	199b      	adds	r3, r3, r6
 8003916:	785b      	ldrb	r3, [r3, #1]
 8003918:	001a      	movs	r2, r3
 800391a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391c:	4353      	muls	r3, r2
 800391e:	0018      	movs	r0, r3
 8003920:	f7fe fc24 	bl	800216c <__aeabi_ui2d>
 8003924:	0002      	movs	r2, r0
 8003926:	000b      	movs	r3, r1
 8003928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800392a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800392c:	f7fc fe2c 	bl	8000588 <__aeabi_dadd>
 8003930:	0002      	movs	r2, r0
 8003932:	000b      	movs	r3, r1
 8003934:	62ba      	str	r2, [r7, #40]	; 0x28
 8003936:	62fb      	str	r3, [r7, #44]	; 0x2c
  decimals /= (u32Multiply*100);
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	2264      	movs	r2, #100	; 0x64
 800393c:	4353      	muls	r3, r2
 800393e:	0018      	movs	r0, r3
 8003940:	f7fe fc14 	bl	800216c <__aeabi_ui2d>
 8003944:	0002      	movs	r2, r0
 8003946:	000b      	movs	r3, r1
 8003948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800394a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800394c:	f7fd f986 	bl	8000c5c <__aeabi_ddiv>
 8003950:	0002      	movs	r2, r0
 8003952:	000b      	movs	r3, r1
 8003954:	62ba      	str	r2, [r7, #40]	; 0x28
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
  sPos.dValueDD += sPos.i16Degrees + (decimals*10/6);
 8003958:	0022      	movs	r2, r4
 800395a:	193b      	adds	r3, r7, r4
 800395c:	199b      	adds	r3, r3, r6
 800395e:	689c      	ldr	r4, [r3, #8]
 8003960:	68dd      	ldr	r5, [r3, #12]
 8003962:	18bb      	adds	r3, r7, r2
 8003964:	199b      	adds	r3, r3, r6
 8003966:	2202      	movs	r2, #2
 8003968:	5e9b      	ldrsh	r3, [r3, r2]
 800396a:	0018      	movs	r0, r3
 800396c:	f7fe fbce 	bl	800210c <__aeabi_i2d>
 8003970:	6038      	str	r0, [r7, #0]
 8003972:	6079      	str	r1, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	4b16      	ldr	r3, [pc, #88]	; (80039d0 <gps_ExtractCoordinate+0x2b0>)
 8003978:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800397a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800397c:	f7fd fd74 	bl	8001468 <__aeabi_dmul>
 8003980:	0002      	movs	r2, r0
 8003982:	000b      	movs	r3, r1
 8003984:	0010      	movs	r0, r2
 8003986:	0019      	movs	r1, r3
 8003988:	2200      	movs	r2, #0
 800398a:	4b12      	ldr	r3, [pc, #72]	; (80039d4 <gps_ExtractCoordinate+0x2b4>)
 800398c:	f7fd f966 	bl	8000c5c <__aeabi_ddiv>
 8003990:	0002      	movs	r2, r0
 8003992:	000b      	movs	r3, r1
 8003994:	6838      	ldr	r0, [r7, #0]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	f7fc fdf6 	bl	8000588 <__aeabi_dadd>
 800399c:	0002      	movs	r2, r0
 800399e:	000b      	movs	r3, r1
 80039a0:	0020      	movs	r0, r4
 80039a2:	0029      	movs	r1, r5
 80039a4:	f7fc fdf0 	bl	8000588 <__aeabi_dadd>
 80039a8:	0002      	movs	r2, r0
 80039aa:	000b      	movs	r3, r1
 80039ac:	2408      	movs	r4, #8
 80039ae:	1939      	adds	r1, r7, r4
 80039b0:	1989      	adds	r1, r1, r6
 80039b2:	608a      	str	r2, [r1, #8]
 80039b4:	60cb      	str	r3, [r1, #12]
  return(sPos);
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	193b      	adds	r3, r7, r4
 80039ba:	199b      	adds	r3, r3, r6
 80039bc:	0010      	movs	r0, r2
 80039be:	0019      	movs	r1, r3
 80039c0:	2310      	movs	r3, #16
 80039c2:	001a      	movs	r2, r3
 80039c4:	f006 fb84 	bl	800a0d0 <memcpy>
}
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b011      	add	sp, #68	; 0x44
 80039ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d0:	40240000 	.word	0x40240000
 80039d4:	40180000 	.word	0x40180000

080039d8 <gps_HexaCharToAscii>:


uint8_t gps_HexaCharToAscii(uint8_t uHexa)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	0002      	movs	r2, r0
 80039e0:	1dfb      	adds	r3, r7, #7
 80039e2:	701a      	strb	r2, [r3, #0]
  uint8_t ucResult = 0xFF;
 80039e4:	210f      	movs	r1, #15
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	22ff      	movs	r2, #255	; 0xff
 80039ea:	701a      	strb	r2, [r3, #0]
  if( uHexa < 0x10 )
 80039ec:	1dfb      	adds	r3, r7, #7
 80039ee:	781b      	ldrb	r3, [r3, #0]
 80039f0:	2b0f      	cmp	r3, #15
 80039f2:	d80f      	bhi.n	8003a14 <gps_HexaCharToAscii+0x3c>
  {
    if( uHexa < 0x0A )
 80039f4:	1dfb      	adds	r3, r7, #7
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b09      	cmp	r3, #9
 80039fa:	d805      	bhi.n	8003a08 <gps_HexaCharToAscii+0x30>
    {
      ucResult = uHexa + 0x30;
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	1dfa      	adds	r2, r7, #7
 8003a00:	7812      	ldrb	r2, [r2, #0]
 8003a02:	3230      	adds	r2, #48	; 0x30
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e005      	b.n	8003a14 <gps_HexaCharToAscii+0x3c>
    }
    else
    {
      ucResult = uHexa + 0x37;
 8003a08:	230f      	movs	r3, #15
 8003a0a:	18fb      	adds	r3, r7, r3
 8003a0c:	1dfa      	adds	r2, r7, #7
 8003a0e:	7812      	ldrb	r2, [r2, #0]
 8003a10:	3237      	adds	r2, #55	; 0x37
 8003a12:	701a      	strb	r2, [r3, #0]
    }
  }
  return(ucResult);
 8003a14:	230f      	movs	r3, #15
 8003a16:	18fb      	adds	r3, r7, r3
 8003a18:	781b      	ldrb	r3, [r3, #0]
}
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	b004      	add	sp, #16
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a28:	f000 ff74 	bl	8004914 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a2c:	f000 f82c 	bl	8003a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a30:	f7ff f8ce 	bl	8002bd0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8003a34:	f000 fe4a 	bl	80046cc <MX_USART1_UART_Init>
  //MX_IWDG_Init();
  MX_USART3_UART_Init();
 8003a38:	f000 fe78 	bl	800472c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  gps_InitFw();
 8003a3c:	f7ff f962 	bl	8002d04 <gps_InitFw>
  WDTCheck_InitFW();
 8003a40:	f7fe fbd8 	bl	80021f4 <WDTCheck_InitFW>
  shell_InitFw();
 8003a44:	f000 f96c 	bl	8003d20 <shell_InitFw>
  checkPos_InitFw();
 8003a48:	f7fe fcb4 	bl	80023b4 <checkPos_InitFw>
  RetargetInit(&huart3);
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	; (8003a78 <main+0x54>)
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f000 f89c 	bl	8003b8c <RetargetInit>

  printf("\r\n\r\n*********************\r\n");
 8003a54:	4b09      	ldr	r3, [pc, #36]	; (8003a7c <main+0x58>)
 8003a56:	0018      	movs	r0, r3
 8003a58:	f007 f852 	bl	800ab00 <puts>
  printf("* GPS FIRMWARE TEST *\r\n");
 8003a5c:	4b08      	ldr	r3, [pc, #32]	; (8003a80 <main+0x5c>)
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f007 f84e 	bl	800ab00 <puts>
  printf("*********************\r\n");
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <main+0x60>)
 8003a66:	0018      	movs	r0, r3
 8003a68:	f007 f84a 	bl	800ab00 <puts>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8003a6c:	f7ff f88c 	bl	8002b88 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8003a70:	f003 fefb 	bl	800786a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003a74:	e7fe      	b.n	8003a74 <main+0x50>
 8003a76:	46c0      	nop			; (mov r8, r8)
 8003a78:	200025a4 	.word	0x200025a4
 8003a7c:	08010a40 	.word	0x08010a40
 8003a80:	08010a5c 	.word	0x08010a5c
 8003a84:	08010a74 	.word	0x08010a74

08003a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b099      	sub	sp, #100	; 0x64
 8003a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a8e:	242c      	movs	r4, #44	; 0x2c
 8003a90:	193b      	adds	r3, r7, r4
 8003a92:	0018      	movs	r0, r3
 8003a94:	2334      	movs	r3, #52	; 0x34
 8003a96:	001a      	movs	r2, r3
 8003a98:	2100      	movs	r1, #0
 8003a9a:	f006 fb22 	bl	800a0e2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a9e:	231c      	movs	r3, #28
 8003aa0:	18fb      	adds	r3, r7, r3
 8003aa2:	0018      	movs	r0, r3
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	001a      	movs	r2, r3
 8003aa8:	2100      	movs	r1, #0
 8003aaa:	f006 fb1a 	bl	800a0e2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003aae:	003b      	movs	r3, r7
 8003ab0:	0018      	movs	r0, r3
 8003ab2:	231c      	movs	r3, #28
 8003ab4:	001a      	movs	r2, r3
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	f006 fb13 	bl	800a0e2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003abc:	0021      	movs	r1, r4
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	220a      	movs	r2, #10
 8003ac2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ac4:	187b      	adds	r3, r7, r1
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003aca:	187b      	adds	r3, r7, r1
 8003acc:	2210      	movs	r2, #16
 8003ace:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003ad0:	187b      	adds	r3, r7, r1
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	2202      	movs	r2, #2
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003adc:	187b      	adds	r3, r7, r1
 8003ade:	2280      	movs	r2, #128	; 0x80
 8003ae0:	0212      	lsls	r2, r2, #8
 8003ae2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003ae4:	187b      	adds	r3, r7, r1
 8003ae6:	22a0      	movs	r2, #160	; 0xa0
 8003ae8:	0392      	lsls	r2, r2, #14
 8003aea:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	2201      	movs	r2, #1
 8003af0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003af2:	187b      	adds	r3, r7, r1
 8003af4:	0018      	movs	r0, r3
 8003af6:	f001 fa4d 	bl	8004f94 <HAL_RCC_OscConfig>
 8003afa:	1e03      	subs	r3, r0, #0
 8003afc:	d001      	beq.n	8003b02 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003afe:	f000 f83f 	bl	8003b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b02:	211c      	movs	r1, #28
 8003b04:	187b      	adds	r3, r7, r1
 8003b06:	2207      	movs	r2, #7
 8003b08:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b0a:	187b      	adds	r3, r7, r1
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b10:	187b      	adds	r3, r7, r1
 8003b12:	2200      	movs	r2, #0
 8003b14:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b16:	187b      	adds	r3, r7, r1
 8003b18:	2200      	movs	r2, #0
 8003b1a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b1c:	187b      	adds	r3, r7, r1
 8003b1e:	2101      	movs	r1, #1
 8003b20:	0018      	movs	r0, r3
 8003b22:	f001 fdbd 	bl	80056a0 <HAL_RCC_ClockConfig>
 8003b26:	1e03      	subs	r3, r0, #0
 8003b28:	d001      	beq.n	8003b2e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8003b2a:	f000 f829 	bl	8003b80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1;
 8003b2e:	003b      	movs	r3, r7
 8003b30:	4a09      	ldr	r2, [pc, #36]	; (8003b58 <SystemClock_Config+0xd0>)
 8003b32:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003b34:	003b      	movs	r3, r7
 8003b36:	2200      	movs	r2, #0
 8003b38:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003b3a:	003b      	movs	r3, r7
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b40:	003b      	movs	r3, r7
 8003b42:	0018      	movs	r0, r3
 8003b44:	f001 ff50 	bl	80059e8 <HAL_RCCEx_PeriphCLKConfig>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d001      	beq.n	8003b50 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003b4c:	f000 f818 	bl	8003b80 <Error_Handler>
  }
}
 8003b50:	46c0      	nop			; (mov r8, r8)
 8003b52:	46bd      	mov	sp, r7
 8003b54:	b019      	add	sp, #100	; 0x64
 8003b56:	bd90      	pop	{r4, r7, pc}
 8003b58:	00040001 	.word	0x00040001

08003b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a04      	ldr	r2, [pc, #16]	; (8003b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d101      	bne.n	8003b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003b6e:	f000 fee5 	bl	800493c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003b72:	46c0      	nop			; (mov r8, r8)
 8003b74:	46bd      	mov	sp, r7
 8003b76:	b002      	add	sp, #8
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	40012c00 	.word	0x40012c00

08003b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b84:	b672      	cpsid	i
}
 8003b86:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b88:	e7fe      	b.n	8003b88 <Error_Handler+0x8>
	...

08003b8c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8003b94:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <RetargetInit+0x28>)
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	601a      	str	r2, [r3, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <RetargetInit+0x2c>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6898      	ldr	r0, [r3, #8]
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	f006 ffb5 	bl	800ab14 <setvbuf>
}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	46bd      	mov	sp, r7
 8003bae:	b002      	add	sp, #8
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	46c0      	nop			; (mov r8, r8)
 8003bb4:	20002558 	.word	0x20002558
 8003bb8:	2000000c 	.word	0x2000000c

08003bbc <_isatty>:

int _isatty(int fd) {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	db04      	blt.n	8003bd4 <_isatty+0x18>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	dc01      	bgt.n	8003bd4 <_isatty+0x18>
    return 1;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e005      	b.n	8003be0 <_isatty+0x24>

  errno = EBADF;
 8003bd4:	f006 fa52 	bl	800a07c <__errno>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	2209      	movs	r2, #9
 8003bdc:	601a      	str	r2, [r3, #0]
  return 0;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <_write>:

int _write(int fd, char* ptr, int len) {
 8003be8:	b5b0      	push	{r4, r5, r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d002      	beq.n	8003c00 <_write+0x18>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d114      	bne.n	8003c2a <_write+0x42>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <_write+0x58>)
 8003c02:	6818      	ldr	r0, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	2517      	movs	r5, #23
 8003c0a:	197c      	adds	r4, r7, r5
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	425b      	negs	r3, r3
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	f002 faad 	bl	8006170 <HAL_UART_Transmit>
 8003c16:	0003      	movs	r3, r0
 8003c18:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8003c1a:	197b      	adds	r3, r7, r5
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <_write+0x3e>
      return len;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	e008      	b.n	8003c38 <_write+0x50>
    else
      return EIO;
 8003c26:	2305      	movs	r3, #5
 8003c28:	e006      	b.n	8003c38 <_write+0x50>
  }
  errno = EBADF;
 8003c2a:	f006 fa27 	bl	800a07c <__errno>
 8003c2e:	0003      	movs	r3, r0
 8003c30:	2209      	movs	r2, #9
 8003c32:	601a      	str	r2, [r3, #0]
  return -1;
 8003c34:	2301      	movs	r3, #1
 8003c36:	425b      	negs	r3, r3
}
 8003c38:	0018      	movs	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	b006      	add	sp, #24
 8003c3e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c40:	20002558 	.word	0x20002558

08003c44 <_close>:

int _close(int fd) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b082      	sub	sp, #8
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	db04      	blt.n	8003c5c <_close+0x18>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	dc01      	bgt.n	8003c5c <_close+0x18>
    return 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	e006      	b.n	8003c6a <_close+0x26>

  errno = EBADF;
 8003c5c:	f006 fa0e 	bl	800a07c <__errno>
 8003c60:	0003      	movs	r3, r0
 8003c62:	2209      	movs	r2, #9
 8003c64:	601a      	str	r2, [r3, #0]
  return -1;
 8003c66:	2301      	movs	r3, #1
 8003c68:	425b      	negs	r3, r3
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b002      	add	sp, #8
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b084      	sub	sp, #16
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8003c7e:	f006 f9fd 	bl	800a07c <__errno>
 8003c82:	0003      	movs	r3, r0
 8003c84:	2209      	movs	r2, #9
 8003c86:	601a      	str	r2, [r3, #0]
  return -1;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	425b      	negs	r3, r3
}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b004      	add	sp, #16
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <_read>:

int _read(int fd, char* ptr, int len) {
 8003c94:	b5b0      	push	{r4, r5, r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d113      	bne.n	8003cce <_read+0x3a>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <_read+0x50>)
 8003ca8:	6818      	ldr	r0, [r3, #0]
 8003caa:	2517      	movs	r5, #23
 8003cac:	197c      	adds	r4, r7, r5
 8003cae:	2301      	movs	r3, #1
 8003cb0:	425b      	negs	r3, r3
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f002 fb05 	bl	80062c4 <HAL_UART_Receive>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	7023      	strb	r3, [r4, #0]
    if (hstatus == HAL_OK)
 8003cbe:	197b      	adds	r3, r7, r5
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <_read+0x36>
      return 1;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e008      	b.n	8003cdc <_read+0x48>
    else
      return EIO;
 8003cca:	2305      	movs	r3, #5
 8003ccc:	e006      	b.n	8003cdc <_read+0x48>
  }
  errno = EBADF;
 8003cce:	f006 f9d5 	bl	800a07c <__errno>
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	2209      	movs	r2, #9
 8003cd6:	601a      	str	r2, [r3, #0]
  return -1;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	425b      	negs	r3, r3
}
 8003cdc:	0018      	movs	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b006      	add	sp, #24
 8003ce2:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce4:	20002558 	.word	0x20002558

08003ce8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	db08      	blt.n	8003d0a <_fstat+0x22>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	dc05      	bgt.n	8003d0a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2280      	movs	r2, #128	; 0x80
 8003d02:	0192      	lsls	r2, r2, #6
 8003d04:	605a      	str	r2, [r3, #4]
    return 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	e005      	b.n	8003d16 <_fstat+0x2e>
  }

  errno = EBADF;
 8003d0a:	f006 f9b7 	bl	800a07c <__errno>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	2209      	movs	r2, #9
 8003d12:	601a      	str	r2, [r3, #0]
  return 0;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}
	...

08003d20 <shell_InitFw>:
void shell_TimerCallbackRxfromShell(TimerHandle_t xTimer);
void shell_ExtractLineFromQueue(void);
void shell_DecodeDataFromShell(void);

void shell_InitFw(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af02      	add	r7, sp, #8
  if(NULL == shellHandleTask)
 8003d26:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <shell_InitFw+0x2c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d10a      	bne.n	8003d44 <shell_InitFw+0x24>
  {
    xTaskCreate(shell_Task, // Function that implements the task.
 8003d2e:	23fa      	movs	r3, #250	; 0xfa
 8003d30:	005a      	lsls	r2, r3, #1
 8003d32:	4907      	ldr	r1, [pc, #28]	; (8003d50 <shell_InitFw+0x30>)
 8003d34:	4807      	ldr	r0, [pc, #28]	; (8003d54 <shell_InitFw+0x34>)
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <shell_InitFw+0x2c>)
 8003d38:	9301      	str	r3, [sp, #4]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	9300      	str	r3, [sp, #0]
 8003d3e:	2301      	movs	r3, #1
 8003d40:	f004 fcc4 	bl	80086cc <xTaskCreate>
    500,                    // Stack size in words, not bytes.
    (void*) 1,              // Parameter passed into the task.
    osPriorityNormal,       // Priority at which the task is created.
    &shellHandleTask);      // Used to pass out the created task's handle.
  }
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	200006d8 	.word	0x200006d8
 8003d50:	08010a8c 	.word	0x08010a8c
 8003d54:	08003d89 	.word	0x08003d89

08003d58 <shell_InitHw>:


void shell_InitHw(void)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
  //Enable IRQ
  HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2103      	movs	r1, #3
 8003d60:	201d      	movs	r0, #29
 8003d62:	f000 fe8f 	bl	8004a84 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 8003d66:	201d      	movs	r0, #29
 8003d68:	f000 fea1 	bl	8004aae <HAL_NVIC_EnableIRQ>
  __HAL_UART_ENABLE_IT(&SHELL_UART, UART_IT_RXNE);
 8003d6c:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <shell_InitHw+0x2c>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	4b04      	ldr	r3, [pc, #16]	; (8003d84 <shell_InitHw+0x2c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2120      	movs	r1, #32
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	601a      	str	r2, [r3, #0]

}
 8003d7c:	46c0      	nop			; (mov r8, r8)
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	200025a4 	.word	0x200025a4

08003d88 <shell_Task>:

void shell_Task(void *pvParameters)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b0ac      	sub	sp, #176	; 0xb0
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	6078      	str	r0, [r7, #4]

  sShellApp sShellapp;   // Variable control data
  sShell = &sShellapp;   // Variable control data
 8003d90:	4b2f      	ldr	r3, [pc, #188]	; (8003e50 <shell_Task+0xc8>)
 8003d92:	2208      	movs	r2, #8
 8003d94:	18ba      	adds	r2, r7, r2
 8003d96:	601a      	str	r2, [r3, #0]

  //Create Rx Gsm queue
  if(NULL == shellRxQueue)
 8003d98:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <shell_Task+0xcc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d107      	bne.n	8003db0 <shell_Task+0x28>
  {
    shellRxQueue = xQueueCreate(SHELL_RX_BUFFER_SIZE, sizeof(uint8_t));
 8003da0:	2200      	movs	r2, #0
 8003da2:	2101      	movs	r1, #1
 8003da4:	2096      	movs	r0, #150	; 0x96
 8003da6:	f003 ff11 	bl	8007bcc <xQueueGenericCreate>
 8003daa:	0002      	movs	r2, r0
 8003dac:	4b29      	ldr	r3, [pc, #164]	; (8003e54 <shell_Task+0xcc>)
 8003dae:	601a      	str	r2, [r3, #0]
  }

  shell_ResetVariables();
 8003db0:	f000 f85c 	bl	8003e6c <shell_ResetVariables>

  if(NULL == shellSemaphore)
 8003db4:	4b28      	ldr	r3, [pc, #160]	; (8003e58 <shell_Task+0xd0>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d107      	bne.n	8003dcc <shell_Task+0x44>
  {
    shellSemaphore = xSemaphoreCreateBinary();
 8003dbc:	2203      	movs	r2, #3
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	2001      	movs	r0, #1
 8003dc2:	f003 ff03 	bl	8007bcc <xQueueGenericCreate>
 8003dc6:	0002      	movs	r2, r0
 8003dc8:	4b23      	ldr	r3, [pc, #140]	; (8003e58 <shell_Task+0xd0>)
 8003dca:	601a      	str	r2, [r3, #0]
  }

  if(NULL == shellRxTimer)
 8003dcc:	4b23      	ldr	r3, [pc, #140]	; (8003e5c <shell_Task+0xd4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <shell_Task+0x62>
  {
    shellRxTimer = xTimerCreate("TimerRxFromBle", SHELL_TIME_RX_FROM_BLE_DEFAULT, pdFALSE,
 8003dd4:	4822      	ldr	r0, [pc, #136]	; (8003e60 <shell_Task+0xd8>)
 8003dd6:	4b23      	ldr	r3, [pc, #140]	; (8003e64 <shell_Task+0xdc>)
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2150      	movs	r1, #80	; 0x50
 8003de0:	f005 fbae 	bl	8009540 <xTimerCreate>
 8003de4:	0002      	movs	r2, r0
 8003de6:	4b1d      	ldr	r3, [pc, #116]	; (8003e5c <shell_Task+0xd4>)
 8003de8:	601a      	str	r2, [r3, #0]
        (void*) 0, shell_TimerCallbackRxfromShell);
  }

  shell_InitHw();
 8003dea:	f7ff ffb5 	bl	8003d58 <shell_InitHw>
  vTaskDelay(200);
 8003dee:	20c8      	movs	r0, #200	; 0xc8
 8003df0:	f004 fd96 	bl	8008920 <vTaskDelay>
  printf("SHELL task ok\r\n");
 8003df4:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <shell_Task+0xe0>)
 8003df6:	0018      	movs	r0, r3
 8003df8:	f006 fe82 	bl	800ab00 <puts>

  for (;;)
  {
    if(xSemaphoreTake(shellSemaphore, portMAX_DELAY) == pdTRUE)
 8003dfc:	4b16      	ldr	r3, [pc, #88]	; (8003e58 <shell_Task+0xd0>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2201      	movs	r2, #1
 8003e02:	4252      	negs	r2, r2
 8003e04:	0011      	movs	r1, r2
 8003e06:	0018      	movs	r0, r3
 8003e08:	f004 f987 	bl	800811a <xQueueSemaphoreTake>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d1f4      	bne.n	8003dfc <shell_Task+0x74>
    {
      if(true == sShell->sWakeupReason.bRxFromBle)
 8003e12:	4b0f      	ldr	r3, [pc, #60]	; (8003e50 <shell_Task+0xc8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	229e      	movs	r2, #158	; 0x9e
 8003e18:	5c9b      	ldrb	r3, [r3, r2]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d008      	beq.n	8003e30 <shell_Task+0xa8>
      {
        sShell->sWakeupReason.bRxFromBle = false;
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	; (8003e50 <shell_Task+0xc8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	229e      	movs	r2, #158	; 0x9e
 8003e24:	2100      	movs	r1, #0
 8003e26:	5499      	strb	r1, [r3, r2]
        shell_ExtractLineFromQueue();
 8003e28:	f000 f930 	bl	800408c <shell_ExtractLineFromQueue>
        shell_DecodeDataFromShell();
 8003e2c:	f000 fa00 	bl	8004230 <shell_DecodeDataFromShell>
      }
      if(true == sShell->sWakeupReason.bHealthRequest)
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <shell_Task+0xc8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	229f      	movs	r2, #159	; 0x9f
 8003e36:	5c9b      	ldrb	r3, [r3, r2]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0df      	beq.n	8003dfc <shell_Task+0x74>
      {
        sShell->sWakeupReason.bHealthRequest = false;
 8003e3c:	4b04      	ldr	r3, [pc, #16]	; (8003e50 <shell_Task+0xc8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	229f      	movs	r2, #159	; 0x9f
 8003e42:	2100      	movs	r1, #0
 8003e44:	5499      	strb	r1, [r3, r2]
        WDTCheck_HealthResponse(WDT_CHECK_TASK_SHELL_CODE);
 8003e46:	2001      	movs	r0, #1
 8003e48:	f7fe fa82 	bl	8002350 <WDTCheck_HealthResponse>
    if(xSemaphoreTake(shellSemaphore, portMAX_DELAY) == pdTRUE)
 8003e4c:	e7d6      	b.n	8003dfc <shell_Task+0x74>
 8003e4e:	46c0      	nop			; (mov r8, r8)
 8003e50:	200006e8 	.word	0x200006e8
 8003e54:	200006e0 	.word	0x200006e0
 8003e58:	200006dc 	.word	0x200006dc
 8003e5c:	200006e4 	.word	0x200006e4
 8003e60:	08010a90 	.word	0x08010a90
 8003e64:	0800403d 	.word	0x0800403d
 8003e68:	08010aa0 	.word	0x08010aa0

08003e6c <shell_ResetVariables>:
    }
  }
}

void shell_ResetVariables(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  sShell->sUart.bReceivingFrame = false;
 8003e70:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <shell_ResetVariables+0x30>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	229d      	movs	r2, #157	; 0x9d
 8003e76:	2100      	movs	r1, #0
 8003e78:	5499      	strb	r1, [r3, r2]
  shell_ResetUart(true);
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f000 f810 	bl	8003ea0 <shell_ResetUart>
  sShell->sWakeupReason.bRxFromBle = false;
 8003e80:	4b06      	ldr	r3, [pc, #24]	; (8003e9c <shell_ResetVariables+0x30>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	229e      	movs	r2, #158	; 0x9e
 8003e86:	2100      	movs	r1, #0
 8003e88:	5499      	strb	r1, [r3, r2]
  sShell->sWakeupReason.bHealthRequest = false;
 8003e8a:	4b04      	ldr	r3, [pc, #16]	; (8003e9c <shell_ResetVariables+0x30>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	229f      	movs	r2, #159	; 0x9f
 8003e90:	2100      	movs	r1, #0
 8003e92:	5499      	strb	r1, [r3, r2]
}
 8003e94:	46c0      	nop			; (mov r8, r8)
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	200006e8 	.word	0x200006e8

08003ea0 <shell_ResetUart>:

void shell_ResetUart(bool bResetQueue)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	0002      	movs	r2, r0
 8003ea8:	1dfb      	adds	r3, r7, #7
 8003eaa:	701a      	strb	r2, [r3, #0]
  uint16_t u16Size = SHELL_RX_BUFFER_SIZE;
 8003eac:	230c      	movs	r3, #12
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2296      	movs	r2, #150	; 0x96
 8003eb2:	801a      	strh	r2, [r3, #0]
  char *buffer = (char*) sShell->sUart.sRx.Buffer;
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <shell_ResetUart+0x98>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3302      	adds	r3, #2
 8003eba:	60bb      	str	r3, [r7, #8]
  sShell->sUart.bReceivingFrame = false;
 8003ebc:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <shell_ResetUart+0x98>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	229d      	movs	r2, #157	; 0x9d
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]
  sShell->sUart.sRx.u16Pos = 0;
 8003ec6:	4b1c      	ldr	r3, [pc, #112]	; (8003f38 <shell_ResetUart+0x98>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	801a      	strh	r2, [r3, #0]

  if(NULL != buffer)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01f      	beq.n	8003f14 <shell_ResetUart+0x74>
  {
    uint16_t i = 0;
 8003ed4:	230e      	movs	r3, #14
 8003ed6:	18fb      	adds	r3, r7, r3
 8003ed8:	2200      	movs	r2, #0
 8003eda:	801a      	strh	r2, [r3, #0]
    while ((0x00 != buffer[i]) || (u16Size > i))
 8003edc:	e00b      	b.n	8003ef6 <shell_ResetUart+0x56>
    {
      buffer[i] = 0x00;
 8003ede:	210e      	movs	r1, #14
 8003ee0:	187b      	adds	r3, r7, r1
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	18d3      	adds	r3, r2, r3
 8003ee8:	2200      	movs	r2, #0
 8003eea:	701a      	strb	r2, [r3, #0]
      i++;
 8003eec:	187b      	adds	r3, r7, r1
 8003eee:	881a      	ldrh	r2, [r3, #0]
 8003ef0:	187b      	adds	r3, r7, r1
 8003ef2:	3201      	adds	r2, #1
 8003ef4:	801a      	strh	r2, [r3, #0]
    while ((0x00 != buffer[i]) || (u16Size > i))
 8003ef6:	210e      	movs	r1, #14
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	18d3      	adds	r3, r2, r3
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1eb      	bne.n	8003ede <shell_ResetUart+0x3e>
 8003f06:	230c      	movs	r3, #12
 8003f08:	18fa      	adds	r2, r7, r3
 8003f0a:	187b      	adds	r3, r7, r1
 8003f0c:	8812      	ldrh	r2, [r2, #0]
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d8e4      	bhi.n	8003ede <shell_ResetUart+0x3e>
    }
  }
  if(true == bResetQueue && shellRxQueue != NULL )
 8003f14:	1dfb      	adds	r3, r7, #7
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d009      	beq.n	8003f30 <shell_ResetUart+0x90>
 8003f1c:	4b07      	ldr	r3, [pc, #28]	; (8003f3c <shell_ResetUart+0x9c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <shell_ResetUart+0x90>
  {
    xQueueReset(shellRxQueue);
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <shell_ResetUart+0x9c>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2100      	movs	r1, #0
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	f003 fdaf 	bl	8007a8e <xQueueGenericReset>
  }
}
 8003f30:	46c0      	nop			; (mov r8, r8)
 8003f32:	46bd      	mov	sp, r7
 8003f34:	b004      	add	sp, #16
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	200006e8 	.word	0x200006e8
 8003f3c:	200006e0 	.word	0x200006e0

08003f40 <shell_ReceivedChar>:

void shell_ReceivedChar(uint8_t RxChar)
{
 8003f40:	b590      	push	{r4, r7, lr}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	0002      	movs	r2, r0
 8003f48:	1dfb      	adds	r3, r7, #7
 8003f4a:	701a      	strb	r2, [r3, #0]
  if(NULL == shellHandleTask || NULL == shellSemaphore || NULL == shellRxTimer)
 8003f4c:	4b35      	ldr	r3, [pc, #212]	; (8004024 <shell_ReceivedChar+0xe4>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d062      	beq.n	800401a <shell_ReceivedChar+0xda>
 8003f54:	4b34      	ldr	r3, [pc, #208]	; (8004028 <shell_ReceivedChar+0xe8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d05e      	beq.n	800401a <shell_ReceivedChar+0xda>
 8003f5c:	4b33      	ldr	r3, [pc, #204]	; (800402c <shell_ReceivedChar+0xec>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d05a      	beq.n	800401a <shell_ReceivedChar+0xda>
  {
    return;
  }

  portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
  if(false == sShell->sUart.bReceivingFrame && (char) 0x00 != (char) RxChar)
 8003f68:	4b31      	ldr	r3, [pc, #196]	; (8004030 <shell_ReceivedChar+0xf0>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	229d      	movs	r2, #157	; 0x9d
 8003f6e:	5c9b      	ldrb	r3, [r3, r2]
 8003f70:	2201      	movs	r2, #1
 8003f72:	4053      	eors	r3, r2
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <shell_ReceivedChar+0x4c>
 8003f7a:	1dfb      	adds	r3, r7, #7
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d004      	beq.n	8003f8c <shell_ReceivedChar+0x4c>
  {
    sShell->sUart.bReceivingFrame = true;
 8003f82:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <shell_ReceivedChar+0xf0>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	229d      	movs	r2, #157	; 0x9d
 8003f88:	2101      	movs	r1, #1
 8003f8a:	5499      	strb	r1, [r3, r2]
  }

  if(true == sShell->sUart.bReceivingFrame)
 8003f8c:	4b28      	ldr	r3, [pc, #160]	; (8004030 <shell_ReceivedChar+0xf0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	229d      	movs	r2, #157	; 0x9d
 8003f92:	5c9b      	ldrb	r3, [r3, r2]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d041      	beq.n	800401c <shell_ReceivedChar+0xdc>
  {

    if(pdTRUE == xQueueIsQueueFullFromISR(shellRxQueue))
 8003f98:	4b26      	ldr	r3, [pc, #152]	; (8004034 <shell_ReceivedChar+0xf4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	f004 fade 	bl	800855e <xQueueIsQueueFullFromISR>
 8003fa2:	0003      	movs	r3, r0
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d122      	bne.n	8003fee <shell_ReceivedChar+0xae>
    {
      sShell->sWakeupReason.bRxFromBle = true;
 8003fa8:	4b21      	ldr	r3, [pc, #132]	; (8004030 <shell_ReceivedChar+0xf0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	229e      	movs	r2, #158	; 0x9e
 8003fae:	2101      	movs	r1, #1
 8003fb0:	5499      	strb	r1, [r3, r2]
      sShell->sUart.bReceivingFrame = false;
 8003fb2:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <shell_ReceivedChar+0xf0>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	229d      	movs	r2, #157	; 0x9d
 8003fb8:	2100      	movs	r1, #0
 8003fba:	5499      	strb	r1, [r3, r2]
      xSemaphoreGiveFromISR(shellSemaphore, &xHigherPriorityTaskWoken);
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <shell_ReceivedChar+0xe8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	240c      	movs	r4, #12
 8003fc2:	193a      	adds	r2, r7, r4
 8003fc4:	0011      	movs	r1, r2
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f003 ff8d 	bl	8007ee6 <xQueueGiveFromISR>
      xTimerStopFromISR(shellRxTimer, &xHigherPriorityTaskWoken);
 8003fcc:	4b17      	ldr	r3, [pc, #92]	; (800402c <shell_ReceivedChar+0xec>)
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	193b      	adds	r3, r7, r4
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	9200      	str	r2, [sp, #0]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	2108      	movs	r1, #8
 8003fda:	f005 fafd 	bl	80095d8 <xTimerGenericCommand>
      portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <shell_ReceivedChar+0xdc>
 8003fe4:	4b14      	ldr	r3, [pc, #80]	; (8004038 <shell_ReceivedChar+0xf8>)
 8003fe6:	2280      	movs	r2, #128	; 0x80
 8003fe8:	0552      	lsls	r2, r2, #21
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e016      	b.n	800401c <shell_ReceivedChar+0xdc>
    }
    else
    {
      xQueueSendFromISR(shellRxQueue, &RxChar, NULL);
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <shell_ReceivedChar+0xf4>)
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	1df9      	adds	r1, r7, #7
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f003 ff04 	bl	8007e04 <xQueueGenericSendFromISR>
      xTimerStartFromISR(shellRxTimer, &xHigherPriorityTaskWoken);
 8003ffc:	4b0b      	ldr	r3, [pc, #44]	; (800402c <shell_ReceivedChar+0xec>)
 8003ffe:	681c      	ldr	r4, [r3, #0]
 8004000:	f004 fdae 	bl	8008b60 <xTaskGetTickCountFromISR>
 8004004:	0001      	movs	r1, r0
 8004006:	230c      	movs	r3, #12
 8004008:	18fb      	adds	r3, r7, r3
 800400a:	2200      	movs	r2, #0
 800400c:	9200      	str	r2, [sp, #0]
 800400e:	000a      	movs	r2, r1
 8004010:	2106      	movs	r1, #6
 8004012:	0020      	movs	r0, r4
 8004014:	f005 fae0 	bl	80095d8 <xTimerGenericCommand>
 8004018:	e000      	b.n	800401c <shell_ReceivedChar+0xdc>
    return;
 800401a:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800401c:	46bd      	mov	sp, r7
 800401e:	b005      	add	sp, #20
 8004020:	bd90      	pop	{r4, r7, pc}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	200006d8 	.word	0x200006d8
 8004028:	200006dc 	.word	0x200006dc
 800402c:	200006e4 	.word	0x200006e4
 8004030:	200006e8 	.word	0x200006e8
 8004034:	200006e0 	.word	0x200006e0
 8004038:	e000ed04 	.word	0xe000ed04

0800403c <shell_TimerCallbackRxfromShell>:
  xSemaphoreGive(shellSemaphore);
}


void shell_TimerCallbackRxfromShell(TimerHandle_t xTimer)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b082      	sub	sp, #8
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  if(NULL == shellHandleTask || NULL == shellSemaphore)
 8004044:	4b0e      	ldr	r3, [pc, #56]	; (8004080 <shell_TimerCallbackRxfromShell+0x44>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <shell_TimerCallbackRxfromShell+0x3c>
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <shell_TimerCallbackRxfromShell+0x48>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d011      	beq.n	8004078 <shell_TimerCallbackRxfromShell+0x3c>
  {
    return;
  }
  sShell->sUart.bReceivingFrame = false;
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <shell_TimerCallbackRxfromShell+0x4c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	229d      	movs	r2, #157	; 0x9d
 800405a:	2100      	movs	r1, #0
 800405c:	5499      	strb	r1, [r3, r2]
  sShell->sWakeupReason.bRxFromBle = true;
 800405e:	4b0a      	ldr	r3, [pc, #40]	; (8004088 <shell_TimerCallbackRxfromShell+0x4c>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	229e      	movs	r2, #158	; 0x9e
 8004064:	2101      	movs	r1, #1
 8004066:	5499      	strb	r1, [r3, r2]
  xSemaphoreGive(shellSemaphore);
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <shell_TimerCallbackRxfromShell+0x48>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	2200      	movs	r2, #0
 8004070:	2100      	movs	r1, #0
 8004072:	f003 fe03 	bl	8007c7c <xQueueGenericSend>
 8004076:	e000      	b.n	800407a <shell_TimerCallbackRxfromShell+0x3e>
    return;
 8004078:	46c0      	nop			; (mov r8, r8)
}
 800407a:	46bd      	mov	sp, r7
 800407c:	b002      	add	sp, #8
 800407e:	bd80      	pop	{r7, pc}
 8004080:	200006d8 	.word	0x200006d8
 8004084:	200006dc 	.word	0x200006dc
 8004088:	200006e8 	.word	0x200006e8

0800408c <shell_ExtractLineFromQueue>:

void shell_ExtractLineFromQueue(void)
{
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
  uint8_t u8RxData = 0x00;
 8004092:	1d7b      	adds	r3, r7, #5
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
  bool bExitWhile = false;
 8004098:	1dfb      	adds	r3, r7, #7
 800409a:	2200      	movs	r2, #0
 800409c:	701a      	strb	r2, [r3, #0]

  shell_ResetUart(false);
 800409e:	2000      	movs	r0, #0
 80040a0:	f7ff fefe 	bl	8003ea0 <shell_ResetUart>
  if(0 < sShell->sUart.sRxTemp.u8Pos)
 80040a4:	4b60      	ldr	r3, [pc, #384]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2298      	movs	r2, #152	; 0x98
 80040aa:	5c9b      	ldrb	r3, [r3, r2]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d039      	beq.n	8004124 <shell_ExtractLineFromQueue+0x98>
  {
    for (uint8_t i = 0; i < 4; i++)
 80040b0:	1dbb      	adds	r3, r7, #6
 80040b2:	2200      	movs	r2, #0
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e02c      	b.n	8004112 <shell_ExtractLineFromQueue+0x86>
    {
      if(0 != sShell->sUart.sRxTemp.Buffer[i])
 80040b8:	4b5b      	ldr	r3, [pc, #364]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	1dbb      	adds	r3, r7, #6
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2199      	movs	r1, #153	; 0x99
 80040c2:	18d3      	adds	r3, r2, r3
 80040c4:	185b      	adds	r3, r3, r1
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d01d      	beq.n	8004108 <shell_ExtractLineFromQueue+0x7c>
      {
        sShell->sUart.sRx.Buffer[i] = sShell->sUart.sRxTemp.Buffer[i];   //Copy temp data into buffer
 80040cc:	4b56      	ldr	r3, [pc, #344]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	1dbb      	adds	r3, r7, #6
 80040d2:	7819      	ldrb	r1, [r3, #0]
 80040d4:	4b54      	ldr	r3, [pc, #336]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	1dbb      	adds	r3, r7, #6
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2499      	movs	r4, #153	; 0x99
 80040de:	1841      	adds	r1, r0, r1
 80040e0:	1909      	adds	r1, r1, r4
 80040e2:	7809      	ldrb	r1, [r1, #0]
 80040e4:	18d3      	adds	r3, r2, r3
 80040e6:	1c0a      	adds	r2, r1, #0
 80040e8:	709a      	strb	r2, [r3, #2]
        sShell->sUart.sRx.u16Pos++;
 80040ea:	4b4f      	ldr	r3, [pc, #316]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	881a      	ldrh	r2, [r3, #0]
 80040f0:	3201      	adds	r2, #1
 80040f2:	b292      	uxth	r2, r2
 80040f4:	801a      	strh	r2, [r3, #0]
        sShell->sUart.sRxTemp.Buffer[i] = 0x00;   //Reset temporal buffer
 80040f6:	4b4c      	ldr	r3, [pc, #304]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	1dbb      	adds	r3, r7, #6
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2199      	movs	r1, #153	; 0x99
 8004100:	18d3      	adds	r3, r2, r3
 8004102:	185b      	adds	r3, r3, r1
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 4; i++)
 8004108:	1dbb      	adds	r3, r7, #6
 800410a:	781a      	ldrb	r2, [r3, #0]
 800410c:	1dbb      	adds	r3, r7, #6
 800410e:	3201      	adds	r2, #1
 8004110:	701a      	strb	r2, [r3, #0]
 8004112:	1dbb      	adds	r3, r7, #6
 8004114:	781b      	ldrb	r3, [r3, #0]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d9ce      	bls.n	80040b8 <shell_ExtractLineFromQueue+0x2c>
      }
    }
    sShell->sUart.sRxTemp.u8Pos = 0;
 800411a:	4b43      	ldr	r3, [pc, #268]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2298      	movs	r2, #152	; 0x98
 8004120:	2100      	movs	r1, #0
 8004122:	5499      	strb	r1, [r3, r2]
  }
    do
    {
      if( pdTRUE == xQueueReceive(shellRxQueue, &u8RxData, 20))
 8004124:	4b41      	ldr	r3, [pc, #260]	; (800422c <shell_ExtractLineFromQueue+0x1a0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	1d79      	adds	r1, r7, #5
 800412a:	2214      	movs	r2, #20
 800412c:	0018      	movs	r0, r3
 800412e:	f003 ff3f 	bl	8007fb0 <xQueueReceive>
 8004132:	0003      	movs	r3, r0
 8004134:	2b01      	cmp	r3, #1
 8004136:	d11e      	bne.n	8004176 <shell_ExtractLineFromQueue+0xea>
      {
        if ( '\r'!=u8RxData && '\n'!=u8RxData )
 8004138:	1d7b      	adds	r3, r7, #5
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b0d      	cmp	r3, #13
 800413e:	d011      	beq.n	8004164 <shell_ExtractLineFromQueue+0xd8>
 8004140:	1d7b      	adds	r3, r7, #5
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b0a      	cmp	r3, #10
 8004146:	d00d      	beq.n	8004164 <shell_ExtractLineFromQueue+0xd8>
        {
          sShell->sUart.sRx.Buffer[sShell->sUart.sRx.u16Pos++] = u8RxData;
 8004148:	4b37      	ldr	r3, [pc, #220]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	4b36      	ldr	r3, [pc, #216]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	881a      	ldrh	r2, [r3, #0]
 8004152:	1c50      	adds	r0, r2, #1
 8004154:	b280      	uxth	r0, r0
 8004156:	8018      	strh	r0, [r3, #0]
 8004158:	0010      	movs	r0, r2
 800415a:	1d7b      	adds	r3, r7, #5
 800415c:	781a      	ldrb	r2, [r3, #0]
 800415e:	180b      	adds	r3, r1, r0
 8004160:	709a      	strb	r2, [r3, #2]
 8004162:	e00b      	b.n	800417c <shell_ExtractLineFromQueue+0xf0>
        }
        else if ( 0!=sShell->sUart.sRx.u16Pos )
 8004164:	4b30      	ldr	r3, [pc, #192]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <shell_ExtractLineFromQueue+0xf0>
        {
          bExitWhile = true;
 800416e:	1dfb      	adds	r3, r7, #7
 8004170:	2201      	movs	r2, #1
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e002      	b.n	800417c <shell_ExtractLineFromQueue+0xf0>
        }
      }
      else
      {
        bExitWhile = true;
 8004176:	1dfb      	adds	r3, r7, #7
 8004178:	2201      	movs	r2, #1
 800417a:	701a      	strb	r2, [r3, #0]
      }
      if (SHELL_RX_BUFFER_SIZE < sShell->sUart.sRx.u16Pos)
 800417c:	4b2a      	ldr	r3, [pc, #168]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	2b96      	cmp	r3, #150	; 0x96
 8004184:	d902      	bls.n	800418c <shell_ExtractLineFromQueue+0x100>
      {
        bExitWhile = true;
 8004186:	1dfb      	adds	r3, r7, #7
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
      }
    }
    while ( false == bExitWhile);
 800418c:	1dfb      	adds	r3, r7, #7
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	2201      	movs	r2, #1
 8004192:	4053      	eors	r3, r2
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1c4      	bne.n	8004124 <shell_ExtractLineFromQueue+0x98>
  if(2 >= uxQueueMessagesWaiting(shellRxQueue))
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <shell_ExtractLineFromQueue+0x1a0>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	0018      	movs	r0, r3
 80041a0:	f004 f895 	bl	80082ce <uxQueueMessagesWaiting>
 80041a4:	0003      	movs	r3, r0
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d83a      	bhi.n	8004220 <shell_ExtractLineFromQueue+0x194>
  {
    bExitWhile = false;
 80041aa:	1dfb      	adds	r3, r7, #7
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
    do
    {
      if( pdTRUE == xQueueReceive(shellRxQueue, &u8RxData, 20))
 80041b0:	4b1e      	ldr	r3, [pc, #120]	; (800422c <shell_ExtractLineFromQueue+0x1a0>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1d79      	adds	r1, r7, #5
 80041b6:	2214      	movs	r2, #20
 80041b8:	0018      	movs	r0, r3
 80041ba:	f003 fef9 	bl	8007fb0 <xQueueReceive>
 80041be:	0003      	movs	r3, r0
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d11a      	bne.n	80041fa <shell_ExtractLineFromQueue+0x16e>
      {
        if('\r' != u8RxData && '\n' != u8RxData)
 80041c4:	1d7b      	adds	r3, r7, #5
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b0d      	cmp	r3, #13
 80041ca:	d019      	beq.n	8004200 <shell_ExtractLineFromQueue+0x174>
 80041cc:	1d7b      	adds	r3, r7, #5
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b0a      	cmp	r3, #10
 80041d2:	d015      	beq.n	8004200 <shell_ExtractLineFromQueue+0x174>
        {
          sShell->sUart.sRxTemp.Buffer[sShell->sUart.sRxTemp.u8Pos++] = u8RxData;
 80041d4:	4b14      	ldr	r3, [pc, #80]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 80041d6:	6819      	ldr	r1, [r3, #0]
 80041d8:	4b13      	ldr	r3, [pc, #76]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2298      	movs	r2, #152	; 0x98
 80041de:	5c9a      	ldrb	r2, [r3, r2]
 80041e0:	1c50      	adds	r0, r2, #1
 80041e2:	b2c4      	uxtb	r4, r0
 80041e4:	2098      	movs	r0, #152	; 0x98
 80041e6:	541c      	strb	r4, [r3, r0]
 80041e8:	0014      	movs	r4, r2
 80041ea:	1d7b      	adds	r3, r7, #5
 80041ec:	7818      	ldrb	r0, [r3, #0]
 80041ee:	2299      	movs	r2, #153	; 0x99
 80041f0:	190b      	adds	r3, r1, r4
 80041f2:	189b      	adds	r3, r3, r2
 80041f4:	1c02      	adds	r2, r0, #0
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e002      	b.n	8004200 <shell_ExtractLineFromQueue+0x174>
        }
      }
      else
      {
        bExitWhile = true;
 80041fa:	1dfb      	adds	r3, r7, #7
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
      }
      if(3 < sShell->sUart.sRxTemp.u8Pos)
 8004200:	4b09      	ldr	r3, [pc, #36]	; (8004228 <shell_ExtractLineFromQueue+0x19c>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2298      	movs	r2, #152	; 0x98
 8004206:	5c9b      	ldrb	r3, [r3, r2]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d902      	bls.n	8004212 <shell_ExtractLineFromQueue+0x186>
      {
        bExitWhile = true;
 800420c:	1dfb      	adds	r3, r7, #7
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
      }
    }
    while ( false == bExitWhile);
 8004212:	1dfb      	adds	r3, r7, #7
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	2201      	movs	r2, #1
 8004218:	4053      	eors	r3, r2
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1c7      	bne.n	80041b0 <shell_ExtractLineFromQueue+0x124>
  }
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b003      	add	sp, #12
 8004226:	bd90      	pop	{r4, r7, pc}
 8004228:	200006e8 	.word	0x200006e8
 800422c:	200006e0 	.word	0x200006e0

08004230 <shell_DecodeDataFromShell>:


void shell_DecodeDataFromShell(void)
{
 8004230:	b5b0      	push	{r4, r5, r7, lr}
 8004232:	b08a      	sub	sp, #40	; 0x28
 8004234:	af04      	add	r7, sp, #16
  double value = 0;
 8004236:	2200      	movs	r2, #0
 8004238:	2300      	movs	r3, #0
 800423a:	613a      	str	r2, [r7, #16]
 800423c:	617b      	str	r3, [r7, #20]
  bool bsetCmd = false;
 800423e:	230f      	movs	r3, #15
 8004240:	18fb      	adds	r3, r7, r3
 8004242:	2200      	movs	r2, #0
 8004244:	701a      	strb	r2, [r3, #0]
  if (strncmp(sShell->sUart.sRx.Buffer, SHELL_CMD_LAT, SHELL_CMD_LAT_SIZE) == 0)
 8004246:	4b7c      	ldr	r3, [pc, #496]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3302      	adds	r3, #2
 800424c:	497b      	ldr	r1, [pc, #492]	; (800443c <shell_DecodeDataFromShell+0x20c>)
 800424e:	2204      	movs	r2, #4
 8004250:	0018      	movs	r0, r3
 8004252:	f006 fd27 	bl	800aca4 <strncmp>
 8004256:	1e03      	subs	r3, r0, #0
 8004258:	d134      	bne.n	80042c4 <shell_DecodeDataFromShell+0x94>
  {
    if ((sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] >=0x30 &&
 800425a:	4b77      	ldr	r3, [pc, #476]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	799b      	ldrb	r3, [r3, #6]
 8004260:	2b2f      	cmp	r3, #47	; 0x2f
 8004262:	d904      	bls.n	800426e <shell_DecodeDataFromShell+0x3e>
         sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] <=0x39) ||
 8004264:	4b74      	ldr	r3, [pc, #464]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	799b      	ldrb	r3, [r3, #6]
    if ((sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] >=0x30 &&
 800426a:	2b39      	cmp	r3, #57	; 0x39
 800426c:	d904      	bls.n	8004278 <shell_DecodeDataFromShell+0x48>
        (sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] == '-')   )
 800426e:	4b72      	ldr	r3, [pc, #456]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	799b      	ldrb	r3, [r3, #6]
         sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] <=0x39) ||
 8004274:	2b2d      	cmp	r3, #45	; 0x2d
 8004276:	d114      	bne.n	80042a2 <shell_DecodeDataFromShell+0x72>
    {
      value = strtod((const char *)&sShell->sUart.sRx.Buffer[SHELL_CMD_LAT_SIZE], NULL);
 8004278:	4b6f      	ldr	r3, [pc, #444]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3306      	adds	r3, #6
 800427e:	2100      	movs	r1, #0
 8004280:	0018      	movs	r0, r3
 8004282:	f007 fb5d 	bl	800b940 <strtod>
 8004286:	0002      	movs	r2, r0
 8004288:	000b      	movs	r3, r1
 800428a:	613a      	str	r2, [r7, #16]
 800428c:	617b      	str	r3, [r7, #20]
      bsetCmd = checkPos_SetLatitude(value);
 800428e:	230f      	movs	r3, #15
 8004290:	18fc      	adds	r4, r7, r3
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	0010      	movs	r0, r2
 8004298:	0019      	movs	r1, r3
 800429a:	f7fe fb77 	bl	800298c <checkPos_SetLatitude>
 800429e:	0003      	movs	r3, r0
 80042a0:	7023      	strb	r3, [r4, #0]
    }
    printf("%s> new Latitude: %f. %s\r\n",SHELL_PROMPT, value,
 80042a2:	230f      	movs	r3, #15
 80042a4:	18fb      	adds	r3, r7, r3
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <shell_DecodeDataFromShell+0x80>
 80042ac:	4964      	ldr	r1, [pc, #400]	; (8004440 <shell_DecodeDataFromShell+0x210>)
 80042ae:	e000      	b.n	80042b2 <shell_DecodeDataFromShell+0x82>
 80042b0:	4964      	ldr	r1, [pc, #400]	; (8004444 <shell_DecodeDataFromShell+0x214>)
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	4c64      	ldr	r4, [pc, #400]	; (8004448 <shell_DecodeDataFromShell+0x218>)
 80042b8:	4864      	ldr	r0, [pc, #400]	; (800444c <shell_DecodeDataFromShell+0x21c>)
 80042ba:	9100      	str	r1, [sp, #0]
 80042bc:	0021      	movs	r1, r4
 80042be:	f006 fb93 	bl	800a9e8 <iprintf>
  }
  else
  {
    printf("%s> ERROR\r\n",SHELL_PROMPT);
  }
}
 80042c2:	e0b4      	b.n	800442e <shell_DecodeDataFromShell+0x1fe>
  else if (strncmp(sShell->sUart.sRx.Buffer, SHELL_CMD_LON, SHELL_CMD_LON_SIZE) == 0)
 80042c4:	4b5c      	ldr	r3, [pc, #368]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3302      	adds	r3, #2
 80042ca:	4961      	ldr	r1, [pc, #388]	; (8004450 <shell_DecodeDataFromShell+0x220>)
 80042cc:	2204      	movs	r2, #4
 80042ce:	0018      	movs	r0, r3
 80042d0:	f006 fce8 	bl	800aca4 <strncmp>
 80042d4:	1e03      	subs	r3, r0, #0
 80042d6:	d134      	bne.n	8004342 <shell_DecodeDataFromShell+0x112>
    if ((sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] >=0x30 &&
 80042d8:	4b57      	ldr	r3, [pc, #348]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	799b      	ldrb	r3, [r3, #6]
 80042de:	2b2f      	cmp	r3, #47	; 0x2f
 80042e0:	d904      	bls.n	80042ec <shell_DecodeDataFromShell+0xbc>
         sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] <=0x39) ||
 80042e2:	4b55      	ldr	r3, [pc, #340]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	799b      	ldrb	r3, [r3, #6]
    if ((sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] >=0x30 &&
 80042e8:	2b39      	cmp	r3, #57	; 0x39
 80042ea:	d904      	bls.n	80042f6 <shell_DecodeDataFromShell+0xc6>
        (sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] == '-')   )
 80042ec:	4b52      	ldr	r3, [pc, #328]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	799b      	ldrb	r3, [r3, #6]
         sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] <=0x39) ||
 80042f2:	2b2d      	cmp	r3, #45	; 0x2d
 80042f4:	d114      	bne.n	8004320 <shell_DecodeDataFromShell+0xf0>
      value = strtod((const char *)&sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE], NULL);
 80042f6:	4b50      	ldr	r3, [pc, #320]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3306      	adds	r3, #6
 80042fc:	2100      	movs	r1, #0
 80042fe:	0018      	movs	r0, r3
 8004300:	f007 fb1e 	bl	800b940 <strtod>
 8004304:	0002      	movs	r2, r0
 8004306:	000b      	movs	r3, r1
 8004308:	613a      	str	r2, [r7, #16]
 800430a:	617b      	str	r3, [r7, #20]
      bsetCmd = checkPos_SetLongitude(value);
 800430c:	230f      	movs	r3, #15
 800430e:	18fc      	adds	r4, r7, r3
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	0010      	movs	r0, r2
 8004316:	0019      	movs	r1, r3
 8004318:	f7fe fb72 	bl	8002a00 <checkPos_SetLongitude>
 800431c:	0003      	movs	r3, r0
 800431e:	7023      	strb	r3, [r4, #0]
    printf("%s> new Longitude: %f. %s\r\n",SHELL_PROMPT, value,
 8004320:	230f      	movs	r3, #15
 8004322:	18fb      	adds	r3, r7, r3
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <shell_DecodeDataFromShell+0xfe>
 800432a:	4945      	ldr	r1, [pc, #276]	; (8004440 <shell_DecodeDataFromShell+0x210>)
 800432c:	e000      	b.n	8004330 <shell_DecodeDataFromShell+0x100>
 800432e:	4945      	ldr	r1, [pc, #276]	; (8004444 <shell_DecodeDataFromShell+0x214>)
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	4c44      	ldr	r4, [pc, #272]	; (8004448 <shell_DecodeDataFromShell+0x218>)
 8004336:	4847      	ldr	r0, [pc, #284]	; (8004454 <shell_DecodeDataFromShell+0x224>)
 8004338:	9100      	str	r1, [sp, #0]
 800433a:	0021      	movs	r1, r4
 800433c:	f006 fb54 	bl	800a9e8 <iprintf>
}
 8004340:	e075      	b.n	800442e <shell_DecodeDataFromShell+0x1fe>
  else if (strncmp(sShell->sUart.sRx.Buffer, SHELL_CMD_RAD, SHELL_CMD_RAD_SIZE) == 0)
 8004342:	4b3d      	ldr	r3, [pc, #244]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	3302      	adds	r3, #2
 8004348:	4943      	ldr	r1, [pc, #268]	; (8004458 <shell_DecodeDataFromShell+0x228>)
 800434a:	2204      	movs	r2, #4
 800434c:	0018      	movs	r0, r3
 800434e:	f006 fca9 	bl	800aca4 <strncmp>
 8004352:	1e03      	subs	r3, r0, #0
 8004354:	d12f      	bne.n	80043b6 <shell_DecodeDataFromShell+0x186>
    if ((sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] >=0x30 &&
 8004356:	4b38      	ldr	r3, [pc, #224]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	799b      	ldrb	r3, [r3, #6]
 800435c:	2b2f      	cmp	r3, #47	; 0x2f
 800435e:	d919      	bls.n	8004394 <shell_DecodeDataFromShell+0x164>
         sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] <=0x39) )
 8004360:	4b35      	ldr	r3, [pc, #212]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	799b      	ldrb	r3, [r3, #6]
    if ((sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE] >=0x30 &&
 8004366:	2b39      	cmp	r3, #57	; 0x39
 8004368:	d814      	bhi.n	8004394 <shell_DecodeDataFromShell+0x164>
      value = strtod((const char *)&sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE], NULL);
 800436a:	4b33      	ldr	r3, [pc, #204]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3306      	adds	r3, #6
 8004370:	2100      	movs	r1, #0
 8004372:	0018      	movs	r0, r3
 8004374:	f007 fae4 	bl	800b940 <strtod>
 8004378:	0002      	movs	r2, r0
 800437a:	000b      	movs	r3, r1
 800437c:	613a      	str	r2, [r7, #16]
 800437e:	617b      	str	r3, [r7, #20]
      bsetCmd = checkPos_SetEarthRadius(value);
 8004380:	230f      	movs	r3, #15
 8004382:	18fc      	adds	r4, r7, r3
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	0010      	movs	r0, r2
 800438a:	0019      	movs	r1, r3
 800438c:	f7fe fb72 	bl	8002a74 <checkPos_SetEarthRadius>
 8004390:	0003      	movs	r3, r0
 8004392:	7023      	strb	r3, [r4, #0]
    printf("%s> new radius: %f[kms]. set %s\r\n",SHELL_PROMPT, value,
 8004394:	230f      	movs	r3, #15
 8004396:	18fb      	adds	r3, r7, r3
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <shell_DecodeDataFromShell+0x172>
 800439e:	4928      	ldr	r1, [pc, #160]	; (8004440 <shell_DecodeDataFromShell+0x210>)
 80043a0:	e000      	b.n	80043a4 <shell_DecodeDataFromShell+0x174>
 80043a2:	4928      	ldr	r1, [pc, #160]	; (8004444 <shell_DecodeDataFromShell+0x214>)
 80043a4:	693a      	ldr	r2, [r7, #16]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	4c27      	ldr	r4, [pc, #156]	; (8004448 <shell_DecodeDataFromShell+0x218>)
 80043aa:	482c      	ldr	r0, [pc, #176]	; (800445c <shell_DecodeDataFromShell+0x22c>)
 80043ac:	9100      	str	r1, [sp, #0]
 80043ae:	0021      	movs	r1, r4
 80043b0:	f006 fb1a 	bl	800a9e8 <iprintf>
}
 80043b4:	e03b      	b.n	800442e <shell_DecodeDataFromShell+0x1fe>
  else if (strncmp(sShell->sUart.sRx.Buffer, SHELL_CMD_GET_DATA, SHELL_CMD_GET_DATA_SIZE) == 0)
 80043b6:	4b20      	ldr	r3, [pc, #128]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3302      	adds	r3, #2
 80043bc:	4928      	ldr	r1, [pc, #160]	; (8004460 <shell_DecodeDataFromShell+0x230>)
 80043be:	2204      	movs	r2, #4
 80043c0:	0018      	movs	r0, r3
 80043c2:	f006 fc6f 	bl	800aca4 <strncmp>
 80043c6:	1e03      	subs	r3, r0, #0
 80043c8:	d12b      	bne.n	8004422 <shell_DecodeDataFromShell+0x1f2>
    value = strtod((const char *)&sShell->sUart.sRx.Buffer[SHELL_CMD_LON_SIZE], NULL);
 80043ca:	4b1b      	ldr	r3, [pc, #108]	; (8004438 <shell_DecodeDataFromShell+0x208>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3306      	adds	r3, #6
 80043d0:	2100      	movs	r1, #0
 80043d2:	0018      	movs	r0, r3
 80043d4:	f007 fab4 	bl	800b940 <strtod>
 80043d8:	0002      	movs	r2, r0
 80043da:	000b      	movs	r3, r1
 80043dc:	613a      	str	r2, [r7, #16]
 80043de:	617b      	str	r3, [r7, #20]
    bsetCmd = checkPos_SetEarthRadius(value);
 80043e0:	230f      	movs	r3, #15
 80043e2:	18fc      	adds	r4, r7, r3
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	0010      	movs	r0, r2
 80043ea:	0019      	movs	r1, r3
 80043ec:	f7fe fb42 	bl	8002a74 <checkPos_SetEarthRadius>
 80043f0:	0003      	movs	r3, r0
 80043f2:	7023      	strb	r3, [r4, #0]
    printf("%s> Point:[%f %f] Radius:%f Kms\r\n",SHELL_PROMPT, checkPos_GetLatitude(),
 80043f4:	f7fe faf8 	bl	80029e8 <checkPos_GetLatitude>
 80043f8:	6038      	str	r0, [r7, #0]
 80043fa:	6079      	str	r1, [r7, #4]
 80043fc:	f7fe fb2e 	bl	8002a5c <checkPos_GetLongitude>
 8004400:	0004      	movs	r4, r0
 8004402:	000d      	movs	r5, r1
 8004404:	f7fe fb62 	bl	8002acc <checkPos_GetEarthRadius>
 8004408:	0002      	movs	r2, r0
 800440a:	000b      	movs	r3, r1
 800440c:	490e      	ldr	r1, [pc, #56]	; (8004448 <shell_DecodeDataFromShell+0x218>)
 800440e:	4815      	ldr	r0, [pc, #84]	; (8004464 <shell_DecodeDataFromShell+0x234>)
 8004410:	9202      	str	r2, [sp, #8]
 8004412:	9303      	str	r3, [sp, #12]
 8004414:	9400      	str	r4, [sp, #0]
 8004416:	9501      	str	r5, [sp, #4]
 8004418:	683a      	ldr	r2, [r7, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f006 fae4 	bl	800a9e8 <iprintf>
}
 8004420:	e005      	b.n	800442e <shell_DecodeDataFromShell+0x1fe>
    printf("%s> ERROR\r\n",SHELL_PROMPT);
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <shell_DecodeDataFromShell+0x218>)
 8004424:	4b10      	ldr	r3, [pc, #64]	; (8004468 <shell_DecodeDataFromShell+0x238>)
 8004426:	0011      	movs	r1, r2
 8004428:	0018      	movs	r0, r3
 800442a:	f006 fadd 	bl	800a9e8 <iprintf>
}
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	46bd      	mov	sp, r7
 8004432:	b006      	add	sp, #24
 8004434:	bdb0      	pop	{r4, r5, r7, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	200006e8 	.word	0x200006e8
 800443c:	08010ab0 	.word	0x08010ab0
 8004440:	08010ab8 	.word	0x08010ab8
 8004444:	08010ac0 	.word	0x08010ac0
 8004448:	08010ac8 	.word	0x08010ac8
 800444c:	08010ad0 	.word	0x08010ad0
 8004450:	08010aec 	.word	0x08010aec
 8004454:	08010af4 	.word	0x08010af4
 8004458:	08010b10 	.word	0x08010b10
 800445c:	08010b18 	.word	0x08010b18
 8004460:	08010b3c 	.word	0x08010b3c
 8004464:	08010b44 	.word	0x08010b44
 8004468:	08010b68 	.word	0x08010b68

0800446c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <HAL_MspInit+0x50>)
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	4b11      	ldr	r3, [pc, #68]	; (80044bc <HAL_MspInit+0x50>)
 8004478:	2101      	movs	r1, #1
 800447a:	430a      	orrs	r2, r1
 800447c:	619a      	str	r2, [r3, #24]
 800447e:	4b0f      	ldr	r3, [pc, #60]	; (80044bc <HAL_MspInit+0x50>)
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2201      	movs	r2, #1
 8004484:	4013      	ands	r3, r2
 8004486:	607b      	str	r3, [r7, #4]
 8004488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800448a:	4b0c      	ldr	r3, [pc, #48]	; (80044bc <HAL_MspInit+0x50>)
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_MspInit+0x50>)
 8004490:	2180      	movs	r1, #128	; 0x80
 8004492:	0549      	lsls	r1, r1, #21
 8004494:	430a      	orrs	r2, r1
 8004496:	61da      	str	r2, [r3, #28]
 8004498:	4b08      	ldr	r3, [pc, #32]	; (80044bc <HAL_MspInit+0x50>)
 800449a:	69da      	ldr	r2, [r3, #28]
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	055b      	lsls	r3, r3, #21
 80044a0:	4013      	ands	r3, r2
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80044a6:	2302      	movs	r3, #2
 80044a8:	425b      	negs	r3, r3
 80044aa:	2200      	movs	r2, #0
 80044ac:	2103      	movs	r1, #3
 80044ae:	0018      	movs	r0, r3
 80044b0:	f000 fae8 	bl	8004a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044b4:	46c0      	nop			; (mov r8, r8)
 80044b6:	46bd      	mov	sp, r7
 80044b8:	b002      	add	sp, #8
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	40021000 	.word	0x40021000

080044c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 80044cc:	2300      	movs	r3, #0
 80044ce:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	0019      	movs	r1, r3
 80044d6:	200d      	movs	r0, #13
 80044d8:	f000 fad4 	bl	8004a84 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80044dc:	200d      	movs	r0, #13
 80044de:	f000 fae6 	bl	8004aae <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80044e2:	4b21      	ldr	r3, [pc, #132]	; (8004568 <HAL_InitTick+0xa8>)
 80044e4:	699a      	ldr	r2, [r3, #24]
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <HAL_InitTick+0xa8>)
 80044e8:	2180      	movs	r1, #128	; 0x80
 80044ea:	0109      	lsls	r1, r1, #4
 80044ec:	430a      	orrs	r2, r1
 80044ee:	619a      	str	r2, [r3, #24]
 80044f0:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <HAL_InitTick+0xa8>)
 80044f2:	699a      	ldr	r2, [r3, #24]
 80044f4:	2380      	movs	r3, #128	; 0x80
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	4013      	ands	r3, r2
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80044fe:	230c      	movs	r3, #12
 8004500:	18fa      	adds	r2, r7, r3
 8004502:	2310      	movs	r3, #16
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	0011      	movs	r1, r2
 8004508:	0018      	movs	r0, r3
 800450a:	f001 fa43 	bl	8005994 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800450e:	f001 fa2b 	bl	8005968 <HAL_RCC_GetPCLK1Freq>
 8004512:	0003      	movs	r3, r0
 8004514:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004518:	4914      	ldr	r1, [pc, #80]	; (800456c <HAL_InitTick+0xac>)
 800451a:	0018      	movs	r0, r3
 800451c:	f7fb fe10 	bl	8000140 <__udivsi3>
 8004520:	0003      	movs	r3, r0
 8004522:	3b01      	subs	r3, #1
 8004524:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004526:	4b12      	ldr	r3, [pc, #72]	; (8004570 <HAL_InitTick+0xb0>)
 8004528:	4a12      	ldr	r2, [pc, #72]	; (8004574 <HAL_InitTick+0xb4>)
 800452a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800452c:	4b10      	ldr	r3, [pc, #64]	; (8004570 <HAL_InitTick+0xb0>)
 800452e:	4a12      	ldr	r2, [pc, #72]	; (8004578 <HAL_InitTick+0xb8>)
 8004530:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_InitTick+0xb0>)
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8004538:	4b0d      	ldr	r3, [pc, #52]	; (8004570 <HAL_InitTick+0xb0>)
 800453a:	2200      	movs	r2, #0
 800453c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_InitTick+0xb0>)
 8004540:	2200      	movs	r2, #0
 8004542:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8004544:	4b0a      	ldr	r3, [pc, #40]	; (8004570 <HAL_InitTick+0xb0>)
 8004546:	0018      	movs	r0, r3
 8004548:	f001 fb4e 	bl	8005be8 <HAL_TIM_Base_Init>
 800454c:	1e03      	subs	r3, r0, #0
 800454e:	d105      	bne.n	800455c <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8004550:	4b07      	ldr	r3, [pc, #28]	; (8004570 <HAL_InitTick+0xb0>)
 8004552:	0018      	movs	r0, r3
 8004554:	f001 fba0 	bl	8005c98 <HAL_TIM_Base_Start_IT>
 8004558:	0003      	movs	r3, r0
 800455a:	e000      	b.n	800455e <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
}
 800455e:	0018      	movs	r0, r3
 8004560:	46bd      	mov	sp, r7
 8004562:	b00a      	add	sp, #40	; 0x28
 8004564:	bd80      	pop	{r7, pc}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	40021000 	.word	0x40021000
 800456c:	000f4240 	.word	0x000f4240
 8004570:	2000255c 	.word	0x2000255c
 8004574:	40012c00 	.word	0x40012c00
 8004578:	000003e7 	.word	0x000003e7

0800457c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004580:	e7fe      	b.n	8004580 <NMI_Handler+0x4>

08004582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004586:	e7fe      	b.n	8004586 <HardFault_Handler+0x4>

08004588 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800458c:	2002      	movs	r0, #2
 800458e:	f000 fccb 	bl	8004f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */
  gps_PPSReceived();
 8004592:	f7ff f809 	bl	80035a8 <gps_PPSReceived>
  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004596:	46c0      	nop			; (mov r8, r8)
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	019b      	lsls	r3, r3, #6
 80045a4:	0018      	movs	r0, r3
 80045a6:	f000 fcbf 	bl	8004f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80045b4:	4b03      	ldr	r3, [pc, #12]	; (80045c4 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80045b6:	0018      	movs	r0, r3
 80045b8:	f001 fbc0 	bl	8005d3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	2000255c 	.word	0x2000255c

080045c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  uint8_t rxUartData = 0;
 80045ce:	1dfb      	adds	r3, r7, #7
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <USART1_IRQHandler+0x38>)
 80045d6:	0018      	movs	r0, r3
 80045d8:	f001 ffc6 	bl	8006568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  //if(__HAL_UART_GET_FLAG(&huart1,UART_FLAG_RXNE) == SET)
  if(HAL_UART_Receive_IT(&huart1,&rxUartData,1)!=HAL_ERROR)
 80045dc:	1df9      	adds	r1, r7, #7
 80045de:	4b08      	ldr	r3, [pc, #32]	; (8004600 <USART1_IRQHandler+0x38>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	0018      	movs	r0, r3
 80045e4:	f001 ff5e 	bl	80064a4 <HAL_UART_Receive_IT>
 80045e8:	0003      	movs	r3, r0
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d004      	beq.n	80045f8 <USART1_IRQHandler+0x30>
  {
    gps_ReceiveData(rxUartData);
 80045ee:	1dfb      	adds	r3, r7, #7
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	0018      	movs	r0, r3
 80045f4:	f7fe fc28 	bl	8002e48 <gps_ReceiveData>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 80045f8:	46c0      	nop			; (mov r8, r8)
 80045fa:	46bd      	mov	sp, r7
 80045fc:	b002      	add	sp, #8
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20002628 	.word	0x20002628

08004604 <USART3_8_IRQHandler>:

/**
  * @brief This function handles USART3 to USART8 global interrupts / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_8_IRQHandler(void)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_8_IRQn 0 */
  uint8_t uartRxdata = 0;
 800460a:	1cfb      	adds	r3, r7, #3
 800460c:	2200      	movs	r2, #0
 800460e:	701a      	strb	r2, [r3, #0]
  uint32_t ui32UartIntSrc = SYSCFG->IT_LINE_SR[29];
 8004610:	4a0e      	ldr	r2, [pc, #56]	; (800464c <USART3_8_IRQHandler+0x48>)
 8004612:	23f4      	movs	r3, #244	; 0xf4
 8004614:	58d3      	ldr	r3, [r2, r3]
 8004616:	607b      	str	r3, [r7, #4]
  //uint32_t ui32UartIntSrc1 = SCB->ICSR;
  //ui32UartIntSrc1 &= 0x001F;

  /* USER CODE END USART3_8_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004618:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <USART3_8_IRQHandler+0x4c>)
 800461a:	0018      	movs	r0, r3
 800461c:	f001 ffa4 	bl	8006568 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_8_IRQn 1 */

    if(ui32UartIntSrc & INT_UART3_SRC) // External uart 1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	4013      	ands	r3, r2
 8004626:	d00d      	beq.n	8004644 <USART3_8_IRQHandler+0x40>
    {
      if(HAL_UART_Receive_IT(&huart3,&uartRxdata,1)!=HAL_ERROR)
 8004628:	1cf9      	adds	r1, r7, #3
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <USART3_8_IRQHandler+0x4c>)
 800462c:	2201      	movs	r2, #1
 800462e:	0018      	movs	r0, r3
 8004630:	f001 ff38 	bl	80064a4 <HAL_UART_Receive_IT>
 8004634:	0003      	movs	r3, r0
 8004636:	2b01      	cmp	r3, #1
 8004638:	d004      	beq.n	8004644 <USART3_8_IRQHandler+0x40>
      {
        shell_ReceivedChar(uartRxdata);
 800463a:	1cfb      	adds	r3, r7, #3
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	0018      	movs	r0, r3
 8004640:	f7ff fc7e 	bl	8003f40 <shell_ReceivedChar>
      }
    }
  /* USER CODE END USART3_8_IRQn 1 */
}
 8004644:	46c0      	nop			; (mov r8, r8)
 8004646:	46bd      	mov	sp, r7
 8004648:	b002      	add	sp, #8
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40010000 	.word	0x40010000
 8004650:	200025a4 	.word	0x200025a4

08004654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <_sbrk+0x5c>)
 800465e:	4b15      	ldr	r3, [pc, #84]	; (80046b4 <_sbrk+0x60>)
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004668:	4b13      	ldr	r3, [pc, #76]	; (80046b8 <_sbrk+0x64>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d102      	bne.n	8004676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004670:	4b11      	ldr	r3, [pc, #68]	; (80046b8 <_sbrk+0x64>)
 8004672:	4a12      	ldr	r2, [pc, #72]	; (80046bc <_sbrk+0x68>)
 8004674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004676:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <_sbrk+0x64>)
 8004678:	681a      	ldr	r2, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	18d3      	adds	r3, r2, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d207      	bcs.n	8004694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004684:	f005 fcfa 	bl	800a07c <__errno>
 8004688:	0003      	movs	r3, r0
 800468a:	220c      	movs	r2, #12
 800468c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800468e:	2301      	movs	r3, #1
 8004690:	425b      	negs	r3, r3
 8004692:	e009      	b.n	80046a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <_sbrk+0x64>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800469a:	4b07      	ldr	r3, [pc, #28]	; (80046b8 <_sbrk+0x64>)
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	18d2      	adds	r2, r2, r3
 80046a2:	4b05      	ldr	r3, [pc, #20]	; (80046b8 <_sbrk+0x64>)
 80046a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80046a6:	68fb      	ldr	r3, [r7, #12]
}
 80046a8:	0018      	movs	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b006      	add	sp, #24
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20008000 	.word	0x20008000
 80046b4:	00000400 	.word	0x00000400
 80046b8:	200006ec 	.word	0x200006ec
 80046bc:	20002700 	.word	0x20002700

080046c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
	...

080046cc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80046d0:	4b14      	ldr	r3, [pc, #80]	; (8004724 <MX_USART1_UART_Init+0x58>)
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <MX_USART1_UART_Init+0x5c>)
 80046d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80046d6:	4b13      	ldr	r3, [pc, #76]	; (8004724 <MX_USART1_UART_Init+0x58>)
 80046d8:	2296      	movs	r2, #150	; 0x96
 80046da:	0192      	lsls	r2, r2, #6
 80046dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <MX_USART1_UART_Init+0x58>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80046e4:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <MX_USART1_UART_Init+0x58>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80046ea:	4b0e      	ldr	r3, [pc, #56]	; (8004724 <MX_USART1_UART_Init+0x58>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80046f0:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <MX_USART1_UART_Init+0x58>)
 80046f2:	220c      	movs	r2, #12
 80046f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046f6:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <MX_USART1_UART_Init+0x58>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046fc:	4b09      	ldr	r3, [pc, #36]	; (8004724 <MX_USART1_UART_Init+0x58>)
 80046fe:	2200      	movs	r2, #0
 8004700:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004702:	4b08      	ldr	r3, [pc, #32]	; (8004724 <MX_USART1_UART_Init+0x58>)
 8004704:	2200      	movs	r2, #0
 8004706:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <MX_USART1_UART_Init+0x58>)
 800470a:	2200      	movs	r2, #0
 800470c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800470e:	4b05      	ldr	r3, [pc, #20]	; (8004724 <MX_USART1_UART_Init+0x58>)
 8004710:	0018      	movs	r0, r3
 8004712:	f001 fcd9 	bl	80060c8 <HAL_UART_Init>
 8004716:	1e03      	subs	r3, r0, #0
 8004718:	d001      	beq.n	800471e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800471a:	f7ff fa31 	bl	8003b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20002628 	.word	0x20002628
 8004728:	40013800 	.word	0x40013800

0800472c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004730:	4b14      	ldr	r3, [pc, #80]	; (8004784 <MX_USART3_UART_Init+0x58>)
 8004732:	4a15      	ldr	r2, [pc, #84]	; (8004788 <MX_USART3_UART_Init+0x5c>)
 8004734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 230400;
 8004736:	4b13      	ldr	r3, [pc, #76]	; (8004784 <MX_USART3_UART_Init+0x58>)
 8004738:	22e1      	movs	r2, #225	; 0xe1
 800473a:	0292      	lsls	r2, r2, #10
 800473c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800473e:	4b11      	ldr	r3, [pc, #68]	; (8004784 <MX_USART3_UART_Init+0x58>)
 8004740:	2200      	movs	r2, #0
 8004742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004744:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <MX_USART3_UART_Init+0x58>)
 8004746:	2200      	movs	r2, #0
 8004748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800474a:	4b0e      	ldr	r3, [pc, #56]	; (8004784 <MX_USART3_UART_Init+0x58>)
 800474c:	2200      	movs	r2, #0
 800474e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004750:	4b0c      	ldr	r3, [pc, #48]	; (8004784 <MX_USART3_UART_Init+0x58>)
 8004752:	220c      	movs	r2, #12
 8004754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <MX_USART3_UART_Init+0x58>)
 8004758:	2200      	movs	r2, #0
 800475a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800475c:	4b09      	ldr	r3, [pc, #36]	; (8004784 <MX_USART3_UART_Init+0x58>)
 800475e:	2200      	movs	r2, #0
 8004760:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004762:	4b08      	ldr	r3, [pc, #32]	; (8004784 <MX_USART3_UART_Init+0x58>)
 8004764:	2200      	movs	r2, #0
 8004766:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004768:	4b06      	ldr	r3, [pc, #24]	; (8004784 <MX_USART3_UART_Init+0x58>)
 800476a:	2200      	movs	r2, #0
 800476c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <MX_USART3_UART_Init+0x58>)
 8004770:	0018      	movs	r0, r3
 8004772:	f001 fca9 	bl	80060c8 <HAL_UART_Init>
 8004776:	1e03      	subs	r3, r0, #0
 8004778:	d001      	beq.n	800477e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800477a:	f7ff fa01 	bl	8003b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	200025a4 	.word	0x200025a4
 8004788:	40004800 	.word	0x40004800

0800478c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800478c:	b590      	push	{r4, r7, lr}
 800478e:	b08d      	sub	sp, #52	; 0x34
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004794:	241c      	movs	r4, #28
 8004796:	193b      	adds	r3, r7, r4
 8004798:	0018      	movs	r0, r3
 800479a:	2314      	movs	r3, #20
 800479c:	001a      	movs	r2, r3
 800479e:	2100      	movs	r1, #0
 80047a0:	f005 fc9f 	bl	800a0e2 <memset>
  if(uartHandle->Instance==USART1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a41      	ldr	r2, [pc, #260]	; (80048b0 <HAL_UART_MspInit+0x124>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d13c      	bne.n	8004828 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047ae:	4b41      	ldr	r3, [pc, #260]	; (80048b4 <HAL_UART_MspInit+0x128>)
 80047b0:	699a      	ldr	r2, [r3, #24]
 80047b2:	4b40      	ldr	r3, [pc, #256]	; (80048b4 <HAL_UART_MspInit+0x128>)
 80047b4:	2180      	movs	r1, #128	; 0x80
 80047b6:	01c9      	lsls	r1, r1, #7
 80047b8:	430a      	orrs	r2, r1
 80047ba:	619a      	str	r2, [r3, #24]
 80047bc:	4b3d      	ldr	r3, [pc, #244]	; (80048b4 <HAL_UART_MspInit+0x128>)
 80047be:	699a      	ldr	r2, [r3, #24]
 80047c0:	2380      	movs	r3, #128	; 0x80
 80047c2:	01db      	lsls	r3, r3, #7
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
 80047c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ca:	4b3a      	ldr	r3, [pc, #232]	; (80048b4 <HAL_UART_MspInit+0x128>)
 80047cc:	695a      	ldr	r2, [r3, #20]
 80047ce:	4b39      	ldr	r3, [pc, #228]	; (80048b4 <HAL_UART_MspInit+0x128>)
 80047d0:	2180      	movs	r1, #128	; 0x80
 80047d2:	0289      	lsls	r1, r1, #10
 80047d4:	430a      	orrs	r2, r1
 80047d6:	615a      	str	r2, [r3, #20]
 80047d8:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <HAL_UART_MspInit+0x128>)
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	2380      	movs	r3, #128	; 0x80
 80047de:	029b      	lsls	r3, r3, #10
 80047e0:	4013      	ands	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 80047e6:	193b      	adds	r3, r7, r4
 80047e8:	22c0      	movs	r2, #192	; 0xc0
 80047ea:	00d2      	lsls	r2, r2, #3
 80047ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ee:	0021      	movs	r1, r4
 80047f0:	187b      	adds	r3, r7, r1
 80047f2:	2202      	movs	r2, #2
 80047f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f6:	187b      	adds	r3, r7, r1
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047fc:	187b      	adds	r3, r7, r1
 80047fe:	2203      	movs	r2, #3
 8004800:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004802:	187b      	adds	r3, r7, r1
 8004804:	2201      	movs	r2, #1
 8004806:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004808:	187a      	adds	r2, r7, r1
 800480a:	2390      	movs	r3, #144	; 0x90
 800480c:	05db      	lsls	r3, r3, #23
 800480e:	0011      	movs	r1, r2
 8004810:	0018      	movs	r0, r3
 8004812:	f000 f9d9 	bl	8004bc8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8004816:	2200      	movs	r2, #0
 8004818:	2103      	movs	r1, #3
 800481a:	201b      	movs	r0, #27
 800481c:	f000 f932 	bl	8004a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004820:	201b      	movs	r0, #27
 8004822:	f000 f944 	bl	8004aae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004826:	e03f      	b.n	80048a8 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART3)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a22      	ldr	r2, [pc, #136]	; (80048b8 <HAL_UART_MspInit+0x12c>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d13a      	bne.n	80048a8 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004832:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_UART_MspInit+0x128>)
 8004834:	69da      	ldr	r2, [r3, #28]
 8004836:	4b1f      	ldr	r3, [pc, #124]	; (80048b4 <HAL_UART_MspInit+0x128>)
 8004838:	2180      	movs	r1, #128	; 0x80
 800483a:	02c9      	lsls	r1, r1, #11
 800483c:	430a      	orrs	r2, r1
 800483e:	61da      	str	r2, [r3, #28]
 8004840:	4b1c      	ldr	r3, [pc, #112]	; (80048b4 <HAL_UART_MspInit+0x128>)
 8004842:	69da      	ldr	r2, [r3, #28]
 8004844:	2380      	movs	r3, #128	; 0x80
 8004846:	02db      	lsls	r3, r3, #11
 8004848:	4013      	ands	r3, r2
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800484e:	4b19      	ldr	r3, [pc, #100]	; (80048b4 <HAL_UART_MspInit+0x128>)
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	4b18      	ldr	r3, [pc, #96]	; (80048b4 <HAL_UART_MspInit+0x128>)
 8004854:	2180      	movs	r1, #128	; 0x80
 8004856:	0309      	lsls	r1, r1, #12
 8004858:	430a      	orrs	r2, r1
 800485a:	615a      	str	r2, [r3, #20]
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_UART_MspInit+0x128>)
 800485e:	695a      	ldr	r2, [r3, #20]
 8004860:	2380      	movs	r3, #128	; 0x80
 8004862:	031b      	lsls	r3, r3, #12
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHELL_TX_Pin|SHELL_RX_Pin;
 800486a:	211c      	movs	r1, #28
 800486c:	187b      	adds	r3, r7, r1
 800486e:	22c0      	movs	r2, #192	; 0xc0
 8004870:	0112      	lsls	r2, r2, #4
 8004872:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004874:	187b      	adds	r3, r7, r1
 8004876:	2202      	movs	r2, #2
 8004878:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487a:	187b      	adds	r3, r7, r1
 800487c:	2200      	movs	r2, #0
 800487e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004880:	187b      	adds	r3, r7, r1
 8004882:	2203      	movs	r2, #3
 8004884:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART3;
 8004886:	187b      	adds	r3, r7, r1
 8004888:	2201      	movs	r2, #1
 800488a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800488c:	187b      	adds	r3, r7, r1
 800488e:	4a0b      	ldr	r2, [pc, #44]	; (80048bc <HAL_UART_MspInit+0x130>)
 8004890:	0019      	movs	r1, r3
 8004892:	0010      	movs	r0, r2
 8004894:	f000 f998 	bl	8004bc8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_8_IRQn, 3, 0);
 8004898:	2200      	movs	r2, #0
 800489a:	2103      	movs	r1, #3
 800489c:	201d      	movs	r0, #29
 800489e:	f000 f8f1 	bl	8004a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_8_IRQn);
 80048a2:	201d      	movs	r0, #29
 80048a4:	f000 f903 	bl	8004aae <HAL_NVIC_EnableIRQ>
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b00d      	add	sp, #52	; 0x34
 80048ae:	bd90      	pop	{r4, r7, pc}
 80048b0:	40013800 	.word	0x40013800
 80048b4:	40021000 	.word	0x40021000
 80048b8:	40004800 	.word	0x40004800
 80048bc:	48000800 	.word	0x48000800

080048c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80048c0:	480d      	ldr	r0, [pc, #52]	; (80048f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80048c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80048c4:	480d      	ldr	r0, [pc, #52]	; (80048fc <LoopForever+0x6>)
  ldr r1, =_edata
 80048c6:	490e      	ldr	r1, [pc, #56]	; (8004900 <LoopForever+0xa>)
  ldr r2, =_sidata
 80048c8:	4a0e      	ldr	r2, [pc, #56]	; (8004904 <LoopForever+0xe>)
  movs r3, #0
 80048ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048cc:	e002      	b.n	80048d4 <LoopCopyDataInit>

080048ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048d2:	3304      	adds	r3, #4

080048d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048d8:	d3f9      	bcc.n	80048ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048da:	4a0b      	ldr	r2, [pc, #44]	; (8004908 <LoopForever+0x12>)
  ldr r4, =_ebss
 80048dc:	4c0b      	ldr	r4, [pc, #44]	; (800490c <LoopForever+0x16>)
  movs r3, #0
 80048de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048e0:	e001      	b.n	80048e6 <LoopFillZerobss>

080048e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048e4:	3204      	adds	r2, #4

080048e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048e8:	d3fb      	bcc.n	80048e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80048ea:	f7ff fee9 	bl	80046c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80048ee:	f005 fbcb 	bl	800a088 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048f2:	f7ff f897 	bl	8003a24 <main>

080048f6 <LoopForever>:

LoopForever:
    b LoopForever
 80048f6:	e7fe      	b.n	80048f6 <LoopForever>
  ldr   r0, =_estack
 80048f8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80048fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004900:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004904:	08011340 	.word	0x08011340
  ldr r2, =_sbss
 8004908:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800490c:	20002700 	.word	0x20002700

08004910 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004910:	e7fe      	b.n	8004910 <ADC1_COMP_IRQHandler>
	...

08004914 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <HAL_Init+0x24>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	4b06      	ldr	r3, [pc, #24]	; (8004938 <HAL_Init+0x24>)
 800491e:	2110      	movs	r1, #16
 8004920:	430a      	orrs	r2, r1
 8004922:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004924:	2000      	movs	r0, #0
 8004926:	f7ff fdcb 	bl	80044c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800492a:	f7ff fd9f 	bl	800446c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	0018      	movs	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	40022000 	.word	0x40022000

0800493c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004940:	4b05      	ldr	r3, [pc, #20]	; (8004958 <HAL_IncTick+0x1c>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	001a      	movs	r2, r3
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_IncTick+0x20>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	18d2      	adds	r2, r2, r3
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <HAL_IncTick+0x20>)
 800494e:	601a      	str	r2, [r3, #0]
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	46c0      	nop			; (mov r8, r8)
 8004958:	20000004 	.word	0x20000004
 800495c:	200026ac 	.word	0x200026ac

08004960 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  return uwTick;
 8004964:	4b02      	ldr	r3, [pc, #8]	; (8004970 <HAL_GetTick+0x10>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	0018      	movs	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	46c0      	nop			; (mov r8, r8)
 8004970:	200026ac 	.word	0x200026ac

08004974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	0002      	movs	r2, r0
 800497c:	1dfb      	adds	r3, r7, #7
 800497e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004980:	1dfb      	adds	r3, r7, #7
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	2b7f      	cmp	r3, #127	; 0x7f
 8004986:	d809      	bhi.n	800499c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004988:	1dfb      	adds	r3, r7, #7
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	001a      	movs	r2, r3
 800498e:	231f      	movs	r3, #31
 8004990:	401a      	ands	r2, r3
 8004992:	4b04      	ldr	r3, [pc, #16]	; (80049a4 <__NVIC_EnableIRQ+0x30>)
 8004994:	2101      	movs	r1, #1
 8004996:	4091      	lsls	r1, r2
 8004998:	000a      	movs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]
  }
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	e000e100 	.word	0xe000e100

080049a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049a8:	b590      	push	{r4, r7, lr}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	0002      	movs	r2, r0
 80049b0:	6039      	str	r1, [r7, #0]
 80049b2:	1dfb      	adds	r3, r7, #7
 80049b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80049b6:	1dfb      	adds	r3, r7, #7
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b7f      	cmp	r3, #127	; 0x7f
 80049bc:	d828      	bhi.n	8004a10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049be:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <__NVIC_SetPriority+0xd4>)
 80049c0:	1dfb      	adds	r3, r7, #7
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	b25b      	sxtb	r3, r3
 80049c6:	089b      	lsrs	r3, r3, #2
 80049c8:	33c0      	adds	r3, #192	; 0xc0
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	589b      	ldr	r3, [r3, r2]
 80049ce:	1dfa      	adds	r2, r7, #7
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	0011      	movs	r1, r2
 80049d4:	2203      	movs	r2, #3
 80049d6:	400a      	ands	r2, r1
 80049d8:	00d2      	lsls	r2, r2, #3
 80049da:	21ff      	movs	r1, #255	; 0xff
 80049dc:	4091      	lsls	r1, r2
 80049de:	000a      	movs	r2, r1
 80049e0:	43d2      	mvns	r2, r2
 80049e2:	401a      	ands	r2, r3
 80049e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	019b      	lsls	r3, r3, #6
 80049ea:	22ff      	movs	r2, #255	; 0xff
 80049ec:	401a      	ands	r2, r3
 80049ee:	1dfb      	adds	r3, r7, #7
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	0018      	movs	r0, r3
 80049f4:	2303      	movs	r3, #3
 80049f6:	4003      	ands	r3, r0
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049fc:	481f      	ldr	r0, [pc, #124]	; (8004a7c <__NVIC_SetPriority+0xd4>)
 80049fe:	1dfb      	adds	r3, r7, #7
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	b25b      	sxtb	r3, r3
 8004a04:	089b      	lsrs	r3, r3, #2
 8004a06:	430a      	orrs	r2, r1
 8004a08:	33c0      	adds	r3, #192	; 0xc0
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004a0e:	e031      	b.n	8004a74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <__NVIC_SetPriority+0xd8>)
 8004a12:	1dfb      	adds	r3, r7, #7
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	0019      	movs	r1, r3
 8004a18:	230f      	movs	r3, #15
 8004a1a:	400b      	ands	r3, r1
 8004a1c:	3b08      	subs	r3, #8
 8004a1e:	089b      	lsrs	r3, r3, #2
 8004a20:	3306      	adds	r3, #6
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	18d3      	adds	r3, r2, r3
 8004a26:	3304      	adds	r3, #4
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	1dfa      	adds	r2, r7, #7
 8004a2c:	7812      	ldrb	r2, [r2, #0]
 8004a2e:	0011      	movs	r1, r2
 8004a30:	2203      	movs	r2, #3
 8004a32:	400a      	ands	r2, r1
 8004a34:	00d2      	lsls	r2, r2, #3
 8004a36:	21ff      	movs	r1, #255	; 0xff
 8004a38:	4091      	lsls	r1, r2
 8004a3a:	000a      	movs	r2, r1
 8004a3c:	43d2      	mvns	r2, r2
 8004a3e:	401a      	ands	r2, r3
 8004a40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	019b      	lsls	r3, r3, #6
 8004a46:	22ff      	movs	r2, #255	; 0xff
 8004a48:	401a      	ands	r2, r3
 8004a4a:	1dfb      	adds	r3, r7, #7
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	0018      	movs	r0, r3
 8004a50:	2303      	movs	r3, #3
 8004a52:	4003      	ands	r3, r0
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004a58:	4809      	ldr	r0, [pc, #36]	; (8004a80 <__NVIC_SetPriority+0xd8>)
 8004a5a:	1dfb      	adds	r3, r7, #7
 8004a5c:	781b      	ldrb	r3, [r3, #0]
 8004a5e:	001c      	movs	r4, r3
 8004a60:	230f      	movs	r3, #15
 8004a62:	4023      	ands	r3, r4
 8004a64:	3b08      	subs	r3, #8
 8004a66:	089b      	lsrs	r3, r3, #2
 8004a68:	430a      	orrs	r2, r1
 8004a6a:	3306      	adds	r3, #6
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	18c3      	adds	r3, r0, r3
 8004a70:	3304      	adds	r3, #4
 8004a72:	601a      	str	r2, [r3, #0]
}
 8004a74:	46c0      	nop			; (mov r8, r8)
 8004a76:	46bd      	mov	sp, r7
 8004a78:	b003      	add	sp, #12
 8004a7a:	bd90      	pop	{r4, r7, pc}
 8004a7c:	e000e100 	.word	0xe000e100
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60b9      	str	r1, [r7, #8]
 8004a8c:	607a      	str	r2, [r7, #4]
 8004a8e:	210f      	movs	r1, #15
 8004a90:	187b      	adds	r3, r7, r1
 8004a92:	1c02      	adds	r2, r0, #0
 8004a94:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	187b      	adds	r3, r7, r1
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	b25b      	sxtb	r3, r3
 8004a9e:	0011      	movs	r1, r2
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	f7ff ff81 	bl	80049a8 <__NVIC_SetPriority>
}
 8004aa6:	46c0      	nop			; (mov r8, r8)
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	b004      	add	sp, #16
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b082      	sub	sp, #8
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	1dfb      	adds	r3, r7, #7
 8004ab8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004aba:	1dfb      	adds	r3, r7, #7
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	b25b      	sxtb	r3, r3
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f7ff ff57 	bl	8004974 <__NVIC_EnableIRQ>
}
 8004ac6:	46c0      	nop			; (mov r8, r8)
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	b002      	add	sp, #8
 8004acc:	bd80      	pop	{r7, pc}

08004ace <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b082      	sub	sp, #8
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2221      	movs	r2, #33	; 0x21
 8004ada:	5c9b      	ldrb	r3, [r3, r2]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d008      	beq.n	8004af4 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2220      	movs	r2, #32
 8004aec:	2100      	movs	r1, #0
 8004aee:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e020      	b.n	8004b36 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	210e      	movs	r1, #14
 8004b00:	438a      	bics	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2101      	movs	r1, #1
 8004b10:	438a      	bics	r2, r1
 8004b12:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4091      	lsls	r1, r2
 8004b20:	000a      	movs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2221      	movs	r2, #33	; 0x21
 8004b28:	2101      	movs	r1, #1
 8004b2a:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	2100      	movs	r1, #0
 8004b32:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	0018      	movs	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b002      	add	sp, #8
 8004b3c:	bd80      	pop	{r7, pc}

08004b3e <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004b3e:	b580      	push	{r7, lr}
 8004b40:	b084      	sub	sp, #16
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b46:	210f      	movs	r1, #15
 8004b48:	187b      	adds	r3, r7, r1
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2221      	movs	r2, #33	; 0x21
 8004b52:	5c9b      	ldrb	r3, [r3, r2]
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d006      	beq.n	8004b68 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004b60:	187b      	adds	r3, r7, r1
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]
 8004b66:	e028      	b.n	8004bba <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	210e      	movs	r1, #14
 8004b74:	438a      	bics	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2101      	movs	r1, #1
 8004b84:	438a      	bics	r2, r1
 8004b86:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b90:	2101      	movs	r1, #1
 8004b92:	4091      	lsls	r1, r2
 8004b94:	000a      	movs	r2, r1
 8004b96:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2221      	movs	r2, #33	; 0x21
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2220      	movs	r2, #32
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d004      	beq.n	8004bba <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	0010      	movs	r0, r2
 8004bb8:	4798      	blx	r3
    } 
  }
  return status;
 8004bba:	230f      	movs	r3, #15
 8004bbc:	18fb      	adds	r3, r7, r3
 8004bbe:	781b      	ldrb	r3, [r3, #0]
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b004      	add	sp, #16
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004bd6:	e155      	b.n	8004e84 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2101      	movs	r1, #1
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	4091      	lsls	r1, r2
 8004be2:	000a      	movs	r2, r1
 8004be4:	4013      	ands	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d100      	bne.n	8004bf0 <HAL_GPIO_Init+0x28>
 8004bee:	e146      	b.n	8004e7e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	2203      	movs	r2, #3
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d005      	beq.n	8004c08 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2203      	movs	r2, #3
 8004c02:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d130      	bne.n	8004c6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	005b      	lsls	r3, r3, #1
 8004c12:	2203      	movs	r2, #3
 8004c14:	409a      	lsls	r2, r3
 8004c16:	0013      	movs	r3, r2
 8004c18:	43da      	mvns	r2, r3
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	409a      	lsls	r2, r3
 8004c2a:	0013      	movs	r3, r2
 8004c2c:	693a      	ldr	r2, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c3e:	2201      	movs	r2, #1
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	409a      	lsls	r2, r3
 8004c44:	0013      	movs	r3, r2
 8004c46:	43da      	mvns	r2, r3
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	2201      	movs	r2, #1
 8004c56:	401a      	ands	r2, r3
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	0013      	movs	r3, r2
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2203      	movs	r2, #3
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	d017      	beq.n	8004ca6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	2203      	movs	r2, #3
 8004c82:	409a      	lsls	r2, r3
 8004c84:	0013      	movs	r3, r2
 8004c86:	43da      	mvns	r2, r3
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	409a      	lsls	r2, r3
 8004c98:	0013      	movs	r3, r2
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2203      	movs	r2, #3
 8004cac:	4013      	ands	r3, r2
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d123      	bne.n	8004cfa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	08da      	lsrs	r2, r3, #3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	3208      	adds	r2, #8
 8004cba:	0092      	lsls	r2, r2, #2
 8004cbc:	58d3      	ldr	r3, [r2, r3]
 8004cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	2207      	movs	r2, #7
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	220f      	movs	r2, #15
 8004cca:	409a      	lsls	r2, r3
 8004ccc:	0013      	movs	r3, r2
 8004cce:	43da      	mvns	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2107      	movs	r1, #7
 8004cde:	400b      	ands	r3, r1
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	409a      	lsls	r2, r3
 8004ce4:	0013      	movs	r3, r2
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	08da      	lsrs	r2, r3, #3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3208      	adds	r2, #8
 8004cf4:	0092      	lsls	r2, r2, #2
 8004cf6:	6939      	ldr	r1, [r7, #16]
 8004cf8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	2203      	movs	r2, #3
 8004d06:	409a      	lsls	r2, r3
 8004d08:	0013      	movs	r3, r2
 8004d0a:	43da      	mvns	r2, r3
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4013      	ands	r3, r2
 8004d10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2203      	movs	r2, #3
 8004d18:	401a      	ands	r2, r3
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	409a      	lsls	r2, r3
 8004d20:	0013      	movs	r3, r2
 8004d22:	693a      	ldr	r2, [r7, #16]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	693a      	ldr	r2, [r7, #16]
 8004d2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	23c0      	movs	r3, #192	; 0xc0
 8004d34:	029b      	lsls	r3, r3, #10
 8004d36:	4013      	ands	r3, r2
 8004d38:	d100      	bne.n	8004d3c <HAL_GPIO_Init+0x174>
 8004d3a:	e0a0      	b.n	8004e7e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d3c:	4b57      	ldr	r3, [pc, #348]	; (8004e9c <HAL_GPIO_Init+0x2d4>)
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	4b56      	ldr	r3, [pc, #344]	; (8004e9c <HAL_GPIO_Init+0x2d4>)
 8004d42:	2101      	movs	r1, #1
 8004d44:	430a      	orrs	r2, r1
 8004d46:	619a      	str	r2, [r3, #24]
 8004d48:	4b54      	ldr	r3, [pc, #336]	; (8004e9c <HAL_GPIO_Init+0x2d4>)
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	4013      	ands	r3, r2
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004d54:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <HAL_GPIO_Init+0x2d8>)
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	089b      	lsrs	r3, r3, #2
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	589b      	ldr	r3, [r3, r2]
 8004d60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2203      	movs	r2, #3
 8004d66:	4013      	ands	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	220f      	movs	r2, #15
 8004d6c:	409a      	lsls	r2, r3
 8004d6e:	0013      	movs	r3, r2
 8004d70:	43da      	mvns	r2, r3
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	2390      	movs	r3, #144	; 0x90
 8004d7c:	05db      	lsls	r3, r3, #23
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d019      	beq.n	8004db6 <HAL_GPIO_Init+0x1ee>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a47      	ldr	r2, [pc, #284]	; (8004ea4 <HAL_GPIO_Init+0x2dc>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_GPIO_Init+0x1ea>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a46      	ldr	r2, [pc, #280]	; (8004ea8 <HAL_GPIO_Init+0x2e0>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d00d      	beq.n	8004dae <HAL_GPIO_Init+0x1e6>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a45      	ldr	r2, [pc, #276]	; (8004eac <HAL_GPIO_Init+0x2e4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d007      	beq.n	8004daa <HAL_GPIO_Init+0x1e2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a44      	ldr	r2, [pc, #272]	; (8004eb0 <HAL_GPIO_Init+0x2e8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d101      	bne.n	8004da6 <HAL_GPIO_Init+0x1de>
 8004da2:	2304      	movs	r3, #4
 8004da4:	e008      	b.n	8004db8 <HAL_GPIO_Init+0x1f0>
 8004da6:	2305      	movs	r3, #5
 8004da8:	e006      	b.n	8004db8 <HAL_GPIO_Init+0x1f0>
 8004daa:	2303      	movs	r3, #3
 8004dac:	e004      	b.n	8004db8 <HAL_GPIO_Init+0x1f0>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e002      	b.n	8004db8 <HAL_GPIO_Init+0x1f0>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_GPIO_Init+0x1f0>
 8004db6:	2300      	movs	r3, #0
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	2103      	movs	r1, #3
 8004dbc:	400a      	ands	r2, r1
 8004dbe:	0092      	lsls	r2, r2, #2
 8004dc0:	4093      	lsls	r3, r2
 8004dc2:	693a      	ldr	r2, [r7, #16]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004dc8:	4935      	ldr	r1, [pc, #212]	; (8004ea0 <HAL_GPIO_Init+0x2d8>)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	089b      	lsrs	r3, r3, #2
 8004dce:	3302      	adds	r3, #2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	693a      	ldr	r2, [r7, #16]
 8004dd4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004dd6:	4b37      	ldr	r3, [pc, #220]	; (8004eb4 <HAL_GPIO_Init+0x2ec>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	43da      	mvns	r2, r3
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4013      	ands	r3, r2
 8004de4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	025b      	lsls	r3, r3, #9
 8004dee:	4013      	ands	r3, r2
 8004df0:	d003      	beq.n	8004dfa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004df2:	693a      	ldr	r2, [r7, #16]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004dfa:	4b2e      	ldr	r3, [pc, #184]	; (8004eb4 <HAL_GPIO_Init+0x2ec>)
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004e00:	4b2c      	ldr	r3, [pc, #176]	; (8004eb4 <HAL_GPIO_Init+0x2ec>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	43da      	mvns	r2, r3
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685a      	ldr	r2, [r3, #4]
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	029b      	lsls	r3, r3, #10
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004e24:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <HAL_GPIO_Init+0x2ec>)
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e2a:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <HAL_GPIO_Init+0x2ec>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	43da      	mvns	r2, r3
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	4013      	ands	r3, r2
 8004e38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	035b      	lsls	r3, r3, #13
 8004e42:	4013      	ands	r3, r2
 8004e44:	d003      	beq.n	8004e4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004e4e:	4b19      	ldr	r3, [pc, #100]	; (8004eb4 <HAL_GPIO_Init+0x2ec>)
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004e54:	4b17      	ldr	r3, [pc, #92]	; (8004eb4 <HAL_GPIO_Init+0x2ec>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	43da      	mvns	r2, r3
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4013      	ands	r3, r2
 8004e62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	039b      	lsls	r3, r3, #14
 8004e6c:	4013      	ands	r3, r2
 8004e6e:	d003      	beq.n	8004e78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004e78:	4b0e      	ldr	r3, [pc, #56]	; (8004eb4 <HAL_GPIO_Init+0x2ec>)
 8004e7a:	693a      	ldr	r2, [r7, #16]
 8004e7c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	3301      	adds	r3, #1
 8004e82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	40da      	lsrs	r2, r3
 8004e8c:	1e13      	subs	r3, r2, #0
 8004e8e:	d000      	beq.n	8004e92 <HAL_GPIO_Init+0x2ca>
 8004e90:	e6a2      	b.n	8004bd8 <HAL_GPIO_Init+0x10>
  } 
}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	46c0      	nop			; (mov r8, r8)
 8004e96:	46bd      	mov	sp, r7
 8004e98:	b006      	add	sp, #24
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	40021000 	.word	0x40021000
 8004ea0:	40010000 	.word	0x40010000
 8004ea4:	48000400 	.word	0x48000400
 8004ea8:	48000800 	.word	0x48000800
 8004eac:	48000c00 	.word	0x48000c00
 8004eb0:	48001000 	.word	0x48001000
 8004eb4:	40010400 	.word	0x40010400

08004eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	0008      	movs	r0, r1
 8004ec2:	0011      	movs	r1, r2
 8004ec4:	1cbb      	adds	r3, r7, #2
 8004ec6:	1c02      	adds	r2, r0, #0
 8004ec8:	801a      	strh	r2, [r3, #0]
 8004eca:	1c7b      	adds	r3, r7, #1
 8004ecc:	1c0a      	adds	r2, r1, #0
 8004ece:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ed0:	1c7b      	adds	r3, r7, #1
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d004      	beq.n	8004ee2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ed8:	1cbb      	adds	r3, r7, #2
 8004eda:	881a      	ldrh	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ee0:	e003      	b.n	8004eea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ee2:	1cbb      	adds	r3, r7, #2
 8004ee4:	881a      	ldrh	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004eea:	46c0      	nop			; (mov r8, r8)
 8004eec:	46bd      	mov	sp, r7
 8004eee:	b002      	add	sp, #8
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	000a      	movs	r2, r1
 8004efc:	1cbb      	adds	r3, r7, #2
 8004efe:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f06:	1cbb      	adds	r3, r7, #2
 8004f08:	881b      	ldrh	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	041a      	lsls	r2, r3, #16
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	43db      	mvns	r3, r3
 8004f14:	1cb9      	adds	r1, r7, #2
 8004f16:	8809      	ldrh	r1, [r1, #0]
 8004f18:	400b      	ands	r3, r1
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	619a      	str	r2, [r3, #24]
}
 8004f20:	46c0      	nop			; (mov r8, r8)
 8004f22:	46bd      	mov	sp, r7
 8004f24:	b004      	add	sp, #16
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	0002      	movs	r2, r0
 8004f30:	1dbb      	adds	r3, r7, #6
 8004f32:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004f34:	4b09      	ldr	r3, [pc, #36]	; (8004f5c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	1dba      	adds	r2, r7, #6
 8004f3a:	8812      	ldrh	r2, [r2, #0]
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	d008      	beq.n	8004f52 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004f40:	4b06      	ldr	r3, [pc, #24]	; (8004f5c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8004f42:	1dba      	adds	r2, r7, #6
 8004f44:	8812      	ldrh	r2, [r2, #0]
 8004f46:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004f48:	1dbb      	adds	r3, r7, #6
 8004f4a:	881b      	ldrh	r3, [r3, #0]
 8004f4c:	0018      	movs	r0, r3
 8004f4e:	f000 f807 	bl	8004f60 <HAL_GPIO_EXTI_Callback>
  }
}
 8004f52:	46c0      	nop			; (mov r8, r8)
 8004f54:	46bd      	mov	sp, r7
 8004f56:	b002      	add	sp, #8
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	40010400 	.word	0x40010400

08004f60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	0002      	movs	r2, r0
 8004f68:	1dbb      	adds	r3, r7, #6
 8004f6a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8004f6c:	46c0      	nop			; (mov r8, r8)
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	b002      	add	sp, #8
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a03      	ldr	r2, [pc, #12]	; (8004f90 <HAL_IWDG_Refresh+0x1c>)
 8004f82:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	0018      	movs	r0, r3
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	b002      	add	sp, #8
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	46c0      	nop			; (mov r8, r8)
 8004f90:	0000aaaa 	.word	0x0000aaaa

08004f94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b088      	sub	sp, #32
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d102      	bne.n	8004fa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	f000 fb76 	bl	8005694 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d100      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x20>
 8004fb2:	e08e      	b.n	80050d2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004fb4:	4bc5      	ldr	r3, [pc, #788]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	220c      	movs	r2, #12
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d00e      	beq.n	8004fde <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004fc0:	4bc2      	ldr	r3, [pc, #776]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	220c      	movs	r2, #12
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	2b08      	cmp	r3, #8
 8004fca:	d117      	bne.n	8004ffc <HAL_RCC_OscConfig+0x68>
 8004fcc:	4bbf      	ldr	r3, [pc, #764]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	23c0      	movs	r3, #192	; 0xc0
 8004fd2:	025b      	lsls	r3, r3, #9
 8004fd4:	401a      	ands	r2, r3
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	025b      	lsls	r3, r3, #9
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d10e      	bne.n	8004ffc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fde:	4bbb      	ldr	r3, [pc, #748]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	2380      	movs	r3, #128	; 0x80
 8004fe4:	029b      	lsls	r3, r3, #10
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	d100      	bne.n	8004fec <HAL_RCC_OscConfig+0x58>
 8004fea:	e071      	b.n	80050d0 <HAL_RCC_OscConfig+0x13c>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d000      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x62>
 8004ff4:	e06c      	b.n	80050d0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f000 fb4c 	bl	8005694 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d107      	bne.n	8005014 <HAL_RCC_OscConfig+0x80>
 8005004:	4bb1      	ldr	r3, [pc, #708]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	4bb0      	ldr	r3, [pc, #704]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800500a:	2180      	movs	r1, #128	; 0x80
 800500c:	0249      	lsls	r1, r1, #9
 800500e:	430a      	orrs	r2, r1
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e02f      	b.n	8005074 <HAL_RCC_OscConfig+0xe0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10c      	bne.n	8005036 <HAL_RCC_OscConfig+0xa2>
 800501c:	4bab      	ldr	r3, [pc, #684]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4baa      	ldr	r3, [pc, #680]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005022:	49ab      	ldr	r1, [pc, #684]	; (80052d0 <HAL_RCC_OscConfig+0x33c>)
 8005024:	400a      	ands	r2, r1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	4ba8      	ldr	r3, [pc, #672]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	4ba7      	ldr	r3, [pc, #668]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800502e:	49a9      	ldr	r1, [pc, #676]	; (80052d4 <HAL_RCC_OscConfig+0x340>)
 8005030:	400a      	ands	r2, r1
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	e01e      	b.n	8005074 <HAL_RCC_OscConfig+0xe0>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b05      	cmp	r3, #5
 800503c:	d10e      	bne.n	800505c <HAL_RCC_OscConfig+0xc8>
 800503e:	4ba3      	ldr	r3, [pc, #652]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	4ba2      	ldr	r3, [pc, #648]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005044:	2180      	movs	r1, #128	; 0x80
 8005046:	02c9      	lsls	r1, r1, #11
 8005048:	430a      	orrs	r2, r1
 800504a:	601a      	str	r2, [r3, #0]
 800504c:	4b9f      	ldr	r3, [pc, #636]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4b9e      	ldr	r3, [pc, #632]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005052:	2180      	movs	r1, #128	; 0x80
 8005054:	0249      	lsls	r1, r1, #9
 8005056:	430a      	orrs	r2, r1
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	e00b      	b.n	8005074 <HAL_RCC_OscConfig+0xe0>
 800505c:	4b9b      	ldr	r3, [pc, #620]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b9a      	ldr	r3, [pc, #616]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005062:	499b      	ldr	r1, [pc, #620]	; (80052d0 <HAL_RCC_OscConfig+0x33c>)
 8005064:	400a      	ands	r2, r1
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	4b98      	ldr	r3, [pc, #608]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4b97      	ldr	r3, [pc, #604]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800506e:	4999      	ldr	r1, [pc, #612]	; (80052d4 <HAL_RCC_OscConfig+0x340>)
 8005070:	400a      	ands	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d014      	beq.n	80050a6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800507c:	f7ff fc70 	bl	8004960 <HAL_GetTick>
 8005080:	0003      	movs	r3, r0
 8005082:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005086:	f7ff fc6b 	bl	8004960 <HAL_GetTick>
 800508a:	0002      	movs	r2, r0
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b64      	cmp	r3, #100	; 0x64
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e2fd      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005098:	4b8c      	ldr	r3, [pc, #560]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	2380      	movs	r3, #128	; 0x80
 800509e:	029b      	lsls	r3, r3, #10
 80050a0:	4013      	ands	r3, r2
 80050a2:	d0f0      	beq.n	8005086 <HAL_RCC_OscConfig+0xf2>
 80050a4:	e015      	b.n	80050d2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050a6:	f7ff fc5b 	bl	8004960 <HAL_GetTick>
 80050aa:	0003      	movs	r3, r0
 80050ac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ae:	e008      	b.n	80050c2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050b0:	f7ff fc56 	bl	8004960 <HAL_GetTick>
 80050b4:	0002      	movs	r2, r0
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b64      	cmp	r3, #100	; 0x64
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e2e8      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050c2:	4b82      	ldr	r3, [pc, #520]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	2380      	movs	r3, #128	; 0x80
 80050c8:	029b      	lsls	r3, r3, #10
 80050ca:	4013      	ands	r3, r2
 80050cc:	d1f0      	bne.n	80050b0 <HAL_RCC_OscConfig+0x11c>
 80050ce:	e000      	b.n	80050d2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2202      	movs	r2, #2
 80050d8:	4013      	ands	r3, r2
 80050da:	d100      	bne.n	80050de <HAL_RCC_OscConfig+0x14a>
 80050dc:	e06c      	b.n	80051b8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80050de:	4b7b      	ldr	r3, [pc, #492]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	220c      	movs	r2, #12
 80050e4:	4013      	ands	r3, r2
 80050e6:	d00e      	beq.n	8005106 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80050e8:	4b78      	ldr	r3, [pc, #480]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	220c      	movs	r2, #12
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d11f      	bne.n	8005134 <HAL_RCC_OscConfig+0x1a0>
 80050f4:	4b75      	ldr	r3, [pc, #468]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	23c0      	movs	r3, #192	; 0xc0
 80050fa:	025b      	lsls	r3, r3, #9
 80050fc:	401a      	ands	r2, r3
 80050fe:	2380      	movs	r3, #128	; 0x80
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	429a      	cmp	r2, r3
 8005104:	d116      	bne.n	8005134 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005106:	4b71      	ldr	r3, [pc, #452]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2202      	movs	r2, #2
 800510c:	4013      	ands	r3, r2
 800510e:	d005      	beq.n	800511c <HAL_RCC_OscConfig+0x188>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d001      	beq.n	800511c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e2bb      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800511c:	4b6b      	ldr	r3, [pc, #428]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	22f8      	movs	r2, #248	; 0xf8
 8005122:	4393      	bics	r3, r2
 8005124:	0019      	movs	r1, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	00da      	lsls	r2, r3, #3
 800512c:	4b67      	ldr	r3, [pc, #412]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800512e:	430a      	orrs	r2, r1
 8005130:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005132:	e041      	b.n	80051b8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d024      	beq.n	8005186 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800513c:	4b63      	ldr	r3, [pc, #396]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b62      	ldr	r3, [pc, #392]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005142:	2101      	movs	r1, #1
 8005144:	430a      	orrs	r2, r1
 8005146:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7ff fc0a 	bl	8004960 <HAL_GetTick>
 800514c:	0003      	movs	r3, r0
 800514e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005152:	f7ff fc05 	bl	8004960 <HAL_GetTick>
 8005156:	0002      	movs	r2, r0
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e297      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005164:	4b59      	ldr	r3, [pc, #356]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2202      	movs	r2, #2
 800516a:	4013      	ands	r3, r2
 800516c:	d0f1      	beq.n	8005152 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800516e:	4b57      	ldr	r3, [pc, #348]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	22f8      	movs	r2, #248	; 0xf8
 8005174:	4393      	bics	r3, r2
 8005176:	0019      	movs	r1, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	00da      	lsls	r2, r3, #3
 800517e:	4b53      	ldr	r3, [pc, #332]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005180:	430a      	orrs	r2, r1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e018      	b.n	80051b8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005186:	4b51      	ldr	r3, [pc, #324]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b50      	ldr	r3, [pc, #320]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 800518c:	2101      	movs	r1, #1
 800518e:	438a      	bics	r2, r1
 8005190:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005192:	f7ff fbe5 	bl	8004960 <HAL_GetTick>
 8005196:	0003      	movs	r3, r0
 8005198:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800519c:	f7ff fbe0 	bl	8004960 <HAL_GetTick>
 80051a0:	0002      	movs	r2, r0
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e272      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051ae:	4b47      	ldr	r3, [pc, #284]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2202      	movs	r2, #2
 80051b4:	4013      	ands	r3, r2
 80051b6:	d1f1      	bne.n	800519c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2208      	movs	r2, #8
 80051be:	4013      	ands	r3, r2
 80051c0:	d036      	beq.n	8005230 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d019      	beq.n	80051fe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051ca:	4b40      	ldr	r3, [pc, #256]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 80051cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051ce:	4b3f      	ldr	r3, [pc, #252]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 80051d0:	2101      	movs	r1, #1
 80051d2:	430a      	orrs	r2, r1
 80051d4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d6:	f7ff fbc3 	bl	8004960 <HAL_GetTick>
 80051da:	0003      	movs	r3, r0
 80051dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051e0:	f7ff fbbe 	bl	8004960 <HAL_GetTick>
 80051e4:	0002      	movs	r2, r0
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e250      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f2:	4b36      	ldr	r3, [pc, #216]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	2202      	movs	r2, #2
 80051f8:	4013      	ands	r3, r2
 80051fa:	d0f1      	beq.n	80051e0 <HAL_RCC_OscConfig+0x24c>
 80051fc:	e018      	b.n	8005230 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051fe:	4b33      	ldr	r3, [pc, #204]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005202:	4b32      	ldr	r3, [pc, #200]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005204:	2101      	movs	r1, #1
 8005206:	438a      	bics	r2, r1
 8005208:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800520a:	f7ff fba9 	bl	8004960 <HAL_GetTick>
 800520e:	0003      	movs	r3, r0
 8005210:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005214:	f7ff fba4 	bl	8004960 <HAL_GetTick>
 8005218:	0002      	movs	r2, r0
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e236      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005226:	4b29      	ldr	r3, [pc, #164]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	2202      	movs	r2, #2
 800522c:	4013      	ands	r3, r2
 800522e:	d1f1      	bne.n	8005214 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2204      	movs	r2, #4
 8005236:	4013      	ands	r3, r2
 8005238:	d100      	bne.n	800523c <HAL_RCC_OscConfig+0x2a8>
 800523a:	e0b5      	b.n	80053a8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800523c:	201f      	movs	r0, #31
 800523e:	183b      	adds	r3, r7, r0
 8005240:	2200      	movs	r2, #0
 8005242:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005244:	4b21      	ldr	r3, [pc, #132]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005246:	69da      	ldr	r2, [r3, #28]
 8005248:	2380      	movs	r3, #128	; 0x80
 800524a:	055b      	lsls	r3, r3, #21
 800524c:	4013      	ands	r3, r2
 800524e:	d110      	bne.n	8005272 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005250:	4b1e      	ldr	r3, [pc, #120]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005252:	69da      	ldr	r2, [r3, #28]
 8005254:	4b1d      	ldr	r3, [pc, #116]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005256:	2180      	movs	r1, #128	; 0x80
 8005258:	0549      	lsls	r1, r1, #21
 800525a:	430a      	orrs	r2, r1
 800525c:	61da      	str	r2, [r3, #28]
 800525e:	4b1b      	ldr	r3, [pc, #108]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 8005260:	69da      	ldr	r2, [r3, #28]
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	055b      	lsls	r3, r3, #21
 8005266:	4013      	ands	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
 800526a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800526c:	183b      	adds	r3, r7, r0
 800526e:	2201      	movs	r2, #1
 8005270:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005272:	4b19      	ldr	r3, [pc, #100]	; (80052d8 <HAL_RCC_OscConfig+0x344>)
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	2380      	movs	r3, #128	; 0x80
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	4013      	ands	r3, r2
 800527c:	d11a      	bne.n	80052b4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800527e:	4b16      	ldr	r3, [pc, #88]	; (80052d8 <HAL_RCC_OscConfig+0x344>)
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b15      	ldr	r3, [pc, #84]	; (80052d8 <HAL_RCC_OscConfig+0x344>)
 8005284:	2180      	movs	r1, #128	; 0x80
 8005286:	0049      	lsls	r1, r1, #1
 8005288:	430a      	orrs	r2, r1
 800528a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800528c:	f7ff fb68 	bl	8004960 <HAL_GetTick>
 8005290:	0003      	movs	r3, r0
 8005292:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005294:	e008      	b.n	80052a8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005296:	f7ff fb63 	bl	8004960 <HAL_GetTick>
 800529a:	0002      	movs	r2, r0
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b64      	cmp	r3, #100	; 0x64
 80052a2:	d901      	bls.n	80052a8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e1f5      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <HAL_RCC_OscConfig+0x344>)
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	4013      	ands	r3, r2
 80052b2:	d0f0      	beq.n	8005296 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d10f      	bne.n	80052dc <HAL_RCC_OscConfig+0x348>
 80052bc:	4b03      	ldr	r3, [pc, #12]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 80052be:	6a1a      	ldr	r2, [r3, #32]
 80052c0:	4b02      	ldr	r3, [pc, #8]	; (80052cc <HAL_RCC_OscConfig+0x338>)
 80052c2:	2101      	movs	r1, #1
 80052c4:	430a      	orrs	r2, r1
 80052c6:	621a      	str	r2, [r3, #32]
 80052c8:	e036      	b.n	8005338 <HAL_RCC_OscConfig+0x3a4>
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	40021000 	.word	0x40021000
 80052d0:	fffeffff 	.word	0xfffeffff
 80052d4:	fffbffff 	.word	0xfffbffff
 80052d8:	40007000 	.word	0x40007000
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10c      	bne.n	80052fe <HAL_RCC_OscConfig+0x36a>
 80052e4:	4bca      	ldr	r3, [pc, #808]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80052e6:	6a1a      	ldr	r2, [r3, #32]
 80052e8:	4bc9      	ldr	r3, [pc, #804]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80052ea:	2101      	movs	r1, #1
 80052ec:	438a      	bics	r2, r1
 80052ee:	621a      	str	r2, [r3, #32]
 80052f0:	4bc7      	ldr	r3, [pc, #796]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80052f2:	6a1a      	ldr	r2, [r3, #32]
 80052f4:	4bc6      	ldr	r3, [pc, #792]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80052f6:	2104      	movs	r1, #4
 80052f8:	438a      	bics	r2, r1
 80052fa:	621a      	str	r2, [r3, #32]
 80052fc:	e01c      	b.n	8005338 <HAL_RCC_OscConfig+0x3a4>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	2b05      	cmp	r3, #5
 8005304:	d10c      	bne.n	8005320 <HAL_RCC_OscConfig+0x38c>
 8005306:	4bc2      	ldr	r3, [pc, #776]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005308:	6a1a      	ldr	r2, [r3, #32]
 800530a:	4bc1      	ldr	r3, [pc, #772]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800530c:	2104      	movs	r1, #4
 800530e:	430a      	orrs	r2, r1
 8005310:	621a      	str	r2, [r3, #32]
 8005312:	4bbf      	ldr	r3, [pc, #764]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005314:	6a1a      	ldr	r2, [r3, #32]
 8005316:	4bbe      	ldr	r3, [pc, #760]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005318:	2101      	movs	r1, #1
 800531a:	430a      	orrs	r2, r1
 800531c:	621a      	str	r2, [r3, #32]
 800531e:	e00b      	b.n	8005338 <HAL_RCC_OscConfig+0x3a4>
 8005320:	4bbb      	ldr	r3, [pc, #748]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005322:	6a1a      	ldr	r2, [r3, #32]
 8005324:	4bba      	ldr	r3, [pc, #744]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005326:	2101      	movs	r1, #1
 8005328:	438a      	bics	r2, r1
 800532a:	621a      	str	r2, [r3, #32]
 800532c:	4bb8      	ldr	r3, [pc, #736]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800532e:	6a1a      	ldr	r2, [r3, #32]
 8005330:	4bb7      	ldr	r3, [pc, #732]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005332:	2104      	movs	r1, #4
 8005334:	438a      	bics	r2, r1
 8005336:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d014      	beq.n	800536a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005340:	f7ff fb0e 	bl	8004960 <HAL_GetTick>
 8005344:	0003      	movs	r3, r0
 8005346:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005348:	e009      	b.n	800535e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800534a:	f7ff fb09 	bl	8004960 <HAL_GetTick>
 800534e:	0002      	movs	r2, r0
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	4aaf      	ldr	r2, [pc, #700]	; (8005614 <HAL_RCC_OscConfig+0x680>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e19a      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800535e:	4bac      	ldr	r3, [pc, #688]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	2202      	movs	r2, #2
 8005364:	4013      	ands	r3, r2
 8005366:	d0f0      	beq.n	800534a <HAL_RCC_OscConfig+0x3b6>
 8005368:	e013      	b.n	8005392 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800536a:	f7ff faf9 	bl	8004960 <HAL_GetTick>
 800536e:	0003      	movs	r3, r0
 8005370:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005372:	e009      	b.n	8005388 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005374:	f7ff faf4 	bl	8004960 <HAL_GetTick>
 8005378:	0002      	movs	r2, r0
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	4aa5      	ldr	r2, [pc, #660]	; (8005614 <HAL_RCC_OscConfig+0x680>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e185      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005388:	4ba1      	ldr	r3, [pc, #644]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800538a:	6a1b      	ldr	r3, [r3, #32]
 800538c:	2202      	movs	r2, #2
 800538e:	4013      	ands	r3, r2
 8005390:	d1f0      	bne.n	8005374 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005392:	231f      	movs	r3, #31
 8005394:	18fb      	adds	r3, r7, r3
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d105      	bne.n	80053a8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800539c:	4b9c      	ldr	r3, [pc, #624]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	4b9b      	ldr	r3, [pc, #620]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80053a2:	499d      	ldr	r1, [pc, #628]	; (8005618 <HAL_RCC_OscConfig+0x684>)
 80053a4:	400a      	ands	r2, r1
 80053a6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2210      	movs	r2, #16
 80053ae:	4013      	ands	r3, r2
 80053b0:	d063      	beq.n	800547a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	695b      	ldr	r3, [r3, #20]
 80053b6:	2b01      	cmp	r3, #1
 80053b8:	d12a      	bne.n	8005410 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80053ba:	4b95      	ldr	r3, [pc, #596]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80053bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053be:	4b94      	ldr	r3, [pc, #592]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80053c0:	2104      	movs	r1, #4
 80053c2:	430a      	orrs	r2, r1
 80053c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80053c6:	4b92      	ldr	r3, [pc, #584]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80053c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053ca:	4b91      	ldr	r3, [pc, #580]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80053cc:	2101      	movs	r1, #1
 80053ce:	430a      	orrs	r2, r1
 80053d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d2:	f7ff fac5 	bl	8004960 <HAL_GetTick>
 80053d6:	0003      	movs	r3, r0
 80053d8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80053dc:	f7ff fac0 	bl	8004960 <HAL_GetTick>
 80053e0:	0002      	movs	r2, r0
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e152      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80053ee:	4b88      	ldr	r3, [pc, #544]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80053f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f2:	2202      	movs	r2, #2
 80053f4:	4013      	ands	r3, r2
 80053f6:	d0f1      	beq.n	80053dc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80053f8:	4b85      	ldr	r3, [pc, #532]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80053fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fc:	22f8      	movs	r2, #248	; 0xf8
 80053fe:	4393      	bics	r3, r2
 8005400:	0019      	movs	r1, r3
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	00da      	lsls	r2, r3, #3
 8005408:	4b81      	ldr	r3, [pc, #516]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800540a:	430a      	orrs	r2, r1
 800540c:	635a      	str	r2, [r3, #52]	; 0x34
 800540e:	e034      	b.n	800547a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	3305      	adds	r3, #5
 8005416:	d111      	bne.n	800543c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005418:	4b7d      	ldr	r3, [pc, #500]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800541a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800541c:	4b7c      	ldr	r3, [pc, #496]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800541e:	2104      	movs	r1, #4
 8005420:	438a      	bics	r2, r1
 8005422:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8005424:	4b7a      	ldr	r3, [pc, #488]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005428:	22f8      	movs	r2, #248	; 0xf8
 800542a:	4393      	bics	r3, r2
 800542c:	0019      	movs	r1, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	00da      	lsls	r2, r3, #3
 8005434:	4b76      	ldr	r3, [pc, #472]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005436:	430a      	orrs	r2, r1
 8005438:	635a      	str	r2, [r3, #52]	; 0x34
 800543a:	e01e      	b.n	800547a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800543c:	4b74      	ldr	r3, [pc, #464]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800543e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005440:	4b73      	ldr	r3, [pc, #460]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005442:	2104      	movs	r1, #4
 8005444:	430a      	orrs	r2, r1
 8005446:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005448:	4b71      	ldr	r3, [pc, #452]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800544a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800544c:	4b70      	ldr	r3, [pc, #448]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800544e:	2101      	movs	r1, #1
 8005450:	438a      	bics	r2, r1
 8005452:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005454:	f7ff fa84 	bl	8004960 <HAL_GetTick>
 8005458:	0003      	movs	r3, r0
 800545a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800545c:	e008      	b.n	8005470 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800545e:	f7ff fa7f 	bl	8004960 <HAL_GetTick>
 8005462:	0002      	movs	r2, r0
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e111      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005470:	4b67      	ldr	r3, [pc, #412]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005472:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005474:	2202      	movs	r2, #2
 8005476:	4013      	ands	r3, r2
 8005478:	d1f1      	bne.n	800545e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2220      	movs	r2, #32
 8005480:	4013      	ands	r3, r2
 8005482:	d05c      	beq.n	800553e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005484:	4b62      	ldr	r3, [pc, #392]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	220c      	movs	r2, #12
 800548a:	4013      	ands	r3, r2
 800548c:	2b0c      	cmp	r3, #12
 800548e:	d00e      	beq.n	80054ae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8005490:	4b5f      	ldr	r3, [pc, #380]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	220c      	movs	r2, #12
 8005496:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8005498:	2b08      	cmp	r3, #8
 800549a:	d114      	bne.n	80054c6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800549c:	4b5c      	ldr	r3, [pc, #368]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	23c0      	movs	r3, #192	; 0xc0
 80054a2:	025b      	lsls	r3, r3, #9
 80054a4:	401a      	ands	r2, r3
 80054a6:	23c0      	movs	r3, #192	; 0xc0
 80054a8:	025b      	lsls	r3, r3, #9
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d10b      	bne.n	80054c6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80054ae:	4b58      	ldr	r3, [pc, #352]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80054b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054b2:	2380      	movs	r3, #128	; 0x80
 80054b4:	025b      	lsls	r3, r3, #9
 80054b6:	4013      	ands	r3, r2
 80054b8:	d040      	beq.n	800553c <HAL_RCC_OscConfig+0x5a8>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d03c      	beq.n	800553c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e0e6      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d01b      	beq.n	8005506 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80054ce:	4b50      	ldr	r3, [pc, #320]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80054d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054d2:	4b4f      	ldr	r3, [pc, #316]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80054d4:	2180      	movs	r1, #128	; 0x80
 80054d6:	0249      	lsls	r1, r1, #9
 80054d8:	430a      	orrs	r2, r1
 80054da:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054dc:	f7ff fa40 	bl	8004960 <HAL_GetTick>
 80054e0:	0003      	movs	r3, r0
 80054e2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80054e4:	e008      	b.n	80054f8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054e6:	f7ff fa3b 	bl	8004960 <HAL_GetTick>
 80054ea:	0002      	movs	r2, r0
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d901      	bls.n	80054f8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	e0cd      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80054f8:	4b45      	ldr	r3, [pc, #276]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80054fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054fc:	2380      	movs	r3, #128	; 0x80
 80054fe:	025b      	lsls	r3, r3, #9
 8005500:	4013      	ands	r3, r2
 8005502:	d0f0      	beq.n	80054e6 <HAL_RCC_OscConfig+0x552>
 8005504:	e01b      	b.n	800553e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005506:	4b42      	ldr	r3, [pc, #264]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800550a:	4b41      	ldr	r3, [pc, #260]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800550c:	4943      	ldr	r1, [pc, #268]	; (800561c <HAL_RCC_OscConfig+0x688>)
 800550e:	400a      	ands	r2, r1
 8005510:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005512:	f7ff fa25 	bl	8004960 <HAL_GetTick>
 8005516:	0003      	movs	r3, r0
 8005518:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800551c:	f7ff fa20 	bl	8004960 <HAL_GetTick>
 8005520:	0002      	movs	r2, r0
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e0b2      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800552e:	4b38      	ldr	r3, [pc, #224]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005532:	2380      	movs	r3, #128	; 0x80
 8005534:	025b      	lsls	r3, r3, #9
 8005536:	4013      	ands	r3, r2
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x588>
 800553a:	e000      	b.n	800553e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800553c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005542:	2b00      	cmp	r3, #0
 8005544:	d100      	bne.n	8005548 <HAL_RCC_OscConfig+0x5b4>
 8005546:	e0a4      	b.n	8005692 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005548:	4b31      	ldr	r3, [pc, #196]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	220c      	movs	r2, #12
 800554e:	4013      	ands	r3, r2
 8005550:	2b08      	cmp	r3, #8
 8005552:	d100      	bne.n	8005556 <HAL_RCC_OscConfig+0x5c2>
 8005554:	e078      	b.n	8005648 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	2b02      	cmp	r3, #2
 800555c:	d14c      	bne.n	80055f8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800555e:	4b2c      	ldr	r3, [pc, #176]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	4b2b      	ldr	r3, [pc, #172]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005564:	492e      	ldr	r1, [pc, #184]	; (8005620 <HAL_RCC_OscConfig+0x68c>)
 8005566:	400a      	ands	r2, r1
 8005568:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800556a:	f7ff f9f9 	bl	8004960 <HAL_GetTick>
 800556e:	0003      	movs	r3, r0
 8005570:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005572:	e008      	b.n	8005586 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005574:	f7ff f9f4 	bl	8004960 <HAL_GetTick>
 8005578:	0002      	movs	r2, r0
 800557a:	69bb      	ldr	r3, [r7, #24]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	2b02      	cmp	r3, #2
 8005580:	d901      	bls.n	8005586 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8005582:	2303      	movs	r3, #3
 8005584:	e086      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	2380      	movs	r3, #128	; 0x80
 800558c:	049b      	lsls	r3, r3, #18
 800558e:	4013      	ands	r3, r2
 8005590:	d1f0      	bne.n	8005574 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005592:	4b1f      	ldr	r3, [pc, #124]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 8005594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005596:	220f      	movs	r2, #15
 8005598:	4393      	bics	r3, r2
 800559a:	0019      	movs	r1, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055a0:	4b1b      	ldr	r3, [pc, #108]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80055a2:	430a      	orrs	r2, r1
 80055a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80055a6:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	4a1e      	ldr	r2, [pc, #120]	; (8005624 <HAL_RCC_OscConfig+0x690>)
 80055ac:	4013      	ands	r3, r2
 80055ae:	0019      	movs	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	431a      	orrs	r2, r3
 80055ba:	4b15      	ldr	r3, [pc, #84]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055c0:	4b13      	ldr	r3, [pc, #76]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	4b12      	ldr	r3, [pc, #72]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80055c6:	2180      	movs	r1, #128	; 0x80
 80055c8:	0449      	lsls	r1, r1, #17
 80055ca:	430a      	orrs	r2, r1
 80055cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ce:	f7ff f9c7 	bl	8004960 <HAL_GetTick>
 80055d2:	0003      	movs	r3, r0
 80055d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055d6:	e008      	b.n	80055ea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055d8:	f7ff f9c2 	bl	8004960 <HAL_GetTick>
 80055dc:	0002      	movs	r2, r0
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d901      	bls.n	80055ea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80055e6:	2303      	movs	r3, #3
 80055e8:	e054      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80055ea:	4b09      	ldr	r3, [pc, #36]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	2380      	movs	r3, #128	; 0x80
 80055f0:	049b      	lsls	r3, r3, #18
 80055f2:	4013      	ands	r3, r2
 80055f4:	d0f0      	beq.n	80055d8 <HAL_RCC_OscConfig+0x644>
 80055f6:	e04c      	b.n	8005692 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055f8:	4b05      	ldr	r3, [pc, #20]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b04      	ldr	r3, [pc, #16]	; (8005610 <HAL_RCC_OscConfig+0x67c>)
 80055fe:	4908      	ldr	r1, [pc, #32]	; (8005620 <HAL_RCC_OscConfig+0x68c>)
 8005600:	400a      	ands	r2, r1
 8005602:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005604:	f7ff f9ac 	bl	8004960 <HAL_GetTick>
 8005608:	0003      	movs	r3, r0
 800560a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800560c:	e015      	b.n	800563a <HAL_RCC_OscConfig+0x6a6>
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	40021000 	.word	0x40021000
 8005614:	00001388 	.word	0x00001388
 8005618:	efffffff 	.word	0xefffffff
 800561c:	fffeffff 	.word	0xfffeffff
 8005620:	feffffff 	.word	0xfeffffff
 8005624:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005628:	f7ff f99a 	bl	8004960 <HAL_GetTick>
 800562c:	0002      	movs	r2, r0
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	2b02      	cmp	r3, #2
 8005634:	d901      	bls.n	800563a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e02c      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800563a:	4b18      	ldr	r3, [pc, #96]	; (800569c <HAL_RCC_OscConfig+0x708>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	2380      	movs	r3, #128	; 0x80
 8005640:	049b      	lsls	r3, r3, #18
 8005642:	4013      	ands	r3, r2
 8005644:	d1f0      	bne.n	8005628 <HAL_RCC_OscConfig+0x694>
 8005646:	e024      	b.n	8005692 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b01      	cmp	r3, #1
 800564e:	d101      	bne.n	8005654 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e01f      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005654:	4b11      	ldr	r3, [pc, #68]	; (800569c <HAL_RCC_OscConfig+0x708>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800565a:	4b10      	ldr	r3, [pc, #64]	; (800569c <HAL_RCC_OscConfig+0x708>)
 800565c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	23c0      	movs	r3, #192	; 0xc0
 8005664:	025b      	lsls	r3, r3, #9
 8005666:	401a      	ands	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800566c:	429a      	cmp	r2, r3
 800566e:	d10e      	bne.n	800568e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	220f      	movs	r2, #15
 8005674:	401a      	ands	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800567a:	429a      	cmp	r2, r3
 800567c:	d107      	bne.n	800568e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	23f0      	movs	r3, #240	; 0xf0
 8005682:	039b      	lsls	r3, r3, #14
 8005684:	401a      	ands	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800568a:	429a      	cmp	r2, r3
 800568c:	d001      	beq.n	8005692 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	0018      	movs	r0, r3
 8005696:	46bd      	mov	sp, r7
 8005698:	b008      	add	sp, #32
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40021000 	.word	0x40021000

080056a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e0bf      	b.n	8005834 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b4:	4b61      	ldr	r3, [pc, #388]	; (800583c <HAL_RCC_ClockConfig+0x19c>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2201      	movs	r2, #1
 80056ba:	4013      	ands	r3, r2
 80056bc:	683a      	ldr	r2, [r7, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d911      	bls.n	80056e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c2:	4b5e      	ldr	r3, [pc, #376]	; (800583c <HAL_RCC_ClockConfig+0x19c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2201      	movs	r2, #1
 80056c8:	4393      	bics	r3, r2
 80056ca:	0019      	movs	r1, r3
 80056cc:	4b5b      	ldr	r3, [pc, #364]	; (800583c <HAL_RCC_ClockConfig+0x19c>)
 80056ce:	683a      	ldr	r2, [r7, #0]
 80056d0:	430a      	orrs	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d4:	4b59      	ldr	r3, [pc, #356]	; (800583c <HAL_RCC_ClockConfig+0x19c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2201      	movs	r2, #1
 80056da:	4013      	ands	r3, r2
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d001      	beq.n	80056e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e0a6      	b.n	8005834 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2202      	movs	r2, #2
 80056ec:	4013      	ands	r3, r2
 80056ee:	d015      	beq.n	800571c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2204      	movs	r2, #4
 80056f6:	4013      	ands	r3, r2
 80056f8:	d006      	beq.n	8005708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80056fa:	4b51      	ldr	r3, [pc, #324]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	4b50      	ldr	r3, [pc, #320]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 8005700:	21e0      	movs	r1, #224	; 0xe0
 8005702:	00c9      	lsls	r1, r1, #3
 8005704:	430a      	orrs	r2, r1
 8005706:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005708:	4b4d      	ldr	r3, [pc, #308]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	22f0      	movs	r2, #240	; 0xf0
 800570e:	4393      	bics	r3, r2
 8005710:	0019      	movs	r1, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	4b4a      	ldr	r3, [pc, #296]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 8005718:	430a      	orrs	r2, r1
 800571a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2201      	movs	r2, #1
 8005722:	4013      	ands	r3, r2
 8005724:	d04c      	beq.n	80057c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b01      	cmp	r3, #1
 800572c:	d107      	bne.n	800573e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800572e:	4b44      	ldr	r3, [pc, #272]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	2380      	movs	r3, #128	; 0x80
 8005734:	029b      	lsls	r3, r3, #10
 8005736:	4013      	ands	r3, r2
 8005738:	d120      	bne.n	800577c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e07a      	b.n	8005834 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d107      	bne.n	8005756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005746:	4b3e      	ldr	r3, [pc, #248]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	2380      	movs	r3, #128	; 0x80
 800574c:	049b      	lsls	r3, r3, #18
 800574e:	4013      	ands	r3, r2
 8005750:	d114      	bne.n	800577c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e06e      	b.n	8005834 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	2b03      	cmp	r3, #3
 800575c:	d107      	bne.n	800576e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800575e:	4b38      	ldr	r3, [pc, #224]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 8005760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005762:	2380      	movs	r3, #128	; 0x80
 8005764:	025b      	lsls	r3, r3, #9
 8005766:	4013      	ands	r3, r2
 8005768:	d108      	bne.n	800577c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e062      	b.n	8005834 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800576e:	4b34      	ldr	r3, [pc, #208]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2202      	movs	r2, #2
 8005774:	4013      	ands	r3, r2
 8005776:	d101      	bne.n	800577c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e05b      	b.n	8005834 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800577c:	4b30      	ldr	r3, [pc, #192]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2203      	movs	r2, #3
 8005782:	4393      	bics	r3, r2
 8005784:	0019      	movs	r1, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	4b2d      	ldr	r3, [pc, #180]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005790:	f7ff f8e6 	bl	8004960 <HAL_GetTick>
 8005794:	0003      	movs	r3, r0
 8005796:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005798:	e009      	b.n	80057ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800579a:	f7ff f8e1 	bl	8004960 <HAL_GetTick>
 800579e:	0002      	movs	r2, r0
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	4a27      	ldr	r2, [pc, #156]	; (8005844 <HAL_RCC_ClockConfig+0x1a4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e042      	b.n	8005834 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ae:	4b24      	ldr	r3, [pc, #144]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	220c      	movs	r2, #12
 80057b4:	401a      	ands	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	429a      	cmp	r2, r3
 80057be:	d1ec      	bne.n	800579a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057c0:	4b1e      	ldr	r3, [pc, #120]	; (800583c <HAL_RCC_ClockConfig+0x19c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2201      	movs	r2, #1
 80057c6:	4013      	ands	r3, r2
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d211      	bcs.n	80057f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ce:	4b1b      	ldr	r3, [pc, #108]	; (800583c <HAL_RCC_ClockConfig+0x19c>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2201      	movs	r2, #1
 80057d4:	4393      	bics	r3, r2
 80057d6:	0019      	movs	r1, r3
 80057d8:	4b18      	ldr	r3, [pc, #96]	; (800583c <HAL_RCC_ClockConfig+0x19c>)
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	430a      	orrs	r2, r1
 80057de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057e0:	4b16      	ldr	r3, [pc, #88]	; (800583c <HAL_RCC_ClockConfig+0x19c>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2201      	movs	r2, #1
 80057e6:	4013      	ands	r3, r2
 80057e8:	683a      	ldr	r2, [r7, #0]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d001      	beq.n	80057f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e020      	b.n	8005834 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2204      	movs	r2, #4
 80057f8:	4013      	ands	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80057fc:	4b10      	ldr	r3, [pc, #64]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	4a11      	ldr	r2, [pc, #68]	; (8005848 <HAL_RCC_ClockConfig+0x1a8>)
 8005802:	4013      	ands	r3, r2
 8005804:	0019      	movs	r1, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68da      	ldr	r2, [r3, #12]
 800580a:	4b0d      	ldr	r3, [pc, #52]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 800580c:	430a      	orrs	r2, r1
 800580e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005810:	f000 f820 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8005814:	0001      	movs	r1, r0
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <HAL_RCC_ClockConfig+0x1a0>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	091b      	lsrs	r3, r3, #4
 800581c:	220f      	movs	r2, #15
 800581e:	4013      	ands	r3, r2
 8005820:	4a0a      	ldr	r2, [pc, #40]	; (800584c <HAL_RCC_ClockConfig+0x1ac>)
 8005822:	5cd3      	ldrb	r3, [r2, r3]
 8005824:	000a      	movs	r2, r1
 8005826:	40da      	lsrs	r2, r3
 8005828:	4b09      	ldr	r3, [pc, #36]	; (8005850 <HAL_RCC_ClockConfig+0x1b0>)
 800582a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800582c:	2000      	movs	r0, #0
 800582e:	f7fe fe47 	bl	80044c0 <HAL_InitTick>
  
  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	0018      	movs	r0, r3
 8005836:	46bd      	mov	sp, r7
 8005838:	b004      	add	sp, #16
 800583a:	bd80      	pop	{r7, pc}
 800583c:	40022000 	.word	0x40022000
 8005840:	40021000 	.word	0x40021000
 8005844:	00001388 	.word	0x00001388
 8005848:	fffff8ff 	.word	0xfffff8ff
 800584c:	08010c2c 	.word	0x08010c2c
 8005850:	20000000 	.word	0x20000000

08005854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005854:	b590      	push	{r4, r7, lr}
 8005856:	b08f      	sub	sp, #60	; 0x3c
 8005858:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800585a:	2314      	movs	r3, #20
 800585c:	18fb      	adds	r3, r7, r3
 800585e:	4a38      	ldr	r2, [pc, #224]	; (8005940 <HAL_RCC_GetSysClockFreq+0xec>)
 8005860:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005862:	c313      	stmia	r3!, {r0, r1, r4}
 8005864:	6812      	ldr	r2, [r2, #0]
 8005866:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005868:	1d3b      	adds	r3, r7, #4
 800586a:	4a36      	ldr	r2, [pc, #216]	; (8005944 <HAL_RCC_GetSysClockFreq+0xf0>)
 800586c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800586e:	c313      	stmia	r3!, {r0, r1, r4}
 8005870:	6812      	ldr	r2, [r2, #0]
 8005872:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005878:	2300      	movs	r3, #0
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
 800587c:	2300      	movs	r3, #0
 800587e:	637b      	str	r3, [r7, #52]	; 0x34
 8005880:	2300      	movs	r3, #0
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005888:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <HAL_RCC_GetSysClockFreq+0xf4>)
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	220c      	movs	r2, #12
 8005892:	4013      	ands	r3, r2
 8005894:	2b0c      	cmp	r3, #12
 8005896:	d047      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0xd4>
 8005898:	d849      	bhi.n	800592e <HAL_RCC_GetSysClockFreq+0xda>
 800589a:	2b04      	cmp	r3, #4
 800589c:	d002      	beq.n	80058a4 <HAL_RCC_GetSysClockFreq+0x50>
 800589e:	2b08      	cmp	r3, #8
 80058a0:	d003      	beq.n	80058aa <HAL_RCC_GetSysClockFreq+0x56>
 80058a2:	e044      	b.n	800592e <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80058a4:	4b29      	ldr	r3, [pc, #164]	; (800594c <HAL_RCC_GetSysClockFreq+0xf8>)
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058a8:	e044      	b.n	8005934 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	0c9b      	lsrs	r3, r3, #18
 80058ae:	220f      	movs	r2, #15
 80058b0:	4013      	ands	r3, r2
 80058b2:	2214      	movs	r2, #20
 80058b4:	18ba      	adds	r2, r7, r2
 80058b6:	5cd3      	ldrb	r3, [r2, r3]
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80058ba:	4b23      	ldr	r3, [pc, #140]	; (8005948 <HAL_RCC_GetSysClockFreq+0xf4>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	220f      	movs	r2, #15
 80058c0:	4013      	ands	r3, r2
 80058c2:	1d3a      	adds	r2, r7, #4
 80058c4:	5cd3      	ldrb	r3, [r2, r3]
 80058c6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ca:	23c0      	movs	r3, #192	; 0xc0
 80058cc:	025b      	lsls	r3, r3, #9
 80058ce:	401a      	ands	r2, r3
 80058d0:	2380      	movs	r3, #128	; 0x80
 80058d2:	025b      	lsls	r3, r3, #9
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d109      	bne.n	80058ec <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80058d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058da:	481c      	ldr	r0, [pc, #112]	; (800594c <HAL_RCC_GetSysClockFreq+0xf8>)
 80058dc:	f7fa fc30 	bl	8000140 <__udivsi3>
 80058e0:	0003      	movs	r3, r0
 80058e2:	001a      	movs	r2, r3
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	4353      	muls	r3, r2
 80058e8:	637b      	str	r3, [r7, #52]	; 0x34
 80058ea:	e01a      	b.n	8005922 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80058ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ee:	23c0      	movs	r3, #192	; 0xc0
 80058f0:	025b      	lsls	r3, r3, #9
 80058f2:	401a      	ands	r2, r3
 80058f4:	23c0      	movs	r3, #192	; 0xc0
 80058f6:	025b      	lsls	r3, r3, #9
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d109      	bne.n	8005910 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80058fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058fe:	4814      	ldr	r0, [pc, #80]	; (8005950 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005900:	f7fa fc1e 	bl	8000140 <__udivsi3>
 8005904:	0003      	movs	r3, r0
 8005906:	001a      	movs	r2, r3
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	4353      	muls	r3, r2
 800590c:	637b      	str	r3, [r7, #52]	; 0x34
 800590e:	e008      	b.n	8005922 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005910:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005912:	480e      	ldr	r0, [pc, #56]	; (800594c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005914:	f7fa fc14 	bl	8000140 <__udivsi3>
 8005918:	0003      	movs	r3, r0
 800591a:	001a      	movs	r2, r3
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	4353      	muls	r3, r2
 8005920:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005924:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005926:	e005      	b.n	8005934 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005928:	4b09      	ldr	r3, [pc, #36]	; (8005950 <HAL_RCC_GetSysClockFreq+0xfc>)
 800592a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800592c:	e002      	b.n	8005934 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800592e:	4b07      	ldr	r3, [pc, #28]	; (800594c <HAL_RCC_GetSysClockFreq+0xf8>)
 8005930:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005932:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005936:	0018      	movs	r0, r3
 8005938:	46bd      	mov	sp, r7
 800593a:	b00f      	add	sp, #60	; 0x3c
 800593c:	bd90      	pop	{r4, r7, pc}
 800593e:	46c0      	nop			; (mov r8, r8)
 8005940:	08010b74 	.word	0x08010b74
 8005944:	08010b84 	.word	0x08010b84
 8005948:	40021000 	.word	0x40021000
 800594c:	007a1200 	.word	0x007a1200
 8005950:	02dc6c00 	.word	0x02dc6c00

08005954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005958:	4b02      	ldr	r3, [pc, #8]	; (8005964 <HAL_RCC_GetHCLKFreq+0x10>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	20000000 	.word	0x20000000

08005968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800596c:	f7ff fff2 	bl	8005954 <HAL_RCC_GetHCLKFreq>
 8005970:	0001      	movs	r1, r0
 8005972:	4b06      	ldr	r3, [pc, #24]	; (800598c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	0a1b      	lsrs	r3, r3, #8
 8005978:	2207      	movs	r2, #7
 800597a:	4013      	ands	r3, r2
 800597c:	4a04      	ldr	r2, [pc, #16]	; (8005990 <HAL_RCC_GetPCLK1Freq+0x28>)
 800597e:	5cd3      	ldrb	r3, [r2, r3]
 8005980:	40d9      	lsrs	r1, r3
 8005982:	000b      	movs	r3, r1
}    
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	40021000 	.word	0x40021000
 8005990:	08010c3c 	.word	0x08010c3c

08005994 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2207      	movs	r2, #7
 80059a2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80059a4:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <HAL_RCC_GetClockConfig+0x4c>)
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	2203      	movs	r2, #3
 80059aa:	401a      	ands	r2, r3
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80059b0:	4b0b      	ldr	r3, [pc, #44]	; (80059e0 <HAL_RCC_GetClockConfig+0x4c>)
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	22f0      	movs	r2, #240	; 0xf0
 80059b6:	401a      	ands	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 80059bc:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <HAL_RCC_GetClockConfig+0x4c>)
 80059be:	685a      	ldr	r2, [r3, #4]
 80059c0:	23e0      	movs	r3, #224	; 0xe0
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	401a      	ands	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 80059ca:	4b06      	ldr	r3, [pc, #24]	; (80059e4 <HAL_RCC_GetClockConfig+0x50>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2201      	movs	r2, #1
 80059d0:	401a      	ands	r2, r3
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	601a      	str	r2, [r3, #0]
}
 80059d6:	46c0      	nop			; (mov r8, r8)
 80059d8:	46bd      	mov	sp, r7
 80059da:	b002      	add	sp, #8
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	40021000 	.word	0x40021000
 80059e4:	40022000 	.word	0x40022000

080059e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	2380      	movs	r3, #128	; 0x80
 80059fe:	025b      	lsls	r3, r3, #9
 8005a00:	4013      	ands	r3, r2
 8005a02:	d100      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005a04:	e08e      	b.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005a06:	2017      	movs	r0, #23
 8005a08:	183b      	adds	r3, r7, r0
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0e:	4b6e      	ldr	r3, [pc, #440]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a10:	69da      	ldr	r2, [r3, #28]
 8005a12:	2380      	movs	r3, #128	; 0x80
 8005a14:	055b      	lsls	r3, r3, #21
 8005a16:	4013      	ands	r3, r2
 8005a18:	d110      	bne.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a1a:	4b6b      	ldr	r3, [pc, #428]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a1c:	69da      	ldr	r2, [r3, #28]
 8005a1e:	4b6a      	ldr	r3, [pc, #424]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a20:	2180      	movs	r1, #128	; 0x80
 8005a22:	0549      	lsls	r1, r1, #21
 8005a24:	430a      	orrs	r2, r1
 8005a26:	61da      	str	r2, [r3, #28]
 8005a28:	4b67      	ldr	r3, [pc, #412]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a2a:	69da      	ldr	r2, [r3, #28]
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	055b      	lsls	r3, r3, #21
 8005a30:	4013      	ands	r3, r2
 8005a32:	60bb      	str	r3, [r7, #8]
 8005a34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a36:	183b      	adds	r3, r7, r0
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a3c:	4b63      	ldr	r3, [pc, #396]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	4013      	ands	r3, r2
 8005a46:	d11a      	bne.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a48:	4b60      	ldr	r3, [pc, #384]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	4b5f      	ldr	r3, [pc, #380]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a4e:	2180      	movs	r1, #128	; 0x80
 8005a50:	0049      	lsls	r1, r1, #1
 8005a52:	430a      	orrs	r2, r1
 8005a54:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a56:	f7fe ff83 	bl	8004960 <HAL_GetTick>
 8005a5a:	0003      	movs	r3, r0
 8005a5c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a5e:	e008      	b.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a60:	f7fe ff7e 	bl	8004960 <HAL_GetTick>
 8005a64:	0002      	movs	r2, r0
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	1ad3      	subs	r3, r2, r3
 8005a6a:	2b64      	cmp	r3, #100	; 0x64
 8005a6c:	d901      	bls.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8005a6e:	2303      	movs	r3, #3
 8005a70:	e0a6      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a72:	4b56      	ldr	r3, [pc, #344]	; (8005bcc <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	2380      	movs	r3, #128	; 0x80
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d0f0      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005a7e:	4b52      	ldr	r3, [pc, #328]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005a80:	6a1a      	ldr	r2, [r3, #32]
 8005a82:	23c0      	movs	r3, #192	; 0xc0
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4013      	ands	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d034      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	23c0      	movs	r3, #192	; 0xc0
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4013      	ands	r3, r2
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d02c      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005aa0:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	4a4a      	ldr	r2, [pc, #296]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005aaa:	4b47      	ldr	r3, [pc, #284]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005aac:	6a1a      	ldr	r2, [r3, #32]
 8005aae:	4b46      	ldr	r3, [pc, #280]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ab0:	2180      	movs	r1, #128	; 0x80
 8005ab2:	0249      	lsls	r1, r1, #9
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ab8:	4b43      	ldr	r3, [pc, #268]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005aba:	6a1a      	ldr	r2, [r3, #32]
 8005abc:	4b42      	ldr	r3, [pc, #264]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005abe:	4945      	ldr	r1, [pc, #276]	; (8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8005ac0:	400a      	ands	r2, r1
 8005ac2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ac4:	4b40      	ldr	r3, [pc, #256]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2201      	movs	r2, #1
 8005ace:	4013      	ands	r3, r2
 8005ad0:	d013      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad2:	f7fe ff45 	bl	8004960 <HAL_GetTick>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ada:	e009      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005adc:	f7fe ff40 	bl	8004960 <HAL_GetTick>
 8005ae0:	0002      	movs	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	4a3c      	ldr	r2, [pc, #240]	; (8005bd8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e067      	b.n	8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af0:	4b35      	ldr	r3, [pc, #212]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	2202      	movs	r2, #2
 8005af6:	4013      	ands	r3, r2
 8005af8:	d0f0      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005afa:	4b33      	ldr	r3, [pc, #204]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	4a34      	ldr	r2, [pc, #208]	; (8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8005b00:	4013      	ands	r3, r2
 8005b02:	0019      	movs	r1, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	4b2f      	ldr	r3, [pc, #188]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b0a:	430a      	orrs	r2, r1
 8005b0c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b0e:	2317      	movs	r3, #23
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d105      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b18:	4b2b      	ldr	r3, [pc, #172]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b1a:	69da      	ldr	r2, [r3, #28]
 8005b1c:	4b2a      	ldr	r3, [pc, #168]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b1e:	492f      	ldr	r1, [pc, #188]	; (8005bdc <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8005b20:	400a      	ands	r2, r1
 8005b22:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b2e:	4b26      	ldr	r3, [pc, #152]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	2203      	movs	r2, #3
 8005b34:	4393      	bics	r3, r2
 8005b36:	0019      	movs	r1, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689a      	ldr	r2, [r3, #8]
 8005b3c:	4b22      	ldr	r3, [pc, #136]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2202      	movs	r2, #2
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d009      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b4c:	4b1e      	ldr	r3, [pc, #120]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b50:	4a23      	ldr	r2, [pc, #140]	; (8005be0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	0019      	movs	r1, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	4b1b      	ldr	r3, [pc, #108]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b5c:	430a      	orrs	r2, r1
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	2380      	movs	r3, #128	; 0x80
 8005b66:	02db      	lsls	r3, r3, #11
 8005b68:	4013      	ands	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b6c:	4b16      	ldr	r3, [pc, #88]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b70:	4a1c      	ldr	r2, [pc, #112]	; (8005be4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8005b72:	4013      	ands	r3, r2
 8005b74:	0019      	movs	r1, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	4b13      	ldr	r3, [pc, #76]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b7c:	430a      	orrs	r2, r1
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2220      	movs	r2, #32
 8005b86:	4013      	ands	r3, r2
 8005b88:	d009      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b8a:	4b0f      	ldr	r3, [pc, #60]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8e:	2210      	movs	r2, #16
 8005b90:	4393      	bics	r3, r2
 8005b92:	0019      	movs	r1, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	695a      	ldr	r2, [r3, #20]
 8005b98:	4b0b      	ldr	r3, [pc, #44]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	2380      	movs	r3, #128	; 0x80
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	d009      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005baa:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bae:	2240      	movs	r2, #64	; 0x40
 8005bb0:	4393      	bics	r3, r2
 8005bb2:	0019      	movs	r1, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699a      	ldr	r2, [r3, #24]
 8005bb8:	4b03      	ldr	r3, [pc, #12]	; (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005bba:	430a      	orrs	r2, r1
 8005bbc:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	0018      	movs	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	b006      	add	sp, #24
 8005bc6:	bd80      	pop	{r7, pc}
 8005bc8:	40021000 	.word	0x40021000
 8005bcc:	40007000 	.word	0x40007000
 8005bd0:	fffffcff 	.word	0xfffffcff
 8005bd4:	fffeffff 	.word	0xfffeffff
 8005bd8:	00001388 	.word	0x00001388
 8005bdc:	efffffff 	.word	0xefffffff
 8005be0:	fffcffff 	.word	0xfffcffff
 8005be4:	fff3ffff 	.word	0xfff3ffff

08005be8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d101      	bne.n	8005bfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e042      	b.n	8005c80 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	223d      	movs	r2, #61	; 0x3d
 8005bfe:	5c9b      	ldrb	r3, [r3, r2]
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d107      	bne.n	8005c16 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	223c      	movs	r2, #60	; 0x3c
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	0018      	movs	r0, r3
 8005c12:	f000 f839 	bl	8005c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	223d      	movs	r2, #61	; 0x3d
 8005c1a:	2102      	movs	r1, #2
 8005c1c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	3304      	adds	r3, #4
 8005c26:	0019      	movs	r1, r3
 8005c28:	0010      	movs	r0, r2
 8005c2a:	f000 f9bd 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2246      	movs	r2, #70	; 0x46
 8005c32:	2101      	movs	r1, #1
 8005c34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	223e      	movs	r2, #62	; 0x3e
 8005c3a:	2101      	movs	r1, #1
 8005c3c:	5499      	strb	r1, [r3, r2]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	223f      	movs	r2, #63	; 0x3f
 8005c42:	2101      	movs	r1, #1
 8005c44:	5499      	strb	r1, [r3, r2]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2240      	movs	r2, #64	; 0x40
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	5499      	strb	r1, [r3, r2]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2241      	movs	r2, #65	; 0x41
 8005c52:	2101      	movs	r1, #1
 8005c54:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2242      	movs	r2, #66	; 0x42
 8005c5a:	2101      	movs	r1, #1
 8005c5c:	5499      	strb	r1, [r3, r2]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2243      	movs	r2, #67	; 0x43
 8005c62:	2101      	movs	r1, #1
 8005c64:	5499      	strb	r1, [r3, r2]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2244      	movs	r2, #68	; 0x44
 8005c6a:	2101      	movs	r1, #1
 8005c6c:	5499      	strb	r1, [r3, r2]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2245      	movs	r2, #69	; 0x45
 8005c72:	2101      	movs	r1, #1
 8005c74:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	223d      	movs	r2, #61	; 0x3d
 8005c7a:	2101      	movs	r1, #1
 8005c7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c7e:	2300      	movs	r3, #0
}
 8005c80:	0018      	movs	r0, r3
 8005c82:	46bd      	mov	sp, r7
 8005c84:	b002      	add	sp, #8
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b082      	sub	sp, #8
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c90:	46c0      	nop			; (mov r8, r8)
 8005c92:	46bd      	mov	sp, r7
 8005c94:	b002      	add	sp, #8
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	223d      	movs	r2, #61	; 0x3d
 8005ca4:	5c9b      	ldrb	r3, [r3, r2]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d001      	beq.n	8005cb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e03b      	b.n	8005d28 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	223d      	movs	r2, #61	; 0x3d
 8005cb4:	2102      	movs	r1, #2
 8005cb6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2101      	movs	r1, #1
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a18      	ldr	r2, [pc, #96]	; (8005d30 <HAL_TIM_Base_Start_IT+0x98>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d00f      	beq.n	8005cf2 <HAL_TIM_Base_Start_IT+0x5a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	2380      	movs	r3, #128	; 0x80
 8005cd8:	05db      	lsls	r3, r3, #23
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d009      	beq.n	8005cf2 <HAL_TIM_Base_Start_IT+0x5a>
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a14      	ldr	r2, [pc, #80]	; (8005d34 <HAL_TIM_Base_Start_IT+0x9c>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d004      	beq.n	8005cf2 <HAL_TIM_Base_Start_IT+0x5a>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a12      	ldr	r2, [pc, #72]	; (8005d38 <HAL_TIM_Base_Start_IT+0xa0>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d111      	bne.n	8005d16 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	2207      	movs	r2, #7
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b06      	cmp	r3, #6
 8005d02:	d010      	beq.n	8005d26 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2101      	movs	r1, #1
 8005d10:	430a      	orrs	r2, r1
 8005d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d14:	e007      	b.n	8005d26 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2101      	movs	r1, #1
 8005d22:	430a      	orrs	r2, r1
 8005d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	0018      	movs	r0, r3
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	b004      	add	sp, #16
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	40012c00 	.word	0x40012c00
 8005d34:	40000400 	.word	0x40000400
 8005d38:	40014000 	.word	0x40014000

08005d3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d124      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d11d      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2203      	movs	r2, #3
 8005d66:	4252      	negs	r2, r2
 8005d68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2203      	movs	r2, #3
 8005d78:	4013      	ands	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f000 f8fa 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005d84:	e007      	b.n	8005d96 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f000 f8ed 	bl	8005f68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	0018      	movs	r0, r3
 8005d92:	f000 f8f9 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2204      	movs	r2, #4
 8005da4:	4013      	ands	r3, r2
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d125      	bne.n	8005df6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	2204      	movs	r2, #4
 8005db2:	4013      	ands	r3, r2
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d11e      	bne.n	8005df6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2205      	movs	r2, #5
 8005dbe:	4252      	negs	r2, r2
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699a      	ldr	r2, [r3, #24]
 8005dce:	23c0      	movs	r3, #192	; 0xc0
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	d004      	beq.n	8005de0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f000 f8cd 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005dde:	e007      	b.n	8005df0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	0018      	movs	r0, r3
 8005de4:	f000 f8c0 	bl	8005f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 f8cc 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	2208      	movs	r2, #8
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b08      	cmp	r3, #8
 8005e02:	d124      	bne.n	8005e4e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	2208      	movs	r2, #8
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	2b08      	cmp	r3, #8
 8005e10:	d11d      	bne.n	8005e4e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2209      	movs	r2, #9
 8005e18:	4252      	negs	r2, r2
 8005e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2204      	movs	r2, #4
 8005e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	2203      	movs	r2, #3
 8005e2a:	4013      	ands	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	0018      	movs	r0, r3
 8005e32:	f000 f8a1 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005e36:	e007      	b.n	8005e48 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	0018      	movs	r0, r3
 8005e3c:	f000 f894 	bl	8005f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	0018      	movs	r0, r3
 8005e44:	f000 f8a0 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	2210      	movs	r2, #16
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b10      	cmp	r3, #16
 8005e5a:	d125      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	2210      	movs	r2, #16
 8005e64:	4013      	ands	r3, r2
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d11e      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2211      	movs	r2, #17
 8005e70:	4252      	negs	r2, r2
 8005e72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2208      	movs	r2, #8
 8005e78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69da      	ldr	r2, [r3, #28]
 8005e80:	23c0      	movs	r3, #192	; 0xc0
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4013      	ands	r3, r2
 8005e86:	d004      	beq.n	8005e92 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	0018      	movs	r0, r3
 8005e8c:	f000 f874 	bl	8005f78 <HAL_TIM_IC_CaptureCallback>
 8005e90:	e007      	b.n	8005ea2 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	0018      	movs	r0, r3
 8005e96:	f000 f867 	bl	8005f68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	f000 f873 	bl	8005f88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d10f      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d108      	bne.n	8005ed6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2202      	movs	r2, #2
 8005eca:	4252      	negs	r2, r2
 8005ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f7fd fe43 	bl	8003b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	2280      	movs	r2, #128	; 0x80
 8005ede:	4013      	ands	r3, r2
 8005ee0:	2b80      	cmp	r3, #128	; 0x80
 8005ee2:	d10f      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	2280      	movs	r2, #128	; 0x80
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b80      	cmp	r3, #128	; 0x80
 8005ef0:	d108      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	2281      	movs	r2, #129	; 0x81
 8005ef8:	4252      	negs	r2, r2
 8005efa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	0018      	movs	r0, r3
 8005f00:	f000 f8da 	bl	80060b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2240      	movs	r2, #64	; 0x40
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b40      	cmp	r3, #64	; 0x40
 8005f10:	d10f      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2240      	movs	r2, #64	; 0x40
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b40      	cmp	r3, #64	; 0x40
 8005f1e:	d108      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2241      	movs	r2, #65	; 0x41
 8005f26:	4252      	negs	r2, r2
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 f833 	bl	8005f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2220      	movs	r2, #32
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b20      	cmp	r3, #32
 8005f3e:	d10f      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b20      	cmp	r3, #32
 8005f4c:	d108      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2221      	movs	r2, #33	; 0x21
 8005f54:	4252      	negs	r2, r2
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f000 f8a4 	bl	80060a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f60:	46c0      	nop			; (mov r8, r8)
 8005f62:	46bd      	mov	sp, r7
 8005f64:	b002      	add	sp, #8
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f70:	46c0      	nop			; (mov r8, r8)
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b002      	add	sp, #8
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b082      	sub	sp, #8
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f80:	46c0      	nop			; (mov r8, r8)
 8005f82:	46bd      	mov	sp, r7
 8005f84:	b002      	add	sp, #8
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f90:	46c0      	nop			; (mov r8, r8)
 8005f92:	46bd      	mov	sp, r7
 8005f94:	b002      	add	sp, #8
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa0:	46c0      	nop			; (mov r8, r8)
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a34      	ldr	r2, [pc, #208]	; (800608c <TIM_Base_SetConfig+0xe4>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d008      	beq.n	8005fd2 <TIM_Base_SetConfig+0x2a>
 8005fc0:	687a      	ldr	r2, [r7, #4]
 8005fc2:	2380      	movs	r3, #128	; 0x80
 8005fc4:	05db      	lsls	r3, r3, #23
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d003      	beq.n	8005fd2 <TIM_Base_SetConfig+0x2a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a30      	ldr	r2, [pc, #192]	; (8006090 <TIM_Base_SetConfig+0xe8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d108      	bne.n	8005fe4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2270      	movs	r2, #112	; 0x70
 8005fd6:	4393      	bics	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a29      	ldr	r2, [pc, #164]	; (800608c <TIM_Base_SetConfig+0xe4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <TIM_Base_SetConfig+0x76>
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	2380      	movs	r3, #128	; 0x80
 8005ff0:	05db      	lsls	r3, r3, #23
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d013      	beq.n	800601e <TIM_Base_SetConfig+0x76>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a25      	ldr	r2, [pc, #148]	; (8006090 <TIM_Base_SetConfig+0xe8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00f      	beq.n	800601e <TIM_Base_SetConfig+0x76>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a24      	ldr	r2, [pc, #144]	; (8006094 <TIM_Base_SetConfig+0xec>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00b      	beq.n	800601e <TIM_Base_SetConfig+0x76>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a23      	ldr	r2, [pc, #140]	; (8006098 <TIM_Base_SetConfig+0xf0>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d007      	beq.n	800601e <TIM_Base_SetConfig+0x76>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a22      	ldr	r2, [pc, #136]	; (800609c <TIM_Base_SetConfig+0xf4>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <TIM_Base_SetConfig+0x76>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a21      	ldr	r2, [pc, #132]	; (80060a0 <TIM_Base_SetConfig+0xf8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d108      	bne.n	8006030 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4a20      	ldr	r2, [pc, #128]	; (80060a4 <TIM_Base_SetConfig+0xfc>)
 8006022:	4013      	ands	r3, r2
 8006024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2280      	movs	r2, #128	; 0x80
 8006034:	4393      	bics	r3, r2
 8006036:	001a      	movs	r2, r3
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	4313      	orrs	r3, r2
 800603e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	689a      	ldr	r2, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a0c      	ldr	r2, [pc, #48]	; (800608c <TIM_Base_SetConfig+0xe4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d00b      	beq.n	8006076 <TIM_Base_SetConfig+0xce>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a0d      	ldr	r2, [pc, #52]	; (8006098 <TIM_Base_SetConfig+0xf0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d007      	beq.n	8006076 <TIM_Base_SetConfig+0xce>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a0c      	ldr	r2, [pc, #48]	; (800609c <TIM_Base_SetConfig+0xf4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d003      	beq.n	8006076 <TIM_Base_SetConfig+0xce>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a0b      	ldr	r2, [pc, #44]	; (80060a0 <TIM_Base_SetConfig+0xf8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d103      	bne.n	800607e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	615a      	str	r2, [r3, #20]
}
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b004      	add	sp, #16
 800608a:	bd80      	pop	{r7, pc}
 800608c:	40012c00 	.word	0x40012c00
 8006090:	40000400 	.word	0x40000400
 8006094:	40002000 	.word	0x40002000
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800
 80060a4:	fffffcff 	.word	0xfffffcff

080060a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060b0:	46c0      	nop			; (mov r8, r8)
 80060b2:	46bd      	mov	sp, r7
 80060b4:	b002      	add	sp, #8
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060c0:	46c0      	nop			; (mov r8, r8)
 80060c2:	46bd      	mov	sp, r7
 80060c4:	b002      	add	sp, #8
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e044      	b.n	8006164 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d107      	bne.n	80060f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2274      	movs	r2, #116	; 0x74
 80060e6:	2100      	movs	r1, #0
 80060e8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	0018      	movs	r0, r3
 80060ee:	f7fe fb4d 	bl	800478c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2224      	movs	r2, #36	; 0x24
 80060f6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2101      	movs	r1, #1
 8006104:	438a      	bics	r2, r1
 8006106:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	0018      	movs	r0, r3
 800610c:	f000 fd28 	bl	8006b60 <UART_SetConfig>
 8006110:	0003      	movs	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e024      	b.n	8006164 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b00      	cmp	r3, #0
 8006120:	d003      	beq.n	800612a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	0018      	movs	r0, r3
 8006126:	f000 ff03 	bl	8006f30 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685a      	ldr	r2, [r3, #4]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	490d      	ldr	r1, [pc, #52]	; (800616c <HAL_UART_Init+0xa4>)
 8006136:	400a      	ands	r2, r1
 8006138:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689a      	ldr	r2, [r3, #8]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	212a      	movs	r1, #42	; 0x2a
 8006146:	438a      	bics	r2, r1
 8006148:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2101      	movs	r1, #1
 8006156:	430a      	orrs	r2, r1
 8006158:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	0018      	movs	r0, r3
 800615e:	f000 ff9b 	bl	8007098 <UART_CheckIdleState>
 8006162:	0003      	movs	r3, r0
}
 8006164:	0018      	movs	r0, r3
 8006166:	46bd      	mov	sp, r7
 8006168:	b002      	add	sp, #8
 800616a:	bd80      	pop	{r7, pc}
 800616c:	ffffb7ff 	.word	0xffffb7ff

08006170 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af02      	add	r7, sp, #8
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	1dbb      	adds	r3, r7, #6
 800617e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006184:	2b20      	cmp	r3, #32
 8006186:	d000      	beq.n	800618a <HAL_UART_Transmit+0x1a>
 8006188:	e096      	b.n	80062b8 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_UART_Transmit+0x28>
 8006190:	1dbb      	adds	r3, r7, #6
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e08e      	b.n	80062ba <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	689a      	ldr	r2, [r3, #8]
 80061a0:	2380      	movs	r3, #128	; 0x80
 80061a2:	015b      	lsls	r3, r3, #5
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d109      	bne.n	80061bc <HAL_UART_Transmit+0x4c>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d105      	bne.n	80061bc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2201      	movs	r2, #1
 80061b4:	4013      	ands	r3, r2
 80061b6:	d001      	beq.n	80061bc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e07e      	b.n	80062ba <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2274      	movs	r2, #116	; 0x74
 80061c0:	5c9b      	ldrb	r3, [r3, r2]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d101      	bne.n	80061ca <HAL_UART_Transmit+0x5a>
 80061c6:	2302      	movs	r3, #2
 80061c8:	e077      	b.n	80062ba <HAL_UART_Transmit+0x14a>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2274      	movs	r2, #116	; 0x74
 80061ce:	2101      	movs	r1, #1
 80061d0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2280      	movs	r2, #128	; 0x80
 80061d6:	2100      	movs	r1, #0
 80061d8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2221      	movs	r2, #33	; 0x21
 80061de:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061e0:	f7fe fbbe 	bl	8004960 <HAL_GetTick>
 80061e4:	0003      	movs	r3, r0
 80061e6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	1dba      	adds	r2, r7, #6
 80061ec:	2150      	movs	r1, #80	; 0x50
 80061ee:	8812      	ldrh	r2, [r2, #0]
 80061f0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	1dba      	adds	r2, r7, #6
 80061f6:	2152      	movs	r1, #82	; 0x52
 80061f8:	8812      	ldrh	r2, [r2, #0]
 80061fa:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	2380      	movs	r3, #128	; 0x80
 8006202:	015b      	lsls	r3, r3, #5
 8006204:	429a      	cmp	r2, r3
 8006206:	d108      	bne.n	800621a <HAL_UART_Transmit+0xaa>
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d104      	bne.n	800621a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006210:	2300      	movs	r3, #0
 8006212:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	61bb      	str	r3, [r7, #24]
 8006218:	e003      	b.n	8006222 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800621e:	2300      	movs	r3, #0
 8006220:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2274      	movs	r2, #116	; 0x74
 8006226:	2100      	movs	r1, #0
 8006228:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800622a:	e02d      	b.n	8006288 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	0013      	movs	r3, r2
 8006236:	2200      	movs	r2, #0
 8006238:	2180      	movs	r1, #128	; 0x80
 800623a:	f000 ff75 	bl	8007128 <UART_WaitOnFlagUntilTimeout>
 800623e:	1e03      	subs	r3, r0, #0
 8006240:	d001      	beq.n	8006246 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e039      	b.n	80062ba <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10b      	bne.n	8006264 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	881a      	ldrh	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	05d2      	lsls	r2, r2, #23
 8006256:	0dd2      	lsrs	r2, r2, #23
 8006258:	b292      	uxth	r2, r2
 800625a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	3302      	adds	r3, #2
 8006260:	61bb      	str	r3, [r7, #24]
 8006262:	e008      	b.n	8006276 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	781a      	ldrb	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	b292      	uxth	r2, r2
 800626e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2252      	movs	r2, #82	; 0x52
 800627a:	5a9b      	ldrh	r3, [r3, r2]
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b299      	uxth	r1, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2252      	movs	r2, #82	; 0x52
 8006286:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2252      	movs	r2, #82	; 0x52
 800628c:	5a9b      	ldrh	r3, [r3, r2]
 800628e:	b29b      	uxth	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1cb      	bne.n	800622c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	0013      	movs	r3, r2
 800629e:	2200      	movs	r2, #0
 80062a0:	2140      	movs	r1, #64	; 0x40
 80062a2:	f000 ff41 	bl	8007128 <UART_WaitOnFlagUntilTimeout>
 80062a6:	1e03      	subs	r3, r0, #0
 80062a8:	d001      	beq.n	80062ae <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e005      	b.n	80062ba <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2220      	movs	r2, #32
 80062b2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e000      	b.n	80062ba <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80062b8:	2302      	movs	r3, #2
  }
}
 80062ba:	0018      	movs	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	b008      	add	sp, #32
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b08a      	sub	sp, #40	; 0x28
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	603b      	str	r3, [r7, #0]
 80062d0:	1dbb      	adds	r3, r7, #6
 80062d2:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d8:	2b20      	cmp	r3, #32
 80062da:	d000      	beq.n	80062de <HAL_UART_Receive+0x1a>
 80062dc:	e0da      	b.n	8006494 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d003      	beq.n	80062ec <HAL_UART_Receive+0x28>
 80062e4:	1dbb      	adds	r3, r7, #6
 80062e6:	881b      	ldrh	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e0d2      	b.n	8006496 <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	2380      	movs	r3, #128	; 0x80
 80062f6:	015b      	lsls	r3, r3, #5
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d109      	bne.n	8006310 <HAL_UART_Receive+0x4c>
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	2201      	movs	r2, #1
 8006308:	4013      	ands	r3, r2
 800630a:	d001      	beq.n	8006310 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e0c2      	b.n	8006496 <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2274      	movs	r2, #116	; 0x74
 8006314:	5c9b      	ldrb	r3, [r3, r2]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <HAL_UART_Receive+0x5a>
 800631a:	2302      	movs	r3, #2
 800631c:	e0bb      	b.n	8006496 <HAL_UART_Receive+0x1d2>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2274      	movs	r2, #116	; 0x74
 8006322:	2101      	movs	r1, #1
 8006324:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2280      	movs	r2, #128	; 0x80
 800632a:	2100      	movs	r1, #0
 800632c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2222      	movs	r2, #34	; 0x22
 8006332:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800633a:	f7fe fb11 	bl	8004960 <HAL_GetTick>
 800633e:	0003      	movs	r3, r0
 8006340:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1dba      	adds	r2, r7, #6
 8006346:	2158      	movs	r1, #88	; 0x58
 8006348:	8812      	ldrh	r2, [r2, #0]
 800634a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	1dba      	adds	r2, r7, #6
 8006350:	215a      	movs	r1, #90	; 0x5a
 8006352:	8812      	ldrh	r2, [r2, #0]
 8006354:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	689a      	ldr	r2, [r3, #8]
 800635a:	2380      	movs	r3, #128	; 0x80
 800635c:	015b      	lsls	r3, r3, #5
 800635e:	429a      	cmp	r2, r3
 8006360:	d10d      	bne.n	800637e <HAL_UART_Receive+0xba>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d104      	bne.n	8006374 <HAL_UART_Receive+0xb0>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	225c      	movs	r2, #92	; 0x5c
 800636e:	494c      	ldr	r1, [pc, #304]	; (80064a0 <HAL_UART_Receive+0x1dc>)
 8006370:	5299      	strh	r1, [r3, r2]
 8006372:	e02e      	b.n	80063d2 <HAL_UART_Receive+0x10e>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	225c      	movs	r2, #92	; 0x5c
 8006378:	21ff      	movs	r1, #255	; 0xff
 800637a:	5299      	strh	r1, [r3, r2]
 800637c:	e029      	b.n	80063d2 <HAL_UART_Receive+0x10e>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10d      	bne.n	80063a2 <HAL_UART_Receive+0xde>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <HAL_UART_Receive+0xd4>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	225c      	movs	r2, #92	; 0x5c
 8006392:	21ff      	movs	r1, #255	; 0xff
 8006394:	5299      	strh	r1, [r3, r2]
 8006396:	e01c      	b.n	80063d2 <HAL_UART_Receive+0x10e>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	225c      	movs	r2, #92	; 0x5c
 800639c:	217f      	movs	r1, #127	; 0x7f
 800639e:	5299      	strh	r1, [r3, r2]
 80063a0:	e017      	b.n	80063d2 <HAL_UART_Receive+0x10e>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	2380      	movs	r3, #128	; 0x80
 80063a8:	055b      	lsls	r3, r3, #21
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d10d      	bne.n	80063ca <HAL_UART_Receive+0x106>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d104      	bne.n	80063c0 <HAL_UART_Receive+0xfc>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	225c      	movs	r2, #92	; 0x5c
 80063ba:	217f      	movs	r1, #127	; 0x7f
 80063bc:	5299      	strh	r1, [r3, r2]
 80063be:	e008      	b.n	80063d2 <HAL_UART_Receive+0x10e>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	225c      	movs	r2, #92	; 0x5c
 80063c4:	213f      	movs	r1, #63	; 0x3f
 80063c6:	5299      	strh	r1, [r3, r2]
 80063c8:	e003      	b.n	80063d2 <HAL_UART_Receive+0x10e>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	225c      	movs	r2, #92	; 0x5c
 80063ce:	2100      	movs	r1, #0
 80063d0:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 80063d2:	2312      	movs	r3, #18
 80063d4:	18fb      	adds	r3, r7, r3
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	215c      	movs	r1, #92	; 0x5c
 80063da:	5a52      	ldrh	r2, [r2, r1]
 80063dc:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	2380      	movs	r3, #128	; 0x80
 80063e4:	015b      	lsls	r3, r3, #5
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d108      	bne.n	80063fc <HAL_UART_Receive+0x138>
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	61bb      	str	r3, [r7, #24]
 80063fa:	e003      	b.n	8006404 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006400:	2300      	movs	r3, #0
 8006402:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2274      	movs	r2, #116	; 0x74
 8006408:	2100      	movs	r1, #0
 800640a:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800640c:	e037      	b.n	800647e <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	0013      	movs	r3, r2
 8006418:	2200      	movs	r2, #0
 800641a:	2120      	movs	r1, #32
 800641c:	f000 fe84 	bl	8007128 <UART_WaitOnFlagUntilTimeout>
 8006420:	1e03      	subs	r3, r0, #0
 8006422:	d001      	beq.n	8006428 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e036      	b.n	8006496 <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10e      	bne.n	800644c <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006434:	b29b      	uxth	r3, r3
 8006436:	2212      	movs	r2, #18
 8006438:	18ba      	adds	r2, r7, r2
 800643a:	8812      	ldrh	r2, [r2, #0]
 800643c:	4013      	ands	r3, r2
 800643e:	b29a      	uxth	r2, r3
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	3302      	adds	r3, #2
 8006448:	61bb      	str	r3, [r7, #24]
 800644a:	e00f      	b.n	800646c <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006452:	b29b      	uxth	r3, r3
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2212      	movs	r2, #18
 8006458:	18ba      	adds	r2, r7, r2
 800645a:	8812      	ldrh	r2, [r2, #0]
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	4013      	ands	r3, r2
 8006460:	b2da      	uxtb	r2, r3
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	3301      	adds	r3, #1
 800646a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	225a      	movs	r2, #90	; 0x5a
 8006470:	5a9b      	ldrh	r3, [r3, r2]
 8006472:	b29b      	uxth	r3, r3
 8006474:	3b01      	subs	r3, #1
 8006476:	b299      	uxth	r1, r3
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	225a      	movs	r2, #90	; 0x5a
 800647c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	225a      	movs	r2, #90	; 0x5a
 8006482:	5a9b      	ldrh	r3, [r3, r2]
 8006484:	b29b      	uxth	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d1c1      	bne.n	800640e <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006490:	2300      	movs	r3, #0
 8006492:	e000      	b.n	8006496 <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8006494:	2302      	movs	r3, #2
  }
}
 8006496:	0018      	movs	r0, r3
 8006498:	46bd      	mov	sp, r7
 800649a:	b008      	add	sp, #32
 800649c:	bd80      	pop	{r7, pc}
 800649e:	46c0      	nop			; (mov r8, r8)
 80064a0:	000001ff 	.word	0x000001ff

080064a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b088      	sub	sp, #32
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	1dbb      	adds	r3, r7, #6
 80064b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064b6:	2b20      	cmp	r3, #32
 80064b8:	d150      	bne.n	800655c <HAL_UART_Receive_IT+0xb8>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_UART_Receive_IT+0x24>
 80064c0:	1dbb      	adds	r3, r7, #6
 80064c2:	881b      	ldrh	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d101      	bne.n	80064cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e048      	b.n	800655e <HAL_UART_Receive_IT+0xba>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	2380      	movs	r3, #128	; 0x80
 80064d2:	015b      	lsls	r3, r3, #5
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d109      	bne.n	80064ec <HAL_UART_Receive_IT+0x48>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <HAL_UART_Receive_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2201      	movs	r2, #1
 80064e4:	4013      	ands	r3, r2
 80064e6:	d001      	beq.n	80064ec <HAL_UART_Receive_IT+0x48>
      {
        return  HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e038      	b.n	800655e <HAL_UART_Receive_IT+0xba>
      }
    }

    __HAL_LOCK(huart);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2274      	movs	r2, #116	; 0x74
 80064f0:	5c9b      	ldrb	r3, [r3, r2]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d101      	bne.n	80064fa <HAL_UART_Receive_IT+0x56>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e031      	b.n	800655e <HAL_UART_Receive_IT+0xba>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2274      	movs	r2, #116	; 0x74
 80064fe:	2101      	movs	r1, #1
 8006500:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	685a      	ldr	r2, [r3, #4]
 800650e:	2380      	movs	r3, #128	; 0x80
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	4013      	ands	r3, r2
 8006514:	d019      	beq.n	800654a <HAL_UART_Receive_IT+0xa6>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006516:	f3ef 8310 	mrs	r3, PRIMASK
 800651a:	613b      	str	r3, [r7, #16]
  return(result);
 800651c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800651e:	61fb      	str	r3, [r7, #28]
 8006520:	2301      	movs	r3, #1
 8006522:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f383 8810 	msr	PRIMASK, r3
}
 800652a:	46c0      	nop			; (mov r8, r8)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2180      	movs	r1, #128	; 0x80
 8006538:	04c9      	lsls	r1, r1, #19
 800653a:	430a      	orrs	r2, r1
 800653c:	601a      	str	r2, [r3, #0]
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	f383 8810 	msr	PRIMASK, r3
}
 8006548:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800654a:	1dbb      	adds	r3, r7, #6
 800654c:	881a      	ldrh	r2, [r3, #0]
 800654e:	68b9      	ldr	r1, [r7, #8]
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	0018      	movs	r0, r3
 8006554:	f000 feac 	bl	80072b0 <UART_Start_Receive_IT>
 8006558:	0003      	movs	r3, r0
 800655a:	e000      	b.n	800655e <HAL_UART_Receive_IT+0xba>
  }
  else
  {
    return HAL_BUSY;
 800655c:	2302      	movs	r3, #2
  }
}
 800655e:	0018      	movs	r0, r3
 8006560:	46bd      	mov	sp, r7
 8006562:	b008      	add	sp, #32
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006568:	b590      	push	{r4, r7, lr}
 800656a:	b0ab      	sub	sp, #172	; 0xac
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69db      	ldr	r3, [r3, #28]
 8006576:	22a4      	movs	r2, #164	; 0xa4
 8006578:	18b9      	adds	r1, r7, r2
 800657a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	20a0      	movs	r0, #160	; 0xa0
 8006584:	1839      	adds	r1, r7, r0
 8006586:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	219c      	movs	r1, #156	; 0x9c
 8006590:	1879      	adds	r1, r7, r1
 8006592:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006594:	0011      	movs	r1, r2
 8006596:	18bb      	adds	r3, r7, r2
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a99      	ldr	r2, [pc, #612]	; (8006800 <HAL_UART_IRQHandler+0x298>)
 800659c:	4013      	ands	r3, r2
 800659e:	2298      	movs	r2, #152	; 0x98
 80065a0:	18bc      	adds	r4, r7, r2
 80065a2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80065a4:	18bb      	adds	r3, r7, r2
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d114      	bne.n	80065d6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80065ac:	187b      	adds	r3, r7, r1
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2220      	movs	r2, #32
 80065b2:	4013      	ands	r3, r2
 80065b4:	d00f      	beq.n	80065d6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065b6:	183b      	adds	r3, r7, r0
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2220      	movs	r2, #32
 80065bc:	4013      	ands	r3, r2
 80065be:	d00a      	beq.n	80065d6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d100      	bne.n	80065ca <HAL_UART_IRQHandler+0x62>
 80065c8:	e296      	b.n	8006af8 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	0010      	movs	r0, r2
 80065d2:	4798      	blx	r3
      }
      return;
 80065d4:	e290      	b.n	8006af8 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065d6:	2398      	movs	r3, #152	; 0x98
 80065d8:	18fb      	adds	r3, r7, r3
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d100      	bne.n	80065e2 <HAL_UART_IRQHandler+0x7a>
 80065e0:	e114      	b.n	800680c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80065e2:	239c      	movs	r3, #156	; 0x9c
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2201      	movs	r2, #1
 80065ea:	4013      	ands	r3, r2
 80065ec:	d106      	bne.n	80065fc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80065ee:	23a0      	movs	r3, #160	; 0xa0
 80065f0:	18fb      	adds	r3, r7, r3
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a83      	ldr	r2, [pc, #524]	; (8006804 <HAL_UART_IRQHandler+0x29c>)
 80065f6:	4013      	ands	r3, r2
 80065f8:	d100      	bne.n	80065fc <HAL_UART_IRQHandler+0x94>
 80065fa:	e107      	b.n	800680c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065fc:	23a4      	movs	r3, #164	; 0xa4
 80065fe:	18fb      	adds	r3, r7, r3
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2201      	movs	r2, #1
 8006604:	4013      	ands	r3, r2
 8006606:	d012      	beq.n	800662e <HAL_UART_IRQHandler+0xc6>
 8006608:	23a0      	movs	r3, #160	; 0xa0
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	2380      	movs	r3, #128	; 0x80
 8006610:	005b      	lsls	r3, r3, #1
 8006612:	4013      	ands	r3, r2
 8006614:	d00b      	beq.n	800662e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2201      	movs	r2, #1
 800661c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2280      	movs	r2, #128	; 0x80
 8006622:	589b      	ldr	r3, [r3, r2]
 8006624:	2201      	movs	r2, #1
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2180      	movs	r1, #128	; 0x80
 800662c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800662e:	23a4      	movs	r3, #164	; 0xa4
 8006630:	18fb      	adds	r3, r7, r3
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2202      	movs	r2, #2
 8006636:	4013      	ands	r3, r2
 8006638:	d011      	beq.n	800665e <HAL_UART_IRQHandler+0xf6>
 800663a:	239c      	movs	r3, #156	; 0x9c
 800663c:	18fb      	adds	r3, r7, r3
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2201      	movs	r2, #1
 8006642:	4013      	ands	r3, r2
 8006644:	d00b      	beq.n	800665e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	2202      	movs	r2, #2
 800664c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2280      	movs	r2, #128	; 0x80
 8006652:	589b      	ldr	r3, [r3, r2]
 8006654:	2204      	movs	r2, #4
 8006656:	431a      	orrs	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2180      	movs	r1, #128	; 0x80
 800665c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800665e:	23a4      	movs	r3, #164	; 0xa4
 8006660:	18fb      	adds	r3, r7, r3
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2204      	movs	r2, #4
 8006666:	4013      	ands	r3, r2
 8006668:	d011      	beq.n	800668e <HAL_UART_IRQHandler+0x126>
 800666a:	239c      	movs	r3, #156	; 0x9c
 800666c:	18fb      	adds	r3, r7, r3
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2201      	movs	r2, #1
 8006672:	4013      	ands	r3, r2
 8006674:	d00b      	beq.n	800668e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2204      	movs	r2, #4
 800667c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2280      	movs	r2, #128	; 0x80
 8006682:	589b      	ldr	r3, [r3, r2]
 8006684:	2202      	movs	r2, #2
 8006686:	431a      	orrs	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2180      	movs	r1, #128	; 0x80
 800668c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800668e:	23a4      	movs	r3, #164	; 0xa4
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2208      	movs	r2, #8
 8006696:	4013      	ands	r3, r2
 8006698:	d017      	beq.n	80066ca <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800669a:	23a0      	movs	r3, #160	; 0xa0
 800669c:	18fb      	adds	r3, r7, r3
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2220      	movs	r2, #32
 80066a2:	4013      	ands	r3, r2
 80066a4:	d105      	bne.n	80066b2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80066a6:	239c      	movs	r3, #156	; 0x9c
 80066a8:	18fb      	adds	r3, r7, r3
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2201      	movs	r2, #1
 80066ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80066b0:	d00b      	beq.n	80066ca <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2208      	movs	r2, #8
 80066b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2280      	movs	r2, #128	; 0x80
 80066be:	589b      	ldr	r3, [r3, r2]
 80066c0:	2208      	movs	r2, #8
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2180      	movs	r1, #128	; 0x80
 80066c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066ca:	23a4      	movs	r3, #164	; 0xa4
 80066cc:	18fb      	adds	r3, r7, r3
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	2380      	movs	r3, #128	; 0x80
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	4013      	ands	r3, r2
 80066d6:	d013      	beq.n	8006700 <HAL_UART_IRQHandler+0x198>
 80066d8:	23a0      	movs	r3, #160	; 0xa0
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	2380      	movs	r3, #128	; 0x80
 80066e0:	04db      	lsls	r3, r3, #19
 80066e2:	4013      	ands	r3, r2
 80066e4:	d00c      	beq.n	8006700 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2280      	movs	r2, #128	; 0x80
 80066ec:	0112      	lsls	r2, r2, #4
 80066ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2280      	movs	r2, #128	; 0x80
 80066f4:	589b      	ldr	r3, [r3, r2]
 80066f6:	2220      	movs	r2, #32
 80066f8:	431a      	orrs	r2, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2180      	movs	r1, #128	; 0x80
 80066fe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2280      	movs	r2, #128	; 0x80
 8006704:	589b      	ldr	r3, [r3, r2]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d100      	bne.n	800670c <HAL_UART_IRQHandler+0x1a4>
 800670a:	e1f7      	b.n	8006afc <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800670c:	23a4      	movs	r3, #164	; 0xa4
 800670e:	18fb      	adds	r3, r7, r3
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2220      	movs	r2, #32
 8006714:	4013      	ands	r3, r2
 8006716:	d00e      	beq.n	8006736 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006718:	23a0      	movs	r3, #160	; 0xa0
 800671a:	18fb      	adds	r3, r7, r3
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2220      	movs	r2, #32
 8006720:	4013      	ands	r3, r2
 8006722:	d008      	beq.n	8006736 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006728:	2b00      	cmp	r3, #0
 800672a:	d004      	beq.n	8006736 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	0010      	movs	r0, r2
 8006734:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2280      	movs	r2, #128	; 0x80
 800673a:	589b      	ldr	r3, [r3, r2]
 800673c:	2194      	movs	r1, #148	; 0x94
 800673e:	187a      	adds	r2, r7, r1
 8006740:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	2240      	movs	r2, #64	; 0x40
 800674a:	4013      	ands	r3, r2
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	d004      	beq.n	800675a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006750:	187b      	adds	r3, r7, r1
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	2228      	movs	r2, #40	; 0x28
 8006756:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006758:	d047      	beq.n	80067ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	0018      	movs	r0, r3
 800675e:	f000 fe57 	bl	8007410 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	2240      	movs	r2, #64	; 0x40
 800676a:	4013      	ands	r3, r2
 800676c:	2b40      	cmp	r3, #64	; 0x40
 800676e:	d137      	bne.n	80067e0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006770:	f3ef 8310 	mrs	r3, PRIMASK
 8006774:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006778:	2090      	movs	r0, #144	; 0x90
 800677a:	183a      	adds	r2, r7, r0
 800677c:	6013      	str	r3, [r2, #0]
 800677e:	2301      	movs	r3, #1
 8006780:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006782:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006784:	f383 8810 	msr	PRIMASK, r3
}
 8006788:	46c0      	nop			; (mov r8, r8)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689a      	ldr	r2, [r3, #8]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2140      	movs	r1, #64	; 0x40
 8006796:	438a      	bics	r2, r1
 8006798:	609a      	str	r2, [r3, #8]
 800679a:	183b      	adds	r3, r7, r0
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80067a2:	f383 8810 	msr	PRIMASK, r3
}
 80067a6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d012      	beq.n	80067d6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067b4:	4a14      	ldr	r2, [pc, #80]	; (8006808 <HAL_UART_IRQHandler+0x2a0>)
 80067b6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067bc:	0018      	movs	r0, r3
 80067be:	f7fe f9be 	bl	8004b3e <HAL_DMA_Abort_IT>
 80067c2:	1e03      	subs	r3, r0, #0
 80067c4:	d01a      	beq.n	80067fc <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067d0:	0018      	movs	r0, r3
 80067d2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d4:	e012      	b.n	80067fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	0018      	movs	r0, r3
 80067da:	f000 f9ad 	bl	8006b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067de:	e00d      	b.n	80067fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	0018      	movs	r0, r3
 80067e4:	f000 f9a8 	bl	8006b38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067e8:	e008      	b.n	80067fc <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	0018      	movs	r0, r3
 80067ee:	f000 f9a3 	bl	8006b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2280      	movs	r2, #128	; 0x80
 80067f6:	2100      	movs	r1, #0
 80067f8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80067fa:	e17f      	b.n	8006afc <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067fc:	46c0      	nop			; (mov r8, r8)
    return;
 80067fe:	e17d      	b.n	8006afc <HAL_UART_IRQHandler+0x594>
 8006800:	0000080f 	.word	0x0000080f
 8006804:	04000120 	.word	0x04000120
 8006808:	080074d5 	.word	0x080074d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006810:	2b01      	cmp	r3, #1
 8006812:	d000      	beq.n	8006816 <HAL_UART_IRQHandler+0x2ae>
 8006814:	e131      	b.n	8006a7a <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006816:	23a4      	movs	r3, #164	; 0xa4
 8006818:	18fb      	adds	r3, r7, r3
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2210      	movs	r2, #16
 800681e:	4013      	ands	r3, r2
 8006820:	d100      	bne.n	8006824 <HAL_UART_IRQHandler+0x2bc>
 8006822:	e12a      	b.n	8006a7a <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006824:	23a0      	movs	r3, #160	; 0xa0
 8006826:	18fb      	adds	r3, r7, r3
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2210      	movs	r2, #16
 800682c:	4013      	ands	r3, r2
 800682e:	d100      	bne.n	8006832 <HAL_UART_IRQHandler+0x2ca>
 8006830:	e123      	b.n	8006a7a <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2210      	movs	r2, #16
 8006838:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	2240      	movs	r2, #64	; 0x40
 8006842:	4013      	ands	r3, r2
 8006844:	2b40      	cmp	r3, #64	; 0x40
 8006846:	d000      	beq.n	800684a <HAL_UART_IRQHandler+0x2e2>
 8006848:	e09b      	b.n	8006982 <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	217e      	movs	r1, #126	; 0x7e
 8006854:	187b      	adds	r3, r7, r1
 8006856:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006858:	187b      	adds	r3, r7, r1
 800685a:	881b      	ldrh	r3, [r3, #0]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d100      	bne.n	8006862 <HAL_UART_IRQHandler+0x2fa>
 8006860:	e14e      	b.n	8006b00 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2258      	movs	r2, #88	; 0x58
 8006866:	5a9b      	ldrh	r3, [r3, r2]
 8006868:	187a      	adds	r2, r7, r1
 800686a:	8812      	ldrh	r2, [r2, #0]
 800686c:	429a      	cmp	r2, r3
 800686e:	d300      	bcc.n	8006872 <HAL_UART_IRQHandler+0x30a>
 8006870:	e146      	b.n	8006b00 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	187a      	adds	r2, r7, r1
 8006876:	215a      	movs	r1, #90	; 0x5a
 8006878:	8812      	ldrh	r2, [r2, #0]
 800687a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	2b20      	cmp	r3, #32
 8006884:	d06e      	beq.n	8006964 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006886:	f3ef 8310 	mrs	r3, PRIMASK
 800688a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800688e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006890:	2301      	movs	r3, #1
 8006892:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006896:	f383 8810 	msr	PRIMASK, r3
}
 800689a:	46c0      	nop			; (mov r8, r8)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	499a      	ldr	r1, [pc, #616]	; (8006b10 <HAL_UART_IRQHandler+0x5a8>)
 80068a8:	400a      	ands	r2, r1
 80068aa:	601a      	str	r2, [r3, #0]
 80068ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068ae:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	f383 8810 	msr	PRIMASK, r3
}
 80068b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b8:	f3ef 8310 	mrs	r3, PRIMASK
 80068bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80068be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c0:	677b      	str	r3, [r7, #116]	; 0x74
 80068c2:	2301      	movs	r3, #1
 80068c4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068c8:	f383 8810 	msr	PRIMASK, r3
}
 80068cc:	46c0      	nop			; (mov r8, r8)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2101      	movs	r1, #1
 80068da:	438a      	bics	r2, r1
 80068dc:	609a      	str	r2, [r3, #8]
 80068de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068e0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e4:	f383 8810 	msr	PRIMASK, r3
}
 80068e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ea:	f3ef 8310 	mrs	r3, PRIMASK
 80068ee:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80068f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068f2:	673b      	str	r3, [r7, #112]	; 0x70
 80068f4:	2301      	movs	r3, #1
 80068f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068fa:	f383 8810 	msr	PRIMASK, r3
}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2140      	movs	r1, #64	; 0x40
 800690c:	438a      	bics	r2, r1
 800690e:	609a      	str	r2, [r3, #8]
 8006910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006912:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006914:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006916:	f383 8810 	msr	PRIMASK, r3
}
 800691a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2220      	movs	r2, #32
 8006920:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006928:	f3ef 8310 	mrs	r3, PRIMASK
 800692c:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800692e:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006932:	2301      	movs	r3, #1
 8006934:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006938:	f383 8810 	msr	PRIMASK, r3
}
 800693c:	46c0      	nop			; (mov r8, r8)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2110      	movs	r1, #16
 800694a:	438a      	bics	r2, r1
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006950:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006952:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006954:	f383 8810 	msr	PRIMASK, r3
}
 8006958:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800695e:	0018      	movs	r0, r3
 8006960:	f7fe f8b5 	bl	8004ace <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2258      	movs	r2, #88	; 0x58
 8006968:	5a9a      	ldrh	r2, [r3, r2]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	215a      	movs	r1, #90	; 0x5a
 800696e:	5a5b      	ldrh	r3, [r3, r1]
 8006970:	b29b      	uxth	r3, r3
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	b29a      	uxth	r2, r3
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	0011      	movs	r1, r2
 800697a:	0018      	movs	r0, r3
 800697c:	f000 f8e4 	bl	8006b48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006980:	e0be      	b.n	8006b00 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2258      	movs	r2, #88	; 0x58
 8006986:	5a99      	ldrh	r1, [r3, r2]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	225a      	movs	r2, #90	; 0x5a
 800698c:	5a9b      	ldrh	r3, [r3, r2]
 800698e:	b29a      	uxth	r2, r3
 8006990:	208e      	movs	r0, #142	; 0x8e
 8006992:	183b      	adds	r3, r7, r0
 8006994:	1a8a      	subs	r2, r1, r2
 8006996:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	225a      	movs	r2, #90	; 0x5a
 800699c:	5a9b      	ldrh	r3, [r3, r2]
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d100      	bne.n	80069a6 <HAL_UART_IRQHandler+0x43e>
 80069a4:	e0ae      	b.n	8006b04 <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 80069a6:	183b      	adds	r3, r7, r0
 80069a8:	881b      	ldrh	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d100      	bne.n	80069b0 <HAL_UART_IRQHandler+0x448>
 80069ae:	e0a9      	b.n	8006b04 <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b0:	f3ef 8310 	mrs	r3, PRIMASK
 80069b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80069b6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069b8:	2488      	movs	r4, #136	; 0x88
 80069ba:	193a      	adds	r2, r7, r4
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	2301      	movs	r3, #1
 80069c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	f383 8810 	msr	PRIMASK, r3
}
 80069c8:	46c0      	nop			; (mov r8, r8)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	494f      	ldr	r1, [pc, #316]	; (8006b14 <HAL_UART_IRQHandler+0x5ac>)
 80069d6:	400a      	ands	r2, r1
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	193b      	adds	r3, r7, r4
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	f383 8810 	msr	PRIMASK, r3
}
 80069e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069e8:	f3ef 8310 	mrs	r3, PRIMASK
 80069ec:	61bb      	str	r3, [r7, #24]
  return(result);
 80069ee:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f0:	2484      	movs	r4, #132	; 0x84
 80069f2:	193a      	adds	r2, r7, r4
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	2301      	movs	r3, #1
 80069f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	f383 8810 	msr	PRIMASK, r3
}
 8006a00:	46c0      	nop			; (mov r8, r8)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689a      	ldr	r2, [r3, #8]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	438a      	bics	r2, r1
 8006a10:	609a      	str	r2, [r3, #8]
 8006a12:	193b      	adds	r3, r7, r4
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a18:	6a3b      	ldr	r3, [r7, #32]
 8006a1a:	f383 8810 	msr	PRIMASK, r3
}
 8006a1e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a32:	f3ef 8310 	mrs	r3, PRIMASK
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3a:	2480      	movs	r4, #128	; 0x80
 8006a3c:	193a      	adds	r2, r7, r4
 8006a3e:	6013      	str	r3, [r2, #0]
 8006a40:	2301      	movs	r3, #1
 8006a42:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	f383 8810 	msr	PRIMASK, r3
}
 8006a4a:	46c0      	nop			; (mov r8, r8)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2110      	movs	r1, #16
 8006a58:	438a      	bics	r2, r1
 8006a5a:	601a      	str	r2, [r3, #0]
 8006a5c:	193b      	adds	r3, r7, r4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a64:	f383 8810 	msr	PRIMASK, r3
}
 8006a68:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a6a:	183b      	adds	r3, r7, r0
 8006a6c:	881a      	ldrh	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	0011      	movs	r1, r2
 8006a72:	0018      	movs	r0, r3
 8006a74:	f000 f868 	bl	8006b48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a78:	e044      	b.n	8006b04 <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a7a:	23a4      	movs	r3, #164	; 0xa4
 8006a7c:	18fb      	adds	r3, r7, r3
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	2380      	movs	r3, #128	; 0x80
 8006a82:	035b      	lsls	r3, r3, #13
 8006a84:	4013      	ands	r3, r2
 8006a86:	d010      	beq.n	8006aaa <HAL_UART_IRQHandler+0x542>
 8006a88:	239c      	movs	r3, #156	; 0x9c
 8006a8a:	18fb      	adds	r3, r7, r3
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	2380      	movs	r3, #128	; 0x80
 8006a90:	03db      	lsls	r3, r3, #15
 8006a92:	4013      	ands	r3, r2
 8006a94:	d009      	beq.n	8006aaa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	2280      	movs	r2, #128	; 0x80
 8006a9c:	0352      	lsls	r2, r2, #13
 8006a9e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	0018      	movs	r0, r3
 8006aa4:	f000 fec0 	bl	8007828 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006aa8:	e02f      	b.n	8006b0a <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006aaa:	23a4      	movs	r3, #164	; 0xa4
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2280      	movs	r2, #128	; 0x80
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	d00f      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006ab6:	23a0      	movs	r3, #160	; 0xa0
 8006ab8:	18fb      	adds	r3, r7, r3
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	2280      	movs	r2, #128	; 0x80
 8006abe:	4013      	ands	r3, r2
 8006ac0:	d009      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d01e      	beq.n	8006b08 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	0010      	movs	r0, r2
 8006ad2:	4798      	blx	r3
    }
    return;
 8006ad4:	e018      	b.n	8006b08 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ad6:	23a4      	movs	r3, #164	; 0xa4
 8006ad8:	18fb      	adds	r3, r7, r3
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2240      	movs	r2, #64	; 0x40
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d013      	beq.n	8006b0a <HAL_UART_IRQHandler+0x5a2>
 8006ae2:	23a0      	movs	r3, #160	; 0xa0
 8006ae4:	18fb      	adds	r3, r7, r3
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2240      	movs	r2, #64	; 0x40
 8006aea:	4013      	ands	r3, r2
 8006aec:	d00d      	beq.n	8006b0a <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	0018      	movs	r0, r3
 8006af2:	f000 fd06 	bl	8007502 <UART_EndTransmit_IT>
    return;
 8006af6:	e008      	b.n	8006b0a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006af8:	46c0      	nop			; (mov r8, r8)
 8006afa:	e006      	b.n	8006b0a <HAL_UART_IRQHandler+0x5a2>
    return;
 8006afc:	46c0      	nop			; (mov r8, r8)
 8006afe:	e004      	b.n	8006b0a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006b00:	46c0      	nop			; (mov r8, r8)
 8006b02:	e002      	b.n	8006b0a <HAL_UART_IRQHandler+0x5a2>
      return;
 8006b04:	46c0      	nop			; (mov r8, r8)
 8006b06:	e000      	b.n	8006b0a <HAL_UART_IRQHandler+0x5a2>
    return;
 8006b08:	46c0      	nop			; (mov r8, r8)
  }

}
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b02b      	add	sp, #172	; 0xac
 8006b0e:	bd90      	pop	{r4, r7, pc}
 8006b10:	fffffeff 	.word	0xfffffeff
 8006b14:	fffffedf 	.word	0xfffffedf

08006b18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b20:	46c0      	nop			; (mov r8, r8)
 8006b22:	46bd      	mov	sp, r7
 8006b24:	b002      	add	sp, #8
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006b30:	46c0      	nop			; (mov r8, r8)
 8006b32:	46bd      	mov	sp, r7
 8006b34:	b002      	add	sp, #8
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b40:	46c0      	nop			; (mov r8, r8)
 8006b42:	46bd      	mov	sp, r7
 8006b44:	b002      	add	sp, #8
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	000a      	movs	r2, r1
 8006b52:	1cbb      	adds	r3, r7, #2
 8006b54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b002      	add	sp, #8
 8006b5c:	bd80      	pop	{r7, pc}
	...

08006b60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b68:	231e      	movs	r3, #30
 8006b6a:	18fb      	adds	r3, r7, r3
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689a      	ldr	r2, [r3, #8]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4abe      	ldr	r2, [pc, #760]	; (8006e88 <UART_SetConfig+0x328>)
 8006b90:	4013      	ands	r3, r2
 8006b92:	0019      	movs	r1, r3
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	697a      	ldr	r2, [r7, #20]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	4ab9      	ldr	r2, [pc, #740]	; (8006e8c <UART_SetConfig+0x32c>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	0019      	movs	r1, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	430a      	orrs	r2, r1
 8006bb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	699b      	ldr	r3, [r3, #24]
 8006bba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a1b      	ldr	r3, [r3, #32]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4ab0      	ldr	r2, [pc, #704]	; (8006e90 <UART_SetConfig+0x330>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	0019      	movs	r1, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	697a      	ldr	r2, [r7, #20]
 8006bd8:	430a      	orrs	r2, r1
 8006bda:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4aac      	ldr	r2, [pc, #688]	; (8006e94 <UART_SetConfig+0x334>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d127      	bne.n	8006c36 <UART_SetConfig+0xd6>
 8006be6:	4bac      	ldr	r3, [pc, #688]	; (8006e98 <UART_SetConfig+0x338>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	2203      	movs	r2, #3
 8006bec:	4013      	ands	r3, r2
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d00d      	beq.n	8006c0e <UART_SetConfig+0xae>
 8006bf2:	d81b      	bhi.n	8006c2c <UART_SetConfig+0xcc>
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d014      	beq.n	8006c22 <UART_SetConfig+0xc2>
 8006bf8:	d818      	bhi.n	8006c2c <UART_SetConfig+0xcc>
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <UART_SetConfig+0xa4>
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d00a      	beq.n	8006c18 <UART_SetConfig+0xb8>
 8006c02:	e013      	b.n	8006c2c <UART_SetConfig+0xcc>
 8006c04:	231f      	movs	r3, #31
 8006c06:	18fb      	adds	r3, r7, r3
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	e0bd      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006c0e:	231f      	movs	r3, #31
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	2202      	movs	r2, #2
 8006c14:	701a      	strb	r2, [r3, #0]
 8006c16:	e0b8      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006c18:	231f      	movs	r3, #31
 8006c1a:	18fb      	adds	r3, r7, r3
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	701a      	strb	r2, [r3, #0]
 8006c20:	e0b3      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006c22:	231f      	movs	r3, #31
 8006c24:	18fb      	adds	r3, r7, r3
 8006c26:	2208      	movs	r2, #8
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e0ae      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006c2c:	231f      	movs	r3, #31
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	2210      	movs	r2, #16
 8006c32:	701a      	strb	r2, [r3, #0]
 8006c34:	e0a9      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a98      	ldr	r2, [pc, #608]	; (8006e9c <UART_SetConfig+0x33c>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d134      	bne.n	8006caa <UART_SetConfig+0x14a>
 8006c40:	4b95      	ldr	r3, [pc, #596]	; (8006e98 <UART_SetConfig+0x338>)
 8006c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c44:	23c0      	movs	r3, #192	; 0xc0
 8006c46:	029b      	lsls	r3, r3, #10
 8006c48:	4013      	ands	r3, r2
 8006c4a:	22c0      	movs	r2, #192	; 0xc0
 8006c4c:	0292      	lsls	r2, r2, #10
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d017      	beq.n	8006c82 <UART_SetConfig+0x122>
 8006c52:	22c0      	movs	r2, #192	; 0xc0
 8006c54:	0292      	lsls	r2, r2, #10
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d822      	bhi.n	8006ca0 <UART_SetConfig+0x140>
 8006c5a:	2280      	movs	r2, #128	; 0x80
 8006c5c:	0292      	lsls	r2, r2, #10
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d019      	beq.n	8006c96 <UART_SetConfig+0x136>
 8006c62:	2280      	movs	r2, #128	; 0x80
 8006c64:	0292      	lsls	r2, r2, #10
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d81a      	bhi.n	8006ca0 <UART_SetConfig+0x140>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d004      	beq.n	8006c78 <UART_SetConfig+0x118>
 8006c6e:	2280      	movs	r2, #128	; 0x80
 8006c70:	0252      	lsls	r2, r2, #9
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d00a      	beq.n	8006c8c <UART_SetConfig+0x12c>
 8006c76:	e013      	b.n	8006ca0 <UART_SetConfig+0x140>
 8006c78:	231f      	movs	r3, #31
 8006c7a:	18fb      	adds	r3, r7, r3
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	e083      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006c82:	231f      	movs	r3, #31
 8006c84:	18fb      	adds	r3, r7, r3
 8006c86:	2202      	movs	r2, #2
 8006c88:	701a      	strb	r2, [r3, #0]
 8006c8a:	e07e      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006c8c:	231f      	movs	r3, #31
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	2204      	movs	r2, #4
 8006c92:	701a      	strb	r2, [r3, #0]
 8006c94:	e079      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006c96:	231f      	movs	r3, #31
 8006c98:	18fb      	adds	r3, r7, r3
 8006c9a:	2208      	movs	r2, #8
 8006c9c:	701a      	strb	r2, [r3, #0]
 8006c9e:	e074      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006ca0:	231f      	movs	r3, #31
 8006ca2:	18fb      	adds	r3, r7, r3
 8006ca4:	2210      	movs	r2, #16
 8006ca6:	701a      	strb	r2, [r3, #0]
 8006ca8:	e06f      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a7c      	ldr	r2, [pc, #496]	; (8006ea0 <UART_SetConfig+0x340>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d134      	bne.n	8006d1e <UART_SetConfig+0x1be>
 8006cb4:	4b78      	ldr	r3, [pc, #480]	; (8006e98 <UART_SetConfig+0x338>)
 8006cb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cb8:	23c0      	movs	r3, #192	; 0xc0
 8006cba:	031b      	lsls	r3, r3, #12
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	22c0      	movs	r2, #192	; 0xc0
 8006cc0:	0312      	lsls	r2, r2, #12
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d017      	beq.n	8006cf6 <UART_SetConfig+0x196>
 8006cc6:	22c0      	movs	r2, #192	; 0xc0
 8006cc8:	0312      	lsls	r2, r2, #12
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d822      	bhi.n	8006d14 <UART_SetConfig+0x1b4>
 8006cce:	2280      	movs	r2, #128	; 0x80
 8006cd0:	0312      	lsls	r2, r2, #12
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d019      	beq.n	8006d0a <UART_SetConfig+0x1aa>
 8006cd6:	2280      	movs	r2, #128	; 0x80
 8006cd8:	0312      	lsls	r2, r2, #12
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d81a      	bhi.n	8006d14 <UART_SetConfig+0x1b4>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d004      	beq.n	8006cec <UART_SetConfig+0x18c>
 8006ce2:	2280      	movs	r2, #128	; 0x80
 8006ce4:	02d2      	lsls	r2, r2, #11
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d00a      	beq.n	8006d00 <UART_SetConfig+0x1a0>
 8006cea:	e013      	b.n	8006d14 <UART_SetConfig+0x1b4>
 8006cec:	231f      	movs	r3, #31
 8006cee:	18fb      	adds	r3, r7, r3
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
 8006cf4:	e049      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006cf6:	231f      	movs	r3, #31
 8006cf8:	18fb      	adds	r3, r7, r3
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	e044      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006d00:	231f      	movs	r3, #31
 8006d02:	18fb      	adds	r3, r7, r3
 8006d04:	2204      	movs	r2, #4
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	e03f      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006d0a:	231f      	movs	r3, #31
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	2208      	movs	r2, #8
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	e03a      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006d14:	231f      	movs	r3, #31
 8006d16:	18fb      	adds	r3, r7, r3
 8006d18:	2210      	movs	r2, #16
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e035      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a60      	ldr	r2, [pc, #384]	; (8006ea4 <UART_SetConfig+0x344>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d104      	bne.n	8006d32 <UART_SetConfig+0x1d2>
 8006d28:	231f      	movs	r3, #31
 8006d2a:	18fb      	adds	r3, r7, r3
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	e02b      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a5c      	ldr	r2, [pc, #368]	; (8006ea8 <UART_SetConfig+0x348>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d104      	bne.n	8006d46 <UART_SetConfig+0x1e6>
 8006d3c:	231f      	movs	r3, #31
 8006d3e:	18fb      	adds	r3, r7, r3
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]
 8006d44:	e021      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a58      	ldr	r2, [pc, #352]	; (8006eac <UART_SetConfig+0x34c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d104      	bne.n	8006d5a <UART_SetConfig+0x1fa>
 8006d50:	231f      	movs	r3, #31
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	2200      	movs	r2, #0
 8006d56:	701a      	strb	r2, [r3, #0]
 8006d58:	e017      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a54      	ldr	r2, [pc, #336]	; (8006eb0 <UART_SetConfig+0x350>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d104      	bne.n	8006d6e <UART_SetConfig+0x20e>
 8006d64:	231f      	movs	r3, #31
 8006d66:	18fb      	adds	r3, r7, r3
 8006d68:	2200      	movs	r2, #0
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	e00d      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a50      	ldr	r2, [pc, #320]	; (8006eb4 <UART_SetConfig+0x354>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d104      	bne.n	8006d82 <UART_SetConfig+0x222>
 8006d78:	231f      	movs	r3, #31
 8006d7a:	18fb      	adds	r3, r7, r3
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	701a      	strb	r2, [r3, #0]
 8006d80:	e003      	b.n	8006d8a <UART_SetConfig+0x22a>
 8006d82:	231f      	movs	r3, #31
 8006d84:	18fb      	adds	r3, r7, r3
 8006d86:	2210      	movs	r2, #16
 8006d88:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69da      	ldr	r2, [r3, #28]
 8006d8e:	2380      	movs	r3, #128	; 0x80
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d15d      	bne.n	8006e52 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 8006d96:	231f      	movs	r3, #31
 8006d98:	18fb      	adds	r3, r7, r3
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	d015      	beq.n	8006dcc <UART_SetConfig+0x26c>
 8006da0:	dc18      	bgt.n	8006dd4 <UART_SetConfig+0x274>
 8006da2:	2b04      	cmp	r3, #4
 8006da4:	d00d      	beq.n	8006dc2 <UART_SetConfig+0x262>
 8006da6:	dc15      	bgt.n	8006dd4 <UART_SetConfig+0x274>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <UART_SetConfig+0x252>
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d005      	beq.n	8006dbc <UART_SetConfig+0x25c>
 8006db0:	e010      	b.n	8006dd4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db2:	f7fe fdd9 	bl	8005968 <HAL_RCC_GetPCLK1Freq>
 8006db6:	0003      	movs	r3, r0
 8006db8:	61bb      	str	r3, [r7, #24]
        break;
 8006dba:	e012      	b.n	8006de2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dbc:	4b3e      	ldr	r3, [pc, #248]	; (8006eb8 <UART_SetConfig+0x358>)
 8006dbe:	61bb      	str	r3, [r7, #24]
        break;
 8006dc0:	e00f      	b.n	8006de2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc2:	f7fe fd47 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	61bb      	str	r3, [r7, #24]
        break;
 8006dca:	e00a      	b.n	8006de2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dcc:	2380      	movs	r3, #128	; 0x80
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	61bb      	str	r3, [r7, #24]
        break;
 8006dd2:	e006      	b.n	8006de2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dd8:	231e      	movs	r3, #30
 8006dda:	18fb      	adds	r3, r7, r3
 8006ddc:	2201      	movs	r2, #1
 8006dde:	701a      	strb	r2, [r3, #0]
        break;
 8006de0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d100      	bne.n	8006dea <UART_SetConfig+0x28a>
 8006de8:	e095      	b.n	8006f16 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	005a      	lsls	r2, r3, #1
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	085b      	lsrs	r3, r3, #1
 8006df4:	18d2      	adds	r2, r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	0019      	movs	r1, r3
 8006dfc:	0010      	movs	r0, r2
 8006dfe:	f7f9 f99f 	bl	8000140 <__udivsi3>
 8006e02:	0003      	movs	r3, r0
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	2b0f      	cmp	r3, #15
 8006e0c:	d91c      	bls.n	8006e48 <UART_SetConfig+0x2e8>
 8006e0e:	693a      	ldr	r2, [r7, #16]
 8006e10:	2380      	movs	r3, #128	; 0x80
 8006e12:	025b      	lsls	r3, r3, #9
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d217      	bcs.n	8006e48 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	200e      	movs	r0, #14
 8006e1e:	183b      	adds	r3, r7, r0
 8006e20:	210f      	movs	r1, #15
 8006e22:	438a      	bics	r2, r1
 8006e24:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	085b      	lsrs	r3, r3, #1
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2207      	movs	r2, #7
 8006e2e:	4013      	ands	r3, r2
 8006e30:	b299      	uxth	r1, r3
 8006e32:	183b      	adds	r3, r7, r0
 8006e34:	183a      	adds	r2, r7, r0
 8006e36:	8812      	ldrh	r2, [r2, #0]
 8006e38:	430a      	orrs	r2, r1
 8006e3a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	183a      	adds	r2, r7, r0
 8006e42:	8812      	ldrh	r2, [r2, #0]
 8006e44:	60da      	str	r2, [r3, #12]
 8006e46:	e066      	b.n	8006f16 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006e48:	231e      	movs	r3, #30
 8006e4a:	18fb      	adds	r3, r7, r3
 8006e4c:	2201      	movs	r2, #1
 8006e4e:	701a      	strb	r2, [r3, #0]
 8006e50:	e061      	b.n	8006f16 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e52:	231f      	movs	r3, #31
 8006e54:	18fb      	adds	r3, r7, r3
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d02f      	beq.n	8006ebc <UART_SetConfig+0x35c>
 8006e5c:	dc32      	bgt.n	8006ec4 <UART_SetConfig+0x364>
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d00d      	beq.n	8006e7e <UART_SetConfig+0x31e>
 8006e62:	dc2f      	bgt.n	8006ec4 <UART_SetConfig+0x364>
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <UART_SetConfig+0x30e>
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d005      	beq.n	8006e78 <UART_SetConfig+0x318>
 8006e6c:	e02a      	b.n	8006ec4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e6e:	f7fe fd7b 	bl	8005968 <HAL_RCC_GetPCLK1Freq>
 8006e72:	0003      	movs	r3, r0
 8006e74:	61bb      	str	r3, [r7, #24]
        break;
 8006e76:	e02c      	b.n	8006ed2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e78:	4b0f      	ldr	r3, [pc, #60]	; (8006eb8 <UART_SetConfig+0x358>)
 8006e7a:	61bb      	str	r3, [r7, #24]
        break;
 8006e7c:	e029      	b.n	8006ed2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e7e:	f7fe fce9 	bl	8005854 <HAL_RCC_GetSysClockFreq>
 8006e82:	0003      	movs	r3, r0
 8006e84:	61bb      	str	r3, [r7, #24]
        break;
 8006e86:	e024      	b.n	8006ed2 <UART_SetConfig+0x372>
 8006e88:	efff69f3 	.word	0xefff69f3
 8006e8c:	ffffcfff 	.word	0xffffcfff
 8006e90:	fffff4ff 	.word	0xfffff4ff
 8006e94:	40013800 	.word	0x40013800
 8006e98:	40021000 	.word	0x40021000
 8006e9c:	40004400 	.word	0x40004400
 8006ea0:	40004800 	.word	0x40004800
 8006ea4:	40004c00 	.word	0x40004c00
 8006ea8:	40005000 	.word	0x40005000
 8006eac:	40011400 	.word	0x40011400
 8006eb0:	40011800 	.word	0x40011800
 8006eb4:	40011c00 	.word	0x40011c00
 8006eb8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	021b      	lsls	r3, r3, #8
 8006ec0:	61bb      	str	r3, [r7, #24]
        break;
 8006ec2:	e006      	b.n	8006ed2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ec8:	231e      	movs	r3, #30
 8006eca:	18fb      	adds	r3, r7, r3
 8006ecc:	2201      	movs	r2, #1
 8006ece:	701a      	strb	r2, [r3, #0]
        break;
 8006ed0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01e      	beq.n	8006f16 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	085a      	lsrs	r2, r3, #1
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	18d2      	adds	r2, r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	0019      	movs	r1, r3
 8006ee8:	0010      	movs	r0, r2
 8006eea:	f7f9 f929 	bl	8000140 <__udivsi3>
 8006eee:	0003      	movs	r3, r0
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b0f      	cmp	r3, #15
 8006ef8:	d909      	bls.n	8006f0e <UART_SetConfig+0x3ae>
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	2380      	movs	r3, #128	; 0x80
 8006efe:	025b      	lsls	r3, r3, #9
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d204      	bcs.n	8006f0e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	60da      	str	r2, [r3, #12]
 8006f0c:	e003      	b.n	8006f16 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8006f0e:	231e      	movs	r3, #30
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	2201      	movs	r2, #1
 8006f14:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006f22:	231e      	movs	r3, #30
 8006f24:	18fb      	adds	r3, r7, r3
 8006f26:	781b      	ldrb	r3, [r3, #0]
}
 8006f28:	0018      	movs	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	b008      	add	sp, #32
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	4013      	ands	r3, r2
 8006f40:	d00b      	beq.n	8006f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	4a4a      	ldr	r2, [pc, #296]	; (8007074 <UART_AdvFeatureConfig+0x144>)
 8006f4a:	4013      	ands	r3, r2
 8006f4c:	0019      	movs	r1, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	430a      	orrs	r2, r1
 8006f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2202      	movs	r2, #2
 8006f60:	4013      	ands	r3, r2
 8006f62:	d00b      	beq.n	8006f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	4a43      	ldr	r2, [pc, #268]	; (8007078 <UART_AdvFeatureConfig+0x148>)
 8006f6c:	4013      	ands	r3, r2
 8006f6e:	0019      	movs	r1, r3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f80:	2204      	movs	r2, #4
 8006f82:	4013      	ands	r3, r2
 8006f84:	d00b      	beq.n	8006f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	4a3b      	ldr	r2, [pc, #236]	; (800707c <UART_AdvFeatureConfig+0x14c>)
 8006f8e:	4013      	ands	r3, r2
 8006f90:	0019      	movs	r1, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	4013      	ands	r3, r2
 8006fa6:	d00b      	beq.n	8006fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4a34      	ldr	r2, [pc, #208]	; (8007080 <UART_AdvFeatureConfig+0x150>)
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	0019      	movs	r1, r3
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc4:	2210      	movs	r2, #16
 8006fc6:	4013      	ands	r3, r2
 8006fc8:	d00b      	beq.n	8006fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	4a2c      	ldr	r2, [pc, #176]	; (8007084 <UART_AdvFeatureConfig+0x154>)
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	0019      	movs	r1, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	430a      	orrs	r2, r1
 8006fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	4013      	ands	r3, r2
 8006fea:	d00b      	beq.n	8007004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	4a25      	ldr	r2, [pc, #148]	; (8007088 <UART_AdvFeatureConfig+0x158>)
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	0019      	movs	r1, r3
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	430a      	orrs	r2, r1
 8007002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007008:	2240      	movs	r2, #64	; 0x40
 800700a:	4013      	ands	r3, r2
 800700c:	d01d      	beq.n	800704a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	4a1d      	ldr	r2, [pc, #116]	; (800708c <UART_AdvFeatureConfig+0x15c>)
 8007016:	4013      	ands	r3, r2
 8007018:	0019      	movs	r1, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800702a:	2380      	movs	r3, #128	; 0x80
 800702c:	035b      	lsls	r3, r3, #13
 800702e:	429a      	cmp	r2, r3
 8007030:	d10b      	bne.n	800704a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	4a15      	ldr	r2, [pc, #84]	; (8007090 <UART_AdvFeatureConfig+0x160>)
 800703a:	4013      	ands	r3, r2
 800703c:	0019      	movs	r1, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	2280      	movs	r2, #128	; 0x80
 8007050:	4013      	ands	r3, r2
 8007052:	d00b      	beq.n	800706c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	4a0e      	ldr	r2, [pc, #56]	; (8007094 <UART_AdvFeatureConfig+0x164>)
 800705c:	4013      	ands	r3, r2
 800705e:	0019      	movs	r1, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	605a      	str	r2, [r3, #4]
  }
}
 800706c:	46c0      	nop			; (mov r8, r8)
 800706e:	46bd      	mov	sp, r7
 8007070:	b002      	add	sp, #8
 8007072:	bd80      	pop	{r7, pc}
 8007074:	fffdffff 	.word	0xfffdffff
 8007078:	fffeffff 	.word	0xfffeffff
 800707c:	fffbffff 	.word	0xfffbffff
 8007080:	ffff7fff 	.word	0xffff7fff
 8007084:	ffffefff 	.word	0xffffefff
 8007088:	ffffdfff 	.word	0xffffdfff
 800708c:	ffefffff 	.word	0xffefffff
 8007090:	ff9fffff 	.word	0xff9fffff
 8007094:	fff7ffff 	.word	0xfff7ffff

08007098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b086      	sub	sp, #24
 800709c:	af02      	add	r7, sp, #8
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2280      	movs	r2, #128	; 0x80
 80070a4:	2100      	movs	r1, #0
 80070a6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070a8:	f7fd fc5a 	bl	8004960 <HAL_GetTick>
 80070ac:	0003      	movs	r3, r0
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	2208      	movs	r2, #8
 80070b8:	4013      	ands	r3, r2
 80070ba:	2b08      	cmp	r3, #8
 80070bc:	d10c      	bne.n	80070d8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2280      	movs	r2, #128	; 0x80
 80070c2:	0391      	lsls	r1, r2, #14
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	4a17      	ldr	r2, [pc, #92]	; (8007124 <UART_CheckIdleState+0x8c>)
 80070c8:	9200      	str	r2, [sp, #0]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f000 f82c 	bl	8007128 <UART_WaitOnFlagUntilTimeout>
 80070d0:	1e03      	subs	r3, r0, #0
 80070d2:	d001      	beq.n	80070d8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e021      	b.n	800711c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2204      	movs	r2, #4
 80070e0:	4013      	ands	r3, r2
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d10c      	bne.n	8007100 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2280      	movs	r2, #128	; 0x80
 80070ea:	03d1      	lsls	r1, r2, #15
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	4a0d      	ldr	r2, [pc, #52]	; (8007124 <UART_CheckIdleState+0x8c>)
 80070f0:	9200      	str	r2, [sp, #0]
 80070f2:	2200      	movs	r2, #0
 80070f4:	f000 f818 	bl	8007128 <UART_WaitOnFlagUntilTimeout>
 80070f8:	1e03      	subs	r3, r0, #0
 80070fa:	d001      	beq.n	8007100 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e00d      	b.n	800711c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2220      	movs	r2, #32
 8007104:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2220      	movs	r2, #32
 800710a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2274      	movs	r2, #116	; 0x74
 8007116:	2100      	movs	r1, #0
 8007118:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	0018      	movs	r0, r3
 800711e:	46bd      	mov	sp, r7
 8007120:	b004      	add	sp, #16
 8007122:	bd80      	pop	{r7, pc}
 8007124:	01ffffff 	.word	0x01ffffff

08007128 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b094      	sub	sp, #80	; 0x50
 800712c:	af00      	add	r7, sp, #0
 800712e:	60f8      	str	r0, [r7, #12]
 8007130:	60b9      	str	r1, [r7, #8]
 8007132:	603b      	str	r3, [r7, #0]
 8007134:	1dfb      	adds	r3, r7, #7
 8007136:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007138:	e0a3      	b.n	8007282 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800713a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800713c:	3301      	adds	r3, #1
 800713e:	d100      	bne.n	8007142 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007140:	e09f      	b.n	8007282 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007142:	f7fd fc0d 	bl	8004960 <HAL_GetTick>
 8007146:	0002      	movs	r2, r0
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800714e:	429a      	cmp	r2, r3
 8007150:	d302      	bcc.n	8007158 <UART_WaitOnFlagUntilTimeout+0x30>
 8007152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007154:	2b00      	cmp	r3, #0
 8007156:	d13d      	bne.n	80071d4 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007158:	f3ef 8310 	mrs	r3, PRIMASK
 800715c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007160:	647b      	str	r3, [r7, #68]	; 0x44
 8007162:	2301      	movs	r3, #1
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	f383 8810 	msr	PRIMASK, r3
}
 800716c:	46c0      	nop			; (mov r8, r8)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	681a      	ldr	r2, [r3, #0]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	494c      	ldr	r1, [pc, #304]	; (80072ac <UART_WaitOnFlagUntilTimeout+0x184>)
 800717a:	400a      	ands	r2, r1
 800717c:	601a      	str	r2, [r3, #0]
 800717e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007180:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	f383 8810 	msr	PRIMASK, r3
}
 8007188:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800718a:	f3ef 8310 	mrs	r3, PRIMASK
 800718e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	643b      	str	r3, [r7, #64]	; 0x40
 8007194:	2301      	movs	r3, #1
 8007196:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719a:	f383 8810 	msr	PRIMASK, r3
}
 800719e:	46c0      	nop			; (mov r8, r8)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	689a      	ldr	r2, [r3, #8]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2101      	movs	r1, #1
 80071ac:	438a      	bics	r2, r1
 80071ae:	609a      	str	r2, [r3, #8]
 80071b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b6:	f383 8810 	msr	PRIMASK, r3
}
 80071ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2220      	movs	r2, #32
 80071c0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2220      	movs	r2, #32
 80071c6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2274      	movs	r2, #116	; 0x74
 80071cc:	2100      	movs	r1, #0
 80071ce:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e067      	b.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2204      	movs	r2, #4
 80071dc:	4013      	ands	r3, r2
 80071de:	d050      	beq.n	8007282 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	2380      	movs	r3, #128	; 0x80
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	401a      	ands	r2, r3
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	011b      	lsls	r3, r3, #4
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d146      	bne.n	8007282 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2280      	movs	r2, #128	; 0x80
 80071fa:	0112      	lsls	r2, r2, #4
 80071fc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007202:	613b      	str	r3, [r7, #16]
  return(result);
 8007204:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007208:	2301      	movs	r3, #1
 800720a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	f383 8810 	msr	PRIMASK, r3
}
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4923      	ldr	r1, [pc, #140]	; (80072ac <UART_WaitOnFlagUntilTimeout+0x184>)
 8007220:	400a      	ands	r2, r1
 8007222:	601a      	str	r2, [r3, #0]
 8007224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007226:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007228:	69bb      	ldr	r3, [r7, #24]
 800722a:	f383 8810 	msr	PRIMASK, r3
}
 800722e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007230:	f3ef 8310 	mrs	r3, PRIMASK
 8007234:	61fb      	str	r3, [r7, #28]
  return(result);
 8007236:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007238:	64bb      	str	r3, [r7, #72]	; 0x48
 800723a:	2301      	movs	r3, #1
 800723c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	f383 8810 	msr	PRIMASK, r3
}
 8007244:	46c0      	nop			; (mov r8, r8)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2101      	movs	r1, #1
 8007252:	438a      	bics	r2, r1
 8007254:	609a      	str	r2, [r3, #8]
 8007256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	f383 8810 	msr	PRIMASK, r3
}
 8007260:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2220      	movs	r2, #32
 800726c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2280      	movs	r2, #128	; 0x80
 8007272:	2120      	movs	r1, #32
 8007274:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2274      	movs	r2, #116	; 0x74
 800727a:	2100      	movs	r1, #0
 800727c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800727e:	2303      	movs	r3, #3
 8007280:	e010      	b.n	80072a4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	69db      	ldr	r3, [r3, #28]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	4013      	ands	r3, r2
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	425a      	negs	r2, r3
 8007292:	4153      	adcs	r3, r2
 8007294:	b2db      	uxtb	r3, r3
 8007296:	001a      	movs	r2, r3
 8007298:	1dfb      	adds	r3, r7, #7
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	429a      	cmp	r2, r3
 800729e:	d100      	bne.n	80072a2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80072a0:	e74b      	b.n	800713a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	0018      	movs	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b014      	add	sp, #80	; 0x50
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	fffffe5f 	.word	0xfffffe5f

080072b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08c      	sub	sp, #48	; 0x30
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	1dbb      	adds	r3, r7, #6
 80072bc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	1dba      	adds	r2, r7, #6
 80072c8:	2158      	movs	r1, #88	; 0x58
 80072ca:	8812      	ldrh	r2, [r2, #0]
 80072cc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1dba      	adds	r2, r7, #6
 80072d2:	215a      	movs	r1, #90	; 0x5a
 80072d4:	8812      	ldrh	r2, [r2, #0]
 80072d6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2200      	movs	r2, #0
 80072dc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689a      	ldr	r2, [r3, #8]
 80072e2:	2380      	movs	r3, #128	; 0x80
 80072e4:	015b      	lsls	r3, r3, #5
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d10d      	bne.n	8007306 <UART_Start_Receive_IT+0x56>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	691b      	ldr	r3, [r3, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d104      	bne.n	80072fc <UART_Start_Receive_IT+0x4c>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	225c      	movs	r2, #92	; 0x5c
 80072f6:	4943      	ldr	r1, [pc, #268]	; (8007404 <UART_Start_Receive_IT+0x154>)
 80072f8:	5299      	strh	r1, [r3, r2]
 80072fa:	e02e      	b.n	800735a <UART_Start_Receive_IT+0xaa>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	225c      	movs	r2, #92	; 0x5c
 8007300:	21ff      	movs	r1, #255	; 0xff
 8007302:	5299      	strh	r1, [r3, r2]
 8007304:	e029      	b.n	800735a <UART_Start_Receive_IT+0xaa>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	689b      	ldr	r3, [r3, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10d      	bne.n	800732a <UART_Start_Receive_IT+0x7a>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d104      	bne.n	8007320 <UART_Start_Receive_IT+0x70>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	225c      	movs	r2, #92	; 0x5c
 800731a:	21ff      	movs	r1, #255	; 0xff
 800731c:	5299      	strh	r1, [r3, r2]
 800731e:	e01c      	b.n	800735a <UART_Start_Receive_IT+0xaa>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	225c      	movs	r2, #92	; 0x5c
 8007324:	217f      	movs	r1, #127	; 0x7f
 8007326:	5299      	strh	r1, [r3, r2]
 8007328:	e017      	b.n	800735a <UART_Start_Receive_IT+0xaa>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	2380      	movs	r3, #128	; 0x80
 8007330:	055b      	lsls	r3, r3, #21
 8007332:	429a      	cmp	r2, r3
 8007334:	d10d      	bne.n	8007352 <UART_Start_Receive_IT+0xa2>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d104      	bne.n	8007348 <UART_Start_Receive_IT+0x98>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	225c      	movs	r2, #92	; 0x5c
 8007342:	217f      	movs	r1, #127	; 0x7f
 8007344:	5299      	strh	r1, [r3, r2]
 8007346:	e008      	b.n	800735a <UART_Start_Receive_IT+0xaa>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	225c      	movs	r2, #92	; 0x5c
 800734c:	213f      	movs	r1, #63	; 0x3f
 800734e:	5299      	strh	r1, [r3, r2]
 8007350:	e003      	b.n	800735a <UART_Start_Receive_IT+0xaa>
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	225c      	movs	r2, #92	; 0x5c
 8007356:	2100      	movs	r1, #0
 8007358:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2280      	movs	r2, #128	; 0x80
 800735e:	2100      	movs	r1, #0
 8007360:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2222      	movs	r2, #34	; 0x22
 8007366:	67da      	str	r2, [r3, #124]	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007368:	f3ef 8310 	mrs	r3, PRIMASK
 800736c:	61fb      	str	r3, [r7, #28]
  return(result);
 800736e:	69fb      	ldr	r3, [r7, #28]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007372:	2301      	movs	r3, #1
 8007374:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	f383 8810 	msr	PRIMASK, r3
}
 800737c:	46c0      	nop			; (mov r8, r8)
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689a      	ldr	r2, [r3, #8]
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2101      	movs	r1, #1
 800738a:	430a      	orrs	r2, r1
 800738c:	609a      	str	r2, [r3, #8]
 800738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007390:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	f383 8810 	msr	PRIMASK, r3
}
 8007398:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689a      	ldr	r2, [r3, #8]
 800739e:	2380      	movs	r3, #128	; 0x80
 80073a0:	015b      	lsls	r3, r3, #5
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d107      	bne.n	80073b6 <UART_Start_Receive_IT+0x106>
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d103      	bne.n	80073b6 <UART_Start_Receive_IT+0x106>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4a15      	ldr	r2, [pc, #84]	; (8007408 <UART_Start_Receive_IT+0x158>)
 80073b2:	665a      	str	r2, [r3, #100]	; 0x64
 80073b4:	e002      	b.n	80073bc <UART_Start_Receive_IT+0x10c>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4a14      	ldr	r2, [pc, #80]	; (800740c <UART_Start_Receive_IT+0x15c>)
 80073ba:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2274      	movs	r2, #116	; 0x74
 80073c0:	2100      	movs	r1, #0
 80073c2:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073c4:	f3ef 8310 	mrs	r3, PRIMASK
 80073c8:	613b      	str	r3, [r7, #16]
  return(result);
 80073ca:	693b      	ldr	r3, [r7, #16]

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80073ce:	2301      	movs	r3, #1
 80073d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f383 8810 	msr	PRIMASK, r3
}
 80073d8:	46c0      	nop			; (mov r8, r8)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2190      	movs	r1, #144	; 0x90
 80073e6:	0049      	lsls	r1, r1, #1
 80073e8:	430a      	orrs	r2, r1
 80073ea:	601a      	str	r2, [r3, #0]
 80073ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f0:	69bb      	ldr	r3, [r7, #24]
 80073f2:	f383 8810 	msr	PRIMASK, r3
}
 80073f6:	46c0      	nop			; (mov r8, r8)
  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	0018      	movs	r0, r3
 80073fc:	46bd      	mov	sp, r7
 80073fe:	b00c      	add	sp, #48	; 0x30
 8007400:	bd80      	pop	{r7, pc}
 8007402:	46c0      	nop			; (mov r8, r8)
 8007404:	000001ff 	.word	0x000001ff
 8007408:	080076c1 	.word	0x080076c1
 800740c:	08007559 	.word	0x08007559

08007410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08e      	sub	sp, #56	; 0x38
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007418:	f3ef 8310 	mrs	r3, PRIMASK
 800741c:	617b      	str	r3, [r7, #20]
  return(result);
 800741e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007420:	637b      	str	r3, [r7, #52]	; 0x34
 8007422:	2301      	movs	r3, #1
 8007424:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	f383 8810 	msr	PRIMASK, r3
}
 800742c:	46c0      	nop			; (mov r8, r8)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4925      	ldr	r1, [pc, #148]	; (80074d0 <UART_EndRxTransfer+0xc0>)
 800743a:	400a      	ands	r2, r1
 800743c:	601a      	str	r2, [r3, #0]
 800743e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	f383 8810 	msr	PRIMASK, r3
}
 8007448:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800744a:	f3ef 8310 	mrs	r3, PRIMASK
 800744e:	623b      	str	r3, [r7, #32]
  return(result);
 8007450:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007452:	633b      	str	r3, [r7, #48]	; 0x30
 8007454:	2301      	movs	r3, #1
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745a:	f383 8810 	msr	PRIMASK, r3
}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2101      	movs	r1, #1
 800746c:	438a      	bics	r2, r1
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	f383 8810 	msr	PRIMASK, r3
}
 800747a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007480:	2b01      	cmp	r3, #1
 8007482:	d118      	bne.n	80074b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007484:	f3ef 8310 	mrs	r3, PRIMASK
 8007488:	60bb      	str	r3, [r7, #8]
  return(result);
 800748a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800748c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800748e:	2301      	movs	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f383 8810 	msr	PRIMASK, r3
}
 8007498:	46c0      	nop			; (mov r8, r8)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2110      	movs	r1, #16
 80074a6:	438a      	bics	r2, r1
 80074a8:	601a      	str	r2, [r3, #0]
 80074aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	f383 8810 	msr	PRIMASK, r3
}
 80074b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2220      	movs	r2, #32
 80074ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80074c8:	46c0      	nop			; (mov r8, r8)
 80074ca:	46bd      	mov	sp, r7
 80074cc:	b00e      	add	sp, #56	; 0x38
 80074ce:	bd80      	pop	{r7, pc}
 80074d0:	fffffedf 	.word	0xfffffedf

080074d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	225a      	movs	r2, #90	; 0x5a
 80074e6:	2100      	movs	r1, #0
 80074e8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2252      	movs	r2, #82	; 0x52
 80074ee:	2100      	movs	r1, #0
 80074f0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	0018      	movs	r0, r3
 80074f6:	f7ff fb1f 	bl	8006b38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074fa:	46c0      	nop			; (mov r8, r8)
 80074fc:	46bd      	mov	sp, r7
 80074fe:	b004      	add	sp, #16
 8007500:	bd80      	pop	{r7, pc}

08007502 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b086      	sub	sp, #24
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800750a:	f3ef 8310 	mrs	r3, PRIMASK
 800750e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007510:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	2301      	movs	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f383 8810 	msr	PRIMASK, r3
}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2140      	movs	r1, #64	; 0x40
 800752c:	438a      	bics	r2, r1
 800752e:	601a      	str	r2, [r3, #0]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	f383 8810 	msr	PRIMASK, r3
}
 800753a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2220      	movs	r2, #32
 8007540:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	0018      	movs	r0, r3
 800754c:	f7ff fae4 	bl	8006b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007550:	46c0      	nop			; (mov r8, r8)
 8007552:	46bd      	mov	sp, r7
 8007554:	b006      	add	sp, #24
 8007556:	bd80      	pop	{r7, pc}

08007558 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b090      	sub	sp, #64	; 0x40
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007560:	203e      	movs	r0, #62	; 0x3e
 8007562:	183b      	adds	r3, r7, r0
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	215c      	movs	r1, #92	; 0x5c
 8007568:	5a52      	ldrh	r2, [r2, r1]
 800756a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007570:	2b22      	cmp	r3, #34	; 0x22
 8007572:	d000      	beq.n	8007576 <UART_RxISR_8BIT+0x1e>
 8007574:	e095      	b.n	80076a2 <UART_RxISR_8BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	213c      	movs	r1, #60	; 0x3c
 800757c:	187b      	adds	r3, r7, r1
 800757e:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8007580:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007582:	187b      	adds	r3, r7, r1
 8007584:	881b      	ldrh	r3, [r3, #0]
 8007586:	b2da      	uxtb	r2, r3
 8007588:	183b      	adds	r3, r7, r0
 800758a:	881b      	ldrh	r3, [r3, #0]
 800758c:	b2d9      	uxtb	r1, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007592:	400a      	ands	r2, r1
 8007594:	b2d2      	uxtb	r2, r2
 8007596:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	225a      	movs	r2, #90	; 0x5a
 80075a6:	5a9b      	ldrh	r3, [r3, r2]
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b299      	uxth	r1, r3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	225a      	movs	r2, #90	; 0x5a
 80075b2:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	225a      	movs	r2, #90	; 0x5a
 80075b8:	5a9b      	ldrh	r3, [r3, r2]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d178      	bne.n	80076b2 <UART_RxISR_8BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075c0:	f3ef 8310 	mrs	r3, PRIMASK
 80075c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80075c6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80075ca:	2301      	movs	r3, #1
 80075cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	f383 8810 	msr	PRIMASK, r3
}
 80075d4:	46c0      	nop			; (mov r8, r8)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4936      	ldr	r1, [pc, #216]	; (80076bc <UART_RxISR_8BIT+0x164>)
 80075e2:	400a      	ands	r2, r1
 80075e4:	601a      	str	r2, [r3, #0]
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	f383 8810 	msr	PRIMASK, r3
}
 80075f0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075f2:	f3ef 8310 	mrs	r3, PRIMASK
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075fa:	637b      	str	r3, [r7, #52]	; 0x34
 80075fc:	2301      	movs	r3, #1
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	f383 8810 	msr	PRIMASK, r3
}
 8007606:	46c0      	nop			; (mov r8, r8)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	689a      	ldr	r2, [r3, #8]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2101      	movs	r1, #1
 8007614:	438a      	bics	r2, r1
 8007616:	609a      	str	r2, [r3, #8]
 8007618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800761c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800761e:	f383 8810 	msr	PRIMASK, r3
}
 8007622:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2220      	movs	r2, #32
 8007628:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007634:	2b01      	cmp	r3, #1
 8007636:	d12f      	bne.n	8007698 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800763e:	f3ef 8310 	mrs	r3, PRIMASK
 8007642:	60fb      	str	r3, [r7, #12]
  return(result);
 8007644:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007646:	633b      	str	r3, [r7, #48]	; 0x30
 8007648:	2301      	movs	r3, #1
 800764a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	f383 8810 	msr	PRIMASK, r3
}
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2110      	movs	r1, #16
 8007660:	438a      	bics	r2, r1
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007666:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f383 8810 	msr	PRIMASK, r3
}
 800766e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	2210      	movs	r2, #16
 8007678:	4013      	ands	r3, r2
 800767a:	2b10      	cmp	r3, #16
 800767c:	d103      	bne.n	8007686 <UART_RxISR_8BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2210      	movs	r2, #16
 8007684:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2258      	movs	r2, #88	; 0x58
 800768a:	5a9a      	ldrh	r2, [r3, r2]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	0011      	movs	r1, r2
 8007690:	0018      	movs	r0, r3
 8007692:	f7ff fa59 	bl	8006b48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007696:	e00c      	b.n	80076b2 <UART_RxISR_8BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	0018      	movs	r0, r3
 800769c:	f7ff fa44 	bl	8006b28 <HAL_UART_RxCpltCallback>
}
 80076a0:	e007      	b.n	80076b2 <UART_RxISR_8BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	699a      	ldr	r2, [r3, #24]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2108      	movs	r1, #8
 80076ae:	430a      	orrs	r2, r1
 80076b0:	619a      	str	r2, [r3, #24]
}
 80076b2:	46c0      	nop			; (mov r8, r8)
 80076b4:	46bd      	mov	sp, r7
 80076b6:	b010      	add	sp, #64	; 0x40
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	fffffedf 	.word	0xfffffedf

080076c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b090      	sub	sp, #64	; 0x40
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80076c8:	203e      	movs	r0, #62	; 0x3e
 80076ca:	183b      	adds	r3, r7, r0
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	215c      	movs	r1, #92	; 0x5c
 80076d0:	5a52      	ldrh	r2, [r2, r1]
 80076d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076d8:	2b22      	cmp	r3, #34	; 0x22
 80076da:	d000      	beq.n	80076de <UART_RxISR_16BIT+0x1e>
 80076dc:	e095      	b.n	800780a <UART_RxISR_16BIT+0x14a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	213c      	movs	r1, #60	; 0x3c
 80076e4:	187b      	adds	r3, r7, r1
 80076e6:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80076e8:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ee:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80076f0:	187b      	adds	r3, r7, r1
 80076f2:	183a      	adds	r2, r7, r0
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	8812      	ldrh	r2, [r2, #0]
 80076f8:	4013      	ands	r3, r2
 80076fa:	b29a      	uxth	r2, r3
 80076fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007704:	1c9a      	adds	r2, r3, #2
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	225a      	movs	r2, #90	; 0x5a
 800770e:	5a9b      	ldrh	r3, [r3, r2]
 8007710:	b29b      	uxth	r3, r3
 8007712:	3b01      	subs	r3, #1
 8007714:	b299      	uxth	r1, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	225a      	movs	r2, #90	; 0x5a
 800771a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	225a      	movs	r2, #90	; 0x5a
 8007720:	5a9b      	ldrh	r3, [r3, r2]
 8007722:	b29b      	uxth	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d178      	bne.n	800781a <UART_RxISR_16BIT+0x15a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007728:	f3ef 8310 	mrs	r3, PRIMASK
 800772c:	617b      	str	r3, [r7, #20]
  return(result);
 800772e:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007730:	637b      	str	r3, [r7, #52]	; 0x34
 8007732:	2301      	movs	r3, #1
 8007734:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	f383 8810 	msr	PRIMASK, r3
}
 800773c:	46c0      	nop			; (mov r8, r8)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4936      	ldr	r1, [pc, #216]	; (8007824 <UART_RxISR_16BIT+0x164>)
 800774a:	400a      	ands	r2, r1
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	f383 8810 	msr	PRIMASK, r3
}
 8007758:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800775a:	f3ef 8310 	mrs	r3, PRIMASK
 800775e:	623b      	str	r3, [r7, #32]
  return(result);
 8007760:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007762:	633b      	str	r3, [r7, #48]	; 0x30
 8007764:	2301      	movs	r3, #1
 8007766:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	f383 8810 	msr	PRIMASK, r3
}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	2101      	movs	r1, #1
 800777c:	438a      	bics	r2, r1
 800777e:	609a      	str	r2, [r3, #8]
 8007780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	f383 8810 	msr	PRIMASK, r3
}
 800778a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2220      	movs	r2, #32
 8007790:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2200      	movs	r2, #0
 8007796:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800779c:	2b01      	cmp	r3, #1
 800779e:	d12f      	bne.n	8007800 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077a6:	f3ef 8310 	mrs	r3, PRIMASK
 80077aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80077ac:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b0:	2301      	movs	r3, #1
 80077b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f383 8810 	msr	PRIMASK, r3
}
 80077ba:	46c0      	nop			; (mov r8, r8)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2110      	movs	r1, #16
 80077c8:	438a      	bics	r2, r1
 80077ca:	601a      	str	r2, [r3, #0]
 80077cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f383 8810 	msr	PRIMASK, r3
}
 80077d6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	69db      	ldr	r3, [r3, #28]
 80077de:	2210      	movs	r2, #16
 80077e0:	4013      	ands	r3, r2
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d103      	bne.n	80077ee <UART_RxISR_16BIT+0x12e>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2210      	movs	r2, #16
 80077ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2258      	movs	r2, #88	; 0x58
 80077f2:	5a9a      	ldrh	r2, [r3, r2]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	0011      	movs	r1, r2
 80077f8:	0018      	movs	r0, r3
 80077fa:	f7ff f9a5 	bl	8006b48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077fe:	e00c      	b.n	800781a <UART_RxISR_16BIT+0x15a>
        HAL_UART_RxCpltCallback(huart);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	0018      	movs	r0, r3
 8007804:	f7ff f990 	bl	8006b28 <HAL_UART_RxCpltCallback>
}
 8007808:	e007      	b.n	800781a <UART_RxISR_16BIT+0x15a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	699a      	ldr	r2, [r3, #24]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2108      	movs	r1, #8
 8007816:	430a      	orrs	r2, r1
 8007818:	619a      	str	r2, [r3, #24]
}
 800781a:	46c0      	nop			; (mov r8, r8)
 800781c:	46bd      	mov	sp, r7
 800781e:	b010      	add	sp, #64	; 0x40
 8007820:	bd80      	pop	{r7, pc}
 8007822:	46c0      	nop			; (mov r8, r8)
 8007824:	fffffedf 	.word	0xfffffedf

08007828 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007830:	46c0      	nop			; (mov r8, r8)
 8007832:	46bd      	mov	sp, r7
 8007834:	b002      	add	sp, #8
 8007836:	bd80      	pop	{r7, pc}

08007838 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	0002      	movs	r2, r0
 8007840:	1dbb      	adds	r3, r7, #6
 8007842:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007844:	2300      	movs	r3, #0
 8007846:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007848:	1dbb      	adds	r3, r7, #6
 800784a:	2200      	movs	r2, #0
 800784c:	5e9b      	ldrsh	r3, [r3, r2]
 800784e:	2b84      	cmp	r3, #132	; 0x84
 8007850:	d006      	beq.n	8007860 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8007852:	1dbb      	adds	r3, r7, #6
 8007854:	2200      	movs	r2, #0
 8007856:	5e9a      	ldrsh	r2, [r3, r2]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	18d3      	adds	r3, r2, r3
 800785c:	3303      	adds	r3, #3
 800785e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007860:	68fb      	ldr	r3, [r7, #12]
}
 8007862:	0018      	movs	r0, r3
 8007864:	46bd      	mov	sp, r7
 8007866:	b004      	add	sp, #16
 8007868:	bd80      	pop	{r7, pc}

0800786a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800786e:	f001 f87d 	bl	800896c <vTaskStartScheduler>
  
  return osOK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	0018      	movs	r0, r3
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800787a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800787c:	b089      	sub	sp, #36	; 0x24
 800787e:	af04      	add	r7, sp, #16
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d020      	beq.n	80078ce <osThreadCreate+0x54>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d01c      	beq.n	80078ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685c      	ldr	r4, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681d      	ldr	r5, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	691e      	ldr	r6, [r3, #16]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2208      	movs	r2, #8
 80078a4:	5e9b      	ldrsh	r3, [r3, r2]
 80078a6:	0018      	movs	r0, r3
 80078a8:	f7ff ffc6 	bl	8007838 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	695a      	ldr	r2, [r3, #20]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	9302      	str	r3, [sp, #8]
 80078b8:	9201      	str	r2, [sp, #4]
 80078ba:	9000      	str	r0, [sp, #0]
 80078bc:	000b      	movs	r3, r1
 80078be:	0032      	movs	r2, r6
 80078c0:	0029      	movs	r1, r5
 80078c2:	0020      	movs	r0, r4
 80078c4:	f000 febf 	bl	8008646 <xTaskCreateStatic>
 80078c8:	0003      	movs	r3, r0
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	e01d      	b.n	800790a <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	685c      	ldr	r4, [r3, #4]
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078da:	b29e      	uxth	r6, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2208      	movs	r2, #8
 80078e0:	5e9b      	ldrsh	r3, [r3, r2]
 80078e2:	0018      	movs	r0, r3
 80078e4:	f7ff ffa8 	bl	8007838 <makeFreeRtosPriority>
 80078e8:	0001      	movs	r1, r0
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	230c      	movs	r3, #12
 80078ee:	18fb      	adds	r3, r7, r3
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	9100      	str	r1, [sp, #0]
 80078f4:	0013      	movs	r3, r2
 80078f6:	0032      	movs	r2, r6
 80078f8:	0029      	movs	r1, r5
 80078fa:	0020      	movs	r0, r4
 80078fc:	f000 fee6 	bl	80086cc <xTaskCreate>
 8007900:	0003      	movs	r3, r0
 8007902:	2b01      	cmp	r3, #1
 8007904:	d001      	beq.n	800790a <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	e000      	b.n	800790c <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800790a:	68fb      	ldr	r3, [r7, #12]
}
 800790c:	0018      	movs	r0, r3
 800790e:	46bd      	mov	sp, r7
 8007910:	b005      	add	sp, #20
 8007912:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007914 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <osDelay+0x16>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	e000      	b.n	800792c <osDelay+0x18>
 800792a:	2301      	movs	r3, #1
 800792c:	0018      	movs	r0, r3
 800792e:	f000 fff7 	bl	8008920 <vTaskDelay>
  
  return osOK;
 8007932:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007934:	0018      	movs	r0, r3
 8007936:	46bd      	mov	sp, r7
 8007938:	b004      	add	sp, #16
 800793a:	bd80      	pop	{r7, pc}

0800793c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	3308      	adds	r3, #8
 8007948:	001a      	movs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	4252      	negs	r2, r2
 8007954:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	3308      	adds	r3, #8
 800795a:	001a      	movs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	3308      	adds	r3, #8
 8007964:	001a      	movs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007970:	46c0      	nop			; (mov r8, r8)
 8007972:	46bd      	mov	sp, r7
 8007974:	b002      	add	sp, #8
 8007976:	bd80      	pop	{r7, pc}

08007978 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	46bd      	mov	sp, r7
 800798a:	b002      	add	sp, #8
 800798c:	bd80      	pop	{r7, pc}

0800798e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	68fa      	ldr	r2, [r7, #12]
 80079a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689a      	ldr	r2, [r3, #8]
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	1c5a      	adds	r2, r3, #1
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	601a      	str	r2, [r3, #0]
}
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	46bd      	mov	sp, r7
 80079ce:	b004      	add	sp, #16
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	3301      	adds	r3, #1
 80079e6:	d103      	bne.n	80079f0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	60fb      	str	r3, [r7, #12]
 80079ee:	e00c      	b.n	8007a0a <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3308      	adds	r3, #8
 80079f4:	60fb      	str	r3, [r7, #12]
 80079f6:	e002      	b.n	80079fe <vListInsert+0x2c>
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d2f6      	bcs.n	80079f8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	1c5a      	adds	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	601a      	str	r2, [r3, #0]
}
 8007a36:	46c0      	nop			; (mov r8, r8)
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	b004      	add	sp, #16
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	691b      	ldr	r3, [r3, #16]
 8007a4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6892      	ldr	r2, [r2, #8]
 8007a54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	6852      	ldr	r2, [r2, #4]
 8007a5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d103      	bne.n	8007a72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	689a      	ldr	r2, [r3, #8]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	1e5a      	subs	r2, r3, #1
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
}
 8007a86:	0018      	movs	r0, r3
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	b004      	add	sp, #16
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d101      	bne.n	8007aa6 <xQueueGenericReset+0x18>
 8007aa2:	b672      	cpsid	i
 8007aa4:	e7fe      	b.n	8007aa4 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8007aa6:	f002 f8ab 	bl	8009c00 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	434b      	muls	r3, r1
 8007ab8:	18d2      	adds	r2, r2, r3
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ad4:	1e59      	subs	r1, r3, #1
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	434b      	muls	r3, r1
 8007adc:	18d2      	adds	r2, r2, r3
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2244      	movs	r2, #68	; 0x44
 8007ae6:	21ff      	movs	r1, #255	; 0xff
 8007ae8:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2245      	movs	r2, #69	; 0x45
 8007aee:	21ff      	movs	r1, #255	; 0xff
 8007af0:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d10d      	bne.n	8007b14 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d013      	beq.n	8007b28 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	3310      	adds	r3, #16
 8007b04:	0018      	movs	r0, r3
 8007b06:	f001 f985 	bl	8008e14 <xTaskRemoveFromEventList>
 8007b0a:	1e03      	subs	r3, r0, #0
 8007b0c:	d00c      	beq.n	8007b28 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007b0e:	f002 f867 	bl	8009be0 <vPortYield>
 8007b12:	e009      	b.n	8007b28 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3310      	adds	r3, #16
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f7ff ff0f 	bl	800793c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	3324      	adds	r3, #36	; 0x24
 8007b22:	0018      	movs	r0, r3
 8007b24:	f7ff ff0a 	bl	800793c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007b28:	f002 f87c 	bl	8009c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007b2c:	2301      	movs	r3, #1
}
 8007b2e:	0018      	movs	r0, r3
 8007b30:	46bd      	mov	sp, r7
 8007b32:	b004      	add	sp, #16
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007b36:	b590      	push	{r4, r7, lr}
 8007b38:	b089      	sub	sp, #36	; 0x24
 8007b3a:	af02      	add	r7, sp, #8
 8007b3c:	60f8      	str	r0, [r7, #12]
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d101      	bne.n	8007b4e <xQueueGenericCreateStatic+0x18>
 8007b4a:	b672      	cpsid	i
 8007b4c:	e7fe      	b.n	8007b4c <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <xQueueGenericCreateStatic+0x22>
 8007b54:	b672      	cpsid	i
 8007b56:	e7fe      	b.n	8007b56 <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d002      	beq.n	8007b64 <xQueueGenericCreateStatic+0x2e>
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <xQueueGenericCreateStatic+0x32>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e000      	b.n	8007b6a <xQueueGenericCreateStatic+0x34>
 8007b68:	2300      	movs	r3, #0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d101      	bne.n	8007b72 <xQueueGenericCreateStatic+0x3c>
 8007b6e:	b672      	cpsid	i
 8007b70:	e7fe      	b.n	8007b70 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d102      	bne.n	8007b7e <xQueueGenericCreateStatic+0x48>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d101      	bne.n	8007b82 <xQueueGenericCreateStatic+0x4c>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e000      	b.n	8007b84 <xQueueGenericCreateStatic+0x4e>
 8007b82:	2300      	movs	r3, #0
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d101      	bne.n	8007b8c <xQueueGenericCreateStatic+0x56>
 8007b88:	b672      	cpsid	i
 8007b8a:	e7fe      	b.n	8007b8a <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007b8c:	2348      	movs	r3, #72	; 0x48
 8007b8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	2b48      	cmp	r3, #72	; 0x48
 8007b94:	d001      	beq.n	8007b9a <xQueueGenericCreateStatic+0x64>
 8007b96:	b672      	cpsid	i
 8007b98:	e7fe      	b.n	8007b98 <xQueueGenericCreateStatic+0x62>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00e      	beq.n	8007bc2 <xQueueGenericCreateStatic+0x8c>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	2246      	movs	r2, #70	; 0x46
 8007ba8:	2101      	movs	r1, #1
 8007baa:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007bac:	2328      	movs	r3, #40	; 0x28
 8007bae:	18fb      	adds	r3, r7, r3
 8007bb0:	781c      	ldrb	r4, [r3, #0]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	68b9      	ldr	r1, [r7, #8]
 8007bb6:	68f8      	ldr	r0, [r7, #12]
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	0023      	movs	r3, r4
 8007bbe:	f000 f83b 	bl	8007c38 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007bc2:	697b      	ldr	r3, [r7, #20]
	}
 8007bc4:	0018      	movs	r0, r3
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	b007      	add	sp, #28
 8007bca:	bd90      	pop	{r4, r7, pc}

08007bcc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007bcc:	b590      	push	{r4, r7, lr}
 8007bce:	b08b      	sub	sp, #44	; 0x2c
 8007bd0:	af02      	add	r7, sp, #8
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	1dfb      	adds	r3, r7, #7
 8007bd8:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d101      	bne.n	8007be4 <xQueueGenericCreate+0x18>
 8007be0:	b672      	cpsid	i
 8007be2:	e7fe      	b.n	8007be2 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d102      	bne.n	8007bf0 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
 8007bee:	e003      	b.n	8007bf8 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	4353      	muls	r3, r2
 8007bf6:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	3348      	adds	r3, #72	; 0x48
 8007bfc:	0018      	movs	r0, r3
 8007bfe:	f002 f897 	bl	8009d30 <pvPortMalloc>
 8007c02:	0003      	movs	r3, r0
 8007c04:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8007c06:	69bb      	ldr	r3, [r7, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d010      	beq.n	8007c2e <xQueueGenericCreate+0x62>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	3348      	adds	r3, #72	; 0x48
 8007c10:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007c12:	69bb      	ldr	r3, [r7, #24]
 8007c14:	2246      	movs	r2, #70	; 0x46
 8007c16:	2100      	movs	r1, #0
 8007c18:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007c1a:	1dfb      	adds	r3, r7, #7
 8007c1c:	781c      	ldrb	r4, [r3, #0]
 8007c1e:	697a      	ldr	r2, [r7, #20]
 8007c20:	68b9      	ldr	r1, [r7, #8]
 8007c22:	68f8      	ldr	r0, [r7, #12]
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	9300      	str	r3, [sp, #0]
 8007c28:	0023      	movs	r3, r4
 8007c2a:	f000 f805 	bl	8007c38 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007c2e:	69bb      	ldr	r3, [r7, #24]
	}
 8007c30:	0018      	movs	r0, r3
 8007c32:	46bd      	mov	sp, r7
 8007c34:	b009      	add	sp, #36	; 0x24
 8007c36:	bd90      	pop	{r4, r7, pc}

08007c38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	60f8      	str	r0, [r7, #12]
 8007c40:	60b9      	str	r1, [r7, #8]
 8007c42:	607a      	str	r2, [r7, #4]
 8007c44:	001a      	movs	r2, r3
 8007c46:	1cfb      	adds	r3, r7, #3
 8007c48:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d103      	bne.n	8007c58 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	e002      	b.n	8007c5e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007c5e:	69bb      	ldr	r3, [r7, #24]
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	0018      	movs	r0, r3
 8007c70:	f7ff ff0d 	bl	8007a8e <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007c74:	46c0      	nop			; (mov r8, r8)
 8007c76:	46bd      	mov	sp, r7
 8007c78:	b004      	add	sp, #16
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08a      	sub	sp, #40	; 0x28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
 8007c88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8007c92:	6a3b      	ldr	r3, [r7, #32]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <xQueueGenericSend+0x20>
 8007c98:	b672      	cpsid	i
 8007c9a:	e7fe      	b.n	8007c9a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d103      	bne.n	8007caa <xQueueGenericSend+0x2e>
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <xQueueGenericSend+0x32>
 8007caa:	2301      	movs	r3, #1
 8007cac:	e000      	b.n	8007cb0 <xQueueGenericSend+0x34>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d101      	bne.n	8007cb8 <xQueueGenericSend+0x3c>
 8007cb4:	b672      	cpsid	i
 8007cb6:	e7fe      	b.n	8007cb6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d103      	bne.n	8007cc6 <xQueueGenericSend+0x4a>
 8007cbe:	6a3b      	ldr	r3, [r7, #32]
 8007cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d101      	bne.n	8007cca <xQueueGenericSend+0x4e>
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e000      	b.n	8007ccc <xQueueGenericSend+0x50>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <xQueueGenericSend+0x58>
 8007cd0:	b672      	cpsid	i
 8007cd2:	e7fe      	b.n	8007cd2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cd4:	f001 fa36 	bl	8009144 <xTaskGetSchedulerState>
 8007cd8:	1e03      	subs	r3, r0, #0
 8007cda:	d102      	bne.n	8007ce2 <xQueueGenericSend+0x66>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <xQueueGenericSend+0x6a>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e000      	b.n	8007ce8 <xQueueGenericSend+0x6c>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d101      	bne.n	8007cf0 <xQueueGenericSend+0x74>
 8007cec:	b672      	cpsid	i
 8007cee:	e7fe      	b.n	8007cee <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007cf0:	f001 ff86 	bl	8009c00 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf8:	6a3b      	ldr	r3, [r7, #32]
 8007cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d302      	bcc.n	8007d06 <xQueueGenericSend+0x8a>
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d11e      	bne.n	8007d44 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007d06:	683a      	ldr	r2, [r7, #0]
 8007d08:	68b9      	ldr	r1, [r7, #8]
 8007d0a:	6a3b      	ldr	r3, [r7, #32]
 8007d0c:	0018      	movs	r0, r3
 8007d0e:	f000 fb09 	bl	8008324 <prvCopyDataToQueue>
 8007d12:	0003      	movs	r3, r0
 8007d14:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d16:	6a3b      	ldr	r3, [r7, #32]
 8007d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d1e:	6a3b      	ldr	r3, [r7, #32]
 8007d20:	3324      	adds	r3, #36	; 0x24
 8007d22:	0018      	movs	r0, r3
 8007d24:	f001 f876 	bl	8008e14 <xTaskRemoveFromEventList>
 8007d28:	1e03      	subs	r3, r0, #0
 8007d2a:	d007      	beq.n	8007d3c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007d2c:	f001 ff58 	bl	8009be0 <vPortYield>
 8007d30:	e004      	b.n	8007d3c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d001      	beq.n	8007d3c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007d38:	f001 ff52 	bl	8009be0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007d3c:	f001 ff72 	bl	8009c24 <vPortExitCritical>
				return pdPASS;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e05b      	b.n	8007dfc <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d103      	bne.n	8007d52 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007d4a:	f001 ff6b 	bl	8009c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	e054      	b.n	8007dfc <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d106      	bne.n	8007d66 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007d58:	2314      	movs	r3, #20
 8007d5a:	18fb      	adds	r3, r7, r3
 8007d5c:	0018      	movs	r0, r3
 8007d5e:	f001 f8b5 	bl	8008ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007d62:	2301      	movs	r3, #1
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007d66:	f001 ff5d 	bl	8009c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007d6a:	f000 fe53 	bl	8008a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007d6e:	f001 ff47 	bl	8009c00 <vPortEnterCritical>
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	2244      	movs	r2, #68	; 0x44
 8007d76:	5c9b      	ldrb	r3, [r3, r2]
 8007d78:	b25b      	sxtb	r3, r3
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	d103      	bne.n	8007d86 <xQueueGenericSend+0x10a>
 8007d7e:	6a3b      	ldr	r3, [r7, #32]
 8007d80:	2244      	movs	r2, #68	; 0x44
 8007d82:	2100      	movs	r1, #0
 8007d84:	5499      	strb	r1, [r3, r2]
 8007d86:	6a3b      	ldr	r3, [r7, #32]
 8007d88:	2245      	movs	r2, #69	; 0x45
 8007d8a:	5c9b      	ldrb	r3, [r3, r2]
 8007d8c:	b25b      	sxtb	r3, r3
 8007d8e:	3301      	adds	r3, #1
 8007d90:	d103      	bne.n	8007d9a <xQueueGenericSend+0x11e>
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	2245      	movs	r2, #69	; 0x45
 8007d96:	2100      	movs	r1, #0
 8007d98:	5499      	strb	r1, [r3, r2]
 8007d9a:	f001 ff43 	bl	8009c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d9e:	1d3a      	adds	r2, r7, #4
 8007da0:	2314      	movs	r3, #20
 8007da2:	18fb      	adds	r3, r7, r3
 8007da4:	0011      	movs	r1, r2
 8007da6:	0018      	movs	r0, r3
 8007da8:	f001 f8a4 	bl	8008ef4 <xTaskCheckForTimeOut>
 8007dac:	1e03      	subs	r3, r0, #0
 8007dae:	d11e      	bne.n	8007dee <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	0018      	movs	r0, r3
 8007db4:	f000 fbbb 	bl	800852e <prvIsQueueFull>
 8007db8:	1e03      	subs	r3, r0, #0
 8007dba:	d011      	beq.n	8007de0 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007dbc:	6a3b      	ldr	r3, [r7, #32]
 8007dbe:	3310      	adds	r3, #16
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	0011      	movs	r1, r2
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	f000 ffe1 	bl	8008d8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007dca:	6a3b      	ldr	r3, [r7, #32]
 8007dcc:	0018      	movs	r0, r3
 8007dce:	f000 fb3a 	bl	8008446 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007dd2:	f000 fe2b 	bl	8008a2c <xTaskResumeAll>
 8007dd6:	1e03      	subs	r3, r0, #0
 8007dd8:	d18a      	bne.n	8007cf0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8007dda:	f001 ff01 	bl	8009be0 <vPortYield>
 8007dde:	e787      	b.n	8007cf0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007de0:	6a3b      	ldr	r3, [r7, #32]
 8007de2:	0018      	movs	r0, r3
 8007de4:	f000 fb2f 	bl	8008446 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007de8:	f000 fe20 	bl	8008a2c <xTaskResumeAll>
 8007dec:	e780      	b.n	8007cf0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	0018      	movs	r0, r3
 8007df2:	f000 fb28 	bl	8008446 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007df6:	f000 fe19 	bl	8008a2c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007dfa:	2300      	movs	r3, #0
		}
	}
}
 8007dfc:	0018      	movs	r0, r3
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	b00a      	add	sp, #40	; 0x28
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007e04:	b590      	push	{r4, r7, lr}
 8007e06:	b089      	sub	sp, #36	; 0x24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	61bb      	str	r3, [r7, #24]

	configASSERT( pxQueue );
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d101      	bne.n	8007e20 <xQueueGenericSendFromISR+0x1c>
 8007e1c:	b672      	cpsid	i
 8007e1e:	e7fe      	b.n	8007e1e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d103      	bne.n	8007e2e <xQueueGenericSendFromISR+0x2a>
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <xQueueGenericSendFromISR+0x2e>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e000      	b.n	8007e34 <xQueueGenericSendFromISR+0x30>
 8007e32:	2300      	movs	r3, #0
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <xQueueGenericSendFromISR+0x38>
 8007e38:	b672      	cpsid	i
 8007e3a:	e7fe      	b.n	8007e3a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d103      	bne.n	8007e4a <xQueueGenericSendFromISR+0x46>
 8007e42:	69bb      	ldr	r3, [r7, #24]
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d101      	bne.n	8007e4e <xQueueGenericSendFromISR+0x4a>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <xQueueGenericSendFromISR+0x4c>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d101      	bne.n	8007e58 <xQueueGenericSendFromISR+0x54>
 8007e54:	b672      	cpsid	i
 8007e56:	e7fe      	b.n	8007e56 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e58:	f001 fefc 	bl	8009c54 <ulSetInterruptMaskFromISR>
 8007e5c:	0003      	movs	r3, r0
 8007e5e:	617b      	str	r3, [r7, #20]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d302      	bcc.n	8007e72 <xQueueGenericSendFromISR+0x6e>
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	2b02      	cmp	r3, #2
 8007e70:	d12e      	bne.n	8007ed0 <xQueueGenericSendFromISR+0xcc>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e72:	2413      	movs	r4, #19
 8007e74:	193b      	adds	r3, r7, r4
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	2145      	movs	r1, #69	; 0x45
 8007e7a:	5c52      	ldrb	r2, [r2, r1]
 8007e7c:	701a      	strb	r2, [r3, #0]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	0018      	movs	r0, r3
 8007e86:	f000 fa4d 	bl	8008324 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e8a:	193b      	adds	r3, r7, r4
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	b25b      	sxtb	r3, r3
 8007e90:	3301      	adds	r3, #1
 8007e92:	d111      	bne.n	8007eb8 <xQueueGenericSendFromISR+0xb4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d016      	beq.n	8007eca <xQueueGenericSendFromISR+0xc6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	3324      	adds	r3, #36	; 0x24
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	f000 ffb7 	bl	8008e14 <xTaskRemoveFromEventList>
 8007ea6:	1e03      	subs	r3, r0, #0
 8007ea8:	d00f      	beq.n	8007eca <xQueueGenericSendFromISR+0xc6>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d00c      	beq.n	8007eca <xQueueGenericSendFromISR+0xc6>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	e008      	b.n	8007eca <xQueueGenericSendFromISR+0xc6>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007eb8:	2313      	movs	r3, #19
 8007eba:	18fb      	adds	r3, r7, r3
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	b259      	sxtb	r1, r3
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	2245      	movs	r2, #69	; 0x45
 8007ec8:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8007eca:	2301      	movs	r3, #1
 8007ecc:	61fb      	str	r3, [r7, #28]
		{
 8007ece:	e001      	b.n	8007ed4 <xQueueGenericSendFromISR+0xd0>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	0018      	movs	r0, r3
 8007ed8:	f001 fec2 	bl	8009c60 <vClearInterruptMaskFromISR>

	return xReturn;
 8007edc:	69fb      	ldr	r3, [r7, #28]
}
 8007ede:	0018      	movs	r0, r3
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	b009      	add	sp, #36	; 0x24
 8007ee4:	bd90      	pop	{r4, r7, pc}

08007ee6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007ee6:	b580      	push	{r7, lr}
 8007ee8:	b088      	sub	sp, #32
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
 8007eee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <xQueueGiveFromISR+0x18>
 8007efa:	b672      	cpsid	i
 8007efc:	e7fe      	b.n	8007efc <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <xQueueGiveFromISR+0x24>
 8007f06:	b672      	cpsid	i
 8007f08:	e7fe      	b.n	8007f08 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d103      	bne.n	8007f1a <xQueueGiveFromISR+0x34>
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <xQueueGiveFromISR+0x38>
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e000      	b.n	8007f20 <xQueueGiveFromISR+0x3a>
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d101      	bne.n	8007f28 <xQueueGiveFromISR+0x42>
 8007f24:	b672      	cpsid	i
 8007f26:	e7fe      	b.n	8007f26 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f28:	f001 fe94 	bl	8009c54 <ulSetInterruptMaskFromISR>
 8007f2c:	0003      	movs	r3, r0
 8007f2e:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f34:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d22c      	bcs.n	8007f9a <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007f40:	200f      	movs	r0, #15
 8007f42:	183b      	adds	r3, r7, r0
 8007f44:	69ba      	ldr	r2, [r7, #24]
 8007f46:	2145      	movs	r1, #69	; 0x45
 8007f48:	5c52      	ldrb	r2, [r2, r1]
 8007f4a:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	1c5a      	adds	r2, r3, #1
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007f54:	183b      	adds	r3, r7, r0
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	b25b      	sxtb	r3, r3
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	d111      	bne.n	8007f82 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f5e:	69bb      	ldr	r3, [r7, #24]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d016      	beq.n	8007f94 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f66:	69bb      	ldr	r3, [r7, #24]
 8007f68:	3324      	adds	r3, #36	; 0x24
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f000 ff52 	bl	8008e14 <xTaskRemoveFromEventList>
 8007f70:	1e03      	subs	r3, r0, #0
 8007f72:	d00f      	beq.n	8007f94 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00c      	beq.n	8007f94 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	601a      	str	r2, [r3, #0]
 8007f80:	e008      	b.n	8007f94 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007f82:	230f      	movs	r3, #15
 8007f84:	18fb      	adds	r3, r7, r3
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	b259      	sxtb	r1, r3
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	2245      	movs	r2, #69	; 0x45
 8007f92:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8007f94:	2301      	movs	r3, #1
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e001      	b.n	8007f9e <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	f001 fe5d 	bl	8009c60 <vClearInterruptMaskFromISR>

	return xReturn;
 8007fa6:	69fb      	ldr	r3, [r7, #28]
}
 8007fa8:	0018      	movs	r0, r3
 8007faa:	46bd      	mov	sp, r7
 8007fac:	b008      	add	sp, #32
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b08a      	sub	sp, #40	; 0x28
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007fc4:	6a3b      	ldr	r3, [r7, #32]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d101      	bne.n	8007fce <xQueueReceive+0x1e>
 8007fca:	b672      	cpsid	i
 8007fcc:	e7fe      	b.n	8007fcc <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d103      	bne.n	8007fdc <xQueueReceive+0x2c>
 8007fd4:	6a3b      	ldr	r3, [r7, #32]
 8007fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d101      	bne.n	8007fe0 <xQueueReceive+0x30>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <xQueueReceive+0x32>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <xQueueReceive+0x3a>
 8007fe6:	b672      	cpsid	i
 8007fe8:	e7fe      	b.n	8007fe8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007fea:	f001 f8ab 	bl	8009144 <xTaskGetSchedulerState>
 8007fee:	1e03      	subs	r3, r0, #0
 8007ff0:	d102      	bne.n	8007ff8 <xQueueReceive+0x48>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <xQueueReceive+0x4c>
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <xQueueReceive+0x4e>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d101      	bne.n	8008006 <xQueueReceive+0x56>
 8008002:	b672      	cpsid	i
 8008004:	e7fe      	b.n	8008004 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008006:	f001 fdfb 	bl	8009c00 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800800a:	6a3b      	ldr	r3, [r7, #32]
 800800c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01a      	beq.n	800804c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	0011      	movs	r1, r2
 800801c:	0018      	movs	r0, r3
 800801e:	f000 f9ec 	bl	80083fa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	1e5a      	subs	r2, r3, #1
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800802a:	6a3b      	ldr	r3, [r7, #32]
 800802c:	691b      	ldr	r3, [r3, #16]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d008      	beq.n	8008044 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	3310      	adds	r3, #16
 8008036:	0018      	movs	r0, r3
 8008038:	f000 feec 	bl	8008e14 <xTaskRemoveFromEventList>
 800803c:	1e03      	subs	r3, r0, #0
 800803e:	d001      	beq.n	8008044 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008040:	f001 fdce 	bl	8009be0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008044:	f001 fdee 	bl	8009c24 <vPortExitCritical>
				return pdPASS;
 8008048:	2301      	movs	r3, #1
 800804a:	e062      	b.n	8008112 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d103      	bne.n	800805a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008052:	f001 fde7 	bl	8009c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008056:	2300      	movs	r3, #0
 8008058:	e05b      	b.n	8008112 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	2b00      	cmp	r3, #0
 800805e:	d106      	bne.n	800806e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008060:	2314      	movs	r3, #20
 8008062:	18fb      	adds	r3, r7, r3
 8008064:	0018      	movs	r0, r3
 8008066:	f000 ff31 	bl	8008ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800806a:	2301      	movs	r3, #1
 800806c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800806e:	f001 fdd9 	bl	8009c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008072:	f000 fccf 	bl	8008a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008076:	f001 fdc3 	bl	8009c00 <vPortEnterCritical>
 800807a:	6a3b      	ldr	r3, [r7, #32]
 800807c:	2244      	movs	r2, #68	; 0x44
 800807e:	5c9b      	ldrb	r3, [r3, r2]
 8008080:	b25b      	sxtb	r3, r3
 8008082:	3301      	adds	r3, #1
 8008084:	d103      	bne.n	800808e <xQueueReceive+0xde>
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	2244      	movs	r2, #68	; 0x44
 800808a:	2100      	movs	r1, #0
 800808c:	5499      	strb	r1, [r3, r2]
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	2245      	movs	r2, #69	; 0x45
 8008092:	5c9b      	ldrb	r3, [r3, r2]
 8008094:	b25b      	sxtb	r3, r3
 8008096:	3301      	adds	r3, #1
 8008098:	d103      	bne.n	80080a2 <xQueueReceive+0xf2>
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	2245      	movs	r2, #69	; 0x45
 800809e:	2100      	movs	r1, #0
 80080a0:	5499      	strb	r1, [r3, r2]
 80080a2:	f001 fdbf 	bl	8009c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80080a6:	1d3a      	adds	r2, r7, #4
 80080a8:	2314      	movs	r3, #20
 80080aa:	18fb      	adds	r3, r7, r3
 80080ac:	0011      	movs	r1, r2
 80080ae:	0018      	movs	r0, r3
 80080b0:	f000 ff20 	bl	8008ef4 <xTaskCheckForTimeOut>
 80080b4:	1e03      	subs	r3, r0, #0
 80080b6:	d11e      	bne.n	80080f6 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	0018      	movs	r0, r3
 80080bc:	f000 fa21 	bl	8008502 <prvIsQueueEmpty>
 80080c0:	1e03      	subs	r3, r0, #0
 80080c2:	d011      	beq.n	80080e8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80080c4:	6a3b      	ldr	r3, [r7, #32]
 80080c6:	3324      	adds	r3, #36	; 0x24
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	0011      	movs	r1, r2
 80080cc:	0018      	movs	r0, r3
 80080ce:	f000 fe5d 	bl	8008d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80080d2:	6a3b      	ldr	r3, [r7, #32]
 80080d4:	0018      	movs	r0, r3
 80080d6:	f000 f9b6 	bl	8008446 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80080da:	f000 fca7 	bl	8008a2c <xTaskResumeAll>
 80080de:	1e03      	subs	r3, r0, #0
 80080e0:	d191      	bne.n	8008006 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 80080e2:	f001 fd7d 	bl	8009be0 <vPortYield>
 80080e6:	e78e      	b.n	8008006 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80080e8:	6a3b      	ldr	r3, [r7, #32]
 80080ea:	0018      	movs	r0, r3
 80080ec:	f000 f9ab 	bl	8008446 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80080f0:	f000 fc9c 	bl	8008a2c <xTaskResumeAll>
 80080f4:	e787      	b.n	8008006 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	0018      	movs	r0, r3
 80080fa:	f000 f9a4 	bl	8008446 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80080fe:	f000 fc95 	bl	8008a2c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	0018      	movs	r0, r3
 8008106:	f000 f9fc 	bl	8008502 <prvIsQueueEmpty>
 800810a:	1e03      	subs	r3, r0, #0
 800810c:	d100      	bne.n	8008110 <xQueueReceive+0x160>
 800810e:	e77a      	b.n	8008006 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008110:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008112:	0018      	movs	r0, r3
 8008114:	46bd      	mov	sp, r7
 8008116:	b00a      	add	sp, #40	; 0x28
 8008118:	bd80      	pop	{r7, pc}

0800811a <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800811a:	b580      	push	{r7, lr}
 800811c:	b08a      	sub	sp, #40	; 0x28
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
 8008122:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008124:	2300      	movs	r3, #0
 8008126:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800812c:	2300      	movs	r3, #0
 800812e:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <xQueueSemaphoreTake+0x20>
 8008136:	b672      	cpsid	i
 8008138:	e7fe      	b.n	8008138 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <xQueueSemaphoreTake+0x2c>
 8008142:	b672      	cpsid	i
 8008144:	e7fe      	b.n	8008144 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008146:	f000 fffd 	bl	8009144 <xTaskGetSchedulerState>
 800814a:	1e03      	subs	r3, r0, #0
 800814c:	d102      	bne.n	8008154 <xQueueSemaphoreTake+0x3a>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <xQueueSemaphoreTake+0x3e>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <xQueueSemaphoreTake+0x40>
 8008158:	2300      	movs	r3, #0
 800815a:	2b00      	cmp	r3, #0
 800815c:	d101      	bne.n	8008162 <xQueueSemaphoreTake+0x48>
 800815e:	b672      	cpsid	i
 8008160:	e7fe      	b.n	8008160 <xQueueSemaphoreTake+0x46>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008162:	f001 fd4d 	bl	8009c00 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816a:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d01d      	beq.n	80081ae <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	1e5a      	subs	r2, r3, #1
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d104      	bne.n	800818c <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008182:	f001 f939 	bl	80093f8 <pvTaskIncrementMutexHeldCount>
 8008186:	0002      	movs	r2, r0
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d008      	beq.n	80081a6 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	3310      	adds	r3, #16
 8008198:	0018      	movs	r0, r3
 800819a:	f000 fe3b 	bl	8008e14 <xTaskRemoveFromEventList>
 800819e:	1e03      	subs	r3, r0, #0
 80081a0:	d001      	beq.n	80081a6 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80081a2:	f001 fd1d 	bl	8009be0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80081a6:	f001 fd3d 	bl	8009c24 <vPortExitCritical>
				return pdPASS;
 80081aa:	2301      	movs	r3, #1
 80081ac:	e08b      	b.n	80082c6 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d108      	bne.n	80081c6 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <xQueueSemaphoreTake+0xa4>
 80081ba:	b672      	cpsid	i
 80081bc:	e7fe      	b.n	80081bc <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80081be:	f001 fd31 	bl	8009c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80081c2:	2300      	movs	r3, #0
 80081c4:	e07f      	b.n	80082c6 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80081c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d106      	bne.n	80081da <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80081cc:	230c      	movs	r3, #12
 80081ce:	18fb      	adds	r3, r7, r3
 80081d0:	0018      	movs	r0, r3
 80081d2:	f000 fe7b 	bl	8008ecc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80081d6:	2301      	movs	r3, #1
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80081da:	f001 fd23 	bl	8009c24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80081de:	f000 fc19 	bl	8008a14 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80081e2:	f001 fd0d 	bl	8009c00 <vPortEnterCritical>
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	2244      	movs	r2, #68	; 0x44
 80081ea:	5c9b      	ldrb	r3, [r3, r2]
 80081ec:	b25b      	sxtb	r3, r3
 80081ee:	3301      	adds	r3, #1
 80081f0:	d103      	bne.n	80081fa <xQueueSemaphoreTake+0xe0>
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	2244      	movs	r2, #68	; 0x44
 80081f6:	2100      	movs	r1, #0
 80081f8:	5499      	strb	r1, [r3, r2]
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	2245      	movs	r2, #69	; 0x45
 80081fe:	5c9b      	ldrb	r3, [r3, r2]
 8008200:	b25b      	sxtb	r3, r3
 8008202:	3301      	adds	r3, #1
 8008204:	d103      	bne.n	800820e <xQueueSemaphoreTake+0xf4>
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	2245      	movs	r2, #69	; 0x45
 800820a:	2100      	movs	r1, #0
 800820c:	5499      	strb	r1, [r3, r2]
 800820e:	f001 fd09 	bl	8009c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008212:	003a      	movs	r2, r7
 8008214:	230c      	movs	r3, #12
 8008216:	18fb      	adds	r3, r7, r3
 8008218:	0011      	movs	r1, r2
 800821a:	0018      	movs	r0, r3
 800821c:	f000 fe6a 	bl	8008ef4 <xTaskCheckForTimeOut>
 8008220:	1e03      	subs	r3, r0, #0
 8008222:	d12e      	bne.n	8008282 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	0018      	movs	r0, r3
 8008228:	f000 f96b 	bl	8008502 <prvIsQueueEmpty>
 800822c:	1e03      	subs	r3, r0, #0
 800822e:	d021      	beq.n	8008274 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d10a      	bne.n	800824e <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8008238:	f001 fce2 	bl	8009c00 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800823c:	69fb      	ldr	r3, [r7, #28]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	0018      	movs	r0, r3
 8008242:	f000 ff9b 	bl	800917c <xTaskPriorityInherit>
 8008246:	0003      	movs	r3, r0
 8008248:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800824a:	f001 fceb 	bl	8009c24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800824e:	69fb      	ldr	r3, [r7, #28]
 8008250:	3324      	adds	r3, #36	; 0x24
 8008252:	683a      	ldr	r2, [r7, #0]
 8008254:	0011      	movs	r1, r2
 8008256:	0018      	movs	r0, r3
 8008258:	f000 fd98 	bl	8008d8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	0018      	movs	r0, r3
 8008260:	f000 f8f1 	bl	8008446 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008264:	f000 fbe2 	bl	8008a2c <xTaskResumeAll>
 8008268:	1e03      	subs	r3, r0, #0
 800826a:	d000      	beq.n	800826e <xQueueSemaphoreTake+0x154>
 800826c:	e779      	b.n	8008162 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800826e:	f001 fcb7 	bl	8009be0 <vPortYield>
 8008272:	e776      	b.n	8008162 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	0018      	movs	r0, r3
 8008278:	f000 f8e5 	bl	8008446 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800827c:	f000 fbd6 	bl	8008a2c <xTaskResumeAll>
 8008280:	e76f      	b.n	8008162 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	0018      	movs	r0, r3
 8008286:	f000 f8de 	bl	8008446 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800828a:	f000 fbcf 	bl	8008a2c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800828e:	69fb      	ldr	r3, [r7, #28]
 8008290:	0018      	movs	r0, r3
 8008292:	f000 f936 	bl	8008502 <prvIsQueueEmpty>
 8008296:	1e03      	subs	r3, r0, #0
 8008298:	d100      	bne.n	800829c <xQueueSemaphoreTake+0x182>
 800829a:	e762      	b.n	8008162 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800829c:	6a3b      	ldr	r3, [r7, #32]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d010      	beq.n	80082c4 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 80082a2:	f001 fcad 	bl	8009c00 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	0018      	movs	r0, r3
 80082aa:	f000 f825 	bl	80082f8 <prvGetDisinheritPriorityAfterTimeout>
 80082ae:	0003      	movs	r3, r0
 80082b0:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	0011      	movs	r1, r2
 80082ba:	0018      	movs	r0, r3
 80082bc:	f001 f828 	bl	8009310 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80082c0:	f001 fcb0 	bl	8009c24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80082c4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80082c6:	0018      	movs	r0, r3
 80082c8:	46bd      	mov	sp, r7
 80082ca:	b00a      	add	sp, #40	; 0x28
 80082cc:	bd80      	pop	{r7, pc}

080082ce <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b084      	sub	sp, #16
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d101      	bne.n	80082e0 <uxQueueMessagesWaiting+0x12>
 80082dc:	b672      	cpsid	i
 80082de:	e7fe      	b.n	80082de <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 80082e0:	f001 fc8e 	bl	8009c00 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80082ea:	f001 fc9b 	bl	8009c24 <vPortExitCritical>

	return uxReturn;
 80082ee:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80082f0:	0018      	movs	r0, r3
 80082f2:	46bd      	mov	sp, r7
 80082f4:	b004      	add	sp, #16
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	d006      	beq.n	8008316 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2207      	movs	r2, #7
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	60fb      	str	r3, [r7, #12]
 8008314:	e001      	b.n	800831a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008316:	2300      	movs	r3, #0
 8008318:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800831a:	68fb      	ldr	r3, [r7, #12]
	}
 800831c:	0018      	movs	r0, r3
 800831e:	46bd      	mov	sp, r7
 8008320:	b004      	add	sp, #16
 8008322:	bd80      	pop	{r7, pc}

08008324 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b086      	sub	sp, #24
 8008328:	af00      	add	r7, sp, #0
 800832a:	60f8      	str	r0, [r7, #12]
 800832c:	60b9      	str	r1, [r7, #8]
 800832e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008330:	2300      	movs	r3, #0
 8008332:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008338:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10e      	bne.n	8008360 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d14e      	bne.n	80083e8 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	0018      	movs	r0, r3
 8008350:	f000 ff82 	bl	8009258 <xTaskPriorityDisinherit>
 8008354:	0003      	movs	r3, r0
 8008356:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	605a      	str	r2, [r3, #4]
 800835e:	e043      	b.n	80083e8 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d119      	bne.n	800839a <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6898      	ldr	r0, [r3, #8]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	0019      	movs	r1, r3
 8008372:	f001 fead 	bl	800a0d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837e:	18d2      	adds	r2, r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	429a      	cmp	r2, r3
 800838e:	d32b      	bcc.n	80083e8 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	609a      	str	r2, [r3, #8]
 8008398:	e026      	b.n	80083e8 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	68d8      	ldr	r0, [r3, #12]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	0019      	movs	r1, r3
 80083a6:	f001 fe93 	bl	800a0d0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68da      	ldr	r2, [r3, #12]
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b2:	425b      	negs	r3, r3
 80083b4:	18d2      	adds	r2, r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	68da      	ldr	r2, [r3, #12]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d207      	bcs.n	80083d6 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	685a      	ldr	r2, [r3, #4]
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ce:	425b      	negs	r3, r3
 80083d0:	18d2      	adds	r2, r2, r3
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d105      	bne.n	80083e8 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	1c5a      	adds	r2, r3, #1
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80083f0:	697b      	ldr	r3, [r7, #20]
}
 80083f2:	0018      	movs	r0, r3
 80083f4:	46bd      	mov	sp, r7
 80083f6:	b006      	add	sp, #24
 80083f8:	bd80      	pop	{r7, pc}

080083fa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008408:	2b00      	cmp	r3, #0
 800840a:	d018      	beq.n	800843e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008414:	18d2      	adds	r2, r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	429a      	cmp	r2, r3
 8008424:	d303      	bcc.n	800842e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	68d9      	ldr	r1, [r3, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	0018      	movs	r0, r3
 800843a:	f001 fe49 	bl	800a0d0 <memcpy>
	}
}
 800843e:	46c0      	nop			; (mov r8, r8)
 8008440:	46bd      	mov	sp, r7
 8008442:	b002      	add	sp, #8
 8008444:	bd80      	pop	{r7, pc}

08008446 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008446:	b580      	push	{r7, lr}
 8008448:	b084      	sub	sp, #16
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800844e:	f001 fbd7 	bl	8009c00 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008452:	230f      	movs	r3, #15
 8008454:	18fb      	adds	r3, r7, r3
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	2145      	movs	r1, #69	; 0x45
 800845a:	5c52      	ldrb	r2, [r2, r1]
 800845c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800845e:	e013      	b.n	8008488 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	2b00      	cmp	r3, #0
 8008466:	d016      	beq.n	8008496 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3324      	adds	r3, #36	; 0x24
 800846c:	0018      	movs	r0, r3
 800846e:	f000 fcd1 	bl	8008e14 <xTaskRemoveFromEventList>
 8008472:	1e03      	subs	r3, r0, #0
 8008474:	d001      	beq.n	800847a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008476:	f000 fd8d 	bl	8008f94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800847a:	210f      	movs	r1, #15
 800847c:	187b      	adds	r3, r7, r1
 800847e:	781b      	ldrb	r3, [r3, #0]
 8008480:	3b01      	subs	r3, #1
 8008482:	b2da      	uxtb	r2, r3
 8008484:	187b      	adds	r3, r7, r1
 8008486:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008488:	230f      	movs	r3, #15
 800848a:	18fb      	adds	r3, r7, r3
 800848c:	781b      	ldrb	r3, [r3, #0]
 800848e:	b25b      	sxtb	r3, r3
 8008490:	2b00      	cmp	r3, #0
 8008492:	dce5      	bgt.n	8008460 <prvUnlockQueue+0x1a>
 8008494:	e000      	b.n	8008498 <prvUnlockQueue+0x52>
					break;
 8008496:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2245      	movs	r2, #69	; 0x45
 800849c:	21ff      	movs	r1, #255	; 0xff
 800849e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80084a0:	f001 fbc0 	bl	8009c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80084a4:	f001 fbac 	bl	8009c00 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80084a8:	230e      	movs	r3, #14
 80084aa:	18fb      	adds	r3, r7, r3
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	2144      	movs	r1, #68	; 0x44
 80084b0:	5c52      	ldrb	r2, [r2, r1]
 80084b2:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084b4:	e013      	b.n	80084de <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d016      	beq.n	80084ec <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	3310      	adds	r3, #16
 80084c2:	0018      	movs	r0, r3
 80084c4:	f000 fca6 	bl	8008e14 <xTaskRemoveFromEventList>
 80084c8:	1e03      	subs	r3, r0, #0
 80084ca:	d001      	beq.n	80084d0 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80084cc:	f000 fd62 	bl	8008f94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80084d0:	210e      	movs	r1, #14
 80084d2:	187b      	adds	r3, r7, r1
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	3b01      	subs	r3, #1
 80084d8:	b2da      	uxtb	r2, r3
 80084da:	187b      	adds	r3, r7, r1
 80084dc:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80084de:	230e      	movs	r3, #14
 80084e0:	18fb      	adds	r3, r7, r3
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	b25b      	sxtb	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	dce5      	bgt.n	80084b6 <prvUnlockQueue+0x70>
 80084ea:	e000      	b.n	80084ee <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 80084ec:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2244      	movs	r2, #68	; 0x44
 80084f2:	21ff      	movs	r1, #255	; 0xff
 80084f4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80084f6:	f001 fb95 	bl	8009c24 <vPortExitCritical>
}
 80084fa:	46c0      	nop			; (mov r8, r8)
 80084fc:	46bd      	mov	sp, r7
 80084fe:	b004      	add	sp, #16
 8008500:	bd80      	pop	{r7, pc}

08008502 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b084      	sub	sp, #16
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800850a:	f001 fb79 	bl	8009c00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008512:	2b00      	cmp	r3, #0
 8008514:	d102      	bne.n	800851c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008516:	2301      	movs	r3, #1
 8008518:	60fb      	str	r3, [r7, #12]
 800851a:	e001      	b.n	8008520 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008520:	f001 fb80 	bl	8009c24 <vPortExitCritical>

	return xReturn;
 8008524:	68fb      	ldr	r3, [r7, #12]
}
 8008526:	0018      	movs	r0, r3
 8008528:	46bd      	mov	sp, r7
 800852a:	b004      	add	sp, #16
 800852c:	bd80      	pop	{r7, pc}

0800852e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b084      	sub	sp, #16
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008536:	f001 fb63 	bl	8009c00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008542:	429a      	cmp	r2, r3
 8008544:	d102      	bne.n	800854c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008546:	2301      	movs	r3, #1
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	e001      	b.n	8008550 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800854c:	2300      	movs	r3, #0
 800854e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008550:	f001 fb68 	bl	8009c24 <vPortExitCritical>

	return xReturn;
 8008554:	68fb      	ldr	r3, [r7, #12]
}
 8008556:	0018      	movs	r0, r3
 8008558:	46bd      	mov	sp, r7
 800855a:	b004      	add	sp, #16
 800855c:	bd80      	pop	{r7, pc}

0800855e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800855e:	b580      	push	{r7, lr}
 8008560:	b084      	sub	sp, #16
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	configASSERT( xQueue );
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <xQueueIsQueueFullFromISR+0x12>
 800856c:	b672      	cpsid	i
 800856e:	e7fe      	b.n	800856e <xQueueIsQueueFullFromISR+0x10>
	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008578:	429a      	cmp	r2, r3
 800857a:	d102      	bne.n	8008582 <xQueueIsQueueFullFromISR+0x24>
	{
		xReturn = pdTRUE;
 800857c:	2301      	movs	r3, #1
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	e001      	b.n	8008586 <xQueueIsQueueFullFromISR+0x28>
	}
	else
	{
		xReturn = pdFALSE;
 8008582:	2300      	movs	r3, #0
 8008584:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008586:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008588:	0018      	movs	r0, r3
 800858a:	46bd      	mov	sp, r7
 800858c:	b004      	add	sp, #16
 800858e:	bd80      	pop	{r7, pc}

08008590 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
 800859e:	e015      	b.n	80085cc <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085a0:	4b0e      	ldr	r3, [pc, #56]	; (80085dc <vQueueAddToRegistry+0x4c>)
 80085a2:	68fa      	ldr	r2, [r7, #12]
 80085a4:	00d2      	lsls	r2, r2, #3
 80085a6:	58d3      	ldr	r3, [r2, r3]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d10c      	bne.n	80085c6 <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085ac:	4b0b      	ldr	r3, [pc, #44]	; (80085dc <vQueueAddToRegistry+0x4c>)
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	00d2      	lsls	r2, r2, #3
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085b6:	4a09      	ldr	r2, [pc, #36]	; (80085dc <vQueueAddToRegistry+0x4c>)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	18d3      	adds	r3, r2, r3
 80085be:	3304      	adds	r3, #4
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085c4:	e006      	b.n	80085d4 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	3301      	adds	r3, #1
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b07      	cmp	r3, #7
 80085d0:	d9e6      	bls.n	80085a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085d2:	46c0      	nop			; (mov r8, r8)
 80085d4:	46c0      	nop			; (mov r8, r8)
 80085d6:	46bd      	mov	sp, r7
 80085d8:	b004      	add	sp, #16
 80085da:	bd80      	pop	{r7, pc}
 80085dc:	200026b0 	.word	0x200026b0

080085e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	60f8      	str	r0, [r7, #12]
 80085e8:	60b9      	str	r1, [r7, #8]
 80085ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80085f0:	f001 fb06 	bl	8009c00 <vPortEnterCritical>
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2244      	movs	r2, #68	; 0x44
 80085f8:	5c9b      	ldrb	r3, [r3, r2]
 80085fa:	b25b      	sxtb	r3, r3
 80085fc:	3301      	adds	r3, #1
 80085fe:	d103      	bne.n	8008608 <vQueueWaitForMessageRestricted+0x28>
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2244      	movs	r2, #68	; 0x44
 8008604:	2100      	movs	r1, #0
 8008606:	5499      	strb	r1, [r3, r2]
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	2245      	movs	r2, #69	; 0x45
 800860c:	5c9b      	ldrb	r3, [r3, r2]
 800860e:	b25b      	sxtb	r3, r3
 8008610:	3301      	adds	r3, #1
 8008612:	d103      	bne.n	800861c <vQueueWaitForMessageRestricted+0x3c>
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	2245      	movs	r2, #69	; 0x45
 8008618:	2100      	movs	r1, #0
 800861a:	5499      	strb	r1, [r3, r2]
 800861c:	f001 fb02 	bl	8009c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008624:	2b00      	cmp	r3, #0
 8008626:	d106      	bne.n	8008636 <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008628:	697b      	ldr	r3, [r7, #20]
 800862a:	3324      	adds	r3, #36	; 0x24
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	0018      	movs	r0, r3
 8008632:	f000 fbc9 	bl	8008dc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	0018      	movs	r0, r3
 800863a:	f7ff ff04 	bl	8008446 <prvUnlockQueue>
	}
 800863e:	46c0      	nop			; (mov r8, r8)
 8008640:	46bd      	mov	sp, r7
 8008642:	b006      	add	sp, #24
 8008644:	bd80      	pop	{r7, pc}

08008646 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008646:	b590      	push	{r4, r7, lr}
 8008648:	b08d      	sub	sp, #52	; 0x34
 800864a:	af04      	add	r7, sp, #16
 800864c:	60f8      	str	r0, [r7, #12]
 800864e:	60b9      	str	r1, [r7, #8]
 8008650:	607a      	str	r2, [r7, #4]
 8008652:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <xTaskCreateStatic+0x18>
 800865a:	b672      	cpsid	i
 800865c:	e7fe      	b.n	800865c <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 800865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008660:	2b00      	cmp	r3, #0
 8008662:	d101      	bne.n	8008668 <xTaskCreateStatic+0x22>
 8008664:	b672      	cpsid	i
 8008666:	e7fe      	b.n	8008666 <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008668:	2354      	movs	r3, #84	; 0x54
 800866a:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2b54      	cmp	r3, #84	; 0x54
 8008670:	d001      	beq.n	8008676 <xTaskCreateStatic+0x30>
 8008672:	b672      	cpsid	i
 8008674:	e7fe      	b.n	8008674 <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008678:	2b00      	cmp	r3, #0
 800867a:	d020      	beq.n	80086be <xTaskCreateStatic+0x78>
 800867c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867e:	2b00      	cmp	r3, #0
 8008680:	d01d      	beq.n	80086be <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008684:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800868a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	2251      	movs	r2, #81	; 0x51
 8008690:	2102      	movs	r1, #2
 8008692:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008694:	683c      	ldr	r4, [r7, #0]
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	68b9      	ldr	r1, [r7, #8]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	2300      	movs	r3, #0
 800869e:	9303      	str	r3, [sp, #12]
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	9302      	str	r3, [sp, #8]
 80086a4:	2318      	movs	r3, #24
 80086a6:	18fb      	adds	r3, r7, r3
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	0023      	movs	r3, r4
 80086b0:	f000 f858 	bl	8008764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	0018      	movs	r0, r3
 80086b8:	f000 f8ce 	bl	8008858 <prvAddNewTaskToReadyList>
 80086bc:	e001      	b.n	80086c2 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80086be:	2300      	movs	r3, #0
 80086c0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80086c2:	69bb      	ldr	r3, [r7, #24]
	}
 80086c4:	0018      	movs	r0, r3
 80086c6:	46bd      	mov	sp, r7
 80086c8:	b009      	add	sp, #36	; 0x24
 80086ca:	bd90      	pop	{r4, r7, pc}

080086cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80086cc:	b590      	push	{r4, r7, lr}
 80086ce:	b08d      	sub	sp, #52	; 0x34
 80086d0:	af04      	add	r7, sp, #16
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	1dbb      	adds	r3, r7, #6
 80086da:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086dc:	1dbb      	adds	r3, r7, #6
 80086de:	881b      	ldrh	r3, [r3, #0]
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	0018      	movs	r0, r3
 80086e4:	f001 fb24 	bl	8009d30 <pvPortMalloc>
 80086e8:	0003      	movs	r3, r0
 80086ea:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d010      	beq.n	8008714 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80086f2:	2054      	movs	r0, #84	; 0x54
 80086f4:	f001 fb1c 	bl	8009d30 <pvPortMalloc>
 80086f8:	0003      	movs	r3, r0
 80086fa:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	631a      	str	r2, [r3, #48]	; 0x30
 8008708:	e006      	b.n	8008718 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	0018      	movs	r0, r3
 800870e:	f001 fbb5 	bl	8009e7c <vPortFree>
 8008712:	e001      	b.n	8008718 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008714:	2300      	movs	r3, #0
 8008716:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d01a      	beq.n	8008754 <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	2251      	movs	r2, #81	; 0x51
 8008722:	2100      	movs	r1, #0
 8008724:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008726:	1dbb      	adds	r3, r7, #6
 8008728:	881a      	ldrh	r2, [r3, #0]
 800872a:	683c      	ldr	r4, [r7, #0]
 800872c:	68b9      	ldr	r1, [r7, #8]
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	2300      	movs	r3, #0
 8008732:	9303      	str	r3, [sp, #12]
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800873a:	9301      	str	r3, [sp, #4]
 800873c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	0023      	movs	r3, r4
 8008742:	f000 f80f 	bl	8008764 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	0018      	movs	r0, r3
 800874a:	f000 f885 	bl	8008858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800874e:	2301      	movs	r3, #1
 8008750:	61bb      	str	r3, [r7, #24]
 8008752:	e002      	b.n	800875a <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008754:	2301      	movs	r3, #1
 8008756:	425b      	negs	r3, r3
 8008758:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800875a:	69bb      	ldr	r3, [r7, #24]
	}
 800875c:	0018      	movs	r0, r3
 800875e:	46bd      	mov	sp, r7
 8008760:	b009      	add	sp, #36	; 0x24
 8008762:	bd90      	pop	{r4, r7, pc}

08008764 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	4936      	ldr	r1, [pc, #216]	; (8008854 <prvInitialiseNewTask+0xf0>)
 800877a:	468c      	mov	ip, r1
 800877c:	4463      	add	r3, ip
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	18d3      	adds	r3, r2, r3
 8008782:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	2207      	movs	r2, #7
 8008788:	4393      	bics	r3, r2
 800878a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	2207      	movs	r2, #7
 8008790:	4013      	ands	r3, r2
 8008792:	d001      	beq.n	8008798 <prvInitialiseNewTask+0x34>
 8008794:	b672      	cpsid	i
 8008796:	e7fe      	b.n	8008796 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008798:	2300      	movs	r3, #0
 800879a:	617b      	str	r3, [r7, #20]
 800879c:	e013      	b.n	80087c6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800879e:	68ba      	ldr	r2, [r7, #8]
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	18d3      	adds	r3, r2, r3
 80087a4:	7818      	ldrb	r0, [r3, #0]
 80087a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087a8:	2134      	movs	r1, #52	; 0x34
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	18d3      	adds	r3, r2, r3
 80087ae:	185b      	adds	r3, r3, r1
 80087b0:	1c02      	adds	r2, r0, #0
 80087b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	18d3      	adds	r3, r2, r3
 80087ba:	781b      	ldrb	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d006      	beq.n	80087ce <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	3301      	adds	r3, #1
 80087c4:	617b      	str	r3, [r7, #20]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b0f      	cmp	r3, #15
 80087ca:	d9e8      	bls.n	800879e <prvInitialiseNewTask+0x3a>
 80087cc:	e000      	b.n	80087d0 <prvInitialiseNewTask+0x6c>
		{
			break;
 80087ce:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	2243      	movs	r2, #67	; 0x43
 80087d4:	2100      	movs	r1, #0
 80087d6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80087d8:	6a3b      	ldr	r3, [r7, #32]
 80087da:	2b06      	cmp	r3, #6
 80087dc:	d901      	bls.n	80087e2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80087de:	2306      	movs	r3, #6
 80087e0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80087e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e4:	6a3a      	ldr	r2, [r7, #32]
 80087e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80087e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ea:	6a3a      	ldr	r2, [r7, #32]
 80087ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80087ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f0:	2200      	movs	r2, #0
 80087f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80087f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087f6:	3304      	adds	r3, #4
 80087f8:	0018      	movs	r0, r3
 80087fa:	f7ff f8bd 	bl	8007978 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80087fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008800:	3318      	adds	r3, #24
 8008802:	0018      	movs	r0, r3
 8008804:	f7ff f8b8 	bl	8007978 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800880a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800880c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	2207      	movs	r2, #7
 8008812:	1ad2      	subs	r2, r2, r3
 8008814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008816:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800881c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800881e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008820:	2200      	movs	r2, #0
 8008822:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008826:	2250      	movs	r2, #80	; 0x50
 8008828:	2100      	movs	r1, #0
 800882a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800882c:	683a      	ldr	r2, [r7, #0]
 800882e:	68f9      	ldr	r1, [r7, #12]
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	0018      	movs	r0, r3
 8008834:	f001 f94c 	bl	8009ad0 <pxPortInitialiseStack>
 8008838:	0002      	movs	r2, r0
 800883a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	2b00      	cmp	r3, #0
 8008842:	d002      	beq.n	800884a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008848:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800884a:	46c0      	nop			; (mov r8, r8)
 800884c:	46bd      	mov	sp, r7
 800884e:	b006      	add	sp, #24
 8008850:	bd80      	pop	{r7, pc}
 8008852:	46c0      	nop			; (mov r8, r8)
 8008854:	3fffffff 	.word	0x3fffffff

08008858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008860:	f001 f9ce 	bl	8009c00 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008864:	4b28      	ldr	r3, [pc, #160]	; (8008908 <prvAddNewTaskToReadyList+0xb0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	1c5a      	adds	r2, r3, #1
 800886a:	4b27      	ldr	r3, [pc, #156]	; (8008908 <prvAddNewTaskToReadyList+0xb0>)
 800886c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800886e:	4b27      	ldr	r3, [pc, #156]	; (800890c <prvAddNewTaskToReadyList+0xb4>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d109      	bne.n	800888a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008876:	4b25      	ldr	r3, [pc, #148]	; (800890c <prvAddNewTaskToReadyList+0xb4>)
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800887c:	4b22      	ldr	r3, [pc, #136]	; (8008908 <prvAddNewTaskToReadyList+0xb0>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	2b01      	cmp	r3, #1
 8008882:	d110      	bne.n	80088a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008884:	f000 fba0 	bl	8008fc8 <prvInitialiseTaskLists>
 8008888:	e00d      	b.n	80088a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800888a:	4b21      	ldr	r3, [pc, #132]	; (8008910 <prvAddNewTaskToReadyList+0xb8>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d109      	bne.n	80088a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008892:	4b1e      	ldr	r3, [pc, #120]	; (800890c <prvAddNewTaskToReadyList+0xb4>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800889c:	429a      	cmp	r2, r3
 800889e:	d802      	bhi.n	80088a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80088a0:	4b1a      	ldr	r3, [pc, #104]	; (800890c <prvAddNewTaskToReadyList+0xb4>)
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80088a6:	4b1b      	ldr	r3, [pc, #108]	; (8008914 <prvAddNewTaskToReadyList+0xbc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	1c5a      	adds	r2, r3, #1
 80088ac:	4b19      	ldr	r3, [pc, #100]	; (8008914 <prvAddNewTaskToReadyList+0xbc>)
 80088ae:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b4:	4b18      	ldr	r3, [pc, #96]	; (8008918 <prvAddNewTaskToReadyList+0xc0>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d903      	bls.n	80088c4 <prvAddNewTaskToReadyList+0x6c>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c0:	4b15      	ldr	r3, [pc, #84]	; (8008918 <prvAddNewTaskToReadyList+0xc0>)
 80088c2:	601a      	str	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088c8:	0013      	movs	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	189b      	adds	r3, r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4a12      	ldr	r2, [pc, #72]	; (800891c <prvAddNewTaskToReadyList+0xc4>)
 80088d2:	189a      	adds	r2, r3, r2
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	3304      	adds	r3, #4
 80088d8:	0019      	movs	r1, r3
 80088da:	0010      	movs	r0, r2
 80088dc:	f7ff f857 	bl	800798e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80088e0:	f001 f9a0 	bl	8009c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <prvAddNewTaskToReadyList+0xb8>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d008      	beq.n	80088fe <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80088ec:	4b07      	ldr	r3, [pc, #28]	; (800890c <prvAddNewTaskToReadyList+0xb4>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d201      	bcs.n	80088fe <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80088fa:	f001 f971 	bl	8009be0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088fe:	46c0      	nop			; (mov r8, r8)
 8008900:	46bd      	mov	sp, r7
 8008902:	b002      	add	sp, #8
 8008904:	bd80      	pop	{r7, pc}
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	200007f0 	.word	0x200007f0
 800890c:	200006f0 	.word	0x200006f0
 8008910:	200007fc 	.word	0x200007fc
 8008914:	2000080c 	.word	0x2000080c
 8008918:	200007f8 	.word	0x200007f8
 800891c:	200006f4 	.word	0x200006f4

08008920 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008928:	2300      	movs	r3, #0
 800892a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d010      	beq.n	8008954 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008932:	4b0d      	ldr	r3, [pc, #52]	; (8008968 <vTaskDelay+0x48>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d001      	beq.n	800893e <vTaskDelay+0x1e>
 800893a:	b672      	cpsid	i
 800893c:	e7fe      	b.n	800893c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800893e:	f000 f869 	bl	8008a14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2100      	movs	r1, #0
 8008946:	0018      	movs	r0, r3
 8008948:	f000 fd68 	bl	800941c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800894c:	f000 f86e 	bl	8008a2c <xTaskResumeAll>
 8008950:	0003      	movs	r3, r0
 8008952:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800895a:	f001 f941 	bl	8009be0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800895e:	46c0      	nop			; (mov r8, r8)
 8008960:	46bd      	mov	sp, r7
 8008962:	b004      	add	sp, #16
 8008964:	bd80      	pop	{r7, pc}
 8008966:	46c0      	nop			; (mov r8, r8)
 8008968:	20000818 	.word	0x20000818

0800896c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b089      	sub	sp, #36	; 0x24
 8008970:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008972:	2300      	movs	r3, #0
 8008974:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008976:	2300      	movs	r3, #0
 8008978:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800897a:	003a      	movs	r2, r7
 800897c:	1d39      	adds	r1, r7, #4
 800897e:	2308      	movs	r3, #8
 8008980:	18fb      	adds	r3, r7, r3
 8008982:	0018      	movs	r0, r3
 8008984:	f7fa f8d0 	bl	8002b28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008988:	683c      	ldr	r4, [r7, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	491b      	ldr	r1, [pc, #108]	; (80089fc <vTaskStartScheduler+0x90>)
 8008990:	481b      	ldr	r0, [pc, #108]	; (8008a00 <vTaskStartScheduler+0x94>)
 8008992:	9202      	str	r2, [sp, #8]
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	2300      	movs	r3, #0
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	2300      	movs	r3, #0
 800899c:	0022      	movs	r2, r4
 800899e:	f7ff fe52 	bl	8008646 <xTaskCreateStatic>
 80089a2:	0002      	movs	r2, r0
 80089a4:	4b17      	ldr	r3, [pc, #92]	; (8008a04 <vTaskStartScheduler+0x98>)
 80089a6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80089a8:	4b16      	ldr	r3, [pc, #88]	; (8008a04 <vTaskStartScheduler+0x98>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d002      	beq.n	80089b6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80089b0:	2301      	movs	r3, #1
 80089b2:	60fb      	str	r3, [r7, #12]
 80089b4:	e001      	b.n	80089ba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80089b6:	2300      	movs	r3, #0
 80089b8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d103      	bne.n	80089c8 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 80089c0:	f000 fd80 	bl	80094c4 <xTimerCreateTimerTask>
 80089c4:	0003      	movs	r3, r0
 80089c6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d10d      	bne.n	80089ea <vTaskStartScheduler+0x7e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80089ce:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80089d0:	4b0d      	ldr	r3, [pc, #52]	; (8008a08 <vTaskStartScheduler+0x9c>)
 80089d2:	2201      	movs	r2, #1
 80089d4:	4252      	negs	r2, r2
 80089d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80089d8:	4b0c      	ldr	r3, [pc, #48]	; (8008a0c <vTaskStartScheduler+0xa0>)
 80089da:	2201      	movs	r2, #1
 80089dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80089de:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <vTaskStartScheduler+0xa4>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80089e4:	f001 f8d8 	bl	8009b98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80089e8:	e004      	b.n	80089f4 <vTaskStartScheduler+0x88>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3301      	adds	r3, #1
 80089ee:	d101      	bne.n	80089f4 <vTaskStartScheduler+0x88>
 80089f0:	b672      	cpsid	i
 80089f2:	e7fe      	b.n	80089f2 <vTaskStartScheduler+0x86>
}
 80089f4:	46c0      	nop			; (mov r8, r8)
 80089f6:	46bd      	mov	sp, r7
 80089f8:	b005      	add	sp, #20
 80089fa:	bd90      	pop	{r4, r7, pc}
 80089fc:	08010b94 	.word	0x08010b94
 8008a00:	08008fa9 	.word	0x08008fa9
 8008a04:	20000814 	.word	0x20000814
 8008a08:	20000810 	.word	0x20000810
 8008a0c:	200007fc 	.word	0x200007fc
 8008a10:	200007f4 	.word	0x200007f4

08008a14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008a18:	4b03      	ldr	r3, [pc, #12]	; (8008a28 <vTaskSuspendAll+0x14>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	1c5a      	adds	r2, r3, #1
 8008a1e:	4b02      	ldr	r3, [pc, #8]	; (8008a28 <vTaskSuspendAll+0x14>)
 8008a20:	601a      	str	r2, [r3, #0]
}
 8008a22:	46c0      	nop			; (mov r8, r8)
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	20000818 	.word	0x20000818

08008a2c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008a36:	2300      	movs	r3, #0
 8008a38:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008a3a:	4b3a      	ldr	r3, [pc, #232]	; (8008b24 <xTaskResumeAll+0xf8>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d101      	bne.n	8008a46 <xTaskResumeAll+0x1a>
 8008a42:	b672      	cpsid	i
 8008a44:	e7fe      	b.n	8008a44 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008a46:	f001 f8db 	bl	8009c00 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008a4a:	4b36      	ldr	r3, [pc, #216]	; (8008b24 <xTaskResumeAll+0xf8>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	1e5a      	subs	r2, r3, #1
 8008a50:	4b34      	ldr	r3, [pc, #208]	; (8008b24 <xTaskResumeAll+0xf8>)
 8008a52:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a54:	4b33      	ldr	r3, [pc, #204]	; (8008b24 <xTaskResumeAll+0xf8>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d15b      	bne.n	8008b14 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008a5c:	4b32      	ldr	r3, [pc, #200]	; (8008b28 <xTaskResumeAll+0xfc>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d057      	beq.n	8008b14 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a64:	e02f      	b.n	8008ac6 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8008a66:	4b31      	ldr	r3, [pc, #196]	; (8008b2c <xTaskResumeAll+0x100>)
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3318      	adds	r3, #24
 8008a72:	0018      	movs	r0, r3
 8008a74:	f7fe ffe3 	bl	8007a3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	0018      	movs	r0, r3
 8008a7e:	f7fe ffde 	bl	8007a3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a86:	4b2a      	ldr	r3, [pc, #168]	; (8008b30 <xTaskResumeAll+0x104>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d903      	bls.n	8008a96 <xTaskResumeAll+0x6a>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a92:	4b27      	ldr	r3, [pc, #156]	; (8008b30 <xTaskResumeAll+0x104>)
 8008a94:	601a      	str	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9a:	0013      	movs	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	189b      	adds	r3, r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4a24      	ldr	r2, [pc, #144]	; (8008b34 <xTaskResumeAll+0x108>)
 8008aa4:	189a      	adds	r2, r3, r2
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3304      	adds	r3, #4
 8008aaa:	0019      	movs	r1, r3
 8008aac:	0010      	movs	r0, r2
 8008aae:	f7fe ff6e 	bl	800798e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <xTaskResumeAll+0x10c>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d302      	bcc.n	8008ac6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008ac0:	4b1e      	ldr	r3, [pc, #120]	; (8008b3c <xTaskResumeAll+0x110>)
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ac6:	4b19      	ldr	r3, [pc, #100]	; (8008b2c <xTaskResumeAll+0x100>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1cb      	bne.n	8008a66 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ad4:	f000 fb12 	bl	80090fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008ad8:	4b19      	ldr	r3, [pc, #100]	; (8008b40 <xTaskResumeAll+0x114>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d00f      	beq.n	8008b04 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ae4:	f000 f84c 	bl	8008b80 <xTaskIncrementTick>
 8008ae8:	1e03      	subs	r3, r0, #0
 8008aea:	d002      	beq.n	8008af2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008aec:	4b13      	ldr	r3, [pc, #76]	; (8008b3c <xTaskResumeAll+0x110>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3b01      	subs	r3, #1
 8008af6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1f2      	bne.n	8008ae4 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8008afe:	4b10      	ldr	r3, [pc, #64]	; (8008b40 <xTaskResumeAll+0x114>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008b04:	4b0d      	ldr	r3, [pc, #52]	; (8008b3c <xTaskResumeAll+0x110>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d003      	beq.n	8008b14 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008b10:	f001 f866 	bl	8009be0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008b14:	f001 f886 	bl	8009c24 <vPortExitCritical>

	return xAlreadyYielded;
 8008b18:	68bb      	ldr	r3, [r7, #8]
}
 8008b1a:	0018      	movs	r0, r3
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	b004      	add	sp, #16
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	46c0      	nop			; (mov r8, r8)
 8008b24:	20000818 	.word	0x20000818
 8008b28:	200007f0 	.word	0x200007f0
 8008b2c:	200007b0 	.word	0x200007b0
 8008b30:	200007f8 	.word	0x200007f8
 8008b34:	200006f4 	.word	0x200006f4
 8008b38:	200006f0 	.word	0x200006f0
 8008b3c:	20000804 	.word	0x20000804
 8008b40:	20000800 	.word	0x20000800

08008b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b082      	sub	sp, #8
 8008b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008b4a:	4b04      	ldr	r3, [pc, #16]	; (8008b5c <xTaskGetTickCount+0x18>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008b50:	687b      	ldr	r3, [r7, #4]
}
 8008b52:	0018      	movs	r0, r3
 8008b54:	46bd      	mov	sp, r7
 8008b56:	b002      	add	sp, #8
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	46c0      	nop			; (mov r8, r8)
 8008b5c:	200007f4 	.word	0x200007f4

08008b60 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008b66:	2300      	movs	r3, #0
 8008b68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008b6a:	4b04      	ldr	r3, [pc, #16]	; (8008b7c <xTaskGetTickCountFromISR+0x1c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008b70:	683b      	ldr	r3, [r7, #0]
}
 8008b72:	0018      	movs	r0, r3
 8008b74:	46bd      	mov	sp, r7
 8008b76:	b002      	add	sp, #8
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	46c0      	nop			; (mov r8, r8)
 8008b7c:	200007f4 	.word	0x200007f4

08008b80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b086      	sub	sp, #24
 8008b84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008b86:	2300      	movs	r3, #0
 8008b88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b8a:	4b4c      	ldr	r3, [pc, #304]	; (8008cbc <xTaskIncrementTick+0x13c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d000      	beq.n	8008b94 <xTaskIncrementTick+0x14>
 8008b92:	e083      	b.n	8008c9c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b94:	4b4a      	ldr	r3, [pc, #296]	; (8008cc0 <xTaskIncrementTick+0x140>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3301      	adds	r3, #1
 8008b9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b9c:	4b48      	ldr	r3, [pc, #288]	; (8008cc0 <xTaskIncrementTick+0x140>)
 8008b9e:	693a      	ldr	r2, [r7, #16]
 8008ba0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d117      	bne.n	8008bd8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008ba8:	4b46      	ldr	r3, [pc, #280]	; (8008cc4 <xTaskIncrementTick+0x144>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d001      	beq.n	8008bb6 <xTaskIncrementTick+0x36>
 8008bb2:	b672      	cpsid	i
 8008bb4:	e7fe      	b.n	8008bb4 <xTaskIncrementTick+0x34>
 8008bb6:	4b43      	ldr	r3, [pc, #268]	; (8008cc4 <xTaskIncrementTick+0x144>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60fb      	str	r3, [r7, #12]
 8008bbc:	4b42      	ldr	r3, [pc, #264]	; (8008cc8 <xTaskIncrementTick+0x148>)
 8008bbe:	681a      	ldr	r2, [r3, #0]
 8008bc0:	4b40      	ldr	r3, [pc, #256]	; (8008cc4 <xTaskIncrementTick+0x144>)
 8008bc2:	601a      	str	r2, [r3, #0]
 8008bc4:	4b40      	ldr	r3, [pc, #256]	; (8008cc8 <xTaskIncrementTick+0x148>)
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	601a      	str	r2, [r3, #0]
 8008bca:	4b40      	ldr	r3, [pc, #256]	; (8008ccc <xTaskIncrementTick+0x14c>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	4b3e      	ldr	r3, [pc, #248]	; (8008ccc <xTaskIncrementTick+0x14c>)
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	f000 fa92 	bl	80090fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008bd8:	4b3d      	ldr	r3, [pc, #244]	; (8008cd0 <xTaskIncrementTick+0x150>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d34e      	bcc.n	8008c80 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008be2:	4b38      	ldr	r3, [pc, #224]	; (8008cc4 <xTaskIncrementTick+0x144>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <xTaskIncrementTick+0x70>
 8008bec:	2301      	movs	r3, #1
 8008bee:	e000      	b.n	8008bf2 <xTaskIncrementTick+0x72>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d004      	beq.n	8008c00 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008bf6:	4b36      	ldr	r3, [pc, #216]	; (8008cd0 <xTaskIncrementTick+0x150>)
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	4252      	negs	r2, r2
 8008bfc:	601a      	str	r2, [r3, #0]
					break;
 8008bfe:	e03f      	b.n	8008c80 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008c00:	4b30      	ldr	r3, [pc, #192]	; (8008cc4 <xTaskIncrementTick+0x144>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68db      	ldr	r3, [r3, #12]
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008c10:	693a      	ldr	r2, [r7, #16]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d203      	bcs.n	8008c20 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008c18:	4b2d      	ldr	r3, [pc, #180]	; (8008cd0 <xTaskIncrementTick+0x150>)
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	601a      	str	r2, [r3, #0]
						break;
 8008c1e:	e02f      	b.n	8008c80 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	3304      	adds	r3, #4
 8008c24:	0018      	movs	r0, r3
 8008c26:	f7fe ff0a 	bl	8007a3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d004      	beq.n	8008c3c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	3318      	adds	r3, #24
 8008c36:	0018      	movs	r0, r3
 8008c38:	f7fe ff01 	bl	8007a3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c40:	4b24      	ldr	r3, [pc, #144]	; (8008cd4 <xTaskIncrementTick+0x154>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d903      	bls.n	8008c50 <xTaskIncrementTick+0xd0>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4c:	4b21      	ldr	r3, [pc, #132]	; (8008cd4 <xTaskIncrementTick+0x154>)
 8008c4e:	601a      	str	r2, [r3, #0]
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c54:	0013      	movs	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	189b      	adds	r3, r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	4a1e      	ldr	r2, [pc, #120]	; (8008cd8 <xTaskIncrementTick+0x158>)
 8008c5e:	189a      	adds	r2, r3, r2
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	3304      	adds	r3, #4
 8008c64:	0019      	movs	r1, r3
 8008c66:	0010      	movs	r0, r2
 8008c68:	f7fe fe91 	bl	800798e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c70:	4b1a      	ldr	r3, [pc, #104]	; (8008cdc <xTaskIncrementTick+0x15c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d3b3      	bcc.n	8008be2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c7e:	e7b0      	b.n	8008be2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008c80:	4b16      	ldr	r3, [pc, #88]	; (8008cdc <xTaskIncrementTick+0x15c>)
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c86:	4914      	ldr	r1, [pc, #80]	; (8008cd8 <xTaskIncrementTick+0x158>)
 8008c88:	0013      	movs	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	189b      	adds	r3, r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	585b      	ldr	r3, [r3, r1]
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d907      	bls.n	8008ca6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008c96:	2301      	movs	r3, #1
 8008c98:	617b      	str	r3, [r7, #20]
 8008c9a:	e004      	b.n	8008ca6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008c9c:	4b10      	ldr	r3, [pc, #64]	; (8008ce0 <xTaskIncrementTick+0x160>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	1c5a      	adds	r2, r3, #1
 8008ca2:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <xTaskIncrementTick+0x160>)
 8008ca4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008ca6:	4b0f      	ldr	r3, [pc, #60]	; (8008ce4 <xTaskIncrementTick+0x164>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d001      	beq.n	8008cb2 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008cb2:	697b      	ldr	r3, [r7, #20]
}
 8008cb4:	0018      	movs	r0, r3
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	b006      	add	sp, #24
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	20000818 	.word	0x20000818
 8008cc0:	200007f4 	.word	0x200007f4
 8008cc4:	200007a8 	.word	0x200007a8
 8008cc8:	200007ac 	.word	0x200007ac
 8008ccc:	20000808 	.word	0x20000808
 8008cd0:	20000810 	.word	0x20000810
 8008cd4:	200007f8 	.word	0x200007f8
 8008cd8:	200006f4 	.word	0x200006f4
 8008cdc:	200006f0 	.word	0x200006f0
 8008ce0:	20000800 	.word	0x20000800
 8008ce4:	20000804 	.word	0x20000804

08008ce8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008cee:	4b22      	ldr	r3, [pc, #136]	; (8008d78 <vTaskSwitchContext+0x90>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008cf6:	4b21      	ldr	r3, [pc, #132]	; (8008d7c <vTaskSwitchContext+0x94>)
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008cfc:	e037      	b.n	8008d6e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8008cfe:	4b1f      	ldr	r3, [pc, #124]	; (8008d7c <vTaskSwitchContext+0x94>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008d04:	4b1e      	ldr	r3, [pc, #120]	; (8008d80 <vTaskSwitchContext+0x98>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	607b      	str	r3, [r7, #4]
 8008d0a:	e007      	b.n	8008d1c <vTaskSwitchContext+0x34>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d101      	bne.n	8008d16 <vTaskSwitchContext+0x2e>
 8008d12:	b672      	cpsid	i
 8008d14:	e7fe      	b.n	8008d14 <vTaskSwitchContext+0x2c>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	3b01      	subs	r3, #1
 8008d1a:	607b      	str	r3, [r7, #4]
 8008d1c:	4919      	ldr	r1, [pc, #100]	; (8008d84 <vTaskSwitchContext+0x9c>)
 8008d1e:	687a      	ldr	r2, [r7, #4]
 8008d20:	0013      	movs	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	189b      	adds	r3, r3, r2
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	585b      	ldr	r3, [r3, r1]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0ee      	beq.n	8008d0c <vTaskSwitchContext+0x24>
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	0013      	movs	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	189b      	adds	r3, r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4a12      	ldr	r2, [pc, #72]	; (8008d84 <vTaskSwitchContext+0x9c>)
 8008d3a:	189b      	adds	r3, r3, r2
 8008d3c:	603b      	str	r3, [r7, #0]
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	605a      	str	r2, [r3, #4]
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	3308      	adds	r3, #8
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d104      	bne.n	8008d5e <vTaskSwitchContext+0x76>
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	685a      	ldr	r2, [r3, #4]
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	605a      	str	r2, [r3, #4]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	4b08      	ldr	r3, [pc, #32]	; (8008d88 <vTaskSwitchContext+0xa0>)
 8008d66:	601a      	str	r2, [r3, #0]
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <vTaskSwitchContext+0x98>)
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	601a      	str	r2, [r3, #0]
}
 8008d6e:	46c0      	nop			; (mov r8, r8)
 8008d70:	46bd      	mov	sp, r7
 8008d72:	b002      	add	sp, #8
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	46c0      	nop			; (mov r8, r8)
 8008d78:	20000818 	.word	0x20000818
 8008d7c:	20000804 	.word	0x20000804
 8008d80:	200007f8 	.word	0x200007f8
 8008d84:	200006f4 	.word	0x200006f4
 8008d88:	200006f0 	.word	0x200006f0

08008d8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b082      	sub	sp, #8
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <vTaskPlaceOnEventList+0x14>
 8008d9c:	b672      	cpsid	i
 8008d9e:	e7fe      	b.n	8008d9e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008da0:	4b08      	ldr	r3, [pc, #32]	; (8008dc4 <vTaskPlaceOnEventList+0x38>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3318      	adds	r3, #24
 8008da6:	001a      	movs	r2, r3
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	0011      	movs	r1, r2
 8008dac:	0018      	movs	r0, r3
 8008dae:	f7fe fe10 	bl	80079d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2101      	movs	r1, #1
 8008db6:	0018      	movs	r0, r3
 8008db8:	f000 fb30 	bl	800941c <prvAddCurrentTaskToDelayedList>
}
 8008dbc:	46c0      	nop			; (mov r8, r8)
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	b002      	add	sp, #8
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	200006f0 	.word	0x200006f0

08008dc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d101      	bne.n	8008dde <vTaskPlaceOnEventListRestricted+0x16>
 8008dda:	b672      	cpsid	i
 8008ddc:	e7fe      	b.n	8008ddc <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008dde:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <vTaskPlaceOnEventListRestricted+0x48>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	3318      	adds	r3, #24
 8008de4:	001a      	movs	r2, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	0011      	movs	r1, r2
 8008dea:	0018      	movs	r0, r3
 8008dec:	f7fe fdcf 	bl	800798e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d002      	beq.n	8008dfc <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 8008df6:	2301      	movs	r3, #1
 8008df8:	425b      	negs	r3, r3
 8008dfa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	68bb      	ldr	r3, [r7, #8]
 8008e00:	0011      	movs	r1, r2
 8008e02:	0018      	movs	r0, r3
 8008e04:	f000 fb0a 	bl	800941c <prvAddCurrentTaskToDelayedList>
	}
 8008e08:	46c0      	nop			; (mov r8, r8)
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	b004      	add	sp, #16
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	200006f0 	.word	0x200006f0

08008e14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d101      	bne.n	8008e2e <xTaskRemoveFromEventList+0x1a>
 8008e2a:	b672      	cpsid	i
 8008e2c:	e7fe      	b.n	8008e2c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	3318      	adds	r3, #24
 8008e32:	0018      	movs	r0, r3
 8008e34:	f7fe fe03 	bl	8007a3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e38:	4b1e      	ldr	r3, [pc, #120]	; (8008eb4 <xTaskRemoveFromEventList+0xa0>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d11d      	bne.n	8008e7c <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	3304      	adds	r3, #4
 8008e44:	0018      	movs	r0, r3
 8008e46:	f7fe fdfa 	bl	8007a3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e4e:	4b1a      	ldr	r3, [pc, #104]	; (8008eb8 <xTaskRemoveFromEventList+0xa4>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d903      	bls.n	8008e5e <xTaskRemoveFromEventList+0x4a>
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5a:	4b17      	ldr	r3, [pc, #92]	; (8008eb8 <xTaskRemoveFromEventList+0xa4>)
 8008e5c:	601a      	str	r2, [r3, #0]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e62:	0013      	movs	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	189b      	adds	r3, r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	4a14      	ldr	r2, [pc, #80]	; (8008ebc <xTaskRemoveFromEventList+0xa8>)
 8008e6c:	189a      	adds	r2, r3, r2
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	3304      	adds	r3, #4
 8008e72:	0019      	movs	r1, r3
 8008e74:	0010      	movs	r0, r2
 8008e76:	f7fe fd8a 	bl	800798e <vListInsertEnd>
 8008e7a:	e007      	b.n	8008e8c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	3318      	adds	r3, #24
 8008e80:	001a      	movs	r2, r3
 8008e82:	4b0f      	ldr	r3, [pc, #60]	; (8008ec0 <xTaskRemoveFromEventList+0xac>)
 8008e84:	0011      	movs	r1, r2
 8008e86:	0018      	movs	r0, r3
 8008e88:	f7fe fd81 	bl	800798e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e90:	4b0c      	ldr	r3, [pc, #48]	; (8008ec4 <xTaskRemoveFromEventList+0xb0>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d905      	bls.n	8008ea6 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e9e:	4b0a      	ldr	r3, [pc, #40]	; (8008ec8 <xTaskRemoveFromEventList+0xb4>)
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	601a      	str	r2, [r3, #0]
 8008ea4:	e001      	b.n	8008eaa <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
}
 8008eac:	0018      	movs	r0, r3
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	b004      	add	sp, #16
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	20000818 	.word	0x20000818
 8008eb8:	200007f8 	.word	0x200007f8
 8008ebc:	200006f4 	.word	0x200006f4
 8008ec0:	200007b0 	.word	0x200007b0
 8008ec4:	200006f0 	.word	0x200006f0
 8008ec8:	20000804 	.word	0x20000804

08008ecc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ed4:	4b05      	ldr	r3, [pc, #20]	; (8008eec <vTaskInternalSetTimeOutState+0x20>)
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008edc:	4b04      	ldr	r3, [pc, #16]	; (8008ef0 <vTaskInternalSetTimeOutState+0x24>)
 8008ede:	681a      	ldr	r2, [r3, #0]
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	605a      	str	r2, [r3, #4]
}
 8008ee4:	46c0      	nop			; (mov r8, r8)
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	b002      	add	sp, #8
 8008eea:	bd80      	pop	{r7, pc}
 8008eec:	20000808 	.word	0x20000808
 8008ef0:	200007f4 	.word	0x200007f4

08008ef4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d101      	bne.n	8008f08 <xTaskCheckForTimeOut+0x14>
 8008f04:	b672      	cpsid	i
 8008f06:	e7fe      	b.n	8008f06 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <xTaskCheckForTimeOut+0x1e>
 8008f0e:	b672      	cpsid	i
 8008f10:	e7fe      	b.n	8008f10 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8008f12:	f000 fe75 	bl	8009c00 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008f16:	4b1d      	ldr	r3, [pc, #116]	; (8008f8c <xTaskCheckForTimeOut+0x98>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	693a      	ldr	r2, [r7, #16]
 8008f22:	1ad3      	subs	r3, r2, r3
 8008f24:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	d102      	bne.n	8008f34 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
 8008f32:	e024      	b.n	8008f7e <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	4b15      	ldr	r3, [pc, #84]	; (8008f90 <xTaskCheckForTimeOut+0x9c>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d007      	beq.n	8008f50 <xTaskCheckForTimeOut+0x5c>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d302      	bcc.n	8008f50 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	e016      	b.n	8008f7e <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68fa      	ldr	r2, [r7, #12]
 8008f56:	429a      	cmp	r2, r3
 8008f58:	d20c      	bcs.n	8008f74 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681a      	ldr	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	1ad2      	subs	r2, r2, r3
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	0018      	movs	r0, r3
 8008f6a:	f7ff ffaf 	bl	8008ecc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	e004      	b.n	8008f7e <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2200      	movs	r2, #0
 8008f78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008f7e:	f000 fe51 	bl	8009c24 <vPortExitCritical>

	return xReturn;
 8008f82:	697b      	ldr	r3, [r7, #20]
}
 8008f84:	0018      	movs	r0, r3
 8008f86:	46bd      	mov	sp, r7
 8008f88:	b006      	add	sp, #24
 8008f8a:	bd80      	pop	{r7, pc}
 8008f8c:	200007f4 	.word	0x200007f4
 8008f90:	20000808 	.word	0x20000808

08008f94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f98:	4b02      	ldr	r3, [pc, #8]	; (8008fa4 <vTaskMissedYield+0x10>)
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	601a      	str	r2, [r3, #0]
}
 8008f9e:	46c0      	nop			; (mov r8, r8)
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}
 8008fa4:	20000804 	.word	0x20000804

08008fa8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b082      	sub	sp, #8
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008fb0:	f000 f84e 	bl	8009050 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fb4:	4b03      	ldr	r3, [pc, #12]	; (8008fc4 <prvIdleTask+0x1c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d9f9      	bls.n	8008fb0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fbc:	f000 fe10 	bl	8009be0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008fc0:	e7f6      	b.n	8008fb0 <prvIdleTask+0x8>
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	200006f4 	.word	0x200006f4

08008fc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b082      	sub	sp, #8
 8008fcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fce:	2300      	movs	r3, #0
 8008fd0:	607b      	str	r3, [r7, #4]
 8008fd2:	e00c      	b.n	8008fee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	0013      	movs	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	189b      	adds	r3, r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4a14      	ldr	r2, [pc, #80]	; (8009030 <prvInitialiseTaskLists+0x68>)
 8008fe0:	189b      	adds	r3, r3, r2
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	f7fe fcaa 	bl	800793c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	3301      	adds	r3, #1
 8008fec:	607b      	str	r3, [r7, #4]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2b06      	cmp	r3, #6
 8008ff2:	d9ef      	bls.n	8008fd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ff4:	4b0f      	ldr	r3, [pc, #60]	; (8009034 <prvInitialiseTaskLists+0x6c>)
 8008ff6:	0018      	movs	r0, r3
 8008ff8:	f7fe fca0 	bl	800793c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ffc:	4b0e      	ldr	r3, [pc, #56]	; (8009038 <prvInitialiseTaskLists+0x70>)
 8008ffe:	0018      	movs	r0, r3
 8009000:	f7fe fc9c 	bl	800793c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009004:	4b0d      	ldr	r3, [pc, #52]	; (800903c <prvInitialiseTaskLists+0x74>)
 8009006:	0018      	movs	r0, r3
 8009008:	f7fe fc98 	bl	800793c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800900c:	4b0c      	ldr	r3, [pc, #48]	; (8009040 <prvInitialiseTaskLists+0x78>)
 800900e:	0018      	movs	r0, r3
 8009010:	f7fe fc94 	bl	800793c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009014:	4b0b      	ldr	r3, [pc, #44]	; (8009044 <prvInitialiseTaskLists+0x7c>)
 8009016:	0018      	movs	r0, r3
 8009018:	f7fe fc90 	bl	800793c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800901c:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <prvInitialiseTaskLists+0x80>)
 800901e:	4a05      	ldr	r2, [pc, #20]	; (8009034 <prvInitialiseTaskLists+0x6c>)
 8009020:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009022:	4b0a      	ldr	r3, [pc, #40]	; (800904c <prvInitialiseTaskLists+0x84>)
 8009024:	4a04      	ldr	r2, [pc, #16]	; (8009038 <prvInitialiseTaskLists+0x70>)
 8009026:	601a      	str	r2, [r3, #0]
}
 8009028:	46c0      	nop			; (mov r8, r8)
 800902a:	46bd      	mov	sp, r7
 800902c:	b002      	add	sp, #8
 800902e:	bd80      	pop	{r7, pc}
 8009030:	200006f4 	.word	0x200006f4
 8009034:	20000780 	.word	0x20000780
 8009038:	20000794 	.word	0x20000794
 800903c:	200007b0 	.word	0x200007b0
 8009040:	200007c4 	.word	0x200007c4
 8009044:	200007dc 	.word	0x200007dc
 8009048:	200007a8 	.word	0x200007a8
 800904c:	200007ac 	.word	0x200007ac

08009050 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009056:	e01a      	b.n	800908e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8009058:	f000 fdd2 	bl	8009c00 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800905c:	4b10      	ldr	r3, [pc, #64]	; (80090a0 <prvCheckTasksWaitingTermination+0x50>)
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	68db      	ldr	r3, [r3, #12]
 8009062:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	3304      	adds	r3, #4
 8009068:	0018      	movs	r0, r3
 800906a:	f7fe fce8 	bl	8007a3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800906e:	4b0d      	ldr	r3, [pc, #52]	; (80090a4 <prvCheckTasksWaitingTermination+0x54>)
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	1e5a      	subs	r2, r3, #1
 8009074:	4b0b      	ldr	r3, [pc, #44]	; (80090a4 <prvCheckTasksWaitingTermination+0x54>)
 8009076:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009078:	4b0b      	ldr	r3, [pc, #44]	; (80090a8 <prvCheckTasksWaitingTermination+0x58>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	1e5a      	subs	r2, r3, #1
 800907e:	4b0a      	ldr	r3, [pc, #40]	; (80090a8 <prvCheckTasksWaitingTermination+0x58>)
 8009080:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8009082:	f000 fdcf 	bl	8009c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	0018      	movs	r0, r3
 800908a:	f000 f80f 	bl	80090ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800908e:	4b06      	ldr	r3, [pc, #24]	; (80090a8 <prvCheckTasksWaitingTermination+0x58>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1e0      	bne.n	8009058 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009096:	46c0      	nop			; (mov r8, r8)
 8009098:	46c0      	nop			; (mov r8, r8)
 800909a:	46bd      	mov	sp, r7
 800909c:	b002      	add	sp, #8
 800909e:	bd80      	pop	{r7, pc}
 80090a0:	200007c4 	.word	0x200007c4
 80090a4:	200007f0 	.word	0x200007f0
 80090a8:	200007d8 	.word	0x200007d8

080090ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2251      	movs	r2, #81	; 0x51
 80090b8:	5c9b      	ldrb	r3, [r3, r2]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c2:	0018      	movs	r0, r3
 80090c4:	f000 feda 	bl	8009e7c <vPortFree>
				vPortFree( pxTCB );
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	0018      	movs	r0, r3
 80090cc:	f000 fed6 	bl	8009e7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090d0:	e010      	b.n	80090f4 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2251      	movs	r2, #81	; 0x51
 80090d6:	5c9b      	ldrb	r3, [r3, r2]
 80090d8:	2b01      	cmp	r3, #1
 80090da:	d104      	bne.n	80090e6 <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	0018      	movs	r0, r3
 80090e0:	f000 fecc 	bl	8009e7c <vPortFree>
	}
 80090e4:	e006      	b.n	80090f4 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2251      	movs	r2, #81	; 0x51
 80090ea:	5c9b      	ldrb	r3, [r3, r2]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d001      	beq.n	80090f4 <prvDeleteTCB+0x48>
 80090f0:	b672      	cpsid	i
 80090f2:	e7fe      	b.n	80090f2 <prvDeleteTCB+0x46>
	}
 80090f4:	46c0      	nop			; (mov r8, r8)
 80090f6:	46bd      	mov	sp, r7
 80090f8:	b002      	add	sp, #8
 80090fa:	bd80      	pop	{r7, pc}

080090fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009102:	4b0e      	ldr	r3, [pc, #56]	; (800913c <prvResetNextTaskUnblockTime+0x40>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <prvResetNextTaskUnblockTime+0x14>
 800910c:	2301      	movs	r3, #1
 800910e:	e000      	b.n	8009112 <prvResetNextTaskUnblockTime+0x16>
 8009110:	2300      	movs	r3, #0
 8009112:	2b00      	cmp	r3, #0
 8009114:	d004      	beq.n	8009120 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009116:	4b0a      	ldr	r3, [pc, #40]	; (8009140 <prvResetNextTaskUnblockTime+0x44>)
 8009118:	2201      	movs	r2, #1
 800911a:	4252      	negs	r2, r2
 800911c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800911e:	e008      	b.n	8009132 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009120:	4b06      	ldr	r3, [pc, #24]	; (800913c <prvResetNextTaskUnblockTime+0x40>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	4b04      	ldr	r3, [pc, #16]	; (8009140 <prvResetNextTaskUnblockTime+0x44>)
 8009130:	601a      	str	r2, [r3, #0]
}
 8009132:	46c0      	nop			; (mov r8, r8)
 8009134:	46bd      	mov	sp, r7
 8009136:	b002      	add	sp, #8
 8009138:	bd80      	pop	{r7, pc}
 800913a:	46c0      	nop			; (mov r8, r8)
 800913c:	200007a8 	.word	0x200007a8
 8009140:	20000810 	.word	0x20000810

08009144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800914a:	4b0a      	ldr	r3, [pc, #40]	; (8009174 <xTaskGetSchedulerState+0x30>)
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d102      	bne.n	8009158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009152:	2301      	movs	r3, #1
 8009154:	607b      	str	r3, [r7, #4]
 8009156:	e008      	b.n	800916a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009158:	4b07      	ldr	r3, [pc, #28]	; (8009178 <xTaskGetSchedulerState+0x34>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d102      	bne.n	8009166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009160:	2302      	movs	r3, #2
 8009162:	607b      	str	r3, [r7, #4]
 8009164:	e001      	b.n	800916a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009166:	2300      	movs	r3, #0
 8009168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800916a:	687b      	ldr	r3, [r7, #4]
	}
 800916c:	0018      	movs	r0, r3
 800916e:	46bd      	mov	sp, r7
 8009170:	b002      	add	sp, #8
 8009172:	bd80      	pop	{r7, pc}
 8009174:	200007fc 	.word	0x200007fc
 8009178:	20000818 	.word	0x20000818

0800917c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d056      	beq.n	8009240 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009196:	4b2d      	ldr	r3, [pc, #180]	; (800924c <xTaskPriorityInherit+0xd0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	429a      	cmp	r2, r3
 800919e:	d246      	bcs.n	800922e <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	db06      	blt.n	80091b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a8:	4b28      	ldr	r3, [pc, #160]	; (800924c <xTaskPriorityInherit+0xd0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	2207      	movs	r2, #7
 80091b0:	1ad2      	subs	r2, r2, r3
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6959      	ldr	r1, [r3, #20]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091be:	0013      	movs	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	189b      	adds	r3, r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4a22      	ldr	r2, [pc, #136]	; (8009250 <xTaskPriorityInherit+0xd4>)
 80091c8:	189b      	adds	r3, r3, r2
 80091ca:	4299      	cmp	r1, r3
 80091cc:	d101      	bne.n	80091d2 <xTaskPriorityInherit+0x56>
 80091ce:	2301      	movs	r3, #1
 80091d0:	e000      	b.n	80091d4 <xTaskPriorityInherit+0x58>
 80091d2:	2300      	movs	r3, #0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d022      	beq.n	800921e <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	3304      	adds	r3, #4
 80091dc:	0018      	movs	r0, r3
 80091de:	f7fe fc2e 	bl	8007a3e <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091e2:	4b1a      	ldr	r3, [pc, #104]	; (800924c <xTaskPriorityInherit+0xd0>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091f0:	4b18      	ldr	r3, [pc, #96]	; (8009254 <xTaskPriorityInherit+0xd8>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d903      	bls.n	8009200 <xTaskPriorityInherit+0x84>
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fc:	4b15      	ldr	r3, [pc, #84]	; (8009254 <xTaskPriorityInherit+0xd8>)
 80091fe:	601a      	str	r2, [r3, #0]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009204:	0013      	movs	r3, r2
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	189b      	adds	r3, r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4a10      	ldr	r2, [pc, #64]	; (8009250 <xTaskPriorityInherit+0xd4>)
 800920e:	189a      	adds	r2, r3, r2
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	3304      	adds	r3, #4
 8009214:	0019      	movs	r1, r3
 8009216:	0010      	movs	r0, r2
 8009218:	f7fe fbb9 	bl	800798e <vListInsertEnd>
 800921c:	e004      	b.n	8009228 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800921e:	4b0b      	ldr	r3, [pc, #44]	; (800924c <xTaskPriorityInherit+0xd0>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009228:	2301      	movs	r3, #1
 800922a:	60fb      	str	r3, [r7, #12]
 800922c:	e008      	b.n	8009240 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009232:	4b06      	ldr	r3, [pc, #24]	; (800924c <xTaskPriorityInherit+0xd0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009238:	429a      	cmp	r2, r3
 800923a:	d201      	bcs.n	8009240 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800923c:	2301      	movs	r3, #1
 800923e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009240:	68fb      	ldr	r3, [r7, #12]
	}
 8009242:	0018      	movs	r0, r3
 8009244:	46bd      	mov	sp, r7
 8009246:	b004      	add	sp, #16
 8009248:	bd80      	pop	{r7, pc}
 800924a:	46c0      	nop			; (mov r8, r8)
 800924c:	200006f0 	.word	0x200006f0
 8009250:	200006f4 	.word	0x200006f4
 8009254:	200007f8 	.word	0x200007f8

08009258 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009258:	b580      	push	{r7, lr}
 800925a:	b084      	sub	sp, #16
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009264:	2300      	movs	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d044      	beq.n	80092f8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800926e:	4b25      	ldr	r3, [pc, #148]	; (8009304 <xTaskPriorityDisinherit+0xac>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	429a      	cmp	r2, r3
 8009276:	d001      	beq.n	800927c <xTaskPriorityDisinherit+0x24>
 8009278:	b672      	cpsid	i
 800927a:	e7fe      	b.n	800927a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <xTaskPriorityDisinherit+0x30>
 8009284:	b672      	cpsid	i
 8009286:	e7fe      	b.n	8009286 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800928c:	1e5a      	subs	r2, r3, #1
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800929a:	429a      	cmp	r2, r3
 800929c:	d02c      	beq.n	80092f8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d128      	bne.n	80092f8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	3304      	adds	r3, #4
 80092aa:	0018      	movs	r0, r3
 80092ac:	f7fe fbc7 	bl	8007a3e <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092bc:	2207      	movs	r2, #7
 80092be:	1ad2      	subs	r2, r2, r3
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c8:	4b0f      	ldr	r3, [pc, #60]	; (8009308 <xTaskPriorityDisinherit+0xb0>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	429a      	cmp	r2, r3
 80092ce:	d903      	bls.n	80092d8 <xTaskPriorityDisinherit+0x80>
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d4:	4b0c      	ldr	r3, [pc, #48]	; (8009308 <xTaskPriorityDisinherit+0xb0>)
 80092d6:	601a      	str	r2, [r3, #0]
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092dc:	0013      	movs	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	189b      	adds	r3, r3, r2
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	4a09      	ldr	r2, [pc, #36]	; (800930c <xTaskPriorityDisinherit+0xb4>)
 80092e6:	189a      	adds	r2, r3, r2
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	3304      	adds	r3, #4
 80092ec:	0019      	movs	r1, r3
 80092ee:	0010      	movs	r0, r2
 80092f0:	f7fe fb4d 	bl	800798e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80092f4:	2301      	movs	r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80092f8:	68fb      	ldr	r3, [r7, #12]
	}
 80092fa:	0018      	movs	r0, r3
 80092fc:	46bd      	mov	sp, r7
 80092fe:	b004      	add	sp, #16
 8009300:	bd80      	pop	{r7, pc}
 8009302:	46c0      	nop			; (mov r8, r8)
 8009304:	200006f0 	.word	0x200006f0
 8009308:	200007f8 	.word	0x200007f8
 800930c:	200006f4 	.word	0x200006f4

08009310 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800931e:	2301      	movs	r3, #1
 8009320:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d05d      	beq.n	80093e4 <vTaskPriorityDisinheritAfterTimeout+0xd4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800932c:	2b00      	cmp	r3, #0
 800932e:	d101      	bne.n	8009334 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8009330:	b672      	cpsid	i
 8009332:	e7fe      	b.n	8009332 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009338:	683a      	ldr	r2, [r7, #0]
 800933a:	429a      	cmp	r2, r3
 800933c:	d902      	bls.n	8009344 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	e002      	b.n	800934a <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009348:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	429a      	cmp	r2, r3
 8009352:	d047      	beq.n	80093e4 <vTaskPriorityDisinheritAfterTimeout+0xd4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009358:	68fa      	ldr	r2, [r7, #12]
 800935a:	429a      	cmp	r2, r3
 800935c:	d142      	bne.n	80093e4 <vTaskPriorityDisinheritAfterTimeout+0xd4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800935e:	4b23      	ldr	r3, [pc, #140]	; (80093ec <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	693a      	ldr	r2, [r7, #16]
 8009364:	429a      	cmp	r2, r3
 8009366:	d101      	bne.n	800936c <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8009368:	b672      	cpsid	i
 800936a:	e7fe      	b.n	800936a <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009370:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	699b      	ldr	r3, [r3, #24]
 800937c:	2b00      	cmp	r3, #0
 800937e:	db04      	blt.n	800938a <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	2207      	movs	r2, #7
 8009384:	1ad2      	subs	r2, r2, r3
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	6959      	ldr	r1, [r3, #20]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	0013      	movs	r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	189b      	adds	r3, r3, r2
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4a15      	ldr	r2, [pc, #84]	; (80093f0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800939a:	189b      	adds	r3, r3, r2
 800939c:	4299      	cmp	r1, r3
 800939e:	d101      	bne.n	80093a4 <vTaskPriorityDisinheritAfterTimeout+0x94>
 80093a0:	2301      	movs	r3, #1
 80093a2:	e000      	b.n	80093a6 <vTaskPriorityDisinheritAfterTimeout+0x96>
 80093a4:	2300      	movs	r3, #0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d01c      	beq.n	80093e4 <vTaskPriorityDisinheritAfterTimeout+0xd4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093aa:	693b      	ldr	r3, [r7, #16]
 80093ac:	3304      	adds	r3, #4
 80093ae:	0018      	movs	r0, r3
 80093b0:	f7fe fb45 	bl	8007a3e <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b8:	4b0e      	ldr	r3, [pc, #56]	; (80093f4 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d903      	bls.n	80093c8 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c4:	4b0b      	ldr	r3, [pc, #44]	; (80093f4 <vTaskPriorityDisinheritAfterTimeout+0xe4>)
 80093c6:	601a      	str	r2, [r3, #0]
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093cc:	0013      	movs	r3, r2
 80093ce:	009b      	lsls	r3, r3, #2
 80093d0:	189b      	adds	r3, r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	4a06      	ldr	r2, [pc, #24]	; (80093f0 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 80093d6:	189a      	adds	r2, r3, r2
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	3304      	adds	r3, #4
 80093dc:	0019      	movs	r1, r3
 80093de:	0010      	movs	r0, r2
 80093e0:	f7fe fad5 	bl	800798e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80093e4:	46c0      	nop			; (mov r8, r8)
 80093e6:	46bd      	mov	sp, r7
 80093e8:	b006      	add	sp, #24
 80093ea:	bd80      	pop	{r7, pc}
 80093ec:	200006f0 	.word	0x200006f0
 80093f0:	200006f4 	.word	0x200006f4
 80093f4:	200007f8 	.word	0x200007f8

080093f8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80093fc:	4b06      	ldr	r3, [pc, #24]	; (8009418 <pvTaskIncrementMutexHeldCount+0x20>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d004      	beq.n	800940e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009404:	4b04      	ldr	r3, [pc, #16]	; (8009418 <pvTaskIncrementMutexHeldCount+0x20>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800940a:	3201      	adds	r2, #1
 800940c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800940e:	4b02      	ldr	r3, [pc, #8]	; (8009418 <pvTaskIncrementMutexHeldCount+0x20>)
 8009410:	681b      	ldr	r3, [r3, #0]
	}
 8009412:	0018      	movs	r0, r3
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	200006f0 	.word	0x200006f0

0800941c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009426:	4b21      	ldr	r3, [pc, #132]	; (80094ac <prvAddCurrentTaskToDelayedList+0x90>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800942c:	4b20      	ldr	r3, [pc, #128]	; (80094b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	3304      	adds	r3, #4
 8009432:	0018      	movs	r0, r3
 8009434:	f7fe fb03 	bl	8007a3e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3301      	adds	r3, #1
 800943c:	d10b      	bne.n	8009456 <prvAddCurrentTaskToDelayedList+0x3a>
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d008      	beq.n	8009456 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009444:	4b1a      	ldr	r3, [pc, #104]	; (80094b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	1d1a      	adds	r2, r3, #4
 800944a:	4b1a      	ldr	r3, [pc, #104]	; (80094b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800944c:	0011      	movs	r1, r2
 800944e:	0018      	movs	r0, r3
 8009450:	f7fe fa9d 	bl	800798e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009454:	e026      	b.n	80094a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	18d3      	adds	r3, r2, r3
 800945c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800945e:	4b14      	ldr	r3, [pc, #80]	; (80094b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	429a      	cmp	r2, r3
 800946c:	d209      	bcs.n	8009482 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800946e:	4b12      	ldr	r3, [pc, #72]	; (80094b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	4b0f      	ldr	r3, [pc, #60]	; (80094b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3304      	adds	r3, #4
 8009478:	0019      	movs	r1, r3
 800947a:	0010      	movs	r0, r2
 800947c:	f7fe faa9 	bl	80079d2 <vListInsert>
}
 8009480:	e010      	b.n	80094a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009482:	4b0e      	ldr	r3, [pc, #56]	; (80094bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	4b0a      	ldr	r3, [pc, #40]	; (80094b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3304      	adds	r3, #4
 800948c:	0019      	movs	r1, r3
 800948e:	0010      	movs	r0, r2
 8009490:	f7fe fa9f 	bl	80079d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009494:	4b0a      	ldr	r3, [pc, #40]	; (80094c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	429a      	cmp	r2, r3
 800949c:	d202      	bcs.n	80094a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800949e:	4b08      	ldr	r3, [pc, #32]	; (80094c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	601a      	str	r2, [r3, #0]
}
 80094a4:	46c0      	nop			; (mov r8, r8)
 80094a6:	46bd      	mov	sp, r7
 80094a8:	b004      	add	sp, #16
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	200007f4 	.word	0x200007f4
 80094b0:	200006f0 	.word	0x200006f0
 80094b4:	200007dc 	.word	0x200007dc
 80094b8:	200007ac 	.word	0x200007ac
 80094bc:	200007a8 	.word	0x200007a8
 80094c0:	20000810 	.word	0x20000810

080094c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80094c4:	b590      	push	{r4, r7, lr}
 80094c6:	b089      	sub	sp, #36	; 0x24
 80094c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80094ce:	f000 fabd 	bl	8009a4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80094d2:	4b17      	ldr	r3, [pc, #92]	; (8009530 <xTimerCreateTimerTask+0x6c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d020      	beq.n	800951c <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80094da:	2300      	movs	r3, #0
 80094dc:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80094e2:	003a      	movs	r2, r7
 80094e4:	1d39      	adds	r1, r7, #4
 80094e6:	2308      	movs	r3, #8
 80094e8:	18fb      	adds	r3, r7, r3
 80094ea:	0018      	movs	r0, r3
 80094ec:	f7f9 fb34 	bl	8002b58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80094f0:	683c      	ldr	r4, [r7, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68ba      	ldr	r2, [r7, #8]
 80094f6:	490f      	ldr	r1, [pc, #60]	; (8009534 <xTimerCreateTimerTask+0x70>)
 80094f8:	480f      	ldr	r0, [pc, #60]	; (8009538 <xTimerCreateTimerTask+0x74>)
 80094fa:	9202      	str	r2, [sp, #8]
 80094fc:	9301      	str	r3, [sp, #4]
 80094fe:	2302      	movs	r3, #2
 8009500:	9300      	str	r3, [sp, #0]
 8009502:	2300      	movs	r3, #0
 8009504:	0022      	movs	r2, r4
 8009506:	f7ff f89e 	bl	8008646 <xTaskCreateStatic>
 800950a:	0002      	movs	r2, r0
 800950c:	4b0b      	ldr	r3, [pc, #44]	; (800953c <xTimerCreateTimerTask+0x78>)
 800950e:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009510:	4b0a      	ldr	r3, [pc, #40]	; (800953c <xTimerCreateTimerTask+0x78>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8009518:	2301      	movs	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <xTimerCreateTimerTask+0x62>
 8009522:	b672      	cpsid	i
 8009524:	e7fe      	b.n	8009524 <xTimerCreateTimerTask+0x60>
	return xReturn;
 8009526:	68fb      	ldr	r3, [r7, #12]
}
 8009528:	0018      	movs	r0, r3
 800952a:	46bd      	mov	sp, r7
 800952c:	b005      	add	sp, #20
 800952e:	bd90      	pop	{r4, r7, pc}
 8009530:	2000084c 	.word	0x2000084c
 8009534:	08010b9c 	.word	0x08010b9c
 8009538:	080096dd 	.word	0x080096dd
 800953c:	20000850 	.word	0x20000850

08009540 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009540:	b590      	push	{r4, r7, lr}
 8009542:	b089      	sub	sp, #36	; 0x24
 8009544:	af02      	add	r7, sp, #8
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800954e:	202c      	movs	r0, #44	; 0x2c
 8009550:	f000 fbee 	bl	8009d30 <pvPortMalloc>
 8009554:	0003      	movs	r3, r0
 8009556:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00e      	beq.n	800957c <xTimerCreate+0x3c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800955e:	683c      	ldr	r4, [r7, #0]
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	68b9      	ldr	r1, [r7, #8]
 8009564:	68f8      	ldr	r0, [r7, #12]
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	9301      	str	r3, [sp, #4]
 800956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800956c:	9300      	str	r3, [sp, #0]
 800956e:	0023      	movs	r3, r4
 8009570:	f000 f809 	bl	8009586 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	2228      	movs	r2, #40	; 0x28
 8009578:	2100      	movs	r1, #0
 800957a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 800957c:	697b      	ldr	r3, [r7, #20]
	}
 800957e:	0018      	movs	r0, r3
 8009580:	46bd      	mov	sp, r7
 8009582:	b007      	add	sp, #28
 8009584:	bd90      	pop	{r4, r7, pc}

08009586 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b084      	sub	sp, #16
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	607a      	str	r2, [r7, #4]
 8009592:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d101      	bne.n	800959e <prvInitialiseNewTimer+0x18>
 800959a:	b672      	cpsid	i
 800959c:	e7fe      	b.n	800959c <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800959e:	69fb      	ldr	r3, [r7, #28]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d015      	beq.n	80095d0 <prvInitialiseNewTimer+0x4a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80095a4:	f000 fa52 	bl	8009a4c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	68ba      	ldr	r2, [r7, #8]
 80095b2:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	69ba      	ldr	r2, [r7, #24]
 80095c4:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	3304      	adds	r3, #4
 80095ca:	0018      	movs	r0, r3
 80095cc:	f7fe f9d4 	bl	8007978 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80095d0:	46c0      	nop			; (mov r8, r8)
 80095d2:	46bd      	mov	sp, r7
 80095d4:	b004      	add	sp, #16
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095d8:	b590      	push	{r4, r7, lr}
 80095da:	b089      	sub	sp, #36	; 0x24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <xTimerGenericCommand+0x1c>
 80095f0:	b672      	cpsid	i
 80095f2:	e7fe      	b.n	80095f2 <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095f4:	4b1c      	ldr	r3, [pc, #112]	; (8009668 <xTimerGenericCommand+0x90>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d030      	beq.n	800965e <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80095fc:	2410      	movs	r4, #16
 80095fe:	193b      	adds	r3, r7, r4
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009604:	193b      	adds	r3, r7, r4
 8009606:	687a      	ldr	r2, [r7, #4]
 8009608:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800960a:	193b      	adds	r3, r7, r4
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2b05      	cmp	r3, #5
 8009614:	dc19      	bgt.n	800964a <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009616:	f7ff fd95 	bl	8009144 <xTaskGetSchedulerState>
 800961a:	0003      	movs	r3, r0
 800961c:	2b02      	cmp	r3, #2
 800961e:	d109      	bne.n	8009634 <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009620:	4b11      	ldr	r3, [pc, #68]	; (8009668 <xTimerGenericCommand+0x90>)
 8009622:	6818      	ldr	r0, [r3, #0]
 8009624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009626:	1939      	adds	r1, r7, r4
 8009628:	2300      	movs	r3, #0
 800962a:	f7fe fb27 	bl	8007c7c <xQueueGenericSend>
 800962e:	0003      	movs	r3, r0
 8009630:	61fb      	str	r3, [r7, #28]
 8009632:	e014      	b.n	800965e <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009634:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <xTimerGenericCommand+0x90>)
 8009636:	6818      	ldr	r0, [r3, #0]
 8009638:	2310      	movs	r3, #16
 800963a:	18f9      	adds	r1, r7, r3
 800963c:	2300      	movs	r3, #0
 800963e:	2200      	movs	r2, #0
 8009640:	f7fe fb1c 	bl	8007c7c <xQueueGenericSend>
 8009644:	0003      	movs	r3, r0
 8009646:	61fb      	str	r3, [r7, #28]
 8009648:	e009      	b.n	800965e <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800964a:	4b07      	ldr	r3, [pc, #28]	; (8009668 <xTimerGenericCommand+0x90>)
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	2310      	movs	r3, #16
 8009652:	18f9      	adds	r1, r7, r3
 8009654:	2300      	movs	r3, #0
 8009656:	f7fe fbd5 	bl	8007e04 <xQueueGenericSendFromISR>
 800965a:	0003      	movs	r3, r0
 800965c:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800965e:	69fb      	ldr	r3, [r7, #28]
}
 8009660:	0018      	movs	r0, r3
 8009662:	46bd      	mov	sp, r7
 8009664:	b009      	add	sp, #36	; 0x24
 8009666:	bd90      	pop	{r4, r7, pc}
 8009668:	2000084c 	.word	0x2000084c

0800966c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b086      	sub	sp, #24
 8009670:	af02      	add	r7, sp, #8
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009676:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <prvProcessExpiredTimer+0x6c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	3304      	adds	r3, #4
 8009684:	0018      	movs	r0, r3
 8009686:	f7fe f9da 	bl	8007a3e <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	69db      	ldr	r3, [r3, #28]
 800968e:	2b01      	cmp	r3, #1
 8009690:	d119      	bne.n	80096c6 <prvProcessExpiredTimer+0x5a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	699a      	ldr	r2, [r3, #24]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	18d1      	adds	r1, r2, r3
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f000 f8b6 	bl	8009810 <prvInsertTimerInActiveList>
 80096a4:	1e03      	subs	r3, r0, #0
 80096a6:	d00e      	beq.n	80096c6 <prvProcessExpiredTimer+0x5a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	2300      	movs	r3, #0
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	2300      	movs	r3, #0
 80096b2:	2100      	movs	r1, #0
 80096b4:	f7ff ff90 	bl	80095d8 <xTimerGenericCommand>
 80096b8:	0003      	movs	r3, r0
 80096ba:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d101      	bne.n	80096c6 <prvProcessExpiredTimer+0x5a>
 80096c2:	b672      	cpsid	i
 80096c4:	e7fe      	b.n	80096c4 <prvProcessExpiredTimer+0x58>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	0010      	movs	r0, r2
 80096ce:	4798      	blx	r3
}
 80096d0:	46c0      	nop			; (mov r8, r8)
 80096d2:	46bd      	mov	sp, r7
 80096d4:	b004      	add	sp, #16
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20000844 	.word	0x20000844

080096dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80096e4:	2308      	movs	r3, #8
 80096e6:	18fb      	adds	r3, r7, r3
 80096e8:	0018      	movs	r0, r3
 80096ea:	f000 f851 	bl	8009790 <prvGetNextExpireTime>
 80096ee:	0003      	movs	r3, r0
 80096f0:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	0011      	movs	r1, r2
 80096f8:	0018      	movs	r0, r3
 80096fa:	f000 f803 	bl	8009704 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80096fe:	f000 f8c9 	bl	8009894 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009702:	e7ef      	b.n	80096e4 <prvTimerTask+0x8>

08009704 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b084      	sub	sp, #16
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800970e:	f7ff f981 	bl	8008a14 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009712:	2308      	movs	r3, #8
 8009714:	18fb      	adds	r3, r7, r3
 8009716:	0018      	movs	r0, r3
 8009718:	f000 f85a 	bl	80097d0 <prvSampleTimeNow>
 800971c:	0003      	movs	r3, r0
 800971e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d129      	bne.n	800977a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d10c      	bne.n	8009746 <prvProcessTimerOrBlockTask+0x42>
 800972c:	687a      	ldr	r2, [r7, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	429a      	cmp	r2, r3
 8009732:	d808      	bhi.n	8009746 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8009734:	f7ff f97a 	bl	8008a2c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	0011      	movs	r1, r2
 800973e:	0018      	movs	r0, r3
 8009740:	f7ff ff94 	bl	800966c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009744:	e01b      	b.n	800977e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d006      	beq.n	800975a <prvProcessTimerOrBlockTask+0x56>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800974c:	4b0e      	ldr	r3, [pc, #56]	; (8009788 <prvProcessTimerOrBlockTask+0x84>)
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	425a      	negs	r2, r3
 8009754:	4153      	adcs	r3, r2
 8009756:	b2db      	uxtb	r3, r3
 8009758:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800975a:	4b0c      	ldr	r3, [pc, #48]	; (800978c <prvProcessTimerOrBlockTask+0x88>)
 800975c:	6818      	ldr	r0, [r3, #0]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	1ad3      	subs	r3, r2, r3
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	0019      	movs	r1, r3
 8009768:	f7fe ff3a 	bl	80085e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800976c:	f7ff f95e 	bl	8008a2c <xTaskResumeAll>
 8009770:	1e03      	subs	r3, r0, #0
 8009772:	d104      	bne.n	800977e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 8009774:	f000 fa34 	bl	8009be0 <vPortYield>
}
 8009778:	e001      	b.n	800977e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800977a:	f7ff f957 	bl	8008a2c <xTaskResumeAll>
}
 800977e:	46c0      	nop			; (mov r8, r8)
 8009780:	46bd      	mov	sp, r7
 8009782:	b004      	add	sp, #16
 8009784:	bd80      	pop	{r7, pc}
 8009786:	46c0      	nop			; (mov r8, r8)
 8009788:	20000848 	.word	0x20000848
 800978c:	2000084c 	.word	0x2000084c

08009790 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009798:	4b0c      	ldr	r3, [pc, #48]	; (80097cc <prvGetNextExpireTime+0x3c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	425a      	negs	r2, r3
 80097a0:	4153      	adcs	r3, r2
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	001a      	movs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d105      	bne.n	80097be <prvGetNextExpireTime+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097b2:	4b06      	ldr	r3, [pc, #24]	; (80097cc <prvGetNextExpireTime+0x3c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68db      	ldr	r3, [r3, #12]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	60fb      	str	r3, [r7, #12]
 80097bc:	e001      	b.n	80097c2 <prvGetNextExpireTime+0x32>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097c2:	68fb      	ldr	r3, [r7, #12]
}
 80097c4:	0018      	movs	r0, r3
 80097c6:	46bd      	mov	sp, r7
 80097c8:	b004      	add	sp, #16
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	20000844 	.word	0x20000844

080097d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b084      	sub	sp, #16
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80097d8:	f7ff f9b4 	bl	8008b44 <xTaskGetTickCount>
 80097dc:	0003      	movs	r3, r0
 80097de:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 80097e0:	4b0a      	ldr	r3, [pc, #40]	; (800980c <prvSampleTimeNow+0x3c>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d205      	bcs.n	80097f6 <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 80097ea:	f000 f8d5 	bl	8009998 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	601a      	str	r2, [r3, #0]
 80097f4:	e002      	b.n	80097fc <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80097fc:	4b03      	ldr	r3, [pc, #12]	; (800980c <prvSampleTimeNow+0x3c>)
 80097fe:	68fa      	ldr	r2, [r7, #12]
 8009800:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8009802:	68fb      	ldr	r3, [r7, #12]
}
 8009804:	0018      	movs	r0, r3
 8009806:	46bd      	mov	sp, r7
 8009808:	b004      	add	sp, #16
 800980a:	bd80      	pop	{r7, pc}
 800980c:	20000854 	.word	0x20000854

08009810 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
 800981c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800981e:	2300      	movs	r3, #0
 8009820:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	68ba      	ldr	r2, [r7, #8]
 8009826:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	68fa      	ldr	r2, [r7, #12]
 800982c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	429a      	cmp	r2, r3
 8009834:	d812      	bhi.n	800985c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009836:	687a      	ldr	r2, [r7, #4]
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	1ad2      	subs	r2, r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	429a      	cmp	r2, r3
 8009842:	d302      	bcc.n	800984a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009844:	2301      	movs	r3, #1
 8009846:	617b      	str	r3, [r7, #20]
 8009848:	e01b      	b.n	8009882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800984a:	4b10      	ldr	r3, [pc, #64]	; (800988c <prvInsertTimerInActiveList+0x7c>)
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3304      	adds	r3, #4
 8009852:	0019      	movs	r1, r3
 8009854:	0010      	movs	r0, r2
 8009856:	f7fe f8bc 	bl	80079d2 <vListInsert>
 800985a:	e012      	b.n	8009882 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	429a      	cmp	r2, r3
 8009862:	d206      	bcs.n	8009872 <prvInsertTimerInActiveList+0x62>
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	429a      	cmp	r2, r3
 800986a:	d302      	bcc.n	8009872 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800986c:	2301      	movs	r3, #1
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	e007      	b.n	8009882 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <prvInsertTimerInActiveList+0x80>)
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3304      	adds	r3, #4
 800987a:	0019      	movs	r1, r3
 800987c:	0010      	movs	r0, r2
 800987e:	f7fe f8a8 	bl	80079d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009882:	697b      	ldr	r3, [r7, #20]
}
 8009884:	0018      	movs	r0, r3
 8009886:	46bd      	mov	sp, r7
 8009888:	b006      	add	sp, #24
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20000848 	.word	0x20000848
 8009890:	20000844 	.word	0x20000844

08009894 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009894:	b590      	push	{r4, r7, lr}
 8009896:	b08b      	sub	sp, #44	; 0x2c
 8009898:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800989a:	e06a      	b.n	8009972 <prvProcessReceivedCommands+0xde>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800989c:	2208      	movs	r2, #8
 800989e:	18bb      	adds	r3, r7, r2
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	db64      	blt.n	8009970 <prvProcessReceivedCommands+0xdc>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80098a6:	18bb      	adds	r3, r7, r2
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80098ac:	69fb      	ldr	r3, [r7, #28]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d004      	beq.n	80098be <prvProcessReceivedCommands+0x2a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	3304      	adds	r3, #4
 80098b8:	0018      	movs	r0, r3
 80098ba:	f7fe f8c0 	bl	8007a3e <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80098be:	1d3b      	adds	r3, r7, #4
 80098c0:	0018      	movs	r0, r3
 80098c2:	f7ff ff85 	bl	80097d0 <prvSampleTimeNow>
 80098c6:	0003      	movs	r3, r0
 80098c8:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 80098ca:	2308      	movs	r3, #8
 80098cc:	18fb      	adds	r3, r7, r3
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	2b09      	cmp	r3, #9
 80098d2:	d84e      	bhi.n	8009972 <prvProcessReceivedCommands+0xde>
 80098d4:	009a      	lsls	r2, r3, #2
 80098d6:	4b2e      	ldr	r3, [pc, #184]	; (8009990 <prvProcessReceivedCommands+0xfc>)
 80098d8:	18d3      	adds	r3, r2, r3
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	469f      	mov	pc, r3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80098de:	2408      	movs	r4, #8
 80098e0:	193b      	adds	r3, r7, r4
 80098e2:	685a      	ldr	r2, [r3, #4]
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	18d1      	adds	r1, r2, r3
 80098ea:	193b      	adds	r3, r7, r4
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	69ba      	ldr	r2, [r7, #24]
 80098f0:	69f8      	ldr	r0, [r7, #28]
 80098f2:	f7ff ff8d 	bl	8009810 <prvInsertTimerInActiveList>
 80098f6:	1e03      	subs	r3, r0, #0
 80098f8:	d03b      	beq.n	8009972 <prvProcessReceivedCommands+0xde>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	0010      	movs	r0, r2
 8009902:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	69db      	ldr	r3, [r3, #28]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d132      	bne.n	8009972 <prvProcessReceivedCommands+0xde>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800990c:	193b      	adds	r3, r7, r4
 800990e:	685a      	ldr	r2, [r3, #4]
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	18d2      	adds	r2, r2, r3
 8009916:	69f8      	ldr	r0, [r7, #28]
 8009918:	2300      	movs	r3, #0
 800991a:	9300      	str	r3, [sp, #0]
 800991c:	2300      	movs	r3, #0
 800991e:	2100      	movs	r1, #0
 8009920:	f7ff fe5a 	bl	80095d8 <xTimerGenericCommand>
 8009924:	0003      	movs	r3, r0
 8009926:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d121      	bne.n	8009972 <prvProcessReceivedCommands+0xde>
 800992e:	b672      	cpsid	i
 8009930:	e7fe      	b.n	8009930 <prvProcessReceivedCommands+0x9c>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009932:	2308      	movs	r3, #8
 8009934:	18fb      	adds	r3, r7, r3
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800993c:	69fb      	ldr	r3, [r7, #28]
 800993e:	699b      	ldr	r3, [r3, #24]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <prvProcessReceivedCommands+0xb4>
 8009944:	b672      	cpsid	i
 8009946:	e7fe      	b.n	8009946 <prvProcessReceivedCommands+0xb2>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009948:	69fb      	ldr	r3, [r7, #28]
 800994a:	699a      	ldr	r2, [r3, #24]
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	18d1      	adds	r1, r2, r3
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	69ba      	ldr	r2, [r7, #24]
 8009954:	69f8      	ldr	r0, [r7, #28]
 8009956:	f7ff ff5b 	bl	8009810 <prvInsertTimerInActiveList>
					break;
 800995a:	e00a      	b.n	8009972 <prvProcessReceivedCommands+0xde>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2228      	movs	r2, #40	; 0x28
 8009960:	5c9b      	ldrb	r3, [r3, r2]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d105      	bne.n	8009972 <prvProcessReceivedCommands+0xde>
						{
							vPortFree( pxTimer );
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	0018      	movs	r0, r3
 800996a:	f000 fa87 	bl	8009e7c <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800996e:	e000      	b.n	8009972 <prvProcessReceivedCommands+0xde>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009970:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009972:	4b08      	ldr	r3, [pc, #32]	; (8009994 <prvProcessReceivedCommands+0x100>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2208      	movs	r2, #8
 8009978:	18b9      	adds	r1, r7, r2
 800997a:	2200      	movs	r2, #0
 800997c:	0018      	movs	r0, r3
 800997e:	f7fe fb17 	bl	8007fb0 <xQueueReceive>
 8009982:	1e03      	subs	r3, r0, #0
 8009984:	d18a      	bne.n	800989c <prvProcessReceivedCommands+0x8>
	}
}
 8009986:	46c0      	nop			; (mov r8, r8)
 8009988:	46c0      	nop			; (mov r8, r8)
 800998a:	46bd      	mov	sp, r7
 800998c:	b009      	add	sp, #36	; 0x24
 800998e:	bd90      	pop	{r4, r7, pc}
 8009990:	08010c44 	.word	0x08010c44
 8009994:	2000084c 	.word	0x2000084c

08009998 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009998:	b580      	push	{r7, lr}
 800999a:	b088      	sub	sp, #32
 800999c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800999e:	e03e      	b.n	8009a1e <prvSwitchTimerLists+0x86>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099a0:	4b28      	ldr	r3, [pc, #160]	; (8009a44 <prvSwitchTimerLists+0xac>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80099aa:	4b26      	ldr	r3, [pc, #152]	; (8009a44 <prvSwitchTimerLists+0xac>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68db      	ldr	r3, [r3, #12]
 80099b0:	68db      	ldr	r3, [r3, #12]
 80099b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	3304      	adds	r3, #4
 80099b8:	0018      	movs	r0, r3
 80099ba:	f7fe f840 	bl	8007a3e <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	0010      	movs	r0, r2
 80099c6:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	69db      	ldr	r3, [r3, #28]
 80099cc:	2b01      	cmp	r3, #1
 80099ce:	d126      	bne.n	8009a1e <prvSwitchTimerLists+0x86>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	693a      	ldr	r2, [r7, #16]
 80099d6:	18d3      	adds	r3, r2, r3
 80099d8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	429a      	cmp	r2, r3
 80099e0:	d90e      	bls.n	8009a00 <prvSwitchTimerLists+0x68>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	68ba      	ldr	r2, [r7, #8]
 80099e6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80099ee:	4b15      	ldr	r3, [pc, #84]	; (8009a44 <prvSwitchTimerLists+0xac>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	3304      	adds	r3, #4
 80099f6:	0019      	movs	r1, r3
 80099f8:	0010      	movs	r0, r2
 80099fa:	f7fd ffea 	bl	80079d2 <vListInsert>
 80099fe:	e00e      	b.n	8009a1e <prvSwitchTimerLists+0x86>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	2300      	movs	r3, #0
 8009a06:	9300      	str	r3, [sp, #0]
 8009a08:	2300      	movs	r3, #0
 8009a0a:	2100      	movs	r1, #0
 8009a0c:	f7ff fde4 	bl	80095d8 <xTimerGenericCommand>
 8009a10:	0003      	movs	r3, r0
 8009a12:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d101      	bne.n	8009a1e <prvSwitchTimerLists+0x86>
 8009a1a:	b672      	cpsid	i
 8009a1c:	e7fe      	b.n	8009a1c <prvSwitchTimerLists+0x84>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009a1e:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <prvSwitchTimerLists+0xac>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d1bb      	bne.n	80099a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009a28:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <prvSwitchTimerLists+0xac>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009a2e:	4b06      	ldr	r3, [pc, #24]	; (8009a48 <prvSwitchTimerLists+0xb0>)
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b04      	ldr	r3, [pc, #16]	; (8009a44 <prvSwitchTimerLists+0xac>)
 8009a34:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8009a36:	4b04      	ldr	r3, [pc, #16]	; (8009a48 <prvSwitchTimerLists+0xb0>)
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	601a      	str	r2, [r3, #0]
}
 8009a3c:	46c0      	nop			; (mov r8, r8)
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	b006      	add	sp, #24
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20000844 	.word	0x20000844
 8009a48:	20000848 	.word	0x20000848

08009a4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009a52:	f000 f8d5 	bl	8009c00 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009a56:	4b16      	ldr	r3, [pc, #88]	; (8009ab0 <prvCheckForValidListAndQueue+0x64>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d123      	bne.n	8009aa6 <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a5e:	4b15      	ldr	r3, [pc, #84]	; (8009ab4 <prvCheckForValidListAndQueue+0x68>)
 8009a60:	0018      	movs	r0, r3
 8009a62:	f7fd ff6b 	bl	800793c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a66:	4b14      	ldr	r3, [pc, #80]	; (8009ab8 <prvCheckForValidListAndQueue+0x6c>)
 8009a68:	0018      	movs	r0, r3
 8009a6a:	f7fd ff67 	bl	800793c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a6e:	4b13      	ldr	r3, [pc, #76]	; (8009abc <prvCheckForValidListAndQueue+0x70>)
 8009a70:	4a10      	ldr	r2, [pc, #64]	; (8009ab4 <prvCheckForValidListAndQueue+0x68>)
 8009a72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a74:	4b12      	ldr	r3, [pc, #72]	; (8009ac0 <prvCheckForValidListAndQueue+0x74>)
 8009a76:	4a10      	ldr	r2, [pc, #64]	; (8009ab8 <prvCheckForValidListAndQueue+0x6c>)
 8009a78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a7a:	4b12      	ldr	r3, [pc, #72]	; (8009ac4 <prvCheckForValidListAndQueue+0x78>)
 8009a7c:	4a12      	ldr	r2, [pc, #72]	; (8009ac8 <prvCheckForValidListAndQueue+0x7c>)
 8009a7e:	2100      	movs	r1, #0
 8009a80:	9100      	str	r1, [sp, #0]
 8009a82:	210c      	movs	r1, #12
 8009a84:	200a      	movs	r0, #10
 8009a86:	f7fe f856 	bl	8007b36 <xQueueGenericCreateStatic>
 8009a8a:	0002      	movs	r2, r0
 8009a8c:	4b08      	ldr	r3, [pc, #32]	; (8009ab0 <prvCheckForValidListAndQueue+0x64>)
 8009a8e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a90:	4b07      	ldr	r3, [pc, #28]	; (8009ab0 <prvCheckForValidListAndQueue+0x64>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d006      	beq.n	8009aa6 <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a98:	4b05      	ldr	r3, [pc, #20]	; (8009ab0 <prvCheckForValidListAndQueue+0x64>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a0b      	ldr	r2, [pc, #44]	; (8009acc <prvCheckForValidListAndQueue+0x80>)
 8009a9e:	0011      	movs	r1, r2
 8009aa0:	0018      	movs	r0, r3
 8009aa2:	f7fe fd75 	bl	8008590 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009aa6:	f000 f8bd 	bl	8009c24 <vPortExitCritical>
}
 8009aaa:	46c0      	nop			; (mov r8, r8)
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	2000084c 	.word	0x2000084c
 8009ab4:	2000081c 	.word	0x2000081c
 8009ab8:	20000830 	.word	0x20000830
 8009abc:	20000844 	.word	0x20000844
 8009ac0:	20000848 	.word	0x20000848
 8009ac4:	200008d0 	.word	0x200008d0
 8009ac8:	20000858 	.word	0x20000858
 8009acc:	08010ba4 	.word	0x08010ba4

08009ad0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	3b04      	subs	r3, #4
 8009ae0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	2280      	movs	r2, #128	; 0x80
 8009ae6:	0452      	lsls	r2, r2, #17
 8009ae8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3b04      	subs	r3, #4
 8009aee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3b04      	subs	r3, #4
 8009afa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009afc:	4a08      	ldr	r2, [pc, #32]	; (8009b20 <pxPortInitialiseStack+0x50>)
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3b14      	subs	r3, #20
 8009b06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	3b20      	subs	r3, #32
 8009b12:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009b14:	68fb      	ldr	r3, [r7, #12]
}
 8009b16:	0018      	movs	r0, r3
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	b004      	add	sp, #16
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	08009b25 	.word	0x08009b25

08009b24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b082      	sub	sp, #8
 8009b28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009b2e:	4b08      	ldr	r3, [pc, #32]	; (8009b50 <prvTaskExitError+0x2c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	3301      	adds	r3, #1
 8009b34:	d001      	beq.n	8009b3a <prvTaskExitError+0x16>
 8009b36:	b672      	cpsid	i
 8009b38:	e7fe      	b.n	8009b38 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8009b3a:	b672      	cpsid	i
	while( ulDummy == 0 )
 8009b3c:	46c0      	nop			; (mov r8, r8)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d0fc      	beq.n	8009b3e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009b44:	46c0      	nop			; (mov r8, r8)
 8009b46:	46c0      	nop			; (mov r8, r8)
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	b002      	add	sp, #8
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	46c0      	nop			; (mov r8, r8)
 8009b50:	20000008 	.word	0x20000008

08009b54 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009b58:	46c0      	nop			; (mov r8, r8)
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009b60:	4a0b      	ldr	r2, [pc, #44]	; (8009b90 <pxCurrentTCBConst2>)
 8009b62:	6813      	ldr	r3, [r2, #0]
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	3020      	adds	r0, #32
 8009b68:	f380 8809 	msr	PSP, r0
 8009b6c:	2002      	movs	r0, #2
 8009b6e:	f380 8814 	msr	CONTROL, r0
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8009b78:	46ae      	mov	lr, r5
 8009b7a:	bc08      	pop	{r3}
 8009b7c:	bc04      	pop	{r2}
 8009b7e:	b662      	cpsie	i
 8009b80:	4718      	bx	r3
 8009b82:	46c0      	nop			; (mov r8, r8)
 8009b84:	46c0      	nop			; (mov r8, r8)
 8009b86:	46c0      	nop			; (mov r8, r8)
 8009b88:	46c0      	nop			; (mov r8, r8)
 8009b8a:	46c0      	nop			; (mov r8, r8)
 8009b8c:	46c0      	nop			; (mov r8, r8)
 8009b8e:	46c0      	nop			; (mov r8, r8)

08009b90 <pxCurrentTCBConst2>:
 8009b90:	200006f0 	.word	0x200006f0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009b94:	46c0      	nop			; (mov r8, r8)
 8009b96:	46c0      	nop			; (mov r8, r8)

08009b98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8009b9c:	4b0e      	ldr	r3, [pc, #56]	; (8009bd8 <xPortStartScheduler+0x40>)
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <xPortStartScheduler+0x40>)
 8009ba2:	21ff      	movs	r1, #255	; 0xff
 8009ba4:	0409      	lsls	r1, r1, #16
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8009baa:	4b0b      	ldr	r3, [pc, #44]	; (8009bd8 <xPortStartScheduler+0x40>)
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <xPortStartScheduler+0x40>)
 8009bb0:	21ff      	movs	r1, #255	; 0xff
 8009bb2:	0609      	lsls	r1, r1, #24
 8009bb4:	430a      	orrs	r2, r1
 8009bb6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8009bb8:	f000 f898 	bl	8009cec <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009bbc:	4b07      	ldr	r3, [pc, #28]	; (8009bdc <xPortStartScheduler+0x44>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009bc2:	f7ff ffcd 	bl	8009b60 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009bc6:	f7ff f88f 	bl	8008ce8 <vTaskSwitchContext>
	prvTaskExitError();
 8009bca:	f7ff ffab 	bl	8009b24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	46c0      	nop			; (mov r8, r8)
 8009bd8:	e000ed20 	.word	0xe000ed20
 8009bdc:	20000008 	.word	0x20000008

08009be0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8009be4:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <vPortYield+0x1c>)
 8009be6:	2280      	movs	r2, #128	; 0x80
 8009be8:	0552      	lsls	r2, r2, #21
 8009bea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8009bec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009bf0:	f3bf 8f6f 	isb	sy
}
 8009bf4:	46c0      	nop			; (mov r8, r8)
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	46c0      	nop			; (mov r8, r8)
 8009bfc:	e000ed04 	.word	0xe000ed04

08009c00 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8009c04:	b672      	cpsid	i
    uxCriticalNesting++;
 8009c06:	4b06      	ldr	r3, [pc, #24]	; (8009c20 <vPortEnterCritical+0x20>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	1c5a      	adds	r2, r3, #1
 8009c0c:	4b04      	ldr	r3, [pc, #16]	; (8009c20 <vPortEnterCritical+0x20>)
 8009c0e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009c10:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009c14:	f3bf 8f6f 	isb	sy
}
 8009c18:	46c0      	nop			; (mov r8, r8)
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	46c0      	nop			; (mov r8, r8)
 8009c20:	20000008 	.word	0x20000008

08009c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c28:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <vPortExitCritical+0x2c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <vPortExitCritical+0x10>
 8009c30:	b672      	cpsid	i
 8009c32:	e7fe      	b.n	8009c32 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8009c34:	4b06      	ldr	r3, [pc, #24]	; (8009c50 <vPortExitCritical+0x2c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	1e5a      	subs	r2, r3, #1
 8009c3a:	4b05      	ldr	r3, [pc, #20]	; (8009c50 <vPortExitCritical+0x2c>)
 8009c3c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8009c3e:	4b04      	ldr	r3, [pc, #16]	; (8009c50 <vPortExitCritical+0x2c>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d100      	bne.n	8009c48 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8009c46:	b662      	cpsie	i
    }
}
 8009c48:	46c0      	nop			; (mov r8, r8)
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	46c0      	nop			; (mov r8, r8)
 8009c50:	20000008 	.word	0x20000008

08009c54 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009c54:	f3ef 8010 	mrs	r0, PRIMASK
 8009c58:	b672      	cpsid	i
 8009c5a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8009c5c:	46c0      	nop			; (mov r8, r8)
 8009c5e:	0018      	movs	r0, r3

08009c60 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009c60:	f380 8810 	msr	PRIMASK, r0
 8009c64:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8009c66:	46c0      	nop			; (mov r8, r8)
	...

08009c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c70:	f3ef 8009 	mrs	r0, PSP
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <pxCurrentTCBConst>)
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	3820      	subs	r0, #32
 8009c7a:	6010      	str	r0, [r2, #0]
 8009c7c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009c7e:	4644      	mov	r4, r8
 8009c80:	464d      	mov	r5, r9
 8009c82:	4656      	mov	r6, sl
 8009c84:	465f      	mov	r7, fp
 8009c86:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009c88:	b508      	push	{r3, lr}
 8009c8a:	b672      	cpsid	i
 8009c8c:	f7ff f82c 	bl	8008ce8 <vTaskSwitchContext>
 8009c90:	b662      	cpsie	i
 8009c92:	bc0c      	pop	{r2, r3}
 8009c94:	6811      	ldr	r1, [r2, #0]
 8009c96:	6808      	ldr	r0, [r1, #0]
 8009c98:	3010      	adds	r0, #16
 8009c9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8009c9c:	46a0      	mov	r8, r4
 8009c9e:	46a9      	mov	r9, r5
 8009ca0:	46b2      	mov	sl, r6
 8009ca2:	46bb      	mov	fp, r7
 8009ca4:	f380 8809 	msr	PSP, r0
 8009ca8:	3820      	subs	r0, #32
 8009caa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8009cac:	4718      	bx	r3
 8009cae:	46c0      	nop			; (mov r8, r8)

08009cb0 <pxCurrentTCBConst>:
 8009cb0:	200006f0 	.word	0x200006f0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009cb4:	46c0      	nop			; (mov r8, r8)
 8009cb6:	46c0      	nop			; (mov r8, r8)

08009cb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8009cbe:	f7ff ffc9 	bl	8009c54 <ulSetInterruptMaskFromISR>
 8009cc2:	0003      	movs	r3, r0
 8009cc4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cc6:	f7fe ff5b 	bl	8008b80 <xTaskIncrementTick>
 8009cca:	1e03      	subs	r3, r0, #0
 8009ccc:	d003      	beq.n	8009cd6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8009cce:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <SysTick_Handler+0x30>)
 8009cd0:	2280      	movs	r2, #128	; 0x80
 8009cd2:	0552      	lsls	r2, r2, #21
 8009cd4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	0018      	movs	r0, r3
 8009cda:	f7ff ffc1 	bl	8009c60 <vClearInterruptMaskFromISR>
}
 8009cde:	46c0      	nop			; (mov r8, r8)
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	b002      	add	sp, #8
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	46c0      	nop			; (mov r8, r8)
 8009ce8:	e000ed04 	.word	0xe000ed04

08009cec <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8009cf0:	4b0b      	ldr	r3, [pc, #44]	; (8009d20 <prvSetupTimerInterrupt+0x34>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8009cf6:	4b0b      	ldr	r3, [pc, #44]	; (8009d24 <prvSetupTimerInterrupt+0x38>)
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cfc:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <prvSetupTimerInterrupt+0x3c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	22fa      	movs	r2, #250	; 0xfa
 8009d02:	0091      	lsls	r1, r2, #2
 8009d04:	0018      	movs	r0, r3
 8009d06:	f7f6 fa1b 	bl	8000140 <__udivsi3>
 8009d0a:	0003      	movs	r3, r0
 8009d0c:	001a      	movs	r2, r3
 8009d0e:	4b07      	ldr	r3, [pc, #28]	; (8009d2c <prvSetupTimerInterrupt+0x40>)
 8009d10:	3a01      	subs	r2, #1
 8009d12:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8009d14:	4b02      	ldr	r3, [pc, #8]	; (8009d20 <prvSetupTimerInterrupt+0x34>)
 8009d16:	2207      	movs	r2, #7
 8009d18:	601a      	str	r2, [r3, #0]
}
 8009d1a:	46c0      	nop			; (mov r8, r8)
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}
 8009d20:	e000e010 	.word	0xe000e010
 8009d24:	e000e018 	.word	0xe000e018
 8009d28:	20000000 	.word	0x20000000
 8009d2c:	e000e014 	.word	0xe000e014

08009d30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b086      	sub	sp, #24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009d38:	2300      	movs	r3, #0
 8009d3a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8009d3c:	f7fe fe6a 	bl	8008a14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009d40:	4b49      	ldr	r3, [pc, #292]	; (8009e68 <pvPortMalloc+0x138>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d101      	bne.n	8009d4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009d48:	f000 f8e0 	bl	8009f0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009d4c:	4b47      	ldr	r3, [pc, #284]	; (8009e6c <pvPortMalloc+0x13c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	4013      	ands	r3, r2
 8009d54:	d000      	beq.n	8009d58 <pvPortMalloc+0x28>
 8009d56:	e079      	b.n	8009e4c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d012      	beq.n	8009d84 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8009d5e:	2208      	movs	r2, #8
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	189b      	adds	r3, r3, r2
 8009d64:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2207      	movs	r2, #7
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	d00a      	beq.n	8009d84 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2207      	movs	r2, #7
 8009d72:	4393      	bics	r3, r2
 8009d74:	3308      	adds	r3, #8
 8009d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2207      	movs	r2, #7
 8009d7c:	4013      	ands	r3, r2
 8009d7e:	d001      	beq.n	8009d84 <pvPortMalloc+0x54>
 8009d80:	b672      	cpsid	i
 8009d82:	e7fe      	b.n	8009d82 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d060      	beq.n	8009e4c <pvPortMalloc+0x11c>
 8009d8a:	4b39      	ldr	r3, [pc, #228]	; (8009e70 <pvPortMalloc+0x140>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d85b      	bhi.n	8009e4c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d94:	4b37      	ldr	r3, [pc, #220]	; (8009e74 <pvPortMalloc+0x144>)
 8009d96:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009d98:	4b36      	ldr	r3, [pc, #216]	; (8009e74 <pvPortMalloc+0x144>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d9e:	e004      	b.n	8009daa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	687a      	ldr	r2, [r7, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d903      	bls.n	8009dbc <pvPortMalloc+0x8c>
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1f1      	bne.n	8009da0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009dbc:	4b2a      	ldr	r3, [pc, #168]	; (8009e68 <pvPortMalloc+0x138>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d042      	beq.n	8009e4c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009dc6:	693b      	ldr	r3, [r7, #16]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2208      	movs	r2, #8
 8009dcc:	189b      	adds	r3, r3, r2
 8009dce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009dd8:	697b      	ldr	r3, [r7, #20]
 8009dda:	685a      	ldr	r2, [r3, #4]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	1ad2      	subs	r2, r2, r3
 8009de0:	2308      	movs	r3, #8
 8009de2:	005b      	lsls	r3, r3, #1
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d916      	bls.n	8009e16 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	18d3      	adds	r3, r2, r3
 8009dee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	2207      	movs	r2, #7
 8009df4:	4013      	ands	r3, r2
 8009df6:	d001      	beq.n	8009dfc <pvPortMalloc+0xcc>
 8009df8:	b672      	cpsid	i
 8009dfa:	e7fe      	b.n	8009dfa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	685a      	ldr	r2, [r3, #4]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	1ad2      	subs	r2, r2, r3
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	0018      	movs	r0, r3
 8009e12:	f000 f8db 	bl	8009fcc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e16:	4b16      	ldr	r3, [pc, #88]	; (8009e70 <pvPortMalloc+0x140>)
 8009e18:	681a      	ldr	r2, [r3, #0]
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	685b      	ldr	r3, [r3, #4]
 8009e1e:	1ad2      	subs	r2, r2, r3
 8009e20:	4b13      	ldr	r3, [pc, #76]	; (8009e70 <pvPortMalloc+0x140>)
 8009e22:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009e24:	4b12      	ldr	r3, [pc, #72]	; (8009e70 <pvPortMalloc+0x140>)
 8009e26:	681a      	ldr	r2, [r3, #0]
 8009e28:	4b13      	ldr	r3, [pc, #76]	; (8009e78 <pvPortMalloc+0x148>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d203      	bcs.n	8009e38 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009e30:	4b0f      	ldr	r3, [pc, #60]	; (8009e70 <pvPortMalloc+0x140>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	4b10      	ldr	r3, [pc, #64]	; (8009e78 <pvPortMalloc+0x148>)
 8009e36:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	4b0b      	ldr	r3, [pc, #44]	; (8009e6c <pvPortMalloc+0x13c>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	431a      	orrs	r2, r3
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009e46:	697b      	ldr	r3, [r7, #20]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009e4c:	f7fe fdee 	bl	8008a2c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2207      	movs	r2, #7
 8009e54:	4013      	ands	r3, r2
 8009e56:	d001      	beq.n	8009e5c <pvPortMalloc+0x12c>
 8009e58:	b672      	cpsid	i
 8009e5a:	e7fe      	b.n	8009e5a <pvPortMalloc+0x12a>
	return pvReturn;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
}
 8009e5e:	0018      	movs	r0, r3
 8009e60:	46bd      	mov	sp, r7
 8009e62:	b006      	add	sp, #24
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	46c0      	nop			; (mov r8, r8)
 8009e68:	20002478 	.word	0x20002478
 8009e6c:	20002484 	.word	0x20002484
 8009e70:	2000247c 	.word	0x2000247c
 8009e74:	20002470 	.word	0x20002470
 8009e78:	20002480 	.word	0x20002480

08009e7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d035      	beq.n	8009efa <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e8e:	2308      	movs	r3, #8
 8009e90:	425b      	negs	r3, r3
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	18d3      	adds	r3, r2, r3
 8009e96:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	685a      	ldr	r2, [r3, #4]
 8009ea0:	4b18      	ldr	r3, [pc, #96]	; (8009f04 <vPortFree+0x88>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	4013      	ands	r3, r2
 8009ea6:	d101      	bne.n	8009eac <vPortFree+0x30>
 8009ea8:	b672      	cpsid	i
 8009eaa:	e7fe      	b.n	8009eaa <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d001      	beq.n	8009eb8 <vPortFree+0x3c>
 8009eb4:	b672      	cpsid	i
 8009eb6:	e7fe      	b.n	8009eb6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	4b11      	ldr	r3, [pc, #68]	; (8009f04 <vPortFree+0x88>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	d01a      	beq.n	8009efa <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d116      	bne.n	8009efa <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	4b0c      	ldr	r3, [pc, #48]	; (8009f04 <vPortFree+0x88>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	43db      	mvns	r3, r3
 8009ed6:	401a      	ands	r2, r3
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009edc:	f7fe fd9a 	bl	8008a14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	4b08      	ldr	r3, [pc, #32]	; (8009f08 <vPortFree+0x8c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	18d2      	adds	r2, r2, r3
 8009eea:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <vPortFree+0x8c>)
 8009eec:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	f000 f86b 	bl	8009fcc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009ef6:	f7fe fd99 	bl	8008a2c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009efa:	46c0      	nop			; (mov r8, r8)
 8009efc:	46bd      	mov	sp, r7
 8009efe:	b004      	add	sp, #16
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	46c0      	nop			; (mov r8, r8)
 8009f04:	20002484 	.word	0x20002484
 8009f08:	2000247c 	.word	0x2000247c

08009f0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009f12:	4b27      	ldr	r3, [pc, #156]	; (8009fb0 <prvHeapInit+0xa4>)
 8009f14:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009f16:	4b27      	ldr	r3, [pc, #156]	; (8009fb4 <prvHeapInit+0xa8>)
 8009f18:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2207      	movs	r2, #7
 8009f1e:	4013      	ands	r3, r2
 8009f20:	d00c      	beq.n	8009f3c <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	3307      	adds	r3, #7
 8009f26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2207      	movs	r2, #7
 8009f2c:	4393      	bics	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	1ad2      	subs	r2, r2, r3
 8009f36:	4b1f      	ldr	r3, [pc, #124]	; (8009fb4 <prvHeapInit+0xa8>)
 8009f38:	18d3      	adds	r3, r2, r3
 8009f3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f40:	4b1d      	ldr	r3, [pc, #116]	; (8009fb8 <prvHeapInit+0xac>)
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f46:	4b1c      	ldr	r3, [pc, #112]	; (8009fb8 <prvHeapInit+0xac>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	68ba      	ldr	r2, [r7, #8]
 8009f50:	18d3      	adds	r3, r2, r3
 8009f52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f54:	2208      	movs	r2, #8
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	1a9b      	subs	r3, r3, r2
 8009f5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2207      	movs	r2, #7
 8009f60:	4393      	bics	r3, r2
 8009f62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	4b15      	ldr	r3, [pc, #84]	; (8009fbc <prvHeapInit+0xb0>)
 8009f68:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8009f6a:	4b14      	ldr	r3, [pc, #80]	; (8009fbc <prvHeapInit+0xb0>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f72:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <prvHeapInit+0xb0>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	2200      	movs	r2, #0
 8009f78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	1ad2      	subs	r2, r2, r3
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f88:	4b0c      	ldr	r3, [pc, #48]	; (8009fbc <prvHeapInit+0xb0>)
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	4b0a      	ldr	r3, [pc, #40]	; (8009fc0 <prvHeapInit+0xb4>)
 8009f96:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	4b09      	ldr	r3, [pc, #36]	; (8009fc4 <prvHeapInit+0xb8>)
 8009f9e:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009fa0:	4b09      	ldr	r3, [pc, #36]	; (8009fc8 <prvHeapInit+0xbc>)
 8009fa2:	2280      	movs	r2, #128	; 0x80
 8009fa4:	0612      	lsls	r2, r2, #24
 8009fa6:	601a      	str	r2, [r3, #0]
}
 8009fa8:	46c0      	nop			; (mov r8, r8)
 8009faa:	46bd      	mov	sp, r7
 8009fac:	b004      	add	sp, #16
 8009fae:	bd80      	pop	{r7, pc}
 8009fb0:	00001b58 	.word	0x00001b58
 8009fb4:	20000918 	.word	0x20000918
 8009fb8:	20002470 	.word	0x20002470
 8009fbc:	20002478 	.word	0x20002478
 8009fc0:	20002480 	.word	0x20002480
 8009fc4:	2000247c 	.word	0x2000247c
 8009fc8:	20002484 	.word	0x20002484

08009fcc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fd4:	4b27      	ldr	r3, [pc, #156]	; (800a074 <prvInsertBlockIntoFreeList+0xa8>)
 8009fd6:	60fb      	str	r3, [r7, #12]
 8009fd8:	e002      	b.n	8009fe0 <prvInsertBlockIntoFreeList+0x14>
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d8f7      	bhi.n	8009fda <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	18d3      	adds	r3, r2, r3
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d108      	bne.n	800a00e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	685a      	ldr	r2, [r3, #4]
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	18d2      	adds	r2, r2, r3
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	68ba      	ldr	r2, [r7, #8]
 800a018:	18d2      	adds	r2, r2, r3
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	429a      	cmp	r2, r3
 800a020:	d118      	bne.n	800a054 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681a      	ldr	r2, [r3, #0]
 800a026:	4b14      	ldr	r3, [pc, #80]	; (800a078 <prvInsertBlockIntoFreeList+0xac>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d00d      	beq.n	800a04a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685a      	ldr	r2, [r3, #4]
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	18d2      	adds	r2, r2, r3
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	601a      	str	r2, [r3, #0]
 800a048:	e008      	b.n	800a05c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a04a:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <prvInsertBlockIntoFreeList+0xac>)
 800a04c:	681a      	ldr	r2, [r3, #0]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	601a      	str	r2, [r3, #0]
 800a052:	e003      	b.n	800a05c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	429a      	cmp	r2, r3
 800a062:	d002      	beq.n	800a06a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a06a:	46c0      	nop			; (mov r8, r8)
 800a06c:	46bd      	mov	sp, r7
 800a06e:	b004      	add	sp, #16
 800a070:	bd80      	pop	{r7, pc}
 800a072:	46c0      	nop			; (mov r8, r8)
 800a074:	20002470 	.word	0x20002470
 800a078:	20002478 	.word	0x20002478

0800a07c <__errno>:
 800a07c:	4b01      	ldr	r3, [pc, #4]	; (800a084 <__errno+0x8>)
 800a07e:	6818      	ldr	r0, [r3, #0]
 800a080:	4770      	bx	lr
 800a082:	46c0      	nop			; (mov r8, r8)
 800a084:	2000000c 	.word	0x2000000c

0800a088 <__libc_init_array>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	2600      	movs	r6, #0
 800a08c:	4d0c      	ldr	r5, [pc, #48]	; (800a0c0 <__libc_init_array+0x38>)
 800a08e:	4c0d      	ldr	r4, [pc, #52]	; (800a0c4 <__libc_init_array+0x3c>)
 800a090:	1b64      	subs	r4, r4, r5
 800a092:	10a4      	asrs	r4, r4, #2
 800a094:	42a6      	cmp	r6, r4
 800a096:	d109      	bne.n	800a0ac <__libc_init_array+0x24>
 800a098:	2600      	movs	r6, #0
 800a09a:	f006 fba5 	bl	80107e8 <_init>
 800a09e:	4d0a      	ldr	r5, [pc, #40]	; (800a0c8 <__libc_init_array+0x40>)
 800a0a0:	4c0a      	ldr	r4, [pc, #40]	; (800a0cc <__libc_init_array+0x44>)
 800a0a2:	1b64      	subs	r4, r4, r5
 800a0a4:	10a4      	asrs	r4, r4, #2
 800a0a6:	42a6      	cmp	r6, r4
 800a0a8:	d105      	bne.n	800a0b6 <__libc_init_array+0x2e>
 800a0aa:	bd70      	pop	{r4, r5, r6, pc}
 800a0ac:	00b3      	lsls	r3, r6, #2
 800a0ae:	58eb      	ldr	r3, [r5, r3]
 800a0b0:	4798      	blx	r3
 800a0b2:	3601      	adds	r6, #1
 800a0b4:	e7ee      	b.n	800a094 <__libc_init_array+0xc>
 800a0b6:	00b3      	lsls	r3, r6, #2
 800a0b8:	58eb      	ldr	r3, [r5, r3]
 800a0ba:	4798      	blx	r3
 800a0bc:	3601      	adds	r6, #1
 800a0be:	e7f2      	b.n	800a0a6 <__libc_init_array+0x1e>
 800a0c0:	08011338 	.word	0x08011338
 800a0c4:	08011338 	.word	0x08011338
 800a0c8:	08011338 	.word	0x08011338
 800a0cc:	0801133c 	.word	0x0801133c

0800a0d0 <memcpy>:
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	b510      	push	{r4, lr}
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d100      	bne.n	800a0da <memcpy+0xa>
 800a0d8:	bd10      	pop	{r4, pc}
 800a0da:	5ccc      	ldrb	r4, [r1, r3]
 800a0dc:	54c4      	strb	r4, [r0, r3]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	e7f8      	b.n	800a0d4 <memcpy+0x4>

0800a0e2 <memset>:
 800a0e2:	0003      	movs	r3, r0
 800a0e4:	1882      	adds	r2, r0, r2
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d100      	bne.n	800a0ec <memset+0xa>
 800a0ea:	4770      	bx	lr
 800a0ec:	7019      	strb	r1, [r3, #0]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	e7f9      	b.n	800a0e6 <memset+0x4>

0800a0f2 <__cvt>:
 800a0f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0f4:	001e      	movs	r6, r3
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	0014      	movs	r4, r2
 800a0fa:	b08b      	sub	sp, #44	; 0x2c
 800a0fc:	429e      	cmp	r6, r3
 800a0fe:	da04      	bge.n	800a10a <__cvt+0x18>
 800a100:	2180      	movs	r1, #128	; 0x80
 800a102:	0609      	lsls	r1, r1, #24
 800a104:	1873      	adds	r3, r6, r1
 800a106:	001e      	movs	r6, r3
 800a108:	232d      	movs	r3, #45	; 0x2d
 800a10a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a10c:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a10e:	7013      	strb	r3, [r2, #0]
 800a110:	2320      	movs	r3, #32
 800a112:	2203      	movs	r2, #3
 800a114:	439f      	bics	r7, r3
 800a116:	2f46      	cmp	r7, #70	; 0x46
 800a118:	d007      	beq.n	800a12a <__cvt+0x38>
 800a11a:	003b      	movs	r3, r7
 800a11c:	3b45      	subs	r3, #69	; 0x45
 800a11e:	4259      	negs	r1, r3
 800a120:	414b      	adcs	r3, r1
 800a122:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a124:	3a01      	subs	r2, #1
 800a126:	18cb      	adds	r3, r1, r3
 800a128:	9310      	str	r3, [sp, #64]	; 0x40
 800a12a:	ab09      	add	r3, sp, #36	; 0x24
 800a12c:	9304      	str	r3, [sp, #16]
 800a12e:	ab08      	add	r3, sp, #32
 800a130:	9303      	str	r3, [sp, #12]
 800a132:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a134:	9200      	str	r2, [sp, #0]
 800a136:	9302      	str	r3, [sp, #8]
 800a138:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a13a:	0022      	movs	r2, r4
 800a13c:	9301      	str	r3, [sp, #4]
 800a13e:	0033      	movs	r3, r6
 800a140:	f001 fd66 	bl	800bc10 <_dtoa_r>
 800a144:	0005      	movs	r5, r0
 800a146:	2f47      	cmp	r7, #71	; 0x47
 800a148:	d102      	bne.n	800a150 <__cvt+0x5e>
 800a14a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a14c:	07db      	lsls	r3, r3, #31
 800a14e:	d528      	bpl.n	800a1a2 <__cvt+0xb0>
 800a150:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a152:	18eb      	adds	r3, r5, r3
 800a154:	9307      	str	r3, [sp, #28]
 800a156:	2f46      	cmp	r7, #70	; 0x46
 800a158:	d114      	bne.n	800a184 <__cvt+0x92>
 800a15a:	782b      	ldrb	r3, [r5, #0]
 800a15c:	2b30      	cmp	r3, #48	; 0x30
 800a15e:	d10c      	bne.n	800a17a <__cvt+0x88>
 800a160:	2200      	movs	r2, #0
 800a162:	2300      	movs	r3, #0
 800a164:	0020      	movs	r0, r4
 800a166:	0031      	movs	r1, r6
 800a168:	f7f6 f970 	bl	800044c <__aeabi_dcmpeq>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d104      	bne.n	800a17a <__cvt+0x88>
 800a170:	2301      	movs	r3, #1
 800a172:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a174:	1a9b      	subs	r3, r3, r2
 800a176:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a178:	6013      	str	r3, [r2, #0]
 800a17a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a17c:	9a07      	ldr	r2, [sp, #28]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	18d3      	adds	r3, r2, r3
 800a182:	9307      	str	r3, [sp, #28]
 800a184:	2200      	movs	r2, #0
 800a186:	2300      	movs	r3, #0
 800a188:	0020      	movs	r0, r4
 800a18a:	0031      	movs	r1, r6
 800a18c:	f7f6 f95e 	bl	800044c <__aeabi_dcmpeq>
 800a190:	2800      	cmp	r0, #0
 800a192:	d001      	beq.n	800a198 <__cvt+0xa6>
 800a194:	9b07      	ldr	r3, [sp, #28]
 800a196:	9309      	str	r3, [sp, #36]	; 0x24
 800a198:	2230      	movs	r2, #48	; 0x30
 800a19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19c:	9907      	ldr	r1, [sp, #28]
 800a19e:	428b      	cmp	r3, r1
 800a1a0:	d306      	bcc.n	800a1b0 <__cvt+0xbe>
 800a1a2:	0028      	movs	r0, r5
 800a1a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1a8:	1b5b      	subs	r3, r3, r5
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	b00b      	add	sp, #44	; 0x2c
 800a1ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1b0:	1c59      	adds	r1, r3, #1
 800a1b2:	9109      	str	r1, [sp, #36]	; 0x24
 800a1b4:	701a      	strb	r2, [r3, #0]
 800a1b6:	e7f0      	b.n	800a19a <__cvt+0xa8>

0800a1b8 <__exponent>:
 800a1b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1ba:	1c83      	adds	r3, r0, #2
 800a1bc:	b087      	sub	sp, #28
 800a1be:	9303      	str	r3, [sp, #12]
 800a1c0:	0005      	movs	r5, r0
 800a1c2:	000c      	movs	r4, r1
 800a1c4:	232b      	movs	r3, #43	; 0x2b
 800a1c6:	7002      	strb	r2, [r0, #0]
 800a1c8:	2900      	cmp	r1, #0
 800a1ca:	da01      	bge.n	800a1d0 <__exponent+0x18>
 800a1cc:	424c      	negs	r4, r1
 800a1ce:	3302      	adds	r3, #2
 800a1d0:	706b      	strb	r3, [r5, #1]
 800a1d2:	2c09      	cmp	r4, #9
 800a1d4:	dd31      	ble.n	800a23a <__exponent+0x82>
 800a1d6:	270a      	movs	r7, #10
 800a1d8:	ab04      	add	r3, sp, #16
 800a1da:	1dde      	adds	r6, r3, #7
 800a1dc:	0020      	movs	r0, r4
 800a1de:	0039      	movs	r1, r7
 800a1e0:	9601      	str	r6, [sp, #4]
 800a1e2:	f7f6 f91d 	bl	8000420 <__aeabi_idivmod>
 800a1e6:	3e01      	subs	r6, #1
 800a1e8:	3130      	adds	r1, #48	; 0x30
 800a1ea:	0020      	movs	r0, r4
 800a1ec:	7031      	strb	r1, [r6, #0]
 800a1ee:	0039      	movs	r1, r7
 800a1f0:	9402      	str	r4, [sp, #8]
 800a1f2:	f7f6 f82f 	bl	8000254 <__divsi3>
 800a1f6:	9b02      	ldr	r3, [sp, #8]
 800a1f8:	0004      	movs	r4, r0
 800a1fa:	2b63      	cmp	r3, #99	; 0x63
 800a1fc:	dcee      	bgt.n	800a1dc <__exponent+0x24>
 800a1fe:	9b01      	ldr	r3, [sp, #4]
 800a200:	3430      	adds	r4, #48	; 0x30
 800a202:	1e9a      	subs	r2, r3, #2
 800a204:	0013      	movs	r3, r2
 800a206:	9903      	ldr	r1, [sp, #12]
 800a208:	7014      	strb	r4, [r2, #0]
 800a20a:	a804      	add	r0, sp, #16
 800a20c:	3007      	adds	r0, #7
 800a20e:	4298      	cmp	r0, r3
 800a210:	d80e      	bhi.n	800a230 <__exponent+0x78>
 800a212:	ab04      	add	r3, sp, #16
 800a214:	3307      	adds	r3, #7
 800a216:	2000      	movs	r0, #0
 800a218:	429a      	cmp	r2, r3
 800a21a:	d804      	bhi.n	800a226 <__exponent+0x6e>
 800a21c:	ab04      	add	r3, sp, #16
 800a21e:	3009      	adds	r0, #9
 800a220:	18c0      	adds	r0, r0, r3
 800a222:	9b01      	ldr	r3, [sp, #4]
 800a224:	1ac0      	subs	r0, r0, r3
 800a226:	9b03      	ldr	r3, [sp, #12]
 800a228:	1818      	adds	r0, r3, r0
 800a22a:	1b40      	subs	r0, r0, r5
 800a22c:	b007      	add	sp, #28
 800a22e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a230:	7818      	ldrb	r0, [r3, #0]
 800a232:	3301      	adds	r3, #1
 800a234:	7008      	strb	r0, [r1, #0]
 800a236:	3101      	adds	r1, #1
 800a238:	e7e7      	b.n	800a20a <__exponent+0x52>
 800a23a:	2330      	movs	r3, #48	; 0x30
 800a23c:	18e4      	adds	r4, r4, r3
 800a23e:	70ab      	strb	r3, [r5, #2]
 800a240:	1d28      	adds	r0, r5, #4
 800a242:	70ec      	strb	r4, [r5, #3]
 800a244:	e7f1      	b.n	800a22a <__exponent+0x72>
	...

0800a248 <_printf_float>:
 800a248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a24a:	b095      	sub	sp, #84	; 0x54
 800a24c:	000c      	movs	r4, r1
 800a24e:	9208      	str	r2, [sp, #32]
 800a250:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a252:	9309      	str	r3, [sp, #36]	; 0x24
 800a254:	0007      	movs	r7, r0
 800a256:	f003 f839 	bl	800d2cc <_localeconv_r>
 800a25a:	6803      	ldr	r3, [r0, #0]
 800a25c:	0018      	movs	r0, r3
 800a25e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a260:	f7f5 ff52 	bl	8000108 <strlen>
 800a264:	2300      	movs	r3, #0
 800a266:	9312      	str	r3, [sp, #72]	; 0x48
 800a268:	7e23      	ldrb	r3, [r4, #24]
 800a26a:	2207      	movs	r2, #7
 800a26c:	001e      	movs	r6, r3
 800a26e:	6823      	ldr	r3, [r4, #0]
 800a270:	900d      	str	r0, [sp, #52]	; 0x34
 800a272:	930c      	str	r3, [sp, #48]	; 0x30
 800a274:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a276:	682b      	ldr	r3, [r5, #0]
 800a278:	05c9      	lsls	r1, r1, #23
 800a27a:	d547      	bpl.n	800a30c <_printf_float+0xc4>
 800a27c:	189b      	adds	r3, r3, r2
 800a27e:	4393      	bics	r3, r2
 800a280:	001a      	movs	r2, r3
 800a282:	3208      	adds	r2, #8
 800a284:	602a      	str	r2, [r5, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	64a2      	str	r2, [r4, #72]	; 0x48
 800a28c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a28e:	2201      	movs	r2, #1
 800a290:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a292:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800a294:	930a      	str	r3, [sp, #40]	; 0x28
 800a296:	006b      	lsls	r3, r5, #1
 800a298:	085b      	lsrs	r3, r3, #1
 800a29a:	930e      	str	r3, [sp, #56]	; 0x38
 800a29c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a29e:	4ba8      	ldr	r3, [pc, #672]	; (800a540 <_printf_float+0x2f8>)
 800a2a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a2a2:	4252      	negs	r2, r2
 800a2a4:	f7f7 fede 	bl	8002064 <__aeabi_dcmpun>
 800a2a8:	2800      	cmp	r0, #0
 800a2aa:	d131      	bne.n	800a310 <_printf_float+0xc8>
 800a2ac:	2201      	movs	r2, #1
 800a2ae:	4ba4      	ldr	r3, [pc, #656]	; (800a540 <_printf_float+0x2f8>)
 800a2b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2b2:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a2b4:	4252      	negs	r2, r2
 800a2b6:	f7f6 f8d9 	bl	800046c <__aeabi_dcmple>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	d128      	bne.n	800a310 <_printf_float+0xc8>
 800a2be:	2200      	movs	r2, #0
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	0029      	movs	r1, r5
 800a2c4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800a2c6:	f7f6 f8c7 	bl	8000458 <__aeabi_dcmplt>
 800a2ca:	2800      	cmp	r0, #0
 800a2cc:	d003      	beq.n	800a2d6 <_printf_float+0x8e>
 800a2ce:	0023      	movs	r3, r4
 800a2d0:	222d      	movs	r2, #45	; 0x2d
 800a2d2:	3343      	adds	r3, #67	; 0x43
 800a2d4:	701a      	strb	r2, [r3, #0]
 800a2d6:	4d9b      	ldr	r5, [pc, #620]	; (800a544 <_printf_float+0x2fc>)
 800a2d8:	2e47      	cmp	r6, #71	; 0x47
 800a2da:	d900      	bls.n	800a2de <_printf_float+0x96>
 800a2dc:	4d9a      	ldr	r5, [pc, #616]	; (800a548 <_printf_float+0x300>)
 800a2de:	2303      	movs	r3, #3
 800a2e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2e2:	6123      	str	r3, [r4, #16]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	439a      	bics	r2, r3
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	6022      	str	r2, [r4, #0]
 800a2ec:	930a      	str	r3, [sp, #40]	; 0x28
 800a2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f0:	0021      	movs	r1, r4
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	0038      	movs	r0, r7
 800a2f6:	9b08      	ldr	r3, [sp, #32]
 800a2f8:	aa13      	add	r2, sp, #76	; 0x4c
 800a2fa:	f000 f9f3 	bl	800a6e4 <_printf_common>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	d000      	beq.n	800a304 <_printf_float+0xbc>
 800a302:	e09e      	b.n	800a442 <_printf_float+0x1fa>
 800a304:	2001      	movs	r0, #1
 800a306:	4240      	negs	r0, r0
 800a308:	b015      	add	sp, #84	; 0x54
 800a30a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a30c:	3307      	adds	r3, #7
 800a30e:	e7b6      	b.n	800a27e <_printf_float+0x36>
 800a310:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a312:	002b      	movs	r3, r5
 800a314:	0010      	movs	r0, r2
 800a316:	0029      	movs	r1, r5
 800a318:	f7f7 fea4 	bl	8002064 <__aeabi_dcmpun>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	d00a      	beq.n	800a336 <_printf_float+0xee>
 800a320:	2d00      	cmp	r5, #0
 800a322:	da03      	bge.n	800a32c <_printf_float+0xe4>
 800a324:	0023      	movs	r3, r4
 800a326:	222d      	movs	r2, #45	; 0x2d
 800a328:	3343      	adds	r3, #67	; 0x43
 800a32a:	701a      	strb	r2, [r3, #0]
 800a32c:	4d87      	ldr	r5, [pc, #540]	; (800a54c <_printf_float+0x304>)
 800a32e:	2e47      	cmp	r6, #71	; 0x47
 800a330:	d9d5      	bls.n	800a2de <_printf_float+0x96>
 800a332:	4d87      	ldr	r5, [pc, #540]	; (800a550 <_printf_float+0x308>)
 800a334:	e7d3      	b.n	800a2de <_printf_float+0x96>
 800a336:	2220      	movs	r2, #32
 800a338:	0031      	movs	r1, r6
 800a33a:	6863      	ldr	r3, [r4, #4]
 800a33c:	4391      	bics	r1, r2
 800a33e:	910e      	str	r1, [sp, #56]	; 0x38
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	d147      	bne.n	800a3d4 <_printf_float+0x18c>
 800a344:	3307      	adds	r3, #7
 800a346:	6063      	str	r3, [r4, #4]
 800a348:	2380      	movs	r3, #128	; 0x80
 800a34a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	4313      	orrs	r3, r2
 800a350:	2200      	movs	r2, #0
 800a352:	9206      	str	r2, [sp, #24]
 800a354:	aa12      	add	r2, sp, #72	; 0x48
 800a356:	9205      	str	r2, [sp, #20]
 800a358:	aa11      	add	r2, sp, #68	; 0x44
 800a35a:	9203      	str	r2, [sp, #12]
 800a35c:	2223      	movs	r2, #35	; 0x23
 800a35e:	a908      	add	r1, sp, #32
 800a360:	6023      	str	r3, [r4, #0]
 800a362:	9301      	str	r3, [sp, #4]
 800a364:	6863      	ldr	r3, [r4, #4]
 800a366:	1852      	adds	r2, r2, r1
 800a368:	9202      	str	r2, [sp, #8]
 800a36a:	9300      	str	r3, [sp, #0]
 800a36c:	0038      	movs	r0, r7
 800a36e:	002b      	movs	r3, r5
 800a370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a372:	9604      	str	r6, [sp, #16]
 800a374:	f7ff febd 	bl	800a0f2 <__cvt>
 800a378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a37a:	0005      	movs	r5, r0
 800a37c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a37e:	2b47      	cmp	r3, #71	; 0x47
 800a380:	d108      	bne.n	800a394 <_printf_float+0x14c>
 800a382:	1ccb      	adds	r3, r1, #3
 800a384:	db02      	blt.n	800a38c <_printf_float+0x144>
 800a386:	6863      	ldr	r3, [r4, #4]
 800a388:	4299      	cmp	r1, r3
 800a38a:	dd46      	ble.n	800a41a <_printf_float+0x1d2>
 800a38c:	0033      	movs	r3, r6
 800a38e:	3b02      	subs	r3, #2
 800a390:	b2db      	uxtb	r3, r3
 800a392:	001e      	movs	r6, r3
 800a394:	2e65      	cmp	r6, #101	; 0x65
 800a396:	d824      	bhi.n	800a3e2 <_printf_float+0x19a>
 800a398:	0020      	movs	r0, r4
 800a39a:	0032      	movs	r2, r6
 800a39c:	3901      	subs	r1, #1
 800a39e:	3050      	adds	r0, #80	; 0x50
 800a3a0:	9111      	str	r1, [sp, #68]	; 0x44
 800a3a2:	f7ff ff09 	bl	800a1b8 <__exponent>
 800a3a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3a8:	900a      	str	r0, [sp, #40]	; 0x28
 800a3aa:	1813      	adds	r3, r2, r0
 800a3ac:	6123      	str	r3, [r4, #16]
 800a3ae:	2a01      	cmp	r2, #1
 800a3b0:	dc02      	bgt.n	800a3b8 <_printf_float+0x170>
 800a3b2:	6822      	ldr	r2, [r4, #0]
 800a3b4:	07d2      	lsls	r2, r2, #31
 800a3b6:	d501      	bpl.n	800a3bc <_printf_float+0x174>
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	6123      	str	r3, [r4, #16]
 800a3bc:	2323      	movs	r3, #35	; 0x23
 800a3be:	aa08      	add	r2, sp, #32
 800a3c0:	189b      	adds	r3, r3, r2
 800a3c2:	781b      	ldrb	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d100      	bne.n	800a3ca <_printf_float+0x182>
 800a3c8:	e791      	b.n	800a2ee <_printf_float+0xa6>
 800a3ca:	0023      	movs	r3, r4
 800a3cc:	222d      	movs	r2, #45	; 0x2d
 800a3ce:	3343      	adds	r3, #67	; 0x43
 800a3d0:	701a      	strb	r2, [r3, #0]
 800a3d2:	e78c      	b.n	800a2ee <_printf_float+0xa6>
 800a3d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3d6:	2a47      	cmp	r2, #71	; 0x47
 800a3d8:	d1b6      	bne.n	800a348 <_printf_float+0x100>
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1b4      	bne.n	800a348 <_printf_float+0x100>
 800a3de:	3301      	adds	r3, #1
 800a3e0:	e7b1      	b.n	800a346 <_printf_float+0xfe>
 800a3e2:	2e66      	cmp	r6, #102	; 0x66
 800a3e4:	d11b      	bne.n	800a41e <_printf_float+0x1d6>
 800a3e6:	6863      	ldr	r3, [r4, #4]
 800a3e8:	2900      	cmp	r1, #0
 800a3ea:	dd0d      	ble.n	800a408 <_printf_float+0x1c0>
 800a3ec:	6121      	str	r1, [r4, #16]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d102      	bne.n	800a3f8 <_printf_float+0x1b0>
 800a3f2:	6822      	ldr	r2, [r4, #0]
 800a3f4:	07d2      	lsls	r2, r2, #31
 800a3f6:	d502      	bpl.n	800a3fe <_printf_float+0x1b6>
 800a3f8:	3301      	adds	r3, #1
 800a3fa:	1859      	adds	r1, r3, r1
 800a3fc:	6121      	str	r1, [r4, #16]
 800a3fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a400:	65a3      	str	r3, [r4, #88]	; 0x58
 800a402:	2300      	movs	r3, #0
 800a404:	930a      	str	r3, [sp, #40]	; 0x28
 800a406:	e7d9      	b.n	800a3bc <_printf_float+0x174>
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d103      	bne.n	800a414 <_printf_float+0x1cc>
 800a40c:	2201      	movs	r2, #1
 800a40e:	6821      	ldr	r1, [r4, #0]
 800a410:	4211      	tst	r1, r2
 800a412:	d000      	beq.n	800a416 <_printf_float+0x1ce>
 800a414:	1c9a      	adds	r2, r3, #2
 800a416:	6122      	str	r2, [r4, #16]
 800a418:	e7f1      	b.n	800a3fe <_printf_float+0x1b6>
 800a41a:	2367      	movs	r3, #103	; 0x67
 800a41c:	001e      	movs	r6, r3
 800a41e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a420:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a422:	4293      	cmp	r3, r2
 800a424:	db06      	blt.n	800a434 <_printf_float+0x1ec>
 800a426:	6822      	ldr	r2, [r4, #0]
 800a428:	6123      	str	r3, [r4, #16]
 800a42a:	07d2      	lsls	r2, r2, #31
 800a42c:	d5e7      	bpl.n	800a3fe <_printf_float+0x1b6>
 800a42e:	3301      	adds	r3, #1
 800a430:	6123      	str	r3, [r4, #16]
 800a432:	e7e4      	b.n	800a3fe <_printf_float+0x1b6>
 800a434:	2101      	movs	r1, #1
 800a436:	2b00      	cmp	r3, #0
 800a438:	dc01      	bgt.n	800a43e <_printf_float+0x1f6>
 800a43a:	1849      	adds	r1, r1, r1
 800a43c:	1ac9      	subs	r1, r1, r3
 800a43e:	1852      	adds	r2, r2, r1
 800a440:	e7e9      	b.n	800a416 <_printf_float+0x1ce>
 800a442:	6822      	ldr	r2, [r4, #0]
 800a444:	0553      	lsls	r3, r2, #21
 800a446:	d408      	bmi.n	800a45a <_printf_float+0x212>
 800a448:	6923      	ldr	r3, [r4, #16]
 800a44a:	002a      	movs	r2, r5
 800a44c:	0038      	movs	r0, r7
 800a44e:	9908      	ldr	r1, [sp, #32]
 800a450:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a452:	47a8      	blx	r5
 800a454:	1c43      	adds	r3, r0, #1
 800a456:	d129      	bne.n	800a4ac <_printf_float+0x264>
 800a458:	e754      	b.n	800a304 <_printf_float+0xbc>
 800a45a:	2e65      	cmp	r6, #101	; 0x65
 800a45c:	d800      	bhi.n	800a460 <_printf_float+0x218>
 800a45e:	e0ec      	b.n	800a63a <_printf_float+0x3f2>
 800a460:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a462:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a464:	2200      	movs	r2, #0
 800a466:	2300      	movs	r3, #0
 800a468:	f7f5 fff0 	bl	800044c <__aeabi_dcmpeq>
 800a46c:	2800      	cmp	r0, #0
 800a46e:	d034      	beq.n	800a4da <_printf_float+0x292>
 800a470:	2301      	movs	r3, #1
 800a472:	0038      	movs	r0, r7
 800a474:	4a37      	ldr	r2, [pc, #220]	; (800a554 <_printf_float+0x30c>)
 800a476:	9908      	ldr	r1, [sp, #32]
 800a478:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a47a:	47a8      	blx	r5
 800a47c:	1c43      	adds	r3, r0, #1
 800a47e:	d100      	bne.n	800a482 <_printf_float+0x23a>
 800a480:	e740      	b.n	800a304 <_printf_float+0xbc>
 800a482:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a484:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a486:	4293      	cmp	r3, r2
 800a488:	db02      	blt.n	800a490 <_printf_float+0x248>
 800a48a:	6823      	ldr	r3, [r4, #0]
 800a48c:	07db      	lsls	r3, r3, #31
 800a48e:	d50d      	bpl.n	800a4ac <_printf_float+0x264>
 800a490:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a492:	0038      	movs	r0, r7
 800a494:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a496:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a498:	9908      	ldr	r1, [sp, #32]
 800a49a:	47a8      	blx	r5
 800a49c:	2500      	movs	r5, #0
 800a49e:	1c43      	adds	r3, r0, #1
 800a4a0:	d100      	bne.n	800a4a4 <_printf_float+0x25c>
 800a4a2:	e72f      	b.n	800a304 <_printf_float+0xbc>
 800a4a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	42ab      	cmp	r3, r5
 800a4aa:	dc0a      	bgt.n	800a4c2 <_printf_float+0x27a>
 800a4ac:	6823      	ldr	r3, [r4, #0]
 800a4ae:	079b      	lsls	r3, r3, #30
 800a4b0:	d500      	bpl.n	800a4b4 <_printf_float+0x26c>
 800a4b2:	e114      	b.n	800a6de <_printf_float+0x496>
 800a4b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a4b6:	68e0      	ldr	r0, [r4, #12]
 800a4b8:	4298      	cmp	r0, r3
 800a4ba:	db00      	blt.n	800a4be <_printf_float+0x276>
 800a4bc:	e724      	b.n	800a308 <_printf_float+0xc0>
 800a4be:	0018      	movs	r0, r3
 800a4c0:	e722      	b.n	800a308 <_printf_float+0xc0>
 800a4c2:	0022      	movs	r2, r4
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	0038      	movs	r0, r7
 800a4c8:	9908      	ldr	r1, [sp, #32]
 800a4ca:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a4cc:	321a      	adds	r2, #26
 800a4ce:	47b0      	blx	r6
 800a4d0:	1c43      	adds	r3, r0, #1
 800a4d2:	d100      	bne.n	800a4d6 <_printf_float+0x28e>
 800a4d4:	e716      	b.n	800a304 <_printf_float+0xbc>
 800a4d6:	3501      	adds	r5, #1
 800a4d8:	e7e4      	b.n	800a4a4 <_printf_float+0x25c>
 800a4da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	dc3b      	bgt.n	800a558 <_printf_float+0x310>
 800a4e0:	2301      	movs	r3, #1
 800a4e2:	0038      	movs	r0, r7
 800a4e4:	4a1b      	ldr	r2, [pc, #108]	; (800a554 <_printf_float+0x30c>)
 800a4e6:	9908      	ldr	r1, [sp, #32]
 800a4e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a4ea:	47b0      	blx	r6
 800a4ec:	1c43      	adds	r3, r0, #1
 800a4ee:	d100      	bne.n	800a4f2 <_printf_float+0x2aa>
 800a4f0:	e708      	b.n	800a304 <_printf_float+0xbc>
 800a4f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	d102      	bne.n	800a500 <_printf_float+0x2b8>
 800a4fa:	6823      	ldr	r3, [r4, #0]
 800a4fc:	07db      	lsls	r3, r3, #31
 800a4fe:	d5d5      	bpl.n	800a4ac <_printf_float+0x264>
 800a500:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a502:	0038      	movs	r0, r7
 800a504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a506:	9908      	ldr	r1, [sp, #32]
 800a508:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a50a:	47b0      	blx	r6
 800a50c:	1c43      	adds	r3, r0, #1
 800a50e:	d100      	bne.n	800a512 <_printf_float+0x2ca>
 800a510:	e6f8      	b.n	800a304 <_printf_float+0xbc>
 800a512:	2300      	movs	r3, #0
 800a514:	930a      	str	r3, [sp, #40]	; 0x28
 800a516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a51a:	425b      	negs	r3, r3
 800a51c:	4293      	cmp	r3, r2
 800a51e:	dc01      	bgt.n	800a524 <_printf_float+0x2dc>
 800a520:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a522:	e792      	b.n	800a44a <_printf_float+0x202>
 800a524:	0022      	movs	r2, r4
 800a526:	2301      	movs	r3, #1
 800a528:	0038      	movs	r0, r7
 800a52a:	9908      	ldr	r1, [sp, #32]
 800a52c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a52e:	321a      	adds	r2, #26
 800a530:	47b0      	blx	r6
 800a532:	1c43      	adds	r3, r0, #1
 800a534:	d100      	bne.n	800a538 <_printf_float+0x2f0>
 800a536:	e6e5      	b.n	800a304 <_printf_float+0xbc>
 800a538:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a53a:	3301      	adds	r3, #1
 800a53c:	e7ea      	b.n	800a514 <_printf_float+0x2cc>
 800a53e:	46c0      	nop			; (mov r8, r8)
 800a540:	7fefffff 	.word	0x7fefffff
 800a544:	08010c70 	.word	0x08010c70
 800a548:	08010c74 	.word	0x08010c74
 800a54c:	08010c78 	.word	0x08010c78
 800a550:	08010c7c 	.word	0x08010c7c
 800a554:	08010c80 	.word	0x08010c80
 800a558:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a55a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a55c:	920a      	str	r2, [sp, #40]	; 0x28
 800a55e:	429a      	cmp	r2, r3
 800a560:	dd00      	ble.n	800a564 <_printf_float+0x31c>
 800a562:	930a      	str	r3, [sp, #40]	; 0x28
 800a564:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a566:	2b00      	cmp	r3, #0
 800a568:	dc3d      	bgt.n	800a5e6 <_printf_float+0x39e>
 800a56a:	2300      	movs	r3, #0
 800a56c:	930e      	str	r3, [sp, #56]	; 0x38
 800a56e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a570:	43db      	mvns	r3, r3
 800a572:	17db      	asrs	r3, r3, #31
 800a574:	930f      	str	r3, [sp, #60]	; 0x3c
 800a576:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a578:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a57a:	930c      	str	r3, [sp, #48]	; 0x30
 800a57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57e:	4013      	ands	r3, r2
 800a580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a582:	1ad3      	subs	r3, r2, r3
 800a584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a586:	4293      	cmp	r3, r2
 800a588:	dc36      	bgt.n	800a5f8 <_printf_float+0x3b0>
 800a58a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a58c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a58e:	4293      	cmp	r3, r2
 800a590:	db40      	blt.n	800a614 <_printf_float+0x3cc>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	07db      	lsls	r3, r3, #31
 800a596:	d43d      	bmi.n	800a614 <_printf_float+0x3cc>
 800a598:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a59a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a59c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a59e:	1ad3      	subs	r3, r2, r3
 800a5a0:	1a52      	subs	r2, r2, r1
 800a5a2:	920a      	str	r2, [sp, #40]	; 0x28
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	dd00      	ble.n	800a5aa <_printf_float+0x362>
 800a5a8:	930a      	str	r3, [sp, #40]	; 0x28
 800a5aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	dc3a      	bgt.n	800a626 <_printf_float+0x3de>
 800a5b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5b2:	2500      	movs	r5, #0
 800a5b4:	43db      	mvns	r3, r3
 800a5b6:	17db      	asrs	r3, r3, #31
 800a5b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a5be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5c0:	1a9b      	subs	r3, r3, r2
 800a5c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5c4:	400a      	ands	r2, r1
 800a5c6:	1a9b      	subs	r3, r3, r2
 800a5c8:	42ab      	cmp	r3, r5
 800a5ca:	dc00      	bgt.n	800a5ce <_printf_float+0x386>
 800a5cc:	e76e      	b.n	800a4ac <_printf_float+0x264>
 800a5ce:	0022      	movs	r2, r4
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	0038      	movs	r0, r7
 800a5d4:	9908      	ldr	r1, [sp, #32]
 800a5d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a5d8:	321a      	adds	r2, #26
 800a5da:	47b0      	blx	r6
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d100      	bne.n	800a5e2 <_printf_float+0x39a>
 800a5e0:	e690      	b.n	800a304 <_printf_float+0xbc>
 800a5e2:	3501      	adds	r5, #1
 800a5e4:	e7e9      	b.n	800a5ba <_printf_float+0x372>
 800a5e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5e8:	002a      	movs	r2, r5
 800a5ea:	0038      	movs	r0, r7
 800a5ec:	9908      	ldr	r1, [sp, #32]
 800a5ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a5f0:	47b0      	blx	r6
 800a5f2:	1c43      	adds	r3, r0, #1
 800a5f4:	d1b9      	bne.n	800a56a <_printf_float+0x322>
 800a5f6:	e685      	b.n	800a304 <_printf_float+0xbc>
 800a5f8:	0022      	movs	r2, r4
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	0038      	movs	r0, r7
 800a5fe:	9908      	ldr	r1, [sp, #32]
 800a600:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a602:	321a      	adds	r2, #26
 800a604:	47b0      	blx	r6
 800a606:	1c43      	adds	r3, r0, #1
 800a608:	d100      	bne.n	800a60c <_printf_float+0x3c4>
 800a60a:	e67b      	b.n	800a304 <_printf_float+0xbc>
 800a60c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a60e:	3301      	adds	r3, #1
 800a610:	930e      	str	r3, [sp, #56]	; 0x38
 800a612:	e7b0      	b.n	800a576 <_printf_float+0x32e>
 800a614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a616:	0038      	movs	r0, r7
 800a618:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a61a:	9908      	ldr	r1, [sp, #32]
 800a61c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a61e:	47b0      	blx	r6
 800a620:	1c43      	adds	r3, r0, #1
 800a622:	d1b9      	bne.n	800a598 <_printf_float+0x350>
 800a624:	e66e      	b.n	800a304 <_printf_float+0xbc>
 800a626:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a628:	0038      	movs	r0, r7
 800a62a:	18ea      	adds	r2, r5, r3
 800a62c:	9908      	ldr	r1, [sp, #32]
 800a62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a630:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a632:	47a8      	blx	r5
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d1bb      	bne.n	800a5b0 <_printf_float+0x368>
 800a638:	e664      	b.n	800a304 <_printf_float+0xbc>
 800a63a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	dc02      	bgt.n	800a646 <_printf_float+0x3fe>
 800a640:	2301      	movs	r3, #1
 800a642:	421a      	tst	r2, r3
 800a644:	d038      	beq.n	800a6b8 <_printf_float+0x470>
 800a646:	2301      	movs	r3, #1
 800a648:	002a      	movs	r2, r5
 800a64a:	0038      	movs	r0, r7
 800a64c:	9908      	ldr	r1, [sp, #32]
 800a64e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a650:	47b0      	blx	r6
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	d100      	bne.n	800a658 <_printf_float+0x410>
 800a656:	e655      	b.n	800a304 <_printf_float+0xbc>
 800a658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a65a:	0038      	movs	r0, r7
 800a65c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a65e:	9908      	ldr	r1, [sp, #32]
 800a660:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a662:	47b0      	blx	r6
 800a664:	1c43      	adds	r3, r0, #1
 800a666:	d100      	bne.n	800a66a <_printf_float+0x422>
 800a668:	e64c      	b.n	800a304 <_printf_float+0xbc>
 800a66a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a66c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a66e:	2200      	movs	r2, #0
 800a670:	2300      	movs	r3, #0
 800a672:	f7f5 feeb 	bl	800044c <__aeabi_dcmpeq>
 800a676:	2800      	cmp	r0, #0
 800a678:	d11c      	bne.n	800a6b4 <_printf_float+0x46c>
 800a67a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a67c:	1c6a      	adds	r2, r5, #1
 800a67e:	3b01      	subs	r3, #1
 800a680:	0038      	movs	r0, r7
 800a682:	9908      	ldr	r1, [sp, #32]
 800a684:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a686:	47a8      	blx	r5
 800a688:	1c43      	adds	r3, r0, #1
 800a68a:	d10f      	bne.n	800a6ac <_printf_float+0x464>
 800a68c:	e63a      	b.n	800a304 <_printf_float+0xbc>
 800a68e:	0022      	movs	r2, r4
 800a690:	2301      	movs	r3, #1
 800a692:	0038      	movs	r0, r7
 800a694:	9908      	ldr	r1, [sp, #32]
 800a696:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a698:	321a      	adds	r2, #26
 800a69a:	47b0      	blx	r6
 800a69c:	1c43      	adds	r3, r0, #1
 800a69e:	d100      	bne.n	800a6a2 <_printf_float+0x45a>
 800a6a0:	e630      	b.n	800a304 <_printf_float+0xbc>
 800a6a2:	3501      	adds	r5, #1
 800a6a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	42ab      	cmp	r3, r5
 800a6aa:	dcf0      	bgt.n	800a68e <_printf_float+0x446>
 800a6ac:	0022      	movs	r2, r4
 800a6ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b0:	3250      	adds	r2, #80	; 0x50
 800a6b2:	e6cb      	b.n	800a44c <_printf_float+0x204>
 800a6b4:	2500      	movs	r5, #0
 800a6b6:	e7f5      	b.n	800a6a4 <_printf_float+0x45c>
 800a6b8:	002a      	movs	r2, r5
 800a6ba:	e7e1      	b.n	800a680 <_printf_float+0x438>
 800a6bc:	0022      	movs	r2, r4
 800a6be:	2301      	movs	r3, #1
 800a6c0:	0038      	movs	r0, r7
 800a6c2:	9908      	ldr	r1, [sp, #32]
 800a6c4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a6c6:	3219      	adds	r2, #25
 800a6c8:	47b0      	blx	r6
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	d100      	bne.n	800a6d0 <_printf_float+0x488>
 800a6ce:	e619      	b.n	800a304 <_printf_float+0xbc>
 800a6d0:	3501      	adds	r5, #1
 800a6d2:	68e3      	ldr	r3, [r4, #12]
 800a6d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6d6:	1a9b      	subs	r3, r3, r2
 800a6d8:	42ab      	cmp	r3, r5
 800a6da:	dcef      	bgt.n	800a6bc <_printf_float+0x474>
 800a6dc:	e6ea      	b.n	800a4b4 <_printf_float+0x26c>
 800a6de:	2500      	movs	r5, #0
 800a6e0:	e7f7      	b.n	800a6d2 <_printf_float+0x48a>
 800a6e2:	46c0      	nop			; (mov r8, r8)

0800a6e4 <_printf_common>:
 800a6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6e6:	0015      	movs	r5, r2
 800a6e8:	9301      	str	r3, [sp, #4]
 800a6ea:	688a      	ldr	r2, [r1, #8]
 800a6ec:	690b      	ldr	r3, [r1, #16]
 800a6ee:	000c      	movs	r4, r1
 800a6f0:	9000      	str	r0, [sp, #0]
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	da00      	bge.n	800a6f8 <_printf_common+0x14>
 800a6f6:	0013      	movs	r3, r2
 800a6f8:	0022      	movs	r2, r4
 800a6fa:	602b      	str	r3, [r5, #0]
 800a6fc:	3243      	adds	r2, #67	; 0x43
 800a6fe:	7812      	ldrb	r2, [r2, #0]
 800a700:	2a00      	cmp	r2, #0
 800a702:	d001      	beq.n	800a708 <_printf_common+0x24>
 800a704:	3301      	adds	r3, #1
 800a706:	602b      	str	r3, [r5, #0]
 800a708:	6823      	ldr	r3, [r4, #0]
 800a70a:	069b      	lsls	r3, r3, #26
 800a70c:	d502      	bpl.n	800a714 <_printf_common+0x30>
 800a70e:	682b      	ldr	r3, [r5, #0]
 800a710:	3302      	adds	r3, #2
 800a712:	602b      	str	r3, [r5, #0]
 800a714:	6822      	ldr	r2, [r4, #0]
 800a716:	2306      	movs	r3, #6
 800a718:	0017      	movs	r7, r2
 800a71a:	401f      	ands	r7, r3
 800a71c:	421a      	tst	r2, r3
 800a71e:	d027      	beq.n	800a770 <_printf_common+0x8c>
 800a720:	0023      	movs	r3, r4
 800a722:	3343      	adds	r3, #67	; 0x43
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	1e5a      	subs	r2, r3, #1
 800a728:	4193      	sbcs	r3, r2
 800a72a:	6822      	ldr	r2, [r4, #0]
 800a72c:	0692      	lsls	r2, r2, #26
 800a72e:	d430      	bmi.n	800a792 <_printf_common+0xae>
 800a730:	0022      	movs	r2, r4
 800a732:	9901      	ldr	r1, [sp, #4]
 800a734:	9800      	ldr	r0, [sp, #0]
 800a736:	9e08      	ldr	r6, [sp, #32]
 800a738:	3243      	adds	r2, #67	; 0x43
 800a73a:	47b0      	blx	r6
 800a73c:	1c43      	adds	r3, r0, #1
 800a73e:	d025      	beq.n	800a78c <_printf_common+0xa8>
 800a740:	2306      	movs	r3, #6
 800a742:	6820      	ldr	r0, [r4, #0]
 800a744:	682a      	ldr	r2, [r5, #0]
 800a746:	68e1      	ldr	r1, [r4, #12]
 800a748:	2500      	movs	r5, #0
 800a74a:	4003      	ands	r3, r0
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	d103      	bne.n	800a758 <_printf_common+0x74>
 800a750:	1a8d      	subs	r5, r1, r2
 800a752:	43eb      	mvns	r3, r5
 800a754:	17db      	asrs	r3, r3, #31
 800a756:	401d      	ands	r5, r3
 800a758:	68a3      	ldr	r3, [r4, #8]
 800a75a:	6922      	ldr	r2, [r4, #16]
 800a75c:	4293      	cmp	r3, r2
 800a75e:	dd01      	ble.n	800a764 <_printf_common+0x80>
 800a760:	1a9b      	subs	r3, r3, r2
 800a762:	18ed      	adds	r5, r5, r3
 800a764:	2700      	movs	r7, #0
 800a766:	42bd      	cmp	r5, r7
 800a768:	d120      	bne.n	800a7ac <_printf_common+0xc8>
 800a76a:	2000      	movs	r0, #0
 800a76c:	e010      	b.n	800a790 <_printf_common+0xac>
 800a76e:	3701      	adds	r7, #1
 800a770:	68e3      	ldr	r3, [r4, #12]
 800a772:	682a      	ldr	r2, [r5, #0]
 800a774:	1a9b      	subs	r3, r3, r2
 800a776:	42bb      	cmp	r3, r7
 800a778:	ddd2      	ble.n	800a720 <_printf_common+0x3c>
 800a77a:	0022      	movs	r2, r4
 800a77c:	2301      	movs	r3, #1
 800a77e:	9901      	ldr	r1, [sp, #4]
 800a780:	9800      	ldr	r0, [sp, #0]
 800a782:	9e08      	ldr	r6, [sp, #32]
 800a784:	3219      	adds	r2, #25
 800a786:	47b0      	blx	r6
 800a788:	1c43      	adds	r3, r0, #1
 800a78a:	d1f0      	bne.n	800a76e <_printf_common+0x8a>
 800a78c:	2001      	movs	r0, #1
 800a78e:	4240      	negs	r0, r0
 800a790:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a792:	2030      	movs	r0, #48	; 0x30
 800a794:	18e1      	adds	r1, r4, r3
 800a796:	3143      	adds	r1, #67	; 0x43
 800a798:	7008      	strb	r0, [r1, #0]
 800a79a:	0021      	movs	r1, r4
 800a79c:	1c5a      	adds	r2, r3, #1
 800a79e:	3145      	adds	r1, #69	; 0x45
 800a7a0:	7809      	ldrb	r1, [r1, #0]
 800a7a2:	18a2      	adds	r2, r4, r2
 800a7a4:	3243      	adds	r2, #67	; 0x43
 800a7a6:	3302      	adds	r3, #2
 800a7a8:	7011      	strb	r1, [r2, #0]
 800a7aa:	e7c1      	b.n	800a730 <_printf_common+0x4c>
 800a7ac:	0022      	movs	r2, r4
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	9901      	ldr	r1, [sp, #4]
 800a7b2:	9800      	ldr	r0, [sp, #0]
 800a7b4:	9e08      	ldr	r6, [sp, #32]
 800a7b6:	321a      	adds	r2, #26
 800a7b8:	47b0      	blx	r6
 800a7ba:	1c43      	adds	r3, r0, #1
 800a7bc:	d0e6      	beq.n	800a78c <_printf_common+0xa8>
 800a7be:	3701      	adds	r7, #1
 800a7c0:	e7d1      	b.n	800a766 <_printf_common+0x82>
	...

0800a7c4 <_printf_i>:
 800a7c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7c6:	b08b      	sub	sp, #44	; 0x2c
 800a7c8:	9206      	str	r2, [sp, #24]
 800a7ca:	000a      	movs	r2, r1
 800a7cc:	3243      	adds	r2, #67	; 0x43
 800a7ce:	9307      	str	r3, [sp, #28]
 800a7d0:	9005      	str	r0, [sp, #20]
 800a7d2:	9204      	str	r2, [sp, #16]
 800a7d4:	7e0a      	ldrb	r2, [r1, #24]
 800a7d6:	000c      	movs	r4, r1
 800a7d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a7da:	2a78      	cmp	r2, #120	; 0x78
 800a7dc:	d806      	bhi.n	800a7ec <_printf_i+0x28>
 800a7de:	2a62      	cmp	r2, #98	; 0x62
 800a7e0:	d808      	bhi.n	800a7f4 <_printf_i+0x30>
 800a7e2:	2a00      	cmp	r2, #0
 800a7e4:	d100      	bne.n	800a7e8 <_printf_i+0x24>
 800a7e6:	e0c0      	b.n	800a96a <_printf_i+0x1a6>
 800a7e8:	2a58      	cmp	r2, #88	; 0x58
 800a7ea:	d052      	beq.n	800a892 <_printf_i+0xce>
 800a7ec:	0026      	movs	r6, r4
 800a7ee:	3642      	adds	r6, #66	; 0x42
 800a7f0:	7032      	strb	r2, [r6, #0]
 800a7f2:	e022      	b.n	800a83a <_printf_i+0x76>
 800a7f4:	0010      	movs	r0, r2
 800a7f6:	3863      	subs	r0, #99	; 0x63
 800a7f8:	2815      	cmp	r0, #21
 800a7fa:	d8f7      	bhi.n	800a7ec <_printf_i+0x28>
 800a7fc:	f7f5 fc96 	bl	800012c <__gnu_thumb1_case_shi>
 800a800:	001f0016 	.word	0x001f0016
 800a804:	fff6fff6 	.word	0xfff6fff6
 800a808:	fff6fff6 	.word	0xfff6fff6
 800a80c:	fff6001f 	.word	0xfff6001f
 800a810:	fff6fff6 	.word	0xfff6fff6
 800a814:	00a8fff6 	.word	0x00a8fff6
 800a818:	009a0036 	.word	0x009a0036
 800a81c:	fff6fff6 	.word	0xfff6fff6
 800a820:	fff600b9 	.word	0xfff600b9
 800a824:	fff60036 	.word	0xfff60036
 800a828:	009efff6 	.word	0x009efff6
 800a82c:	0026      	movs	r6, r4
 800a82e:	681a      	ldr	r2, [r3, #0]
 800a830:	3642      	adds	r6, #66	; 0x42
 800a832:	1d11      	adds	r1, r2, #4
 800a834:	6019      	str	r1, [r3, #0]
 800a836:	6813      	ldr	r3, [r2, #0]
 800a838:	7033      	strb	r3, [r6, #0]
 800a83a:	2301      	movs	r3, #1
 800a83c:	e0a7      	b.n	800a98e <_printf_i+0x1ca>
 800a83e:	6808      	ldr	r0, [r1, #0]
 800a840:	6819      	ldr	r1, [r3, #0]
 800a842:	1d0a      	adds	r2, r1, #4
 800a844:	0605      	lsls	r5, r0, #24
 800a846:	d50b      	bpl.n	800a860 <_printf_i+0x9c>
 800a848:	680d      	ldr	r5, [r1, #0]
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	2d00      	cmp	r5, #0
 800a84e:	da03      	bge.n	800a858 <_printf_i+0x94>
 800a850:	232d      	movs	r3, #45	; 0x2d
 800a852:	9a04      	ldr	r2, [sp, #16]
 800a854:	426d      	negs	r5, r5
 800a856:	7013      	strb	r3, [r2, #0]
 800a858:	4b61      	ldr	r3, [pc, #388]	; (800a9e0 <_printf_i+0x21c>)
 800a85a:	270a      	movs	r7, #10
 800a85c:	9303      	str	r3, [sp, #12]
 800a85e:	e032      	b.n	800a8c6 <_printf_i+0x102>
 800a860:	680d      	ldr	r5, [r1, #0]
 800a862:	601a      	str	r2, [r3, #0]
 800a864:	0641      	lsls	r1, r0, #25
 800a866:	d5f1      	bpl.n	800a84c <_printf_i+0x88>
 800a868:	b22d      	sxth	r5, r5
 800a86a:	e7ef      	b.n	800a84c <_printf_i+0x88>
 800a86c:	680d      	ldr	r5, [r1, #0]
 800a86e:	6819      	ldr	r1, [r3, #0]
 800a870:	1d08      	adds	r0, r1, #4
 800a872:	6018      	str	r0, [r3, #0]
 800a874:	062e      	lsls	r6, r5, #24
 800a876:	d501      	bpl.n	800a87c <_printf_i+0xb8>
 800a878:	680d      	ldr	r5, [r1, #0]
 800a87a:	e003      	b.n	800a884 <_printf_i+0xc0>
 800a87c:	066d      	lsls	r5, r5, #25
 800a87e:	d5fb      	bpl.n	800a878 <_printf_i+0xb4>
 800a880:	680d      	ldr	r5, [r1, #0]
 800a882:	b2ad      	uxth	r5, r5
 800a884:	4b56      	ldr	r3, [pc, #344]	; (800a9e0 <_printf_i+0x21c>)
 800a886:	270a      	movs	r7, #10
 800a888:	9303      	str	r3, [sp, #12]
 800a88a:	2a6f      	cmp	r2, #111	; 0x6f
 800a88c:	d117      	bne.n	800a8be <_printf_i+0xfa>
 800a88e:	2708      	movs	r7, #8
 800a890:	e015      	b.n	800a8be <_printf_i+0xfa>
 800a892:	3145      	adds	r1, #69	; 0x45
 800a894:	700a      	strb	r2, [r1, #0]
 800a896:	4a52      	ldr	r2, [pc, #328]	; (800a9e0 <_printf_i+0x21c>)
 800a898:	9203      	str	r2, [sp, #12]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	6821      	ldr	r1, [r4, #0]
 800a89e:	ca20      	ldmia	r2!, {r5}
 800a8a0:	601a      	str	r2, [r3, #0]
 800a8a2:	0608      	lsls	r0, r1, #24
 800a8a4:	d550      	bpl.n	800a948 <_printf_i+0x184>
 800a8a6:	07cb      	lsls	r3, r1, #31
 800a8a8:	d502      	bpl.n	800a8b0 <_printf_i+0xec>
 800a8aa:	2320      	movs	r3, #32
 800a8ac:	4319      	orrs	r1, r3
 800a8ae:	6021      	str	r1, [r4, #0]
 800a8b0:	2710      	movs	r7, #16
 800a8b2:	2d00      	cmp	r5, #0
 800a8b4:	d103      	bne.n	800a8be <_printf_i+0xfa>
 800a8b6:	2320      	movs	r3, #32
 800a8b8:	6822      	ldr	r2, [r4, #0]
 800a8ba:	439a      	bics	r2, r3
 800a8bc:	6022      	str	r2, [r4, #0]
 800a8be:	0023      	movs	r3, r4
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	3343      	adds	r3, #67	; 0x43
 800a8c4:	701a      	strb	r2, [r3, #0]
 800a8c6:	6863      	ldr	r3, [r4, #4]
 800a8c8:	60a3      	str	r3, [r4, #8]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	db03      	blt.n	800a8d6 <_printf_i+0x112>
 800a8ce:	2204      	movs	r2, #4
 800a8d0:	6821      	ldr	r1, [r4, #0]
 800a8d2:	4391      	bics	r1, r2
 800a8d4:	6021      	str	r1, [r4, #0]
 800a8d6:	2d00      	cmp	r5, #0
 800a8d8:	d102      	bne.n	800a8e0 <_printf_i+0x11c>
 800a8da:	9e04      	ldr	r6, [sp, #16]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d00c      	beq.n	800a8fa <_printf_i+0x136>
 800a8e0:	9e04      	ldr	r6, [sp, #16]
 800a8e2:	0028      	movs	r0, r5
 800a8e4:	0039      	movs	r1, r7
 800a8e6:	f7f5 fcb1 	bl	800024c <__aeabi_uidivmod>
 800a8ea:	9b03      	ldr	r3, [sp, #12]
 800a8ec:	3e01      	subs	r6, #1
 800a8ee:	5c5b      	ldrb	r3, [r3, r1]
 800a8f0:	7033      	strb	r3, [r6, #0]
 800a8f2:	002b      	movs	r3, r5
 800a8f4:	0005      	movs	r5, r0
 800a8f6:	429f      	cmp	r7, r3
 800a8f8:	d9f3      	bls.n	800a8e2 <_printf_i+0x11e>
 800a8fa:	2f08      	cmp	r7, #8
 800a8fc:	d109      	bne.n	800a912 <_printf_i+0x14e>
 800a8fe:	6823      	ldr	r3, [r4, #0]
 800a900:	07db      	lsls	r3, r3, #31
 800a902:	d506      	bpl.n	800a912 <_printf_i+0x14e>
 800a904:	6863      	ldr	r3, [r4, #4]
 800a906:	6922      	ldr	r2, [r4, #16]
 800a908:	4293      	cmp	r3, r2
 800a90a:	dc02      	bgt.n	800a912 <_printf_i+0x14e>
 800a90c:	2330      	movs	r3, #48	; 0x30
 800a90e:	3e01      	subs	r6, #1
 800a910:	7033      	strb	r3, [r6, #0]
 800a912:	9b04      	ldr	r3, [sp, #16]
 800a914:	1b9b      	subs	r3, r3, r6
 800a916:	6123      	str	r3, [r4, #16]
 800a918:	9b07      	ldr	r3, [sp, #28]
 800a91a:	0021      	movs	r1, r4
 800a91c:	9300      	str	r3, [sp, #0]
 800a91e:	9805      	ldr	r0, [sp, #20]
 800a920:	9b06      	ldr	r3, [sp, #24]
 800a922:	aa09      	add	r2, sp, #36	; 0x24
 800a924:	f7ff fede 	bl	800a6e4 <_printf_common>
 800a928:	1c43      	adds	r3, r0, #1
 800a92a:	d135      	bne.n	800a998 <_printf_i+0x1d4>
 800a92c:	2001      	movs	r0, #1
 800a92e:	4240      	negs	r0, r0
 800a930:	b00b      	add	sp, #44	; 0x2c
 800a932:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a934:	2220      	movs	r2, #32
 800a936:	6809      	ldr	r1, [r1, #0]
 800a938:	430a      	orrs	r2, r1
 800a93a:	6022      	str	r2, [r4, #0]
 800a93c:	0022      	movs	r2, r4
 800a93e:	2178      	movs	r1, #120	; 0x78
 800a940:	3245      	adds	r2, #69	; 0x45
 800a942:	7011      	strb	r1, [r2, #0]
 800a944:	4a27      	ldr	r2, [pc, #156]	; (800a9e4 <_printf_i+0x220>)
 800a946:	e7a7      	b.n	800a898 <_printf_i+0xd4>
 800a948:	0648      	lsls	r0, r1, #25
 800a94a:	d5ac      	bpl.n	800a8a6 <_printf_i+0xe2>
 800a94c:	b2ad      	uxth	r5, r5
 800a94e:	e7aa      	b.n	800a8a6 <_printf_i+0xe2>
 800a950:	681a      	ldr	r2, [r3, #0]
 800a952:	680d      	ldr	r5, [r1, #0]
 800a954:	1d10      	adds	r0, r2, #4
 800a956:	6949      	ldr	r1, [r1, #20]
 800a958:	6018      	str	r0, [r3, #0]
 800a95a:	6813      	ldr	r3, [r2, #0]
 800a95c:	062e      	lsls	r6, r5, #24
 800a95e:	d501      	bpl.n	800a964 <_printf_i+0x1a0>
 800a960:	6019      	str	r1, [r3, #0]
 800a962:	e002      	b.n	800a96a <_printf_i+0x1a6>
 800a964:	066d      	lsls	r5, r5, #25
 800a966:	d5fb      	bpl.n	800a960 <_printf_i+0x19c>
 800a968:	8019      	strh	r1, [r3, #0]
 800a96a:	2300      	movs	r3, #0
 800a96c:	9e04      	ldr	r6, [sp, #16]
 800a96e:	6123      	str	r3, [r4, #16]
 800a970:	e7d2      	b.n	800a918 <_printf_i+0x154>
 800a972:	681a      	ldr	r2, [r3, #0]
 800a974:	1d11      	adds	r1, r2, #4
 800a976:	6019      	str	r1, [r3, #0]
 800a978:	6816      	ldr	r6, [r2, #0]
 800a97a:	2100      	movs	r1, #0
 800a97c:	0030      	movs	r0, r6
 800a97e:	6862      	ldr	r2, [r4, #4]
 800a980:	f002 fd34 	bl	800d3ec <memchr>
 800a984:	2800      	cmp	r0, #0
 800a986:	d001      	beq.n	800a98c <_printf_i+0x1c8>
 800a988:	1b80      	subs	r0, r0, r6
 800a98a:	6060      	str	r0, [r4, #4]
 800a98c:	6863      	ldr	r3, [r4, #4]
 800a98e:	6123      	str	r3, [r4, #16]
 800a990:	2300      	movs	r3, #0
 800a992:	9a04      	ldr	r2, [sp, #16]
 800a994:	7013      	strb	r3, [r2, #0]
 800a996:	e7bf      	b.n	800a918 <_printf_i+0x154>
 800a998:	6923      	ldr	r3, [r4, #16]
 800a99a:	0032      	movs	r2, r6
 800a99c:	9906      	ldr	r1, [sp, #24]
 800a99e:	9805      	ldr	r0, [sp, #20]
 800a9a0:	9d07      	ldr	r5, [sp, #28]
 800a9a2:	47a8      	blx	r5
 800a9a4:	1c43      	adds	r3, r0, #1
 800a9a6:	d0c1      	beq.n	800a92c <_printf_i+0x168>
 800a9a8:	6823      	ldr	r3, [r4, #0]
 800a9aa:	079b      	lsls	r3, r3, #30
 800a9ac:	d415      	bmi.n	800a9da <_printf_i+0x216>
 800a9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9b0:	68e0      	ldr	r0, [r4, #12]
 800a9b2:	4298      	cmp	r0, r3
 800a9b4:	dabc      	bge.n	800a930 <_printf_i+0x16c>
 800a9b6:	0018      	movs	r0, r3
 800a9b8:	e7ba      	b.n	800a930 <_printf_i+0x16c>
 800a9ba:	0022      	movs	r2, r4
 800a9bc:	2301      	movs	r3, #1
 800a9be:	9906      	ldr	r1, [sp, #24]
 800a9c0:	9805      	ldr	r0, [sp, #20]
 800a9c2:	9e07      	ldr	r6, [sp, #28]
 800a9c4:	3219      	adds	r2, #25
 800a9c6:	47b0      	blx	r6
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d0af      	beq.n	800a92c <_printf_i+0x168>
 800a9cc:	3501      	adds	r5, #1
 800a9ce:	68e3      	ldr	r3, [r4, #12]
 800a9d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9d2:	1a9b      	subs	r3, r3, r2
 800a9d4:	42ab      	cmp	r3, r5
 800a9d6:	dcf0      	bgt.n	800a9ba <_printf_i+0x1f6>
 800a9d8:	e7e9      	b.n	800a9ae <_printf_i+0x1ea>
 800a9da:	2500      	movs	r5, #0
 800a9dc:	e7f7      	b.n	800a9ce <_printf_i+0x20a>
 800a9de:	46c0      	nop			; (mov r8, r8)
 800a9e0:	08010c82 	.word	0x08010c82
 800a9e4:	08010c93 	.word	0x08010c93

0800a9e8 <iprintf>:
 800a9e8:	b40f      	push	{r0, r1, r2, r3}
 800a9ea:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <iprintf+0x30>)
 800a9ec:	b513      	push	{r0, r1, r4, lr}
 800a9ee:	681c      	ldr	r4, [r3, #0]
 800a9f0:	2c00      	cmp	r4, #0
 800a9f2:	d005      	beq.n	800aa00 <iprintf+0x18>
 800a9f4:	69a3      	ldr	r3, [r4, #24]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d102      	bne.n	800aa00 <iprintf+0x18>
 800a9fa:	0020      	movs	r0, r4
 800a9fc:	f002 f854 	bl	800caa8 <__sinit>
 800aa00:	ab05      	add	r3, sp, #20
 800aa02:	0020      	movs	r0, r4
 800aa04:	9a04      	ldr	r2, [sp, #16]
 800aa06:	68a1      	ldr	r1, [r4, #8]
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	f003 faa3 	bl	800df54 <_vfiprintf_r>
 800aa0e:	bc16      	pop	{r1, r2, r4}
 800aa10:	bc08      	pop	{r3}
 800aa12:	b004      	add	sp, #16
 800aa14:	4718      	bx	r3
 800aa16:	46c0      	nop			; (mov r8, r8)
 800aa18:	2000000c 	.word	0x2000000c

0800aa1c <_puts_r>:
 800aa1c:	b570      	push	{r4, r5, r6, lr}
 800aa1e:	0005      	movs	r5, r0
 800aa20:	000e      	movs	r6, r1
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d004      	beq.n	800aa30 <_puts_r+0x14>
 800aa26:	6983      	ldr	r3, [r0, #24]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d101      	bne.n	800aa30 <_puts_r+0x14>
 800aa2c:	f002 f83c 	bl	800caa8 <__sinit>
 800aa30:	69ab      	ldr	r3, [r5, #24]
 800aa32:	68ac      	ldr	r4, [r5, #8]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d102      	bne.n	800aa3e <_puts_r+0x22>
 800aa38:	0028      	movs	r0, r5
 800aa3a:	f002 f835 	bl	800caa8 <__sinit>
 800aa3e:	4b2d      	ldr	r3, [pc, #180]	; (800aaf4 <_puts_r+0xd8>)
 800aa40:	429c      	cmp	r4, r3
 800aa42:	d122      	bne.n	800aa8a <_puts_r+0x6e>
 800aa44:	686c      	ldr	r4, [r5, #4]
 800aa46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa48:	07db      	lsls	r3, r3, #31
 800aa4a:	d405      	bmi.n	800aa58 <_puts_r+0x3c>
 800aa4c:	89a3      	ldrh	r3, [r4, #12]
 800aa4e:	059b      	lsls	r3, r3, #22
 800aa50:	d402      	bmi.n	800aa58 <_puts_r+0x3c>
 800aa52:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa54:	f002 fc3f 	bl	800d2d6 <__retarget_lock_acquire_recursive>
 800aa58:	89a3      	ldrh	r3, [r4, #12]
 800aa5a:	071b      	lsls	r3, r3, #28
 800aa5c:	d502      	bpl.n	800aa64 <_puts_r+0x48>
 800aa5e:	6923      	ldr	r3, [r4, #16]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d129      	bne.n	800aab8 <_puts_r+0x9c>
 800aa64:	0021      	movs	r1, r4
 800aa66:	0028      	movs	r0, r5
 800aa68:	f000 ffce 	bl	800ba08 <__swsetup_r>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d023      	beq.n	800aab8 <_puts_r+0x9c>
 800aa70:	2501      	movs	r5, #1
 800aa72:	426d      	negs	r5, r5
 800aa74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa76:	07db      	lsls	r3, r3, #31
 800aa78:	d405      	bmi.n	800aa86 <_puts_r+0x6a>
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	059b      	lsls	r3, r3, #22
 800aa7e:	d402      	bmi.n	800aa86 <_puts_r+0x6a>
 800aa80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa82:	f002 fc29 	bl	800d2d8 <__retarget_lock_release_recursive>
 800aa86:	0028      	movs	r0, r5
 800aa88:	bd70      	pop	{r4, r5, r6, pc}
 800aa8a:	4b1b      	ldr	r3, [pc, #108]	; (800aaf8 <_puts_r+0xdc>)
 800aa8c:	429c      	cmp	r4, r3
 800aa8e:	d101      	bne.n	800aa94 <_puts_r+0x78>
 800aa90:	68ac      	ldr	r4, [r5, #8]
 800aa92:	e7d8      	b.n	800aa46 <_puts_r+0x2a>
 800aa94:	4b19      	ldr	r3, [pc, #100]	; (800aafc <_puts_r+0xe0>)
 800aa96:	429c      	cmp	r4, r3
 800aa98:	d1d5      	bne.n	800aa46 <_puts_r+0x2a>
 800aa9a:	68ec      	ldr	r4, [r5, #12]
 800aa9c:	e7d3      	b.n	800aa46 <_puts_r+0x2a>
 800aa9e:	3601      	adds	r6, #1
 800aaa0:	60a3      	str	r3, [r4, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	da04      	bge.n	800aab0 <_puts_r+0x94>
 800aaa6:	69a2      	ldr	r2, [r4, #24]
 800aaa8:	429a      	cmp	r2, r3
 800aaaa:	dc16      	bgt.n	800aada <_puts_r+0xbe>
 800aaac:	290a      	cmp	r1, #10
 800aaae:	d014      	beq.n	800aada <_puts_r+0xbe>
 800aab0:	6823      	ldr	r3, [r4, #0]
 800aab2:	1c5a      	adds	r2, r3, #1
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	7019      	strb	r1, [r3, #0]
 800aab8:	68a3      	ldr	r3, [r4, #8]
 800aaba:	7831      	ldrb	r1, [r6, #0]
 800aabc:	3b01      	subs	r3, #1
 800aabe:	2900      	cmp	r1, #0
 800aac0:	d1ed      	bne.n	800aa9e <_puts_r+0x82>
 800aac2:	60a3      	str	r3, [r4, #8]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	da0f      	bge.n	800aae8 <_puts_r+0xcc>
 800aac8:	0028      	movs	r0, r5
 800aaca:	0022      	movs	r2, r4
 800aacc:	310a      	adds	r1, #10
 800aace:	f000 ff45 	bl	800b95c <__swbuf_r>
 800aad2:	250a      	movs	r5, #10
 800aad4:	1c43      	adds	r3, r0, #1
 800aad6:	d1cd      	bne.n	800aa74 <_puts_r+0x58>
 800aad8:	e7ca      	b.n	800aa70 <_puts_r+0x54>
 800aada:	0022      	movs	r2, r4
 800aadc:	0028      	movs	r0, r5
 800aade:	f000 ff3d 	bl	800b95c <__swbuf_r>
 800aae2:	1c43      	adds	r3, r0, #1
 800aae4:	d1e8      	bne.n	800aab8 <_puts_r+0x9c>
 800aae6:	e7c3      	b.n	800aa70 <_puts_r+0x54>
 800aae8:	250a      	movs	r5, #10
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	6022      	str	r2, [r4, #0]
 800aaf0:	701d      	strb	r5, [r3, #0]
 800aaf2:	e7bf      	b.n	800aa74 <_puts_r+0x58>
 800aaf4:	08010dac 	.word	0x08010dac
 800aaf8:	08010dcc 	.word	0x08010dcc
 800aafc:	08010d8c 	.word	0x08010d8c

0800ab00 <puts>:
 800ab00:	b510      	push	{r4, lr}
 800ab02:	4b03      	ldr	r3, [pc, #12]	; (800ab10 <puts+0x10>)
 800ab04:	0001      	movs	r1, r0
 800ab06:	6818      	ldr	r0, [r3, #0]
 800ab08:	f7ff ff88 	bl	800aa1c <_puts_r>
 800ab0c:	bd10      	pop	{r4, pc}
 800ab0e:	46c0      	nop			; (mov r8, r8)
 800ab10:	2000000c 	.word	0x2000000c

0800ab14 <setvbuf>:
 800ab14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab16:	001d      	movs	r5, r3
 800ab18:	4b5d      	ldr	r3, [pc, #372]	; (800ac90 <setvbuf+0x17c>)
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	681e      	ldr	r6, [r3, #0]
 800ab1e:	0004      	movs	r4, r0
 800ab20:	000f      	movs	r7, r1
 800ab22:	9200      	str	r2, [sp, #0]
 800ab24:	2e00      	cmp	r6, #0
 800ab26:	d005      	beq.n	800ab34 <setvbuf+0x20>
 800ab28:	69b3      	ldr	r3, [r6, #24]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d102      	bne.n	800ab34 <setvbuf+0x20>
 800ab2e:	0030      	movs	r0, r6
 800ab30:	f001 ffba 	bl	800caa8 <__sinit>
 800ab34:	4b57      	ldr	r3, [pc, #348]	; (800ac94 <setvbuf+0x180>)
 800ab36:	429c      	cmp	r4, r3
 800ab38:	d161      	bne.n	800abfe <setvbuf+0xea>
 800ab3a:	6874      	ldr	r4, [r6, #4]
 800ab3c:	9b00      	ldr	r3, [sp, #0]
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d005      	beq.n	800ab4e <setvbuf+0x3a>
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d900      	bls.n	800ab48 <setvbuf+0x34>
 800ab46:	e09d      	b.n	800ac84 <setvbuf+0x170>
 800ab48:	2d00      	cmp	r5, #0
 800ab4a:	da00      	bge.n	800ab4e <setvbuf+0x3a>
 800ab4c:	e09a      	b.n	800ac84 <setvbuf+0x170>
 800ab4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab50:	07db      	lsls	r3, r3, #31
 800ab52:	d405      	bmi.n	800ab60 <setvbuf+0x4c>
 800ab54:	89a3      	ldrh	r3, [r4, #12]
 800ab56:	059b      	lsls	r3, r3, #22
 800ab58:	d402      	bmi.n	800ab60 <setvbuf+0x4c>
 800ab5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab5c:	f002 fbbb 	bl	800d2d6 <__retarget_lock_acquire_recursive>
 800ab60:	0021      	movs	r1, r4
 800ab62:	0030      	movs	r0, r6
 800ab64:	f001 fefe 	bl	800c964 <_fflush_r>
 800ab68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab6a:	2900      	cmp	r1, #0
 800ab6c:	d008      	beq.n	800ab80 <setvbuf+0x6c>
 800ab6e:	0023      	movs	r3, r4
 800ab70:	3344      	adds	r3, #68	; 0x44
 800ab72:	4299      	cmp	r1, r3
 800ab74:	d002      	beq.n	800ab7c <setvbuf+0x68>
 800ab76:	0030      	movs	r0, r6
 800ab78:	f003 f91c 	bl	800ddb4 <_free_r>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	6363      	str	r3, [r4, #52]	; 0x34
 800ab80:	2300      	movs	r3, #0
 800ab82:	61a3      	str	r3, [r4, #24]
 800ab84:	6063      	str	r3, [r4, #4]
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	061b      	lsls	r3, r3, #24
 800ab8a:	d503      	bpl.n	800ab94 <setvbuf+0x80>
 800ab8c:	0030      	movs	r0, r6
 800ab8e:	6921      	ldr	r1, [r4, #16]
 800ab90:	f003 f910 	bl	800ddb4 <_free_r>
 800ab94:	89a3      	ldrh	r3, [r4, #12]
 800ab96:	4a40      	ldr	r2, [pc, #256]	; (800ac98 <setvbuf+0x184>)
 800ab98:	4013      	ands	r3, r2
 800ab9a:	81a3      	strh	r3, [r4, #12]
 800ab9c:	9b00      	ldr	r3, [sp, #0]
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d100      	bne.n	800aba4 <setvbuf+0x90>
 800aba2:	e069      	b.n	800ac78 <setvbuf+0x164>
 800aba4:	ab03      	add	r3, sp, #12
 800aba6:	0021      	movs	r1, r4
 800aba8:	0030      	movs	r0, r6
 800abaa:	aa02      	add	r2, sp, #8
 800abac:	f002 fb96 	bl	800d2dc <__swhatbuf_r>
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	4303      	orrs	r3, r0
 800abb4:	81a3      	strh	r3, [r4, #12]
 800abb6:	2d00      	cmp	r5, #0
 800abb8:	d12b      	bne.n	800ac12 <setvbuf+0xfe>
 800abba:	9d02      	ldr	r5, [sp, #8]
 800abbc:	0028      	movs	r0, r5
 800abbe:	f002 fbf9 	bl	800d3b4 <malloc>
 800abc2:	1e07      	subs	r7, r0, #0
 800abc4:	d153      	bne.n	800ac6e <setvbuf+0x15a>
 800abc6:	9b02      	ldr	r3, [sp, #8]
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	42ab      	cmp	r3, r5
 800abcc:	d149      	bne.n	800ac62 <setvbuf+0x14e>
 800abce:	2501      	movs	r5, #1
 800abd0:	426d      	negs	r5, r5
 800abd2:	2302      	movs	r3, #2
 800abd4:	89a2      	ldrh	r2, [r4, #12]
 800abd6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800abd8:	4313      	orrs	r3, r2
 800abda:	2200      	movs	r2, #0
 800abdc:	60a2      	str	r2, [r4, #8]
 800abde:	0022      	movs	r2, r4
 800abe0:	3247      	adds	r2, #71	; 0x47
 800abe2:	6022      	str	r2, [r4, #0]
 800abe4:	6122      	str	r2, [r4, #16]
 800abe6:	2201      	movs	r2, #1
 800abe8:	b21b      	sxth	r3, r3
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	6162      	str	r2, [r4, #20]
 800abee:	4211      	tst	r1, r2
 800abf0:	d134      	bne.n	800ac5c <setvbuf+0x148>
 800abf2:	059b      	lsls	r3, r3, #22
 800abf4:	d432      	bmi.n	800ac5c <setvbuf+0x148>
 800abf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800abf8:	f002 fb6e 	bl	800d2d8 <__retarget_lock_release_recursive>
 800abfc:	e02e      	b.n	800ac5c <setvbuf+0x148>
 800abfe:	4b27      	ldr	r3, [pc, #156]	; (800ac9c <setvbuf+0x188>)
 800ac00:	429c      	cmp	r4, r3
 800ac02:	d101      	bne.n	800ac08 <setvbuf+0xf4>
 800ac04:	68b4      	ldr	r4, [r6, #8]
 800ac06:	e799      	b.n	800ab3c <setvbuf+0x28>
 800ac08:	4b25      	ldr	r3, [pc, #148]	; (800aca0 <setvbuf+0x18c>)
 800ac0a:	429c      	cmp	r4, r3
 800ac0c:	d196      	bne.n	800ab3c <setvbuf+0x28>
 800ac0e:	68f4      	ldr	r4, [r6, #12]
 800ac10:	e794      	b.n	800ab3c <setvbuf+0x28>
 800ac12:	2f00      	cmp	r7, #0
 800ac14:	d0d2      	beq.n	800abbc <setvbuf+0xa8>
 800ac16:	69b3      	ldr	r3, [r6, #24]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <setvbuf+0x10e>
 800ac1c:	0030      	movs	r0, r6
 800ac1e:	f001 ff43 	bl	800caa8 <__sinit>
 800ac22:	9b00      	ldr	r3, [sp, #0]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d102      	bne.n	800ac2e <setvbuf+0x11a>
 800ac28:	89a2      	ldrh	r2, [r4, #12]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	81a3      	strh	r3, [r4, #12]
 800ac2e:	89a2      	ldrh	r2, [r4, #12]
 800ac30:	2308      	movs	r3, #8
 800ac32:	0011      	movs	r1, r2
 800ac34:	6027      	str	r7, [r4, #0]
 800ac36:	6127      	str	r7, [r4, #16]
 800ac38:	6165      	str	r5, [r4, #20]
 800ac3a:	4019      	ands	r1, r3
 800ac3c:	421a      	tst	r2, r3
 800ac3e:	d01f      	beq.n	800ac80 <setvbuf+0x16c>
 800ac40:	07d3      	lsls	r3, r2, #31
 800ac42:	d51b      	bpl.n	800ac7c <setvbuf+0x168>
 800ac44:	2300      	movs	r3, #0
 800ac46:	426d      	negs	r5, r5
 800ac48:	60a3      	str	r3, [r4, #8]
 800ac4a:	61a5      	str	r5, [r4, #24]
 800ac4c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800ac4e:	2301      	movs	r3, #1
 800ac50:	000d      	movs	r5, r1
 800ac52:	401d      	ands	r5, r3
 800ac54:	4219      	tst	r1, r3
 800ac56:	d118      	bne.n	800ac8a <setvbuf+0x176>
 800ac58:	0593      	lsls	r3, r2, #22
 800ac5a:	d5cc      	bpl.n	800abf6 <setvbuf+0xe2>
 800ac5c:	0028      	movs	r0, r5
 800ac5e:	b005      	add	sp, #20
 800ac60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac62:	9801      	ldr	r0, [sp, #4]
 800ac64:	f002 fba6 	bl	800d3b4 <malloc>
 800ac68:	9d01      	ldr	r5, [sp, #4]
 800ac6a:	1e07      	subs	r7, r0, #0
 800ac6c:	d0af      	beq.n	800abce <setvbuf+0xba>
 800ac6e:	2380      	movs	r3, #128	; 0x80
 800ac70:	89a2      	ldrh	r2, [r4, #12]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	81a3      	strh	r3, [r4, #12]
 800ac76:	e7ce      	b.n	800ac16 <setvbuf+0x102>
 800ac78:	2500      	movs	r5, #0
 800ac7a:	e7aa      	b.n	800abd2 <setvbuf+0xbe>
 800ac7c:	60a5      	str	r5, [r4, #8]
 800ac7e:	e7e5      	b.n	800ac4c <setvbuf+0x138>
 800ac80:	60a1      	str	r1, [r4, #8]
 800ac82:	e7e3      	b.n	800ac4c <setvbuf+0x138>
 800ac84:	2501      	movs	r5, #1
 800ac86:	426d      	negs	r5, r5
 800ac88:	e7e8      	b.n	800ac5c <setvbuf+0x148>
 800ac8a:	2500      	movs	r5, #0
 800ac8c:	e7e6      	b.n	800ac5c <setvbuf+0x148>
 800ac8e:	46c0      	nop			; (mov r8, r8)
 800ac90:	2000000c 	.word	0x2000000c
 800ac94:	08010dac 	.word	0x08010dac
 800ac98:	fffff35c 	.word	0xfffff35c
 800ac9c:	08010dcc 	.word	0x08010dcc
 800aca0:	08010d8c 	.word	0x08010d8c

0800aca4 <strncmp>:
 800aca4:	b530      	push	{r4, r5, lr}
 800aca6:	0005      	movs	r5, r0
 800aca8:	1e10      	subs	r0, r2, #0
 800acaa:	d00b      	beq.n	800acc4 <strncmp+0x20>
 800acac:	2400      	movs	r4, #0
 800acae:	3a01      	subs	r2, #1
 800acb0:	5d2b      	ldrb	r3, [r5, r4]
 800acb2:	5d08      	ldrb	r0, [r1, r4]
 800acb4:	4283      	cmp	r3, r0
 800acb6:	d104      	bne.n	800acc2 <strncmp+0x1e>
 800acb8:	4294      	cmp	r4, r2
 800acba:	d002      	beq.n	800acc2 <strncmp+0x1e>
 800acbc:	3401      	adds	r4, #1
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1f6      	bne.n	800acb0 <strncmp+0xc>
 800acc2:	1a18      	subs	r0, r3, r0
 800acc4:	bd30      	pop	{r4, r5, pc}
	...

0800acc8 <sulp>:
 800acc8:	b570      	push	{r4, r5, r6, lr}
 800acca:	0016      	movs	r6, r2
 800accc:	000d      	movs	r5, r1
 800acce:	f002 ff1f 	bl	800db10 <__ulp>
 800acd2:	2e00      	cmp	r6, #0
 800acd4:	d00d      	beq.n	800acf2 <sulp+0x2a>
 800acd6:	236b      	movs	r3, #107	; 0x6b
 800acd8:	006a      	lsls	r2, r5, #1
 800acda:	0d52      	lsrs	r2, r2, #21
 800acdc:	1a9b      	subs	r3, r3, r2
 800acde:	2b00      	cmp	r3, #0
 800ace0:	dd07      	ble.n	800acf2 <sulp+0x2a>
 800ace2:	2400      	movs	r4, #0
 800ace4:	4a03      	ldr	r2, [pc, #12]	; (800acf4 <sulp+0x2c>)
 800ace6:	051b      	lsls	r3, r3, #20
 800ace8:	189d      	adds	r5, r3, r2
 800acea:	002b      	movs	r3, r5
 800acec:	0022      	movs	r2, r4
 800acee:	f7f6 fbbb 	bl	8001468 <__aeabi_dmul>
 800acf2:	bd70      	pop	{r4, r5, r6, pc}
 800acf4:	3ff00000 	.word	0x3ff00000

0800acf8 <_strtod_l>:
 800acf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acfa:	001d      	movs	r5, r3
 800acfc:	2300      	movs	r3, #0
 800acfe:	b0a7      	sub	sp, #156	; 0x9c
 800ad00:	9322      	str	r3, [sp, #136]	; 0x88
 800ad02:	4bae      	ldr	r3, [pc, #696]	; (800afbc <_strtod_l+0x2c4>)
 800ad04:	9005      	str	r0, [sp, #20]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	9108      	str	r1, [sp, #32]
 800ad0a:	0018      	movs	r0, r3
 800ad0c:	9307      	str	r3, [sp, #28]
 800ad0e:	921d      	str	r2, [sp, #116]	; 0x74
 800ad10:	f7f5 f9fa 	bl	8000108 <strlen>
 800ad14:	2600      	movs	r6, #0
 800ad16:	0004      	movs	r4, r0
 800ad18:	2700      	movs	r7, #0
 800ad1a:	9b08      	ldr	r3, [sp, #32]
 800ad1c:	9321      	str	r3, [sp, #132]	; 0x84
 800ad1e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad20:	7813      	ldrb	r3, [r2, #0]
 800ad22:	2b2b      	cmp	r3, #43	; 0x2b
 800ad24:	d058      	beq.n	800add8 <_strtod_l+0xe0>
 800ad26:	d844      	bhi.n	800adb2 <_strtod_l+0xba>
 800ad28:	2b0d      	cmp	r3, #13
 800ad2a:	d83d      	bhi.n	800ada8 <_strtod_l+0xb0>
 800ad2c:	2b08      	cmp	r3, #8
 800ad2e:	d83d      	bhi.n	800adac <_strtod_l+0xb4>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d047      	beq.n	800adc4 <_strtod_l+0xcc>
 800ad34:	2300      	movs	r3, #0
 800ad36:	9310      	str	r3, [sp, #64]	; 0x40
 800ad38:	2200      	movs	r2, #0
 800ad3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad3c:	920a      	str	r2, [sp, #40]	; 0x28
 800ad3e:	9306      	str	r3, [sp, #24]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	2b30      	cmp	r3, #48	; 0x30
 800ad44:	d000      	beq.n	800ad48 <_strtod_l+0x50>
 800ad46:	e083      	b.n	800ae50 <_strtod_l+0x158>
 800ad48:	9b06      	ldr	r3, [sp, #24]
 800ad4a:	3220      	adds	r2, #32
 800ad4c:	785b      	ldrb	r3, [r3, #1]
 800ad4e:	4393      	bics	r3, r2
 800ad50:	2b58      	cmp	r3, #88	; 0x58
 800ad52:	d000      	beq.n	800ad56 <_strtod_l+0x5e>
 800ad54:	e072      	b.n	800ae3c <_strtod_l+0x144>
 800ad56:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad58:	9502      	str	r5, [sp, #8]
 800ad5a:	9301      	str	r3, [sp, #4]
 800ad5c:	ab22      	add	r3, sp, #136	; 0x88
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	4a97      	ldr	r2, [pc, #604]	; (800afc0 <_strtod_l+0x2c8>)
 800ad62:	ab23      	add	r3, sp, #140	; 0x8c
 800ad64:	9805      	ldr	r0, [sp, #20]
 800ad66:	a921      	add	r1, sp, #132	; 0x84
 800ad68:	f001 ffa8 	bl	800ccbc <__gethex>
 800ad6c:	2307      	movs	r3, #7
 800ad6e:	0005      	movs	r5, r0
 800ad70:	0004      	movs	r4, r0
 800ad72:	401d      	ands	r5, r3
 800ad74:	4218      	tst	r0, r3
 800ad76:	d006      	beq.n	800ad86 <_strtod_l+0x8e>
 800ad78:	2d06      	cmp	r5, #6
 800ad7a:	d12f      	bne.n	800addc <_strtod_l+0xe4>
 800ad7c:	9b06      	ldr	r3, [sp, #24]
 800ad7e:	3301      	adds	r3, #1
 800ad80:	9321      	str	r3, [sp, #132]	; 0x84
 800ad82:	2300      	movs	r3, #0
 800ad84:	9310      	str	r3, [sp, #64]	; 0x40
 800ad86:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d002      	beq.n	800ad92 <_strtod_l+0x9a>
 800ad8c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ad8e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d01c      	beq.n	800add2 <_strtod_l+0xda>
 800ad98:	2380      	movs	r3, #128	; 0x80
 800ad9a:	0032      	movs	r2, r6
 800ad9c:	061b      	lsls	r3, r3, #24
 800ad9e:	18fb      	adds	r3, r7, r3
 800ada0:	0010      	movs	r0, r2
 800ada2:	0019      	movs	r1, r3
 800ada4:	b027      	add	sp, #156	; 0x9c
 800ada6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ada8:	2b20      	cmp	r3, #32
 800adaa:	d1c3      	bne.n	800ad34 <_strtod_l+0x3c>
 800adac:	3201      	adds	r2, #1
 800adae:	9221      	str	r2, [sp, #132]	; 0x84
 800adb0:	e7b5      	b.n	800ad1e <_strtod_l+0x26>
 800adb2:	2b2d      	cmp	r3, #45	; 0x2d
 800adb4:	d1be      	bne.n	800ad34 <_strtod_l+0x3c>
 800adb6:	3b2c      	subs	r3, #44	; 0x2c
 800adb8:	9310      	str	r3, [sp, #64]	; 0x40
 800adba:	1c53      	adds	r3, r2, #1
 800adbc:	9321      	str	r3, [sp, #132]	; 0x84
 800adbe:	7853      	ldrb	r3, [r2, #1]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d1b9      	bne.n	800ad38 <_strtod_l+0x40>
 800adc4:	9b08      	ldr	r3, [sp, #32]
 800adc6:	9321      	str	r3, [sp, #132]	; 0x84
 800adc8:	2300      	movs	r3, #0
 800adca:	9310      	str	r3, [sp, #64]	; 0x40
 800adcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adce:	2b00      	cmp	r3, #0
 800add0:	d1dc      	bne.n	800ad8c <_strtod_l+0x94>
 800add2:	0032      	movs	r2, r6
 800add4:	003b      	movs	r3, r7
 800add6:	e7e3      	b.n	800ada0 <_strtod_l+0xa8>
 800add8:	2300      	movs	r3, #0
 800adda:	e7ed      	b.n	800adb8 <_strtod_l+0xc0>
 800addc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800adde:	2a00      	cmp	r2, #0
 800ade0:	d007      	beq.n	800adf2 <_strtod_l+0xfa>
 800ade2:	2135      	movs	r1, #53	; 0x35
 800ade4:	a824      	add	r0, sp, #144	; 0x90
 800ade6:	f002 ff92 	bl	800dd0e <__copybits>
 800adea:	9922      	ldr	r1, [sp, #136]	; 0x88
 800adec:	9805      	ldr	r0, [sp, #20]
 800adee:	f002 fb4d 	bl	800d48c <_Bfree>
 800adf2:	1e68      	subs	r0, r5, #1
 800adf4:	2805      	cmp	r0, #5
 800adf6:	d806      	bhi.n	800ae06 <_strtod_l+0x10e>
 800adf8:	f7f5 f98e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800adfc:	1c190b0e 	.word	0x1c190b0e
 800ae00:	030e      	.short	0x030e
 800ae02:	2700      	movs	r7, #0
 800ae04:	003e      	movs	r6, r7
 800ae06:	0723      	lsls	r3, r4, #28
 800ae08:	d5bd      	bpl.n	800ad86 <_strtod_l+0x8e>
 800ae0a:	2380      	movs	r3, #128	; 0x80
 800ae0c:	061b      	lsls	r3, r3, #24
 800ae0e:	431f      	orrs	r7, r3
 800ae10:	e7b9      	b.n	800ad86 <_strtod_l+0x8e>
 800ae12:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ae14:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800ae16:	e7f6      	b.n	800ae06 <_strtod_l+0x10e>
 800ae18:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800ae1a:	4a6a      	ldr	r2, [pc, #424]	; (800afc4 <_strtod_l+0x2cc>)
 800ae1c:	496a      	ldr	r1, [pc, #424]	; (800afc8 <_strtod_l+0x2d0>)
 800ae1e:	401a      	ands	r2, r3
 800ae20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ae22:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800ae24:	185b      	adds	r3, r3, r1
 800ae26:	051b      	lsls	r3, r3, #20
 800ae28:	431a      	orrs	r2, r3
 800ae2a:	0017      	movs	r7, r2
 800ae2c:	e7eb      	b.n	800ae06 <_strtod_l+0x10e>
 800ae2e:	2600      	movs	r6, #0
 800ae30:	4f66      	ldr	r7, [pc, #408]	; (800afcc <_strtod_l+0x2d4>)
 800ae32:	e7e8      	b.n	800ae06 <_strtod_l+0x10e>
 800ae34:	2601      	movs	r6, #1
 800ae36:	4f66      	ldr	r7, [pc, #408]	; (800afd0 <_strtod_l+0x2d8>)
 800ae38:	4276      	negs	r6, r6
 800ae3a:	e7e4      	b.n	800ae06 <_strtod_l+0x10e>
 800ae3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae3e:	1c5a      	adds	r2, r3, #1
 800ae40:	9221      	str	r2, [sp, #132]	; 0x84
 800ae42:	785b      	ldrb	r3, [r3, #1]
 800ae44:	2b30      	cmp	r3, #48	; 0x30
 800ae46:	d0f9      	beq.n	800ae3c <_strtod_l+0x144>
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d09c      	beq.n	800ad86 <_strtod_l+0x8e>
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ae50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae52:	220a      	movs	r2, #10
 800ae54:	9311      	str	r3, [sp, #68]	; 0x44
 800ae56:	2300      	movs	r3, #0
 800ae58:	930e      	str	r3, [sp, #56]	; 0x38
 800ae5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ae5e:	9821      	ldr	r0, [sp, #132]	; 0x84
 800ae60:	7805      	ldrb	r5, [r0, #0]
 800ae62:	002b      	movs	r3, r5
 800ae64:	3b30      	subs	r3, #48	; 0x30
 800ae66:	b2d9      	uxtb	r1, r3
 800ae68:	2909      	cmp	r1, #9
 800ae6a:	d927      	bls.n	800aebc <_strtod_l+0x1c4>
 800ae6c:	0022      	movs	r2, r4
 800ae6e:	9907      	ldr	r1, [sp, #28]
 800ae70:	f7ff ff18 	bl	800aca4 <strncmp>
 800ae74:	2800      	cmp	r0, #0
 800ae76:	d033      	beq.n	800aee0 <_strtod_l+0x1e8>
 800ae78:	2000      	movs	r0, #0
 800ae7a:	002b      	movs	r3, r5
 800ae7c:	4684      	mov	ip, r0
 800ae7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae80:	900c      	str	r0, [sp, #48]	; 0x30
 800ae82:	9206      	str	r2, [sp, #24]
 800ae84:	2220      	movs	r2, #32
 800ae86:	0019      	movs	r1, r3
 800ae88:	4391      	bics	r1, r2
 800ae8a:	000a      	movs	r2, r1
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	9107      	str	r1, [sp, #28]
 800ae90:	2a45      	cmp	r2, #69	; 0x45
 800ae92:	d000      	beq.n	800ae96 <_strtod_l+0x19e>
 800ae94:	e0c5      	b.n	800b022 <_strtod_l+0x32a>
 800ae96:	9b06      	ldr	r3, [sp, #24]
 800ae98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ae9a:	4303      	orrs	r3, r0
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	428b      	cmp	r3, r1
 800aea0:	d090      	beq.n	800adc4 <_strtod_l+0xcc>
 800aea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aea4:	9308      	str	r3, [sp, #32]
 800aea6:	3301      	adds	r3, #1
 800aea8:	9321      	str	r3, [sp, #132]	; 0x84
 800aeaa:	9b08      	ldr	r3, [sp, #32]
 800aeac:	785b      	ldrb	r3, [r3, #1]
 800aeae:	2b2b      	cmp	r3, #43	; 0x2b
 800aeb0:	d075      	beq.n	800af9e <_strtod_l+0x2a6>
 800aeb2:	000c      	movs	r4, r1
 800aeb4:	2b2d      	cmp	r3, #45	; 0x2d
 800aeb6:	d178      	bne.n	800afaa <_strtod_l+0x2b2>
 800aeb8:	2401      	movs	r4, #1
 800aeba:	e071      	b.n	800afa0 <_strtod_l+0x2a8>
 800aebc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aebe:	2908      	cmp	r1, #8
 800aec0:	dc09      	bgt.n	800aed6 <_strtod_l+0x1de>
 800aec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aec4:	4351      	muls	r1, r2
 800aec6:	185b      	adds	r3, r3, r1
 800aec8:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aecc:	3001      	adds	r0, #1
 800aece:	3301      	adds	r3, #1
 800aed0:	9309      	str	r3, [sp, #36]	; 0x24
 800aed2:	9021      	str	r0, [sp, #132]	; 0x84
 800aed4:	e7c3      	b.n	800ae5e <_strtod_l+0x166>
 800aed6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800aed8:	4351      	muls	r1, r2
 800aeda:	185b      	adds	r3, r3, r1
 800aedc:	930e      	str	r3, [sp, #56]	; 0x38
 800aede:	e7f4      	b.n	800aeca <_strtod_l+0x1d2>
 800aee0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aee2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aee4:	191c      	adds	r4, r3, r4
 800aee6:	9421      	str	r4, [sp, #132]	; 0x84
 800aee8:	7823      	ldrb	r3, [r4, #0]
 800aeea:	2a00      	cmp	r2, #0
 800aeec:	d039      	beq.n	800af62 <_strtod_l+0x26a>
 800aeee:	900c      	str	r0, [sp, #48]	; 0x30
 800aef0:	9206      	str	r2, [sp, #24]
 800aef2:	001a      	movs	r2, r3
 800aef4:	3a30      	subs	r2, #48	; 0x30
 800aef6:	2a09      	cmp	r2, #9
 800aef8:	d912      	bls.n	800af20 <_strtod_l+0x228>
 800aefa:	2201      	movs	r2, #1
 800aefc:	4694      	mov	ip, r2
 800aefe:	e7c1      	b.n	800ae84 <_strtod_l+0x18c>
 800af00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af02:	3001      	adds	r0, #1
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	9221      	str	r2, [sp, #132]	; 0x84
 800af08:	785b      	ldrb	r3, [r3, #1]
 800af0a:	2b30      	cmp	r3, #48	; 0x30
 800af0c:	d0f8      	beq.n	800af00 <_strtod_l+0x208>
 800af0e:	001a      	movs	r2, r3
 800af10:	3a31      	subs	r2, #49	; 0x31
 800af12:	2a08      	cmp	r2, #8
 800af14:	d83e      	bhi.n	800af94 <_strtod_l+0x29c>
 800af16:	900c      	str	r0, [sp, #48]	; 0x30
 800af18:	2000      	movs	r0, #0
 800af1a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af1c:	9006      	str	r0, [sp, #24]
 800af1e:	9211      	str	r2, [sp, #68]	; 0x44
 800af20:	001a      	movs	r2, r3
 800af22:	9906      	ldr	r1, [sp, #24]
 800af24:	1c44      	adds	r4, r0, #1
 800af26:	3a30      	subs	r2, #48	; 0x30
 800af28:	2b30      	cmp	r3, #48	; 0x30
 800af2a:	d013      	beq.n	800af54 <_strtod_l+0x25c>
 800af2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800af2e:	191b      	adds	r3, r3, r4
 800af30:	930c      	str	r3, [sp, #48]	; 0x30
 800af32:	1844      	adds	r4, r0, r1
 800af34:	000b      	movs	r3, r1
 800af36:	210a      	movs	r1, #10
 800af38:	429c      	cmp	r4, r3
 800af3a:	d114      	bne.n	800af66 <_strtod_l+0x26e>
 800af3c:	9b06      	ldr	r3, [sp, #24]
 800af3e:	1c59      	adds	r1, r3, #1
 800af40:	1809      	adds	r1, r1, r0
 800af42:	1818      	adds	r0, r3, r0
 800af44:	2808      	cmp	r0, #8
 800af46:	dc1c      	bgt.n	800af82 <_strtod_l+0x28a>
 800af48:	230a      	movs	r3, #10
 800af4a:	2400      	movs	r4, #0
 800af4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800af4e:	4343      	muls	r3, r0
 800af50:	18d3      	adds	r3, r2, r3
 800af52:	930b      	str	r3, [sp, #44]	; 0x2c
 800af54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af56:	0020      	movs	r0, r4
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	9221      	str	r2, [sp, #132]	; 0x84
 800af5c:	785b      	ldrb	r3, [r3, #1]
 800af5e:	9106      	str	r1, [sp, #24]
 800af60:	e7c7      	b.n	800aef2 <_strtod_l+0x1fa>
 800af62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af64:	e7d1      	b.n	800af0a <_strtod_l+0x212>
 800af66:	2b08      	cmp	r3, #8
 800af68:	dc04      	bgt.n	800af74 <_strtod_l+0x27c>
 800af6a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800af6c:	434d      	muls	r5, r1
 800af6e:	950b      	str	r5, [sp, #44]	; 0x2c
 800af70:	3301      	adds	r3, #1
 800af72:	e7e1      	b.n	800af38 <_strtod_l+0x240>
 800af74:	1c5d      	adds	r5, r3, #1
 800af76:	2d10      	cmp	r5, #16
 800af78:	dcfa      	bgt.n	800af70 <_strtod_l+0x278>
 800af7a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800af7c:	434d      	muls	r5, r1
 800af7e:	950e      	str	r5, [sp, #56]	; 0x38
 800af80:	e7f6      	b.n	800af70 <_strtod_l+0x278>
 800af82:	2400      	movs	r4, #0
 800af84:	2910      	cmp	r1, #16
 800af86:	dce5      	bgt.n	800af54 <_strtod_l+0x25c>
 800af88:	230a      	movs	r3, #10
 800af8a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800af8c:	4343      	muls	r3, r0
 800af8e:	18d3      	adds	r3, r2, r3
 800af90:	930e      	str	r3, [sp, #56]	; 0x38
 800af92:	e7df      	b.n	800af54 <_strtod_l+0x25c>
 800af94:	2200      	movs	r2, #0
 800af96:	920c      	str	r2, [sp, #48]	; 0x30
 800af98:	9206      	str	r2, [sp, #24]
 800af9a:	3201      	adds	r2, #1
 800af9c:	e7ae      	b.n	800aefc <_strtod_l+0x204>
 800af9e:	2400      	movs	r4, #0
 800afa0:	9b08      	ldr	r3, [sp, #32]
 800afa2:	3302      	adds	r3, #2
 800afa4:	9321      	str	r3, [sp, #132]	; 0x84
 800afa6:	9b08      	ldr	r3, [sp, #32]
 800afa8:	789b      	ldrb	r3, [r3, #2]
 800afaa:	001a      	movs	r2, r3
 800afac:	3a30      	subs	r2, #48	; 0x30
 800afae:	2a09      	cmp	r2, #9
 800afb0:	d914      	bls.n	800afdc <_strtod_l+0x2e4>
 800afb2:	9a08      	ldr	r2, [sp, #32]
 800afb4:	9221      	str	r2, [sp, #132]	; 0x84
 800afb6:	2200      	movs	r2, #0
 800afb8:	e032      	b.n	800b020 <_strtod_l+0x328>
 800afba:	46c0      	nop			; (mov r8, r8)
 800afbc:	08010e58 	.word	0x08010e58
 800afc0:	08010ca4 	.word	0x08010ca4
 800afc4:	ffefffff 	.word	0xffefffff
 800afc8:	00000433 	.word	0x00000433
 800afcc:	7ff00000 	.word	0x7ff00000
 800afd0:	7fffffff 	.word	0x7fffffff
 800afd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afd6:	1c5a      	adds	r2, r3, #1
 800afd8:	9221      	str	r2, [sp, #132]	; 0x84
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b30      	cmp	r3, #48	; 0x30
 800afde:	d0f9      	beq.n	800afd4 <_strtod_l+0x2dc>
 800afe0:	2200      	movs	r2, #0
 800afe2:	9207      	str	r2, [sp, #28]
 800afe4:	001a      	movs	r2, r3
 800afe6:	3a31      	subs	r2, #49	; 0x31
 800afe8:	2a08      	cmp	r2, #8
 800afea:	d81a      	bhi.n	800b022 <_strtod_l+0x32a>
 800afec:	3b30      	subs	r3, #48	; 0x30
 800afee:	001a      	movs	r2, r3
 800aff0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aff2:	9307      	str	r3, [sp, #28]
 800aff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aff6:	1c59      	adds	r1, r3, #1
 800aff8:	9121      	str	r1, [sp, #132]	; 0x84
 800affa:	785b      	ldrb	r3, [r3, #1]
 800affc:	001d      	movs	r5, r3
 800affe:	3d30      	subs	r5, #48	; 0x30
 800b000:	2d09      	cmp	r5, #9
 800b002:	d939      	bls.n	800b078 <_strtod_l+0x380>
 800b004:	9d07      	ldr	r5, [sp, #28]
 800b006:	1b49      	subs	r1, r1, r5
 800b008:	4daf      	ldr	r5, [pc, #700]	; (800b2c8 <_strtod_l+0x5d0>)
 800b00a:	9507      	str	r5, [sp, #28]
 800b00c:	2908      	cmp	r1, #8
 800b00e:	dc03      	bgt.n	800b018 <_strtod_l+0x320>
 800b010:	9207      	str	r2, [sp, #28]
 800b012:	42aa      	cmp	r2, r5
 800b014:	dd00      	ble.n	800b018 <_strtod_l+0x320>
 800b016:	9507      	str	r5, [sp, #28]
 800b018:	2c00      	cmp	r4, #0
 800b01a:	d002      	beq.n	800b022 <_strtod_l+0x32a>
 800b01c:	9a07      	ldr	r2, [sp, #28]
 800b01e:	4252      	negs	r2, r2
 800b020:	9207      	str	r2, [sp, #28]
 800b022:	9a06      	ldr	r2, [sp, #24]
 800b024:	2a00      	cmp	r2, #0
 800b026:	d14b      	bne.n	800b0c0 <_strtod_l+0x3c8>
 800b028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b02a:	4310      	orrs	r0, r2
 800b02c:	d000      	beq.n	800b030 <_strtod_l+0x338>
 800b02e:	e6aa      	b.n	800ad86 <_strtod_l+0x8e>
 800b030:	4662      	mov	r2, ip
 800b032:	2a00      	cmp	r2, #0
 800b034:	d000      	beq.n	800b038 <_strtod_l+0x340>
 800b036:	e6c5      	b.n	800adc4 <_strtod_l+0xcc>
 800b038:	2b69      	cmp	r3, #105	; 0x69
 800b03a:	d025      	beq.n	800b088 <_strtod_l+0x390>
 800b03c:	dc21      	bgt.n	800b082 <_strtod_l+0x38a>
 800b03e:	2b49      	cmp	r3, #73	; 0x49
 800b040:	d022      	beq.n	800b088 <_strtod_l+0x390>
 800b042:	2b4e      	cmp	r3, #78	; 0x4e
 800b044:	d000      	beq.n	800b048 <_strtod_l+0x350>
 800b046:	e6bd      	b.n	800adc4 <_strtod_l+0xcc>
 800b048:	49a0      	ldr	r1, [pc, #640]	; (800b2cc <_strtod_l+0x5d4>)
 800b04a:	a821      	add	r0, sp, #132	; 0x84
 800b04c:	f002 f884 	bl	800d158 <__match>
 800b050:	2800      	cmp	r0, #0
 800b052:	d100      	bne.n	800b056 <_strtod_l+0x35e>
 800b054:	e6b6      	b.n	800adc4 <_strtod_l+0xcc>
 800b056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b058:	781b      	ldrb	r3, [r3, #0]
 800b05a:	2b28      	cmp	r3, #40	; 0x28
 800b05c:	d12a      	bne.n	800b0b4 <_strtod_l+0x3bc>
 800b05e:	499c      	ldr	r1, [pc, #624]	; (800b2d0 <_strtod_l+0x5d8>)
 800b060:	aa24      	add	r2, sp, #144	; 0x90
 800b062:	a821      	add	r0, sp, #132	; 0x84
 800b064:	f002 f88c 	bl	800d180 <__hexnan>
 800b068:	2805      	cmp	r0, #5
 800b06a:	d123      	bne.n	800b0b4 <_strtod_l+0x3bc>
 800b06c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800b06e:	4a99      	ldr	r2, [pc, #612]	; (800b2d4 <_strtod_l+0x5dc>)
 800b070:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800b072:	431a      	orrs	r2, r3
 800b074:	0017      	movs	r7, r2
 800b076:	e686      	b.n	800ad86 <_strtod_l+0x8e>
 800b078:	210a      	movs	r1, #10
 800b07a:	434a      	muls	r2, r1
 800b07c:	18d2      	adds	r2, r2, r3
 800b07e:	3a30      	subs	r2, #48	; 0x30
 800b080:	e7b8      	b.n	800aff4 <_strtod_l+0x2fc>
 800b082:	2b6e      	cmp	r3, #110	; 0x6e
 800b084:	d0e0      	beq.n	800b048 <_strtod_l+0x350>
 800b086:	e69d      	b.n	800adc4 <_strtod_l+0xcc>
 800b088:	4993      	ldr	r1, [pc, #588]	; (800b2d8 <_strtod_l+0x5e0>)
 800b08a:	a821      	add	r0, sp, #132	; 0x84
 800b08c:	f002 f864 	bl	800d158 <__match>
 800b090:	2800      	cmp	r0, #0
 800b092:	d100      	bne.n	800b096 <_strtod_l+0x39e>
 800b094:	e696      	b.n	800adc4 <_strtod_l+0xcc>
 800b096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b098:	4990      	ldr	r1, [pc, #576]	; (800b2dc <_strtod_l+0x5e4>)
 800b09a:	3b01      	subs	r3, #1
 800b09c:	a821      	add	r0, sp, #132	; 0x84
 800b09e:	9321      	str	r3, [sp, #132]	; 0x84
 800b0a0:	f002 f85a 	bl	800d158 <__match>
 800b0a4:	2800      	cmp	r0, #0
 800b0a6:	d102      	bne.n	800b0ae <_strtod_l+0x3b6>
 800b0a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	9321      	str	r3, [sp, #132]	; 0x84
 800b0ae:	2600      	movs	r6, #0
 800b0b0:	4f88      	ldr	r7, [pc, #544]	; (800b2d4 <_strtod_l+0x5dc>)
 800b0b2:	e668      	b.n	800ad86 <_strtod_l+0x8e>
 800b0b4:	488a      	ldr	r0, [pc, #552]	; (800b2e0 <_strtod_l+0x5e8>)
 800b0b6:	f003 f887 	bl	800e1c8 <nan>
 800b0ba:	0006      	movs	r6, r0
 800b0bc:	000f      	movs	r7, r1
 800b0be:	e662      	b.n	800ad86 <_strtod_l+0x8e>
 800b0c0:	9b07      	ldr	r3, [sp, #28]
 800b0c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0c4:	1a9b      	subs	r3, r3, r2
 800b0c6:	930a      	str	r3, [sp, #40]	; 0x28
 800b0c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d101      	bne.n	800b0d2 <_strtod_l+0x3da>
 800b0ce:	9b06      	ldr	r3, [sp, #24]
 800b0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b0d2:	9c06      	ldr	r4, [sp, #24]
 800b0d4:	2c10      	cmp	r4, #16
 800b0d6:	dd00      	ble.n	800b0da <_strtod_l+0x3e2>
 800b0d8:	2410      	movs	r4, #16
 800b0da:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800b0dc:	f7f7 f846 	bl	800216c <__aeabi_ui2d>
 800b0e0:	9b06      	ldr	r3, [sp, #24]
 800b0e2:	0006      	movs	r6, r0
 800b0e4:	000f      	movs	r7, r1
 800b0e6:	2b09      	cmp	r3, #9
 800b0e8:	dd15      	ble.n	800b116 <_strtod_l+0x41e>
 800b0ea:	0022      	movs	r2, r4
 800b0ec:	4b7d      	ldr	r3, [pc, #500]	; (800b2e4 <_strtod_l+0x5ec>)
 800b0ee:	3a09      	subs	r2, #9
 800b0f0:	00d2      	lsls	r2, r2, #3
 800b0f2:	189b      	adds	r3, r3, r2
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	f7f6 f9b6 	bl	8001468 <__aeabi_dmul>
 800b0fc:	0006      	movs	r6, r0
 800b0fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b100:	000f      	movs	r7, r1
 800b102:	f7f7 f833 	bl	800216c <__aeabi_ui2d>
 800b106:	0002      	movs	r2, r0
 800b108:	000b      	movs	r3, r1
 800b10a:	0030      	movs	r0, r6
 800b10c:	0039      	movs	r1, r7
 800b10e:	f7f5 fa3b 	bl	8000588 <__aeabi_dadd>
 800b112:	0006      	movs	r6, r0
 800b114:	000f      	movs	r7, r1
 800b116:	9b06      	ldr	r3, [sp, #24]
 800b118:	2b0f      	cmp	r3, #15
 800b11a:	dc39      	bgt.n	800b190 <_strtod_l+0x498>
 800b11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d100      	bne.n	800b124 <_strtod_l+0x42c>
 800b122:	e630      	b.n	800ad86 <_strtod_l+0x8e>
 800b124:	dd24      	ble.n	800b170 <_strtod_l+0x478>
 800b126:	2b16      	cmp	r3, #22
 800b128:	dc09      	bgt.n	800b13e <_strtod_l+0x446>
 800b12a:	00dd      	lsls	r5, r3, #3
 800b12c:	0032      	movs	r2, r6
 800b12e:	003b      	movs	r3, r7
 800b130:	4c6c      	ldr	r4, [pc, #432]	; (800b2e4 <_strtod_l+0x5ec>)
 800b132:	1964      	adds	r4, r4, r5
 800b134:	6820      	ldr	r0, [r4, #0]
 800b136:	6861      	ldr	r1, [r4, #4]
 800b138:	f7f6 f996 	bl	8001468 <__aeabi_dmul>
 800b13c:	e7bd      	b.n	800b0ba <_strtod_l+0x3c2>
 800b13e:	2325      	movs	r3, #37	; 0x25
 800b140:	9a06      	ldr	r2, [sp, #24]
 800b142:	1a9b      	subs	r3, r3, r2
 800b144:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b146:	4293      	cmp	r3, r2
 800b148:	db22      	blt.n	800b190 <_strtod_l+0x498>
 800b14a:	240f      	movs	r4, #15
 800b14c:	9b06      	ldr	r3, [sp, #24]
 800b14e:	4d65      	ldr	r5, [pc, #404]	; (800b2e4 <_strtod_l+0x5ec>)
 800b150:	1ae4      	subs	r4, r4, r3
 800b152:	00e1      	lsls	r1, r4, #3
 800b154:	1869      	adds	r1, r5, r1
 800b156:	0032      	movs	r2, r6
 800b158:	6808      	ldr	r0, [r1, #0]
 800b15a:	6849      	ldr	r1, [r1, #4]
 800b15c:	003b      	movs	r3, r7
 800b15e:	f7f6 f983 	bl	8001468 <__aeabi_dmul>
 800b162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b164:	1b1c      	subs	r4, r3, r4
 800b166:	00e4      	lsls	r4, r4, #3
 800b168:	192c      	adds	r4, r5, r4
 800b16a:	6822      	ldr	r2, [r4, #0]
 800b16c:	6863      	ldr	r3, [r4, #4]
 800b16e:	e7e3      	b.n	800b138 <_strtod_l+0x440>
 800b170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b172:	3316      	adds	r3, #22
 800b174:	db0c      	blt.n	800b190 <_strtod_l+0x498>
 800b176:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b178:	9a07      	ldr	r2, [sp, #28]
 800b17a:	0030      	movs	r0, r6
 800b17c:	1a9a      	subs	r2, r3, r2
 800b17e:	4b59      	ldr	r3, [pc, #356]	; (800b2e4 <_strtod_l+0x5ec>)
 800b180:	00d2      	lsls	r2, r2, #3
 800b182:	189b      	adds	r3, r3, r2
 800b184:	0039      	movs	r1, r7
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	685b      	ldr	r3, [r3, #4]
 800b18a:	f7f5 fd67 	bl	8000c5c <__aeabi_ddiv>
 800b18e:	e794      	b.n	800b0ba <_strtod_l+0x3c2>
 800b190:	9b06      	ldr	r3, [sp, #24]
 800b192:	1b1c      	subs	r4, r3, r4
 800b194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b196:	18e4      	adds	r4, r4, r3
 800b198:	2c00      	cmp	r4, #0
 800b19a:	dd70      	ble.n	800b27e <_strtod_l+0x586>
 800b19c:	230f      	movs	r3, #15
 800b19e:	0021      	movs	r1, r4
 800b1a0:	4019      	ands	r1, r3
 800b1a2:	421c      	tst	r4, r3
 800b1a4:	d00a      	beq.n	800b1bc <_strtod_l+0x4c4>
 800b1a6:	00cb      	lsls	r3, r1, #3
 800b1a8:	494e      	ldr	r1, [pc, #312]	; (800b2e4 <_strtod_l+0x5ec>)
 800b1aa:	0032      	movs	r2, r6
 800b1ac:	18c9      	adds	r1, r1, r3
 800b1ae:	6808      	ldr	r0, [r1, #0]
 800b1b0:	6849      	ldr	r1, [r1, #4]
 800b1b2:	003b      	movs	r3, r7
 800b1b4:	f7f6 f958 	bl	8001468 <__aeabi_dmul>
 800b1b8:	0006      	movs	r6, r0
 800b1ba:	000f      	movs	r7, r1
 800b1bc:	230f      	movs	r3, #15
 800b1be:	439c      	bics	r4, r3
 800b1c0:	d048      	beq.n	800b254 <_strtod_l+0x55c>
 800b1c2:	3326      	adds	r3, #38	; 0x26
 800b1c4:	33ff      	adds	r3, #255	; 0xff
 800b1c6:	429c      	cmp	r4, r3
 800b1c8:	dd22      	ble.n	800b210 <_strtod_l+0x518>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	9306      	str	r3, [sp, #24]
 800b1ce:	9307      	str	r3, [sp, #28]
 800b1d0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d4:	2322      	movs	r3, #34	; 0x22
 800b1d6:	2600      	movs	r6, #0
 800b1d8:	9a05      	ldr	r2, [sp, #20]
 800b1da:	4f3e      	ldr	r7, [pc, #248]	; (800b2d4 <_strtod_l+0x5dc>)
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1e0:	42b3      	cmp	r3, r6
 800b1e2:	d100      	bne.n	800b1e6 <_strtod_l+0x4ee>
 800b1e4:	e5cf      	b.n	800ad86 <_strtod_l+0x8e>
 800b1e6:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b1e8:	9805      	ldr	r0, [sp, #20]
 800b1ea:	f002 f94f 	bl	800d48c <_Bfree>
 800b1ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1f0:	9805      	ldr	r0, [sp, #20]
 800b1f2:	f002 f94b 	bl	800d48c <_Bfree>
 800b1f6:	9907      	ldr	r1, [sp, #28]
 800b1f8:	9805      	ldr	r0, [sp, #20]
 800b1fa:	f002 f947 	bl	800d48c <_Bfree>
 800b1fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b200:	9805      	ldr	r0, [sp, #20]
 800b202:	f002 f943 	bl	800d48c <_Bfree>
 800b206:	9906      	ldr	r1, [sp, #24]
 800b208:	9805      	ldr	r0, [sp, #20]
 800b20a:	f002 f93f 	bl	800d48c <_Bfree>
 800b20e:	e5ba      	b.n	800ad86 <_strtod_l+0x8e>
 800b210:	2300      	movs	r3, #0
 800b212:	0030      	movs	r0, r6
 800b214:	0039      	movs	r1, r7
 800b216:	001d      	movs	r5, r3
 800b218:	1124      	asrs	r4, r4, #4
 800b21a:	2c01      	cmp	r4, #1
 800b21c:	dc1d      	bgt.n	800b25a <_strtod_l+0x562>
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <_strtod_l+0x52e>
 800b222:	0006      	movs	r6, r0
 800b224:	000f      	movs	r7, r1
 800b226:	4b30      	ldr	r3, [pc, #192]	; (800b2e8 <_strtod_l+0x5f0>)
 800b228:	00ed      	lsls	r5, r5, #3
 800b22a:	18ff      	adds	r7, r7, r3
 800b22c:	4b2f      	ldr	r3, [pc, #188]	; (800b2ec <_strtod_l+0x5f4>)
 800b22e:	0032      	movs	r2, r6
 800b230:	195d      	adds	r5, r3, r5
 800b232:	6828      	ldr	r0, [r5, #0]
 800b234:	6869      	ldr	r1, [r5, #4]
 800b236:	003b      	movs	r3, r7
 800b238:	f7f6 f916 	bl	8001468 <__aeabi_dmul>
 800b23c:	4b25      	ldr	r3, [pc, #148]	; (800b2d4 <_strtod_l+0x5dc>)
 800b23e:	4a2c      	ldr	r2, [pc, #176]	; (800b2f0 <_strtod_l+0x5f8>)
 800b240:	0006      	movs	r6, r0
 800b242:	400b      	ands	r3, r1
 800b244:	4293      	cmp	r3, r2
 800b246:	d8c0      	bhi.n	800b1ca <_strtod_l+0x4d2>
 800b248:	4a2a      	ldr	r2, [pc, #168]	; (800b2f4 <_strtod_l+0x5fc>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d913      	bls.n	800b276 <_strtod_l+0x57e>
 800b24e:	2601      	movs	r6, #1
 800b250:	4f29      	ldr	r7, [pc, #164]	; (800b2f8 <_strtod_l+0x600>)
 800b252:	4276      	negs	r6, r6
 800b254:	2300      	movs	r3, #0
 800b256:	9308      	str	r3, [sp, #32]
 800b258:	e087      	b.n	800b36a <_strtod_l+0x672>
 800b25a:	2201      	movs	r2, #1
 800b25c:	4214      	tst	r4, r2
 800b25e:	d007      	beq.n	800b270 <_strtod_l+0x578>
 800b260:	4a22      	ldr	r2, [pc, #136]	; (800b2ec <_strtod_l+0x5f4>)
 800b262:	00eb      	lsls	r3, r5, #3
 800b264:	189b      	adds	r3, r3, r2
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	f7f6 f8fd 	bl	8001468 <__aeabi_dmul>
 800b26e:	2301      	movs	r3, #1
 800b270:	3501      	adds	r5, #1
 800b272:	1064      	asrs	r4, r4, #1
 800b274:	e7d1      	b.n	800b21a <_strtod_l+0x522>
 800b276:	23d4      	movs	r3, #212	; 0xd4
 800b278:	049b      	lsls	r3, r3, #18
 800b27a:	18cf      	adds	r7, r1, r3
 800b27c:	e7ea      	b.n	800b254 <_strtod_l+0x55c>
 800b27e:	2c00      	cmp	r4, #0
 800b280:	d0e8      	beq.n	800b254 <_strtod_l+0x55c>
 800b282:	4264      	negs	r4, r4
 800b284:	220f      	movs	r2, #15
 800b286:	0023      	movs	r3, r4
 800b288:	4013      	ands	r3, r2
 800b28a:	4214      	tst	r4, r2
 800b28c:	d00a      	beq.n	800b2a4 <_strtod_l+0x5ac>
 800b28e:	00da      	lsls	r2, r3, #3
 800b290:	4b14      	ldr	r3, [pc, #80]	; (800b2e4 <_strtod_l+0x5ec>)
 800b292:	0030      	movs	r0, r6
 800b294:	189b      	adds	r3, r3, r2
 800b296:	0039      	movs	r1, r7
 800b298:	681a      	ldr	r2, [r3, #0]
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	f7f5 fcde 	bl	8000c5c <__aeabi_ddiv>
 800b2a0:	0006      	movs	r6, r0
 800b2a2:	000f      	movs	r7, r1
 800b2a4:	1124      	asrs	r4, r4, #4
 800b2a6:	d0d5      	beq.n	800b254 <_strtod_l+0x55c>
 800b2a8:	2c1f      	cmp	r4, #31
 800b2aa:	dd27      	ble.n	800b2fc <_strtod_l+0x604>
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	9306      	str	r3, [sp, #24]
 800b2b0:	9307      	str	r3, [sp, #28]
 800b2b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b6:	2322      	movs	r3, #34	; 0x22
 800b2b8:	9a05      	ldr	r2, [sp, #20]
 800b2ba:	2600      	movs	r6, #0
 800b2bc:	6013      	str	r3, [r2, #0]
 800b2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2c0:	2700      	movs	r7, #0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d18f      	bne.n	800b1e6 <_strtod_l+0x4ee>
 800b2c6:	e55e      	b.n	800ad86 <_strtod_l+0x8e>
 800b2c8:	00004e1f 	.word	0x00004e1f
 800b2cc:	08010c7d 	.word	0x08010c7d
 800b2d0:	08010cb8 	.word	0x08010cb8
 800b2d4:	7ff00000 	.word	0x7ff00000
 800b2d8:	08010c75 	.word	0x08010c75
 800b2dc:	08010cfb 	.word	0x08010cfb
 800b2e0:	08011018 	.word	0x08011018
 800b2e4:	08010ef8 	.word	0x08010ef8
 800b2e8:	fcb00000 	.word	0xfcb00000
 800b2ec:	08010ed0 	.word	0x08010ed0
 800b2f0:	7ca00000 	.word	0x7ca00000
 800b2f4:	7c900000 	.word	0x7c900000
 800b2f8:	7fefffff 	.word	0x7fefffff
 800b2fc:	2310      	movs	r3, #16
 800b2fe:	0022      	movs	r2, r4
 800b300:	401a      	ands	r2, r3
 800b302:	9208      	str	r2, [sp, #32]
 800b304:	421c      	tst	r4, r3
 800b306:	d001      	beq.n	800b30c <_strtod_l+0x614>
 800b308:	335a      	adds	r3, #90	; 0x5a
 800b30a:	9308      	str	r3, [sp, #32]
 800b30c:	0030      	movs	r0, r6
 800b30e:	0039      	movs	r1, r7
 800b310:	2300      	movs	r3, #0
 800b312:	4dca      	ldr	r5, [pc, #808]	; (800b63c <_strtod_l+0x944>)
 800b314:	2201      	movs	r2, #1
 800b316:	4214      	tst	r4, r2
 800b318:	d004      	beq.n	800b324 <_strtod_l+0x62c>
 800b31a:	682a      	ldr	r2, [r5, #0]
 800b31c:	686b      	ldr	r3, [r5, #4]
 800b31e:	f7f6 f8a3 	bl	8001468 <__aeabi_dmul>
 800b322:	2301      	movs	r3, #1
 800b324:	1064      	asrs	r4, r4, #1
 800b326:	3508      	adds	r5, #8
 800b328:	2c00      	cmp	r4, #0
 800b32a:	d1f3      	bne.n	800b314 <_strtod_l+0x61c>
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <_strtod_l+0x63c>
 800b330:	0006      	movs	r6, r0
 800b332:	000f      	movs	r7, r1
 800b334:	9b08      	ldr	r3, [sp, #32]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00f      	beq.n	800b35a <_strtod_l+0x662>
 800b33a:	236b      	movs	r3, #107	; 0x6b
 800b33c:	0079      	lsls	r1, r7, #1
 800b33e:	0d49      	lsrs	r1, r1, #21
 800b340:	003a      	movs	r2, r7
 800b342:	1a5b      	subs	r3, r3, r1
 800b344:	2b00      	cmp	r3, #0
 800b346:	dd08      	ble.n	800b35a <_strtod_l+0x662>
 800b348:	2b1f      	cmp	r3, #31
 800b34a:	dc00      	bgt.n	800b34e <_strtod_l+0x656>
 800b34c:	e126      	b.n	800b59c <_strtod_l+0x8a4>
 800b34e:	2600      	movs	r6, #0
 800b350:	2b34      	cmp	r3, #52	; 0x34
 800b352:	dc00      	bgt.n	800b356 <_strtod_l+0x65e>
 800b354:	e11b      	b.n	800b58e <_strtod_l+0x896>
 800b356:	27dc      	movs	r7, #220	; 0xdc
 800b358:	04bf      	lsls	r7, r7, #18
 800b35a:	2200      	movs	r2, #0
 800b35c:	2300      	movs	r3, #0
 800b35e:	0030      	movs	r0, r6
 800b360:	0039      	movs	r1, r7
 800b362:	f7f5 f873 	bl	800044c <__aeabi_dcmpeq>
 800b366:	2800      	cmp	r0, #0
 800b368:	d1a0      	bne.n	800b2ac <_strtod_l+0x5b4>
 800b36a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b36e:	9300      	str	r3, [sp, #0]
 800b370:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b372:	9b06      	ldr	r3, [sp, #24]
 800b374:	9805      	ldr	r0, [sp, #20]
 800b376:	f002 f8f1 	bl	800d55c <__s2b>
 800b37a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d100      	bne.n	800b382 <_strtod_l+0x68a>
 800b380:	e723      	b.n	800b1ca <_strtod_l+0x4d2>
 800b382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b384:	9907      	ldr	r1, [sp, #28]
 800b386:	17da      	asrs	r2, r3, #31
 800b388:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b38a:	1a5b      	subs	r3, r3, r1
 800b38c:	401a      	ands	r2, r3
 800b38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b390:	9215      	str	r2, [sp, #84]	; 0x54
 800b392:	43db      	mvns	r3, r3
 800b394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b396:	17db      	asrs	r3, r3, #31
 800b398:	401a      	ands	r2, r3
 800b39a:	2300      	movs	r3, #0
 800b39c:	921c      	str	r2, [sp, #112]	; 0x70
 800b39e:	9306      	str	r3, [sp, #24]
 800b3a0:	9307      	str	r3, [sp, #28]
 800b3a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3a4:	9805      	ldr	r0, [sp, #20]
 800b3a6:	6859      	ldr	r1, [r3, #4]
 800b3a8:	f002 f82c 	bl	800d404 <_Balloc>
 800b3ac:	9009      	str	r0, [sp, #36]	; 0x24
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d100      	bne.n	800b3b4 <_strtod_l+0x6bc>
 800b3b2:	e70f      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b3b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	310c      	adds	r1, #12
 800b3bc:	1c9a      	adds	r2, r3, #2
 800b3be:	0092      	lsls	r2, r2, #2
 800b3c0:	300c      	adds	r0, #12
 800b3c2:	930c      	str	r3, [sp, #48]	; 0x30
 800b3c4:	f7fe fe84 	bl	800a0d0 <memcpy>
 800b3c8:	ab24      	add	r3, sp, #144	; 0x90
 800b3ca:	9301      	str	r3, [sp, #4]
 800b3cc:	ab23      	add	r3, sp, #140	; 0x8c
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	0032      	movs	r2, r6
 800b3d2:	003b      	movs	r3, r7
 800b3d4:	9805      	ldr	r0, [sp, #20]
 800b3d6:	960e      	str	r6, [sp, #56]	; 0x38
 800b3d8:	970f      	str	r7, [sp, #60]	; 0x3c
 800b3da:	f002 fc0d 	bl	800dbf8 <__d2b>
 800b3de:	9022      	str	r0, [sp, #136]	; 0x88
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	d100      	bne.n	800b3e6 <_strtod_l+0x6ee>
 800b3e4:	e6f6      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b3e6:	2101      	movs	r1, #1
 800b3e8:	9805      	ldr	r0, [sp, #20]
 800b3ea:	f002 f94b 	bl	800d684 <__i2b>
 800b3ee:	9007      	str	r0, [sp, #28]
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	d100      	bne.n	800b3f6 <_strtod_l+0x6fe>
 800b3f4:	e6ee      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b3f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	da00      	bge.n	800b3fe <_strtod_l+0x706>
 800b3fc:	e0d3      	b.n	800b5a6 <_strtod_l+0x8ae>
 800b3fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b400:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b402:	189d      	adds	r5, r3, r2
 800b404:	9908      	ldr	r1, [sp, #32]
 800b406:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b408:	1a5b      	subs	r3, r3, r1
 800b40a:	2136      	movs	r1, #54	; 0x36
 800b40c:	189b      	adds	r3, r3, r2
 800b40e:	1a8a      	subs	r2, r1, r2
 800b410:	498b      	ldr	r1, [pc, #556]	; (800b640 <_strtod_l+0x948>)
 800b412:	3b01      	subs	r3, #1
 800b414:	2001      	movs	r0, #1
 800b416:	428b      	cmp	r3, r1
 800b418:	db00      	blt.n	800b41c <_strtod_l+0x724>
 800b41a:	e0cf      	b.n	800b5bc <_strtod_l+0x8c4>
 800b41c:	1ac9      	subs	r1, r1, r3
 800b41e:	1a52      	subs	r2, r2, r1
 800b420:	291f      	cmp	r1, #31
 800b422:	dd00      	ble.n	800b426 <_strtod_l+0x72e>
 800b424:	e0c3      	b.n	800b5ae <_strtod_l+0x8b6>
 800b426:	4088      	lsls	r0, r1
 800b428:	2300      	movs	r3, #0
 800b42a:	9014      	str	r0, [sp, #80]	; 0x50
 800b42c:	9312      	str	r3, [sp, #72]	; 0x48
 800b42e:	18ab      	adds	r3, r5, r2
 800b430:	930c      	str	r3, [sp, #48]	; 0x30
 800b432:	18a4      	adds	r4, r4, r2
 800b434:	9b08      	ldr	r3, [sp, #32]
 800b436:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b438:	191c      	adds	r4, r3, r4
 800b43a:	002b      	movs	r3, r5
 800b43c:	4295      	cmp	r5, r2
 800b43e:	dd00      	ble.n	800b442 <_strtod_l+0x74a>
 800b440:	0013      	movs	r3, r2
 800b442:	42a3      	cmp	r3, r4
 800b444:	dd00      	ble.n	800b448 <_strtod_l+0x750>
 800b446:	0023      	movs	r3, r4
 800b448:	2b00      	cmp	r3, #0
 800b44a:	dd04      	ble.n	800b456 <_strtod_l+0x75e>
 800b44c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b44e:	1ae4      	subs	r4, r4, r3
 800b450:	1ad2      	subs	r2, r2, r3
 800b452:	920c      	str	r2, [sp, #48]	; 0x30
 800b454:	1aed      	subs	r5, r5, r3
 800b456:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b458:	2b00      	cmp	r3, #0
 800b45a:	dd17      	ble.n	800b48c <_strtod_l+0x794>
 800b45c:	001a      	movs	r2, r3
 800b45e:	9907      	ldr	r1, [sp, #28]
 800b460:	9805      	ldr	r0, [sp, #20]
 800b462:	f002 f9d5 	bl	800d810 <__pow5mult>
 800b466:	9007      	str	r0, [sp, #28]
 800b468:	2800      	cmp	r0, #0
 800b46a:	d100      	bne.n	800b46e <_strtod_l+0x776>
 800b46c:	e6b2      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b46e:	0001      	movs	r1, r0
 800b470:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b472:	9805      	ldr	r0, [sp, #20]
 800b474:	f002 f91c 	bl	800d6b0 <__multiply>
 800b478:	9011      	str	r0, [sp, #68]	; 0x44
 800b47a:	2800      	cmp	r0, #0
 800b47c:	d100      	bne.n	800b480 <_strtod_l+0x788>
 800b47e:	e6a9      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b480:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b482:	9805      	ldr	r0, [sp, #20]
 800b484:	f002 f802 	bl	800d48c <_Bfree>
 800b488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b48a:	9322      	str	r3, [sp, #136]	; 0x88
 800b48c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b48e:	2b00      	cmp	r3, #0
 800b490:	dd00      	ble.n	800b494 <_strtod_l+0x79c>
 800b492:	e096      	b.n	800b5c2 <_strtod_l+0x8ca>
 800b494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b496:	2b00      	cmp	r3, #0
 800b498:	dd08      	ble.n	800b4ac <_strtod_l+0x7b4>
 800b49a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b49c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b49e:	9805      	ldr	r0, [sp, #20]
 800b4a0:	f002 f9b6 	bl	800d810 <__pow5mult>
 800b4a4:	9009      	str	r0, [sp, #36]	; 0x24
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	d100      	bne.n	800b4ac <_strtod_l+0x7b4>
 800b4aa:	e693      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b4ac:	2c00      	cmp	r4, #0
 800b4ae:	dd08      	ble.n	800b4c2 <_strtod_l+0x7ca>
 800b4b0:	0022      	movs	r2, r4
 800b4b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4b4:	9805      	ldr	r0, [sp, #20]
 800b4b6:	f002 fa07 	bl	800d8c8 <__lshift>
 800b4ba:	9009      	str	r0, [sp, #36]	; 0x24
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d100      	bne.n	800b4c2 <_strtod_l+0x7ca>
 800b4c0:	e688      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b4c2:	2d00      	cmp	r5, #0
 800b4c4:	dd08      	ble.n	800b4d8 <_strtod_l+0x7e0>
 800b4c6:	002a      	movs	r2, r5
 800b4c8:	9907      	ldr	r1, [sp, #28]
 800b4ca:	9805      	ldr	r0, [sp, #20]
 800b4cc:	f002 f9fc 	bl	800d8c8 <__lshift>
 800b4d0:	9007      	str	r0, [sp, #28]
 800b4d2:	2800      	cmp	r0, #0
 800b4d4:	d100      	bne.n	800b4d8 <_strtod_l+0x7e0>
 800b4d6:	e67d      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b4d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4da:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b4dc:	9805      	ldr	r0, [sp, #20]
 800b4de:	f002 fa7f 	bl	800d9e0 <__mdiff>
 800b4e2:	9006      	str	r0, [sp, #24]
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	d100      	bne.n	800b4ea <_strtod_l+0x7f2>
 800b4e8:	e674      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	68c3      	ldr	r3, [r0, #12]
 800b4ee:	9907      	ldr	r1, [sp, #28]
 800b4f0:	60c2      	str	r2, [r0, #12]
 800b4f2:	9311      	str	r3, [sp, #68]	; 0x44
 800b4f4:	f002 fa58 	bl	800d9a8 <__mcmp>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	da6c      	bge.n	800b5d6 <_strtod_l+0x8de>
 800b4fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b4fe:	4333      	orrs	r3, r6
 800b500:	d000      	beq.n	800b504 <_strtod_l+0x80c>
 800b502:	e097      	b.n	800b634 <_strtod_l+0x93c>
 800b504:	033b      	lsls	r3, r7, #12
 800b506:	d000      	beq.n	800b50a <_strtod_l+0x812>
 800b508:	e094      	b.n	800b634 <_strtod_l+0x93c>
 800b50a:	22d6      	movs	r2, #214	; 0xd6
 800b50c:	4b4d      	ldr	r3, [pc, #308]	; (800b644 <_strtod_l+0x94c>)
 800b50e:	04d2      	lsls	r2, r2, #19
 800b510:	403b      	ands	r3, r7
 800b512:	4293      	cmp	r3, r2
 800b514:	d800      	bhi.n	800b518 <_strtod_l+0x820>
 800b516:	e08d      	b.n	800b634 <_strtod_l+0x93c>
 800b518:	9b06      	ldr	r3, [sp, #24]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	930a      	str	r3, [sp, #40]	; 0x28
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d105      	bne.n	800b52e <_strtod_l+0x836>
 800b522:	9b06      	ldr	r3, [sp, #24]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	930a      	str	r3, [sp, #40]	; 0x28
 800b528:	2b01      	cmp	r3, #1
 800b52a:	dc00      	bgt.n	800b52e <_strtod_l+0x836>
 800b52c:	e082      	b.n	800b634 <_strtod_l+0x93c>
 800b52e:	9906      	ldr	r1, [sp, #24]
 800b530:	2201      	movs	r2, #1
 800b532:	9805      	ldr	r0, [sp, #20]
 800b534:	f002 f9c8 	bl	800d8c8 <__lshift>
 800b538:	9907      	ldr	r1, [sp, #28]
 800b53a:	9006      	str	r0, [sp, #24]
 800b53c:	f002 fa34 	bl	800d9a8 <__mcmp>
 800b540:	2800      	cmp	r0, #0
 800b542:	dd77      	ble.n	800b634 <_strtod_l+0x93c>
 800b544:	9908      	ldr	r1, [sp, #32]
 800b546:	003b      	movs	r3, r7
 800b548:	4a3e      	ldr	r2, [pc, #248]	; (800b644 <_strtod_l+0x94c>)
 800b54a:	2900      	cmp	r1, #0
 800b54c:	d100      	bne.n	800b550 <_strtod_l+0x858>
 800b54e:	e09e      	b.n	800b68e <_strtod_l+0x996>
 800b550:	0011      	movs	r1, r2
 800b552:	20d6      	movs	r0, #214	; 0xd6
 800b554:	4039      	ands	r1, r7
 800b556:	04c0      	lsls	r0, r0, #19
 800b558:	4281      	cmp	r1, r0
 800b55a:	dd00      	ble.n	800b55e <_strtod_l+0x866>
 800b55c:	e097      	b.n	800b68e <_strtod_l+0x996>
 800b55e:	23dc      	movs	r3, #220	; 0xdc
 800b560:	049b      	lsls	r3, r3, #18
 800b562:	4299      	cmp	r1, r3
 800b564:	dc00      	bgt.n	800b568 <_strtod_l+0x870>
 800b566:	e6a6      	b.n	800b2b6 <_strtod_l+0x5be>
 800b568:	4b37      	ldr	r3, [pc, #220]	; (800b648 <_strtod_l+0x950>)
 800b56a:	0030      	movs	r0, r6
 800b56c:	931b      	str	r3, [sp, #108]	; 0x6c
 800b56e:	2300      	movs	r3, #0
 800b570:	931a      	str	r3, [sp, #104]	; 0x68
 800b572:	0039      	movs	r1, r7
 800b574:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b576:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b578:	f7f5 ff76 	bl	8001468 <__aeabi_dmul>
 800b57c:	0006      	movs	r6, r0
 800b57e:	000f      	movs	r7, r1
 800b580:	4308      	orrs	r0, r1
 800b582:	d000      	beq.n	800b586 <_strtod_l+0x88e>
 800b584:	e62f      	b.n	800b1e6 <_strtod_l+0x4ee>
 800b586:	2322      	movs	r3, #34	; 0x22
 800b588:	9a05      	ldr	r2, [sp, #20]
 800b58a:	6013      	str	r3, [r2, #0]
 800b58c:	e62b      	b.n	800b1e6 <_strtod_l+0x4ee>
 800b58e:	2101      	movs	r1, #1
 800b590:	3b20      	subs	r3, #32
 800b592:	4249      	negs	r1, r1
 800b594:	4099      	lsls	r1, r3
 800b596:	400a      	ands	r2, r1
 800b598:	0017      	movs	r7, r2
 800b59a:	e6de      	b.n	800b35a <_strtod_l+0x662>
 800b59c:	2201      	movs	r2, #1
 800b59e:	4252      	negs	r2, r2
 800b5a0:	409a      	lsls	r2, r3
 800b5a2:	4016      	ands	r6, r2
 800b5a4:	e6d9      	b.n	800b35a <_strtod_l+0x662>
 800b5a6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b5a8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b5aa:	1ad4      	subs	r4, r2, r3
 800b5ac:	e72a      	b.n	800b404 <_strtod_l+0x70c>
 800b5ae:	4927      	ldr	r1, [pc, #156]	; (800b64c <_strtod_l+0x954>)
 800b5b0:	1acb      	subs	r3, r1, r3
 800b5b2:	0001      	movs	r1, r0
 800b5b4:	4099      	lsls	r1, r3
 800b5b6:	9112      	str	r1, [sp, #72]	; 0x48
 800b5b8:	9014      	str	r0, [sp, #80]	; 0x50
 800b5ba:	e738      	b.n	800b42e <_strtod_l+0x736>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	9312      	str	r3, [sp, #72]	; 0x48
 800b5c0:	e7fa      	b.n	800b5b8 <_strtod_l+0x8c0>
 800b5c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5c4:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b5c6:	9805      	ldr	r0, [sp, #20]
 800b5c8:	f002 f97e 	bl	800d8c8 <__lshift>
 800b5cc:	9022      	str	r0, [sp, #136]	; 0x88
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	d000      	beq.n	800b5d4 <_strtod_l+0x8dc>
 800b5d2:	e75f      	b.n	800b494 <_strtod_l+0x79c>
 800b5d4:	e5fe      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b5d6:	970c      	str	r7, [sp, #48]	; 0x30
 800b5d8:	2800      	cmp	r0, #0
 800b5da:	d176      	bne.n	800b6ca <_strtod_l+0x9d2>
 800b5dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b5de:	033b      	lsls	r3, r7, #12
 800b5e0:	0b1b      	lsrs	r3, r3, #12
 800b5e2:	2a00      	cmp	r2, #0
 800b5e4:	d038      	beq.n	800b658 <_strtod_l+0x960>
 800b5e6:	4a1a      	ldr	r2, [pc, #104]	; (800b650 <_strtod_l+0x958>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d138      	bne.n	800b65e <_strtod_l+0x966>
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	9b08      	ldr	r3, [sp, #32]
 800b5f0:	4252      	negs	r2, r2
 800b5f2:	0031      	movs	r1, r6
 800b5f4:	0010      	movs	r0, r2
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d00b      	beq.n	800b612 <_strtod_l+0x91a>
 800b5fa:	24d4      	movs	r4, #212	; 0xd4
 800b5fc:	4b11      	ldr	r3, [pc, #68]	; (800b644 <_strtod_l+0x94c>)
 800b5fe:	0010      	movs	r0, r2
 800b600:	403b      	ands	r3, r7
 800b602:	04e4      	lsls	r4, r4, #19
 800b604:	42a3      	cmp	r3, r4
 800b606:	d804      	bhi.n	800b612 <_strtod_l+0x91a>
 800b608:	306c      	adds	r0, #108	; 0x6c
 800b60a:	0d1b      	lsrs	r3, r3, #20
 800b60c:	1ac3      	subs	r3, r0, r3
 800b60e:	409a      	lsls	r2, r3
 800b610:	0010      	movs	r0, r2
 800b612:	4281      	cmp	r1, r0
 800b614:	d123      	bne.n	800b65e <_strtod_l+0x966>
 800b616:	4b0f      	ldr	r3, [pc, #60]	; (800b654 <_strtod_l+0x95c>)
 800b618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b61a:	429a      	cmp	r2, r3
 800b61c:	d102      	bne.n	800b624 <_strtod_l+0x92c>
 800b61e:	1c4b      	adds	r3, r1, #1
 800b620:	d100      	bne.n	800b624 <_strtod_l+0x92c>
 800b622:	e5d7      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b624:	4b07      	ldr	r3, [pc, #28]	; (800b644 <_strtod_l+0x94c>)
 800b626:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b628:	2600      	movs	r6, #0
 800b62a:	401a      	ands	r2, r3
 800b62c:	0013      	movs	r3, r2
 800b62e:	2280      	movs	r2, #128	; 0x80
 800b630:	0352      	lsls	r2, r2, #13
 800b632:	189f      	adds	r7, r3, r2
 800b634:	9b08      	ldr	r3, [sp, #32]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d196      	bne.n	800b568 <_strtod_l+0x870>
 800b63a:	e5d4      	b.n	800b1e6 <_strtod_l+0x4ee>
 800b63c:	08010cd0 	.word	0x08010cd0
 800b640:	fffffc02 	.word	0xfffffc02
 800b644:	7ff00000 	.word	0x7ff00000
 800b648:	39500000 	.word	0x39500000
 800b64c:	fffffbe2 	.word	0xfffffbe2
 800b650:	000fffff 	.word	0x000fffff
 800b654:	7fefffff 	.word	0x7fefffff
 800b658:	4333      	orrs	r3, r6
 800b65a:	d100      	bne.n	800b65e <_strtod_l+0x966>
 800b65c:	e772      	b.n	800b544 <_strtod_l+0x84c>
 800b65e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b660:	2b00      	cmp	r3, #0
 800b662:	d01d      	beq.n	800b6a0 <_strtod_l+0x9a8>
 800b664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b666:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b668:	4213      	tst	r3, r2
 800b66a:	d0e3      	beq.n	800b634 <_strtod_l+0x93c>
 800b66c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b66e:	0030      	movs	r0, r6
 800b670:	0039      	movs	r1, r7
 800b672:	9a08      	ldr	r2, [sp, #32]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d017      	beq.n	800b6a8 <_strtod_l+0x9b0>
 800b678:	f7ff fb26 	bl	800acc8 <sulp>
 800b67c:	0002      	movs	r2, r0
 800b67e:	000b      	movs	r3, r1
 800b680:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b682:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b684:	f7f4 ff80 	bl	8000588 <__aeabi_dadd>
 800b688:	0006      	movs	r6, r0
 800b68a:	000f      	movs	r7, r1
 800b68c:	e7d2      	b.n	800b634 <_strtod_l+0x93c>
 800b68e:	2601      	movs	r6, #1
 800b690:	4013      	ands	r3, r2
 800b692:	4a9b      	ldr	r2, [pc, #620]	; (800b900 <_strtod_l+0xc08>)
 800b694:	4276      	negs	r6, r6
 800b696:	189b      	adds	r3, r3, r2
 800b698:	4a9a      	ldr	r2, [pc, #616]	; (800b904 <_strtod_l+0xc0c>)
 800b69a:	431a      	orrs	r2, r3
 800b69c:	0017      	movs	r7, r2
 800b69e:	e7c9      	b.n	800b634 <_strtod_l+0x93c>
 800b6a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b6a2:	4233      	tst	r3, r6
 800b6a4:	d0c6      	beq.n	800b634 <_strtod_l+0x93c>
 800b6a6:	e7e1      	b.n	800b66c <_strtod_l+0x974>
 800b6a8:	f7ff fb0e 	bl	800acc8 <sulp>
 800b6ac:	0002      	movs	r2, r0
 800b6ae:	000b      	movs	r3, r1
 800b6b0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b6b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b6b4:	f7f6 f944 	bl	8001940 <__aeabi_dsub>
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	0006      	movs	r6, r0
 800b6be:	000f      	movs	r7, r1
 800b6c0:	f7f4 fec4 	bl	800044c <__aeabi_dcmpeq>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d0b5      	beq.n	800b634 <_strtod_l+0x93c>
 800b6c8:	e5f5      	b.n	800b2b6 <_strtod_l+0x5be>
 800b6ca:	9907      	ldr	r1, [sp, #28]
 800b6cc:	9806      	ldr	r0, [sp, #24]
 800b6ce:	f002 faf7 	bl	800dcc0 <__ratio>
 800b6d2:	2380      	movs	r3, #128	; 0x80
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	05db      	lsls	r3, r3, #23
 800b6d8:	0004      	movs	r4, r0
 800b6da:	000d      	movs	r5, r1
 800b6dc:	f7f4 fec6 	bl	800046c <__aeabi_dcmple>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d079      	beq.n	800b7d8 <_strtod_l+0xae0>
 800b6e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d04b      	beq.n	800b782 <_strtod_l+0xa8a>
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	4c86      	ldr	r4, [pc, #536]	; (800b908 <_strtod_l+0xc10>)
 800b6ee:	2500      	movs	r5, #0
 800b6f0:	9312      	str	r3, [sp, #72]	; 0x48
 800b6f2:	9413      	str	r4, [sp, #76]	; 0x4c
 800b6f4:	4c84      	ldr	r4, [pc, #528]	; (800b908 <_strtod_l+0xc10>)
 800b6f6:	4a85      	ldr	r2, [pc, #532]	; (800b90c <_strtod_l+0xc14>)
 800b6f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	9314      	str	r3, [sp, #80]	; 0x50
 800b6fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b700:	4b83      	ldr	r3, [pc, #524]	; (800b910 <_strtod_l+0xc18>)
 800b702:	429a      	cmp	r2, r3
 800b704:	d000      	beq.n	800b708 <_strtod_l+0xa10>
 800b706:	e0b0      	b.n	800b86a <_strtod_l+0xb72>
 800b708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b70a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b70c:	921a      	str	r2, [sp, #104]	; 0x68
 800b70e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b710:	4a80      	ldr	r2, [pc, #512]	; (800b914 <_strtod_l+0xc1c>)
 800b712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b714:	4694      	mov	ip, r2
 800b716:	4463      	add	r3, ip
 800b718:	001f      	movs	r7, r3
 800b71a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b71c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b71e:	0030      	movs	r0, r6
 800b720:	0039      	movs	r1, r7
 800b722:	920c      	str	r2, [sp, #48]	; 0x30
 800b724:	930d      	str	r3, [sp, #52]	; 0x34
 800b726:	f002 f9f3 	bl	800db10 <__ulp>
 800b72a:	0002      	movs	r2, r0
 800b72c:	000b      	movs	r3, r1
 800b72e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b730:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b732:	f7f5 fe99 	bl	8001468 <__aeabi_dmul>
 800b736:	0032      	movs	r2, r6
 800b738:	003b      	movs	r3, r7
 800b73a:	f7f4 ff25 	bl	8000588 <__aeabi_dadd>
 800b73e:	4a73      	ldr	r2, [pc, #460]	; (800b90c <_strtod_l+0xc14>)
 800b740:	4b75      	ldr	r3, [pc, #468]	; (800b918 <_strtod_l+0xc20>)
 800b742:	0006      	movs	r6, r0
 800b744:	400a      	ands	r2, r1
 800b746:	429a      	cmp	r2, r3
 800b748:	d95e      	bls.n	800b808 <_strtod_l+0xb10>
 800b74a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b74c:	4a73      	ldr	r2, [pc, #460]	; (800b91c <_strtod_l+0xc24>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d103      	bne.n	800b75a <_strtod_l+0xa62>
 800b752:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b754:	3301      	adds	r3, #1
 800b756:	d100      	bne.n	800b75a <_strtod_l+0xa62>
 800b758:	e53c      	b.n	800b1d4 <_strtod_l+0x4dc>
 800b75a:	2601      	movs	r6, #1
 800b75c:	4f6f      	ldr	r7, [pc, #444]	; (800b91c <_strtod_l+0xc24>)
 800b75e:	4276      	negs	r6, r6
 800b760:	9922      	ldr	r1, [sp, #136]	; 0x88
 800b762:	9805      	ldr	r0, [sp, #20]
 800b764:	f001 fe92 	bl	800d48c <_Bfree>
 800b768:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b76a:	9805      	ldr	r0, [sp, #20]
 800b76c:	f001 fe8e 	bl	800d48c <_Bfree>
 800b770:	9907      	ldr	r1, [sp, #28]
 800b772:	9805      	ldr	r0, [sp, #20]
 800b774:	f001 fe8a 	bl	800d48c <_Bfree>
 800b778:	9906      	ldr	r1, [sp, #24]
 800b77a:	9805      	ldr	r0, [sp, #20]
 800b77c:	f001 fe86 	bl	800d48c <_Bfree>
 800b780:	e60f      	b.n	800b3a2 <_strtod_l+0x6aa>
 800b782:	2e00      	cmp	r6, #0
 800b784:	d11c      	bne.n	800b7c0 <_strtod_l+0xac8>
 800b786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b788:	031b      	lsls	r3, r3, #12
 800b78a:	d11f      	bne.n	800b7cc <_strtod_l+0xad4>
 800b78c:	2200      	movs	r2, #0
 800b78e:	0020      	movs	r0, r4
 800b790:	0029      	movs	r1, r5
 800b792:	4b5d      	ldr	r3, [pc, #372]	; (800b908 <_strtod_l+0xc10>)
 800b794:	f7f4 fe60 	bl	8000458 <__aeabi_dcmplt>
 800b798:	2800      	cmp	r0, #0
 800b79a:	d11a      	bne.n	800b7d2 <_strtod_l+0xada>
 800b79c:	0020      	movs	r0, r4
 800b79e:	0029      	movs	r1, r5
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	4b5f      	ldr	r3, [pc, #380]	; (800b920 <_strtod_l+0xc28>)
 800b7a4:	f7f5 fe60 	bl	8001468 <__aeabi_dmul>
 800b7a8:	0005      	movs	r5, r0
 800b7aa:	000c      	movs	r4, r1
 800b7ac:	2380      	movs	r3, #128	; 0x80
 800b7ae:	061b      	lsls	r3, r3, #24
 800b7b0:	18e3      	adds	r3, r4, r3
 800b7b2:	951e      	str	r5, [sp, #120]	; 0x78
 800b7b4:	931f      	str	r3, [sp, #124]	; 0x7c
 800b7b6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b7b8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7ba:	9212      	str	r2, [sp, #72]	; 0x48
 800b7bc:	9313      	str	r3, [sp, #76]	; 0x4c
 800b7be:	e79a      	b.n	800b6f6 <_strtod_l+0x9fe>
 800b7c0:	2e01      	cmp	r6, #1
 800b7c2:	d103      	bne.n	800b7cc <_strtod_l+0xad4>
 800b7c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d100      	bne.n	800b7cc <_strtod_l+0xad4>
 800b7ca:	e574      	b.n	800b2b6 <_strtod_l+0x5be>
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	4c55      	ldr	r4, [pc, #340]	; (800b924 <_strtod_l+0xc2c>)
 800b7d0:	e78d      	b.n	800b6ee <_strtod_l+0x9f6>
 800b7d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 800b7d4:	4c52      	ldr	r4, [pc, #328]	; (800b920 <_strtod_l+0xc28>)
 800b7d6:	e7e9      	b.n	800b7ac <_strtod_l+0xab4>
 800b7d8:	2200      	movs	r2, #0
 800b7da:	0020      	movs	r0, r4
 800b7dc:	0029      	movs	r1, r5
 800b7de:	4b50      	ldr	r3, [pc, #320]	; (800b920 <_strtod_l+0xc28>)
 800b7e0:	f7f5 fe42 	bl	8001468 <__aeabi_dmul>
 800b7e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b7e6:	0005      	movs	r5, r0
 800b7e8:	000b      	movs	r3, r1
 800b7ea:	000c      	movs	r4, r1
 800b7ec:	2a00      	cmp	r2, #0
 800b7ee:	d107      	bne.n	800b800 <_strtod_l+0xb08>
 800b7f0:	2280      	movs	r2, #128	; 0x80
 800b7f2:	0612      	lsls	r2, r2, #24
 800b7f4:	188b      	adds	r3, r1, r2
 800b7f6:	9016      	str	r0, [sp, #88]	; 0x58
 800b7f8:	9317      	str	r3, [sp, #92]	; 0x5c
 800b7fa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b7fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7fe:	e7dc      	b.n	800b7ba <_strtod_l+0xac2>
 800b800:	0002      	movs	r2, r0
 800b802:	9216      	str	r2, [sp, #88]	; 0x58
 800b804:	9317      	str	r3, [sp, #92]	; 0x5c
 800b806:	e7f8      	b.n	800b7fa <_strtod_l+0xb02>
 800b808:	23d4      	movs	r3, #212	; 0xd4
 800b80a:	049b      	lsls	r3, r3, #18
 800b80c:	18cf      	adds	r7, r1, r3
 800b80e:	9b08      	ldr	r3, [sp, #32]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d1a5      	bne.n	800b760 <_strtod_l+0xa68>
 800b814:	4b3d      	ldr	r3, [pc, #244]	; (800b90c <_strtod_l+0xc14>)
 800b816:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b818:	403b      	ands	r3, r7
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d1a0      	bne.n	800b760 <_strtod_l+0xa68>
 800b81e:	0028      	movs	r0, r5
 800b820:	0021      	movs	r1, r4
 800b822:	f7f4 fe5f 	bl	80004e4 <__aeabi_d2lz>
 800b826:	f7f4 fe99 	bl	800055c <__aeabi_l2d>
 800b82a:	0002      	movs	r2, r0
 800b82c:	000b      	movs	r3, r1
 800b82e:	0028      	movs	r0, r5
 800b830:	0021      	movs	r1, r4
 800b832:	f7f6 f885 	bl	8001940 <__aeabi_dsub>
 800b836:	033b      	lsls	r3, r7, #12
 800b838:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b83a:	0b1b      	lsrs	r3, r3, #12
 800b83c:	4333      	orrs	r3, r6
 800b83e:	4313      	orrs	r3, r2
 800b840:	0004      	movs	r4, r0
 800b842:	000d      	movs	r5, r1
 800b844:	4a38      	ldr	r2, [pc, #224]	; (800b928 <_strtod_l+0xc30>)
 800b846:	2b00      	cmp	r3, #0
 800b848:	d055      	beq.n	800b8f6 <_strtod_l+0xbfe>
 800b84a:	4b38      	ldr	r3, [pc, #224]	; (800b92c <_strtod_l+0xc34>)
 800b84c:	f7f4 fe04 	bl	8000458 <__aeabi_dcmplt>
 800b850:	2800      	cmp	r0, #0
 800b852:	d000      	beq.n	800b856 <_strtod_l+0xb5e>
 800b854:	e4c7      	b.n	800b1e6 <_strtod_l+0x4ee>
 800b856:	0020      	movs	r0, r4
 800b858:	0029      	movs	r1, r5
 800b85a:	4a35      	ldr	r2, [pc, #212]	; (800b930 <_strtod_l+0xc38>)
 800b85c:	4b30      	ldr	r3, [pc, #192]	; (800b920 <_strtod_l+0xc28>)
 800b85e:	f7f4 fe0f 	bl	8000480 <__aeabi_dcmpgt>
 800b862:	2800      	cmp	r0, #0
 800b864:	d100      	bne.n	800b868 <_strtod_l+0xb70>
 800b866:	e77b      	b.n	800b760 <_strtod_l+0xa68>
 800b868:	e4bd      	b.n	800b1e6 <_strtod_l+0x4ee>
 800b86a:	9b08      	ldr	r3, [sp, #32]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d02b      	beq.n	800b8c8 <_strtod_l+0xbd0>
 800b870:	23d4      	movs	r3, #212	; 0xd4
 800b872:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b874:	04db      	lsls	r3, r3, #19
 800b876:	429a      	cmp	r2, r3
 800b878:	d826      	bhi.n	800b8c8 <_strtod_l+0xbd0>
 800b87a:	0028      	movs	r0, r5
 800b87c:	0021      	movs	r1, r4
 800b87e:	4a2d      	ldr	r2, [pc, #180]	; (800b934 <_strtod_l+0xc3c>)
 800b880:	4b2d      	ldr	r3, [pc, #180]	; (800b938 <_strtod_l+0xc40>)
 800b882:	f7f4 fdf3 	bl	800046c <__aeabi_dcmple>
 800b886:	2800      	cmp	r0, #0
 800b888:	d017      	beq.n	800b8ba <_strtod_l+0xbc2>
 800b88a:	0028      	movs	r0, r5
 800b88c:	0021      	movs	r1, r4
 800b88e:	f7f4 fe0b 	bl	80004a8 <__aeabi_d2uiz>
 800b892:	2800      	cmp	r0, #0
 800b894:	d100      	bne.n	800b898 <_strtod_l+0xba0>
 800b896:	3001      	adds	r0, #1
 800b898:	f7f6 fc68 	bl	800216c <__aeabi_ui2d>
 800b89c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b89e:	0005      	movs	r5, r0
 800b8a0:	000b      	movs	r3, r1
 800b8a2:	000c      	movs	r4, r1
 800b8a4:	2a00      	cmp	r2, #0
 800b8a6:	d122      	bne.n	800b8ee <_strtod_l+0xbf6>
 800b8a8:	2280      	movs	r2, #128	; 0x80
 800b8aa:	0612      	lsls	r2, r2, #24
 800b8ac:	188b      	adds	r3, r1, r2
 800b8ae:	9018      	str	r0, [sp, #96]	; 0x60
 800b8b0:	9319      	str	r3, [sp, #100]	; 0x64
 800b8b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b8b4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8b6:	9212      	str	r2, [sp, #72]	; 0x48
 800b8b8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b8ba:	22d6      	movs	r2, #214	; 0xd6
 800b8bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8be:	04d2      	lsls	r2, r2, #19
 800b8c0:	189b      	adds	r3, r3, r2
 800b8c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b8c4:	1a9b      	subs	r3, r3, r2
 800b8c6:	9313      	str	r3, [sp, #76]	; 0x4c
 800b8c8:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b8ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b8cc:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800b8ce:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800b8d0:	f002 f91e 	bl	800db10 <__ulp>
 800b8d4:	0002      	movs	r2, r0
 800b8d6:	000b      	movs	r3, r1
 800b8d8:	0030      	movs	r0, r6
 800b8da:	0039      	movs	r1, r7
 800b8dc:	f7f5 fdc4 	bl	8001468 <__aeabi_dmul>
 800b8e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8e4:	f7f4 fe50 	bl	8000588 <__aeabi_dadd>
 800b8e8:	0006      	movs	r6, r0
 800b8ea:	000f      	movs	r7, r1
 800b8ec:	e78f      	b.n	800b80e <_strtod_l+0xb16>
 800b8ee:	0002      	movs	r2, r0
 800b8f0:	9218      	str	r2, [sp, #96]	; 0x60
 800b8f2:	9319      	str	r3, [sp, #100]	; 0x64
 800b8f4:	e7dd      	b.n	800b8b2 <_strtod_l+0xbba>
 800b8f6:	4b11      	ldr	r3, [pc, #68]	; (800b93c <_strtod_l+0xc44>)
 800b8f8:	f7f4 fdae 	bl	8000458 <__aeabi_dcmplt>
 800b8fc:	e7b1      	b.n	800b862 <_strtod_l+0xb6a>
 800b8fe:	46c0      	nop			; (mov r8, r8)
 800b900:	fff00000 	.word	0xfff00000
 800b904:	000fffff 	.word	0x000fffff
 800b908:	3ff00000 	.word	0x3ff00000
 800b90c:	7ff00000 	.word	0x7ff00000
 800b910:	7fe00000 	.word	0x7fe00000
 800b914:	fcb00000 	.word	0xfcb00000
 800b918:	7c9fffff 	.word	0x7c9fffff
 800b91c:	7fefffff 	.word	0x7fefffff
 800b920:	3fe00000 	.word	0x3fe00000
 800b924:	bff00000 	.word	0xbff00000
 800b928:	94a03595 	.word	0x94a03595
 800b92c:	3fdfffff 	.word	0x3fdfffff
 800b930:	35afe535 	.word	0x35afe535
 800b934:	ffc00000 	.word	0xffc00000
 800b938:	41dfffff 	.word	0x41dfffff
 800b93c:	3fcfffff 	.word	0x3fcfffff

0800b940 <strtod>:
 800b940:	b510      	push	{r4, lr}
 800b942:	000a      	movs	r2, r1
 800b944:	0001      	movs	r1, r0
 800b946:	4803      	ldr	r0, [pc, #12]	; (800b954 <strtod+0x14>)
 800b948:	4b03      	ldr	r3, [pc, #12]	; (800b958 <strtod+0x18>)
 800b94a:	6800      	ldr	r0, [r0, #0]
 800b94c:	f7ff f9d4 	bl	800acf8 <_strtod_l>
 800b950:	bd10      	pop	{r4, pc}
 800b952:	46c0      	nop			; (mov r8, r8)
 800b954:	2000000c 	.word	0x2000000c
 800b958:	20000074 	.word	0x20000074

0800b95c <__swbuf_r>:
 800b95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b95e:	0005      	movs	r5, r0
 800b960:	000e      	movs	r6, r1
 800b962:	0014      	movs	r4, r2
 800b964:	2800      	cmp	r0, #0
 800b966:	d004      	beq.n	800b972 <__swbuf_r+0x16>
 800b968:	6983      	ldr	r3, [r0, #24]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d101      	bne.n	800b972 <__swbuf_r+0x16>
 800b96e:	f001 f89b 	bl	800caa8 <__sinit>
 800b972:	4b22      	ldr	r3, [pc, #136]	; (800b9fc <__swbuf_r+0xa0>)
 800b974:	429c      	cmp	r4, r3
 800b976:	d12e      	bne.n	800b9d6 <__swbuf_r+0x7a>
 800b978:	686c      	ldr	r4, [r5, #4]
 800b97a:	69a3      	ldr	r3, [r4, #24]
 800b97c:	60a3      	str	r3, [r4, #8]
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	071b      	lsls	r3, r3, #28
 800b982:	d532      	bpl.n	800b9ea <__swbuf_r+0x8e>
 800b984:	6923      	ldr	r3, [r4, #16]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d02f      	beq.n	800b9ea <__swbuf_r+0x8e>
 800b98a:	6823      	ldr	r3, [r4, #0]
 800b98c:	6922      	ldr	r2, [r4, #16]
 800b98e:	b2f7      	uxtb	r7, r6
 800b990:	1a98      	subs	r0, r3, r2
 800b992:	6963      	ldr	r3, [r4, #20]
 800b994:	b2f6      	uxtb	r6, r6
 800b996:	4283      	cmp	r3, r0
 800b998:	dc05      	bgt.n	800b9a6 <__swbuf_r+0x4a>
 800b99a:	0021      	movs	r1, r4
 800b99c:	0028      	movs	r0, r5
 800b99e:	f000 ffe1 	bl	800c964 <_fflush_r>
 800b9a2:	2800      	cmp	r0, #0
 800b9a4:	d127      	bne.n	800b9f6 <__swbuf_r+0x9a>
 800b9a6:	68a3      	ldr	r3, [r4, #8]
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	60a3      	str	r3, [r4, #8]
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	1c5a      	adds	r2, r3, #1
 800b9b2:	6022      	str	r2, [r4, #0]
 800b9b4:	701f      	strb	r7, [r3, #0]
 800b9b6:	6963      	ldr	r3, [r4, #20]
 800b9b8:	4283      	cmp	r3, r0
 800b9ba:	d004      	beq.n	800b9c6 <__swbuf_r+0x6a>
 800b9bc:	89a3      	ldrh	r3, [r4, #12]
 800b9be:	07db      	lsls	r3, r3, #31
 800b9c0:	d507      	bpl.n	800b9d2 <__swbuf_r+0x76>
 800b9c2:	2e0a      	cmp	r6, #10
 800b9c4:	d105      	bne.n	800b9d2 <__swbuf_r+0x76>
 800b9c6:	0021      	movs	r1, r4
 800b9c8:	0028      	movs	r0, r5
 800b9ca:	f000 ffcb 	bl	800c964 <_fflush_r>
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d111      	bne.n	800b9f6 <__swbuf_r+0x9a>
 800b9d2:	0030      	movs	r0, r6
 800b9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9d6:	4b0a      	ldr	r3, [pc, #40]	; (800ba00 <__swbuf_r+0xa4>)
 800b9d8:	429c      	cmp	r4, r3
 800b9da:	d101      	bne.n	800b9e0 <__swbuf_r+0x84>
 800b9dc:	68ac      	ldr	r4, [r5, #8]
 800b9de:	e7cc      	b.n	800b97a <__swbuf_r+0x1e>
 800b9e0:	4b08      	ldr	r3, [pc, #32]	; (800ba04 <__swbuf_r+0xa8>)
 800b9e2:	429c      	cmp	r4, r3
 800b9e4:	d1c9      	bne.n	800b97a <__swbuf_r+0x1e>
 800b9e6:	68ec      	ldr	r4, [r5, #12]
 800b9e8:	e7c7      	b.n	800b97a <__swbuf_r+0x1e>
 800b9ea:	0021      	movs	r1, r4
 800b9ec:	0028      	movs	r0, r5
 800b9ee:	f000 f80b 	bl	800ba08 <__swsetup_r>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d0c9      	beq.n	800b98a <__swbuf_r+0x2e>
 800b9f6:	2601      	movs	r6, #1
 800b9f8:	4276      	negs	r6, r6
 800b9fa:	e7ea      	b.n	800b9d2 <__swbuf_r+0x76>
 800b9fc:	08010dac 	.word	0x08010dac
 800ba00:	08010dcc 	.word	0x08010dcc
 800ba04:	08010d8c 	.word	0x08010d8c

0800ba08 <__swsetup_r>:
 800ba08:	4b37      	ldr	r3, [pc, #220]	; (800bae8 <__swsetup_r+0xe0>)
 800ba0a:	b570      	push	{r4, r5, r6, lr}
 800ba0c:	681d      	ldr	r5, [r3, #0]
 800ba0e:	0006      	movs	r6, r0
 800ba10:	000c      	movs	r4, r1
 800ba12:	2d00      	cmp	r5, #0
 800ba14:	d005      	beq.n	800ba22 <__swsetup_r+0x1a>
 800ba16:	69ab      	ldr	r3, [r5, #24]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d102      	bne.n	800ba22 <__swsetup_r+0x1a>
 800ba1c:	0028      	movs	r0, r5
 800ba1e:	f001 f843 	bl	800caa8 <__sinit>
 800ba22:	4b32      	ldr	r3, [pc, #200]	; (800baec <__swsetup_r+0xe4>)
 800ba24:	429c      	cmp	r4, r3
 800ba26:	d10f      	bne.n	800ba48 <__swsetup_r+0x40>
 800ba28:	686c      	ldr	r4, [r5, #4]
 800ba2a:	230c      	movs	r3, #12
 800ba2c:	5ee2      	ldrsh	r2, [r4, r3]
 800ba2e:	b293      	uxth	r3, r2
 800ba30:	0711      	lsls	r1, r2, #28
 800ba32:	d42d      	bmi.n	800ba90 <__swsetup_r+0x88>
 800ba34:	06d9      	lsls	r1, r3, #27
 800ba36:	d411      	bmi.n	800ba5c <__swsetup_r+0x54>
 800ba38:	2309      	movs	r3, #9
 800ba3a:	2001      	movs	r0, #1
 800ba3c:	6033      	str	r3, [r6, #0]
 800ba3e:	3337      	adds	r3, #55	; 0x37
 800ba40:	4313      	orrs	r3, r2
 800ba42:	81a3      	strh	r3, [r4, #12]
 800ba44:	4240      	negs	r0, r0
 800ba46:	bd70      	pop	{r4, r5, r6, pc}
 800ba48:	4b29      	ldr	r3, [pc, #164]	; (800baf0 <__swsetup_r+0xe8>)
 800ba4a:	429c      	cmp	r4, r3
 800ba4c:	d101      	bne.n	800ba52 <__swsetup_r+0x4a>
 800ba4e:	68ac      	ldr	r4, [r5, #8]
 800ba50:	e7eb      	b.n	800ba2a <__swsetup_r+0x22>
 800ba52:	4b28      	ldr	r3, [pc, #160]	; (800baf4 <__swsetup_r+0xec>)
 800ba54:	429c      	cmp	r4, r3
 800ba56:	d1e8      	bne.n	800ba2a <__swsetup_r+0x22>
 800ba58:	68ec      	ldr	r4, [r5, #12]
 800ba5a:	e7e6      	b.n	800ba2a <__swsetup_r+0x22>
 800ba5c:	075b      	lsls	r3, r3, #29
 800ba5e:	d513      	bpl.n	800ba88 <__swsetup_r+0x80>
 800ba60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba62:	2900      	cmp	r1, #0
 800ba64:	d008      	beq.n	800ba78 <__swsetup_r+0x70>
 800ba66:	0023      	movs	r3, r4
 800ba68:	3344      	adds	r3, #68	; 0x44
 800ba6a:	4299      	cmp	r1, r3
 800ba6c:	d002      	beq.n	800ba74 <__swsetup_r+0x6c>
 800ba6e:	0030      	movs	r0, r6
 800ba70:	f002 f9a0 	bl	800ddb4 <_free_r>
 800ba74:	2300      	movs	r3, #0
 800ba76:	6363      	str	r3, [r4, #52]	; 0x34
 800ba78:	2224      	movs	r2, #36	; 0x24
 800ba7a:	89a3      	ldrh	r3, [r4, #12]
 800ba7c:	4393      	bics	r3, r2
 800ba7e:	81a3      	strh	r3, [r4, #12]
 800ba80:	2300      	movs	r3, #0
 800ba82:	6063      	str	r3, [r4, #4]
 800ba84:	6923      	ldr	r3, [r4, #16]
 800ba86:	6023      	str	r3, [r4, #0]
 800ba88:	2308      	movs	r3, #8
 800ba8a:	89a2      	ldrh	r2, [r4, #12]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	81a3      	strh	r3, [r4, #12]
 800ba90:	6923      	ldr	r3, [r4, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d10b      	bne.n	800baae <__swsetup_r+0xa6>
 800ba96:	21a0      	movs	r1, #160	; 0xa0
 800ba98:	2280      	movs	r2, #128	; 0x80
 800ba9a:	89a3      	ldrh	r3, [r4, #12]
 800ba9c:	0089      	lsls	r1, r1, #2
 800ba9e:	0092      	lsls	r2, r2, #2
 800baa0:	400b      	ands	r3, r1
 800baa2:	4293      	cmp	r3, r2
 800baa4:	d003      	beq.n	800baae <__swsetup_r+0xa6>
 800baa6:	0021      	movs	r1, r4
 800baa8:	0030      	movs	r0, r6
 800baaa:	f001 fc3f 	bl	800d32c <__smakebuf_r>
 800baae:	220c      	movs	r2, #12
 800bab0:	5ea3      	ldrsh	r3, [r4, r2]
 800bab2:	2001      	movs	r0, #1
 800bab4:	001a      	movs	r2, r3
 800bab6:	b299      	uxth	r1, r3
 800bab8:	4002      	ands	r2, r0
 800baba:	4203      	tst	r3, r0
 800babc:	d00f      	beq.n	800bade <__swsetup_r+0xd6>
 800babe:	2200      	movs	r2, #0
 800bac0:	60a2      	str	r2, [r4, #8]
 800bac2:	6962      	ldr	r2, [r4, #20]
 800bac4:	4252      	negs	r2, r2
 800bac6:	61a2      	str	r2, [r4, #24]
 800bac8:	2000      	movs	r0, #0
 800baca:	6922      	ldr	r2, [r4, #16]
 800bacc:	4282      	cmp	r2, r0
 800bace:	d1ba      	bne.n	800ba46 <__swsetup_r+0x3e>
 800bad0:	060a      	lsls	r2, r1, #24
 800bad2:	d5b8      	bpl.n	800ba46 <__swsetup_r+0x3e>
 800bad4:	2240      	movs	r2, #64	; 0x40
 800bad6:	4313      	orrs	r3, r2
 800bad8:	81a3      	strh	r3, [r4, #12]
 800bada:	3801      	subs	r0, #1
 800badc:	e7b3      	b.n	800ba46 <__swsetup_r+0x3e>
 800bade:	0788      	lsls	r0, r1, #30
 800bae0:	d400      	bmi.n	800bae4 <__swsetup_r+0xdc>
 800bae2:	6962      	ldr	r2, [r4, #20]
 800bae4:	60a2      	str	r2, [r4, #8]
 800bae6:	e7ef      	b.n	800bac8 <__swsetup_r+0xc0>
 800bae8:	2000000c 	.word	0x2000000c
 800baec:	08010dac 	.word	0x08010dac
 800baf0:	08010dcc 	.word	0x08010dcc
 800baf4:	08010d8c 	.word	0x08010d8c

0800baf8 <quorem>:
 800baf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bafa:	0006      	movs	r6, r0
 800bafc:	690d      	ldr	r5, [r1, #16]
 800bafe:	6933      	ldr	r3, [r6, #16]
 800bb00:	b087      	sub	sp, #28
 800bb02:	2000      	movs	r0, #0
 800bb04:	9102      	str	r1, [sp, #8]
 800bb06:	42ab      	cmp	r3, r5
 800bb08:	db6b      	blt.n	800bbe2 <quorem+0xea>
 800bb0a:	000b      	movs	r3, r1
 800bb0c:	3d01      	subs	r5, #1
 800bb0e:	00ac      	lsls	r4, r5, #2
 800bb10:	3314      	adds	r3, #20
 800bb12:	9305      	str	r3, [sp, #20]
 800bb14:	191b      	adds	r3, r3, r4
 800bb16:	9303      	str	r3, [sp, #12]
 800bb18:	0033      	movs	r3, r6
 800bb1a:	3314      	adds	r3, #20
 800bb1c:	9301      	str	r3, [sp, #4]
 800bb1e:	191c      	adds	r4, r3, r4
 800bb20:	9b03      	ldr	r3, [sp, #12]
 800bb22:	6827      	ldr	r7, [r4, #0]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	0038      	movs	r0, r7
 800bb28:	9300      	str	r3, [sp, #0]
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	0019      	movs	r1, r3
 800bb2e:	9304      	str	r3, [sp, #16]
 800bb30:	f7f4 fb06 	bl	8000140 <__udivsi3>
 800bb34:	9b04      	ldr	r3, [sp, #16]
 800bb36:	9000      	str	r0, [sp, #0]
 800bb38:	429f      	cmp	r7, r3
 800bb3a:	d329      	bcc.n	800bb90 <quorem+0x98>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	469c      	mov	ip, r3
 800bb40:	9801      	ldr	r0, [sp, #4]
 800bb42:	9f05      	ldr	r7, [sp, #20]
 800bb44:	9304      	str	r3, [sp, #16]
 800bb46:	cf08      	ldmia	r7!, {r3}
 800bb48:	9a00      	ldr	r2, [sp, #0]
 800bb4a:	b299      	uxth	r1, r3
 800bb4c:	4351      	muls	r1, r2
 800bb4e:	0c1b      	lsrs	r3, r3, #16
 800bb50:	4353      	muls	r3, r2
 800bb52:	4461      	add	r1, ip
 800bb54:	0c0a      	lsrs	r2, r1, #16
 800bb56:	189b      	adds	r3, r3, r2
 800bb58:	0c1a      	lsrs	r2, r3, #16
 800bb5a:	9305      	str	r3, [sp, #20]
 800bb5c:	6803      	ldr	r3, [r0, #0]
 800bb5e:	4694      	mov	ip, r2
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	9b04      	ldr	r3, [sp, #16]
 800bb64:	b289      	uxth	r1, r1
 800bb66:	18d2      	adds	r2, r2, r3
 800bb68:	6803      	ldr	r3, [r0, #0]
 800bb6a:	1a52      	subs	r2, r2, r1
 800bb6c:	0c19      	lsrs	r1, r3, #16
 800bb6e:	466b      	mov	r3, sp
 800bb70:	8a9b      	ldrh	r3, [r3, #20]
 800bb72:	1acb      	subs	r3, r1, r3
 800bb74:	1411      	asrs	r1, r2, #16
 800bb76:	185b      	adds	r3, r3, r1
 800bb78:	1419      	asrs	r1, r3, #16
 800bb7a:	b292      	uxth	r2, r2
 800bb7c:	041b      	lsls	r3, r3, #16
 800bb7e:	431a      	orrs	r2, r3
 800bb80:	9b03      	ldr	r3, [sp, #12]
 800bb82:	9104      	str	r1, [sp, #16]
 800bb84:	c004      	stmia	r0!, {r2}
 800bb86:	42bb      	cmp	r3, r7
 800bb88:	d2dd      	bcs.n	800bb46 <quorem+0x4e>
 800bb8a:	6823      	ldr	r3, [r4, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d02e      	beq.n	800bbee <quorem+0xf6>
 800bb90:	0030      	movs	r0, r6
 800bb92:	9902      	ldr	r1, [sp, #8]
 800bb94:	f001 ff08 	bl	800d9a8 <__mcmp>
 800bb98:	2800      	cmp	r0, #0
 800bb9a:	db21      	blt.n	800bbe0 <quorem+0xe8>
 800bb9c:	0030      	movs	r0, r6
 800bb9e:	2400      	movs	r4, #0
 800bba0:	9b00      	ldr	r3, [sp, #0]
 800bba2:	9902      	ldr	r1, [sp, #8]
 800bba4:	3301      	adds	r3, #1
 800bba6:	9300      	str	r3, [sp, #0]
 800bba8:	3014      	adds	r0, #20
 800bbaa:	3114      	adds	r1, #20
 800bbac:	6802      	ldr	r2, [r0, #0]
 800bbae:	c908      	ldmia	r1!, {r3}
 800bbb0:	b292      	uxth	r2, r2
 800bbb2:	1914      	adds	r4, r2, r4
 800bbb4:	b29a      	uxth	r2, r3
 800bbb6:	1aa2      	subs	r2, r4, r2
 800bbb8:	6804      	ldr	r4, [r0, #0]
 800bbba:	0c1b      	lsrs	r3, r3, #16
 800bbbc:	0c24      	lsrs	r4, r4, #16
 800bbbe:	1ae3      	subs	r3, r4, r3
 800bbc0:	1414      	asrs	r4, r2, #16
 800bbc2:	191b      	adds	r3, r3, r4
 800bbc4:	141c      	asrs	r4, r3, #16
 800bbc6:	b292      	uxth	r2, r2
 800bbc8:	041b      	lsls	r3, r3, #16
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	c008      	stmia	r0!, {r3}
 800bbce:	9b03      	ldr	r3, [sp, #12]
 800bbd0:	428b      	cmp	r3, r1
 800bbd2:	d2eb      	bcs.n	800bbac <quorem+0xb4>
 800bbd4:	9a01      	ldr	r2, [sp, #4]
 800bbd6:	00ab      	lsls	r3, r5, #2
 800bbd8:	18d3      	adds	r3, r2, r3
 800bbda:	681a      	ldr	r2, [r3, #0]
 800bbdc:	2a00      	cmp	r2, #0
 800bbde:	d010      	beq.n	800bc02 <quorem+0x10a>
 800bbe0:	9800      	ldr	r0, [sp, #0]
 800bbe2:	b007      	add	sp, #28
 800bbe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d104      	bne.n	800bbf6 <quorem+0xfe>
 800bbec:	3d01      	subs	r5, #1
 800bbee:	9b01      	ldr	r3, [sp, #4]
 800bbf0:	3c04      	subs	r4, #4
 800bbf2:	42a3      	cmp	r3, r4
 800bbf4:	d3f7      	bcc.n	800bbe6 <quorem+0xee>
 800bbf6:	6135      	str	r5, [r6, #16]
 800bbf8:	e7ca      	b.n	800bb90 <quorem+0x98>
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	2a00      	cmp	r2, #0
 800bbfe:	d104      	bne.n	800bc0a <quorem+0x112>
 800bc00:	3d01      	subs	r5, #1
 800bc02:	9a01      	ldr	r2, [sp, #4]
 800bc04:	3b04      	subs	r3, #4
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d3f7      	bcc.n	800bbfa <quorem+0x102>
 800bc0a:	6135      	str	r5, [r6, #16]
 800bc0c:	e7e8      	b.n	800bbe0 <quorem+0xe8>
	...

0800bc10 <_dtoa_r>:
 800bc10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc12:	b09d      	sub	sp, #116	; 0x74
 800bc14:	9202      	str	r2, [sp, #8]
 800bc16:	9303      	str	r3, [sp, #12]
 800bc18:	9b02      	ldr	r3, [sp, #8]
 800bc1a:	9c03      	ldr	r4, [sp, #12]
 800bc1c:	930a      	str	r3, [sp, #40]	; 0x28
 800bc1e:	940b      	str	r4, [sp, #44]	; 0x2c
 800bc20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bc22:	0007      	movs	r7, r0
 800bc24:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800bc26:	2c00      	cmp	r4, #0
 800bc28:	d10e      	bne.n	800bc48 <_dtoa_r+0x38>
 800bc2a:	2010      	movs	r0, #16
 800bc2c:	f001 fbc2 	bl	800d3b4 <malloc>
 800bc30:	1e02      	subs	r2, r0, #0
 800bc32:	6278      	str	r0, [r7, #36]	; 0x24
 800bc34:	d104      	bne.n	800bc40 <_dtoa_r+0x30>
 800bc36:	21ea      	movs	r1, #234	; 0xea
 800bc38:	4bc0      	ldr	r3, [pc, #768]	; (800bf3c <_dtoa_r+0x32c>)
 800bc3a:	48c1      	ldr	r0, [pc, #772]	; (800bf40 <_dtoa_r+0x330>)
 800bc3c:	f002 fb4a 	bl	800e2d4 <__assert_func>
 800bc40:	6044      	str	r4, [r0, #4]
 800bc42:	6084      	str	r4, [r0, #8]
 800bc44:	6004      	str	r4, [r0, #0]
 800bc46:	60c4      	str	r4, [r0, #12]
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	6819      	ldr	r1, [r3, #0]
 800bc4c:	2900      	cmp	r1, #0
 800bc4e:	d00a      	beq.n	800bc66 <_dtoa_r+0x56>
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	2301      	movs	r3, #1
 800bc54:	4093      	lsls	r3, r2
 800bc56:	604a      	str	r2, [r1, #4]
 800bc58:	608b      	str	r3, [r1, #8]
 800bc5a:	0038      	movs	r0, r7
 800bc5c:	f001 fc16 	bl	800d48c <_Bfree>
 800bc60:	2200      	movs	r2, #0
 800bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc64:	601a      	str	r2, [r3, #0]
 800bc66:	9b03      	ldr	r3, [sp, #12]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	da21      	bge.n	800bcb0 <_dtoa_r+0xa0>
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	602b      	str	r3, [r5, #0]
 800bc70:	9b03      	ldr	r3, [sp, #12]
 800bc72:	005b      	lsls	r3, r3, #1
 800bc74:	085b      	lsrs	r3, r3, #1
 800bc76:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc78:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800bc7a:	4bb2      	ldr	r3, [pc, #712]	; (800bf44 <_dtoa_r+0x334>)
 800bc7c:	002a      	movs	r2, r5
 800bc7e:	9318      	str	r3, [sp, #96]	; 0x60
 800bc80:	401a      	ands	r2, r3
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d117      	bne.n	800bcb6 <_dtoa_r+0xa6>
 800bc86:	4bb0      	ldr	r3, [pc, #704]	; (800bf48 <_dtoa_r+0x338>)
 800bc88:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bc8a:	0328      	lsls	r0, r5, #12
 800bc8c:	6013      	str	r3, [r2, #0]
 800bc8e:	9b02      	ldr	r3, [sp, #8]
 800bc90:	0b00      	lsrs	r0, r0, #12
 800bc92:	4318      	orrs	r0, r3
 800bc94:	d101      	bne.n	800bc9a <_dtoa_r+0x8a>
 800bc96:	f000 fdc3 	bl	800c820 <_dtoa_r+0xc10>
 800bc9a:	48ac      	ldr	r0, [pc, #688]	; (800bf4c <_dtoa_r+0x33c>)
 800bc9c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc9e:	9005      	str	r0, [sp, #20]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <_dtoa_r+0x9a>
 800bca4:	4baa      	ldr	r3, [pc, #680]	; (800bf50 <_dtoa_r+0x340>)
 800bca6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bca8:	6013      	str	r3, [r2, #0]
 800bcaa:	9805      	ldr	r0, [sp, #20]
 800bcac:	b01d      	add	sp, #116	; 0x74
 800bcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	602b      	str	r3, [r5, #0]
 800bcb4:	e7e0      	b.n	800bc78 <_dtoa_r+0x68>
 800bcb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bcba:	9312      	str	r3, [sp, #72]	; 0x48
 800bcbc:	9413      	str	r4, [sp, #76]	; 0x4c
 800bcbe:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bcc0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	f7f4 fbc1 	bl	800044c <__aeabi_dcmpeq>
 800bcca:	1e04      	subs	r4, r0, #0
 800bccc:	d00b      	beq.n	800bce6 <_dtoa_r+0xd6>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bcd2:	6013      	str	r3, [r2, #0]
 800bcd4:	4b9f      	ldr	r3, [pc, #636]	; (800bf54 <_dtoa_r+0x344>)
 800bcd6:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	2a00      	cmp	r2, #0
 800bcdc:	d0e5      	beq.n	800bcaa <_dtoa_r+0x9a>
 800bcde:	4a9e      	ldr	r2, [pc, #632]	; (800bf58 <_dtoa_r+0x348>)
 800bce0:	9926      	ldr	r1, [sp, #152]	; 0x98
 800bce2:	600a      	str	r2, [r1, #0]
 800bce4:	e7e1      	b.n	800bcaa <_dtoa_r+0x9a>
 800bce6:	ab1a      	add	r3, sp, #104	; 0x68
 800bce8:	9301      	str	r3, [sp, #4]
 800bcea:	ab1b      	add	r3, sp, #108	; 0x6c
 800bcec:	9300      	str	r3, [sp, #0]
 800bcee:	0038      	movs	r0, r7
 800bcf0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bcf2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bcf4:	f001 ff80 	bl	800dbf8 <__d2b>
 800bcf8:	006e      	lsls	r6, r5, #1
 800bcfa:	9004      	str	r0, [sp, #16]
 800bcfc:	0d76      	lsrs	r6, r6, #21
 800bcfe:	d100      	bne.n	800bd02 <_dtoa_r+0xf2>
 800bd00:	e07c      	b.n	800bdfc <_dtoa_r+0x1ec>
 800bd02:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bd04:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bd06:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bd08:	4a94      	ldr	r2, [pc, #592]	; (800bf5c <_dtoa_r+0x34c>)
 800bd0a:	031b      	lsls	r3, r3, #12
 800bd0c:	0b1b      	lsrs	r3, r3, #12
 800bd0e:	431a      	orrs	r2, r3
 800bd10:	0011      	movs	r1, r2
 800bd12:	4b93      	ldr	r3, [pc, #588]	; (800bf60 <_dtoa_r+0x350>)
 800bd14:	9416      	str	r4, [sp, #88]	; 0x58
 800bd16:	18f6      	adds	r6, r6, r3
 800bd18:	2200      	movs	r2, #0
 800bd1a:	4b92      	ldr	r3, [pc, #584]	; (800bf64 <_dtoa_r+0x354>)
 800bd1c:	f7f5 fe10 	bl	8001940 <__aeabi_dsub>
 800bd20:	4a91      	ldr	r2, [pc, #580]	; (800bf68 <_dtoa_r+0x358>)
 800bd22:	4b92      	ldr	r3, [pc, #584]	; (800bf6c <_dtoa_r+0x35c>)
 800bd24:	f7f5 fba0 	bl	8001468 <__aeabi_dmul>
 800bd28:	4a91      	ldr	r2, [pc, #580]	; (800bf70 <_dtoa_r+0x360>)
 800bd2a:	4b92      	ldr	r3, [pc, #584]	; (800bf74 <_dtoa_r+0x364>)
 800bd2c:	f7f4 fc2c 	bl	8000588 <__aeabi_dadd>
 800bd30:	0004      	movs	r4, r0
 800bd32:	0030      	movs	r0, r6
 800bd34:	000d      	movs	r5, r1
 800bd36:	f7f6 f9e9 	bl	800210c <__aeabi_i2d>
 800bd3a:	4a8f      	ldr	r2, [pc, #572]	; (800bf78 <_dtoa_r+0x368>)
 800bd3c:	4b8f      	ldr	r3, [pc, #572]	; (800bf7c <_dtoa_r+0x36c>)
 800bd3e:	f7f5 fb93 	bl	8001468 <__aeabi_dmul>
 800bd42:	0002      	movs	r2, r0
 800bd44:	000b      	movs	r3, r1
 800bd46:	0020      	movs	r0, r4
 800bd48:	0029      	movs	r1, r5
 800bd4a:	f7f4 fc1d 	bl	8000588 <__aeabi_dadd>
 800bd4e:	0004      	movs	r4, r0
 800bd50:	000d      	movs	r5, r1
 800bd52:	f7f6 f9a5 	bl	80020a0 <__aeabi_d2iz>
 800bd56:	2200      	movs	r2, #0
 800bd58:	9002      	str	r0, [sp, #8]
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	0020      	movs	r0, r4
 800bd5e:	0029      	movs	r1, r5
 800bd60:	f7f4 fb7a 	bl	8000458 <__aeabi_dcmplt>
 800bd64:	2800      	cmp	r0, #0
 800bd66:	d00b      	beq.n	800bd80 <_dtoa_r+0x170>
 800bd68:	9802      	ldr	r0, [sp, #8]
 800bd6a:	f7f6 f9cf 	bl	800210c <__aeabi_i2d>
 800bd6e:	002b      	movs	r3, r5
 800bd70:	0022      	movs	r2, r4
 800bd72:	f7f4 fb6b 	bl	800044c <__aeabi_dcmpeq>
 800bd76:	4243      	negs	r3, r0
 800bd78:	4158      	adcs	r0, r3
 800bd7a:	9b02      	ldr	r3, [sp, #8]
 800bd7c:	1a1b      	subs	r3, r3, r0
 800bd7e:	9302      	str	r3, [sp, #8]
 800bd80:	2301      	movs	r3, #1
 800bd82:	9315      	str	r3, [sp, #84]	; 0x54
 800bd84:	9b02      	ldr	r3, [sp, #8]
 800bd86:	2b16      	cmp	r3, #22
 800bd88:	d80f      	bhi.n	800bdaa <_dtoa_r+0x19a>
 800bd8a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bd8c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bd8e:	00da      	lsls	r2, r3, #3
 800bd90:	4b7b      	ldr	r3, [pc, #492]	; (800bf80 <_dtoa_r+0x370>)
 800bd92:	189b      	adds	r3, r3, r2
 800bd94:	681a      	ldr	r2, [r3, #0]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	f7f4 fb5e 	bl	8000458 <__aeabi_dcmplt>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d049      	beq.n	800be34 <_dtoa_r+0x224>
 800bda0:	9b02      	ldr	r3, [sp, #8]
 800bda2:	3b01      	subs	r3, #1
 800bda4:	9302      	str	r3, [sp, #8]
 800bda6:	2300      	movs	r3, #0
 800bda8:	9315      	str	r3, [sp, #84]	; 0x54
 800bdaa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bdac:	1b9e      	subs	r6, r3, r6
 800bdae:	2300      	movs	r3, #0
 800bdb0:	9308      	str	r3, [sp, #32]
 800bdb2:	0033      	movs	r3, r6
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	930d      	str	r3, [sp, #52]	; 0x34
 800bdb8:	d504      	bpl.n	800bdc4 <_dtoa_r+0x1b4>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	1b9b      	subs	r3, r3, r6
 800bdbe:	9308      	str	r3, [sp, #32]
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	930d      	str	r3, [sp, #52]	; 0x34
 800bdc4:	9b02      	ldr	r3, [sp, #8]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	db36      	blt.n	800be38 <_dtoa_r+0x228>
 800bdca:	9a02      	ldr	r2, [sp, #8]
 800bdcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdce:	4694      	mov	ip, r2
 800bdd0:	4463      	add	r3, ip
 800bdd2:	930d      	str	r3, [sp, #52]	; 0x34
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	9214      	str	r2, [sp, #80]	; 0x50
 800bdd8:	930e      	str	r3, [sp, #56]	; 0x38
 800bdda:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bddc:	2401      	movs	r4, #1
 800bdde:	2b09      	cmp	r3, #9
 800bde0:	d862      	bhi.n	800bea8 <_dtoa_r+0x298>
 800bde2:	2b05      	cmp	r3, #5
 800bde4:	dd02      	ble.n	800bdec <_dtoa_r+0x1dc>
 800bde6:	2400      	movs	r4, #0
 800bde8:	3b04      	subs	r3, #4
 800bdea:	9322      	str	r3, [sp, #136]	; 0x88
 800bdec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bdee:	1e98      	subs	r0, r3, #2
 800bdf0:	2803      	cmp	r0, #3
 800bdf2:	d862      	bhi.n	800beba <_dtoa_r+0x2aa>
 800bdf4:	f7f4 f990 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bdf8:	56343629 	.word	0x56343629
 800bdfc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bdfe:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800be00:	189e      	adds	r6, r3, r2
 800be02:	4b60      	ldr	r3, [pc, #384]	; (800bf84 <_dtoa_r+0x374>)
 800be04:	18f2      	adds	r2, r6, r3
 800be06:	2a20      	cmp	r2, #32
 800be08:	dd0f      	ble.n	800be2a <_dtoa_r+0x21a>
 800be0a:	2340      	movs	r3, #64	; 0x40
 800be0c:	1a9b      	subs	r3, r3, r2
 800be0e:	409d      	lsls	r5, r3
 800be10:	4b5d      	ldr	r3, [pc, #372]	; (800bf88 <_dtoa_r+0x378>)
 800be12:	9802      	ldr	r0, [sp, #8]
 800be14:	18f3      	adds	r3, r6, r3
 800be16:	40d8      	lsrs	r0, r3
 800be18:	4328      	orrs	r0, r5
 800be1a:	f7f6 f9a7 	bl	800216c <__aeabi_ui2d>
 800be1e:	2301      	movs	r3, #1
 800be20:	4c5a      	ldr	r4, [pc, #360]	; (800bf8c <_dtoa_r+0x37c>)
 800be22:	3e01      	subs	r6, #1
 800be24:	1909      	adds	r1, r1, r4
 800be26:	9316      	str	r3, [sp, #88]	; 0x58
 800be28:	e776      	b.n	800bd18 <_dtoa_r+0x108>
 800be2a:	2320      	movs	r3, #32
 800be2c:	9802      	ldr	r0, [sp, #8]
 800be2e:	1a9b      	subs	r3, r3, r2
 800be30:	4098      	lsls	r0, r3
 800be32:	e7f2      	b.n	800be1a <_dtoa_r+0x20a>
 800be34:	9015      	str	r0, [sp, #84]	; 0x54
 800be36:	e7b8      	b.n	800bdaa <_dtoa_r+0x19a>
 800be38:	9b08      	ldr	r3, [sp, #32]
 800be3a:	9a02      	ldr	r2, [sp, #8]
 800be3c:	1a9b      	subs	r3, r3, r2
 800be3e:	9308      	str	r3, [sp, #32]
 800be40:	4253      	negs	r3, r2
 800be42:	930e      	str	r3, [sp, #56]	; 0x38
 800be44:	2300      	movs	r3, #0
 800be46:	9314      	str	r3, [sp, #80]	; 0x50
 800be48:	e7c7      	b.n	800bdda <_dtoa_r+0x1ca>
 800be4a:	2300      	movs	r3, #0
 800be4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800be4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800be50:	2b00      	cmp	r3, #0
 800be52:	dc36      	bgt.n	800bec2 <_dtoa_r+0x2b2>
 800be54:	2301      	movs	r3, #1
 800be56:	001a      	movs	r2, r3
 800be58:	930c      	str	r3, [sp, #48]	; 0x30
 800be5a:	9306      	str	r3, [sp, #24]
 800be5c:	9223      	str	r2, [sp, #140]	; 0x8c
 800be5e:	e00d      	b.n	800be7c <_dtoa_r+0x26c>
 800be60:	2301      	movs	r3, #1
 800be62:	e7f3      	b.n	800be4c <_dtoa_r+0x23c>
 800be64:	2300      	movs	r3, #0
 800be66:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800be68:	930f      	str	r3, [sp, #60]	; 0x3c
 800be6a:	4694      	mov	ip, r2
 800be6c:	9b02      	ldr	r3, [sp, #8]
 800be6e:	4463      	add	r3, ip
 800be70:	930c      	str	r3, [sp, #48]	; 0x30
 800be72:	3301      	adds	r3, #1
 800be74:	9306      	str	r3, [sp, #24]
 800be76:	2b00      	cmp	r3, #0
 800be78:	dc00      	bgt.n	800be7c <_dtoa_r+0x26c>
 800be7a:	2301      	movs	r3, #1
 800be7c:	2200      	movs	r2, #0
 800be7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be80:	6042      	str	r2, [r0, #4]
 800be82:	3204      	adds	r2, #4
 800be84:	0015      	movs	r5, r2
 800be86:	3514      	adds	r5, #20
 800be88:	6841      	ldr	r1, [r0, #4]
 800be8a:	429d      	cmp	r5, r3
 800be8c:	d91d      	bls.n	800beca <_dtoa_r+0x2ba>
 800be8e:	0038      	movs	r0, r7
 800be90:	f001 fab8 	bl	800d404 <_Balloc>
 800be94:	9005      	str	r0, [sp, #20]
 800be96:	2800      	cmp	r0, #0
 800be98:	d11b      	bne.n	800bed2 <_dtoa_r+0x2c2>
 800be9a:	21d5      	movs	r1, #213	; 0xd5
 800be9c:	0002      	movs	r2, r0
 800be9e:	4b3c      	ldr	r3, [pc, #240]	; (800bf90 <_dtoa_r+0x380>)
 800bea0:	0049      	lsls	r1, r1, #1
 800bea2:	e6ca      	b.n	800bc3a <_dtoa_r+0x2a>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e7de      	b.n	800be66 <_dtoa_r+0x256>
 800bea8:	2300      	movs	r3, #0
 800beaa:	940f      	str	r4, [sp, #60]	; 0x3c
 800beac:	9322      	str	r3, [sp, #136]	; 0x88
 800beae:	3b01      	subs	r3, #1
 800beb0:	930c      	str	r3, [sp, #48]	; 0x30
 800beb2:	9306      	str	r3, [sp, #24]
 800beb4:	2200      	movs	r2, #0
 800beb6:	3313      	adds	r3, #19
 800beb8:	e7d0      	b.n	800be5c <_dtoa_r+0x24c>
 800beba:	2301      	movs	r3, #1
 800bebc:	930f      	str	r3, [sp, #60]	; 0x3c
 800bebe:	3b02      	subs	r3, #2
 800bec0:	e7f6      	b.n	800beb0 <_dtoa_r+0x2a0>
 800bec2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bec4:	930c      	str	r3, [sp, #48]	; 0x30
 800bec6:	9306      	str	r3, [sp, #24]
 800bec8:	e7d8      	b.n	800be7c <_dtoa_r+0x26c>
 800beca:	3101      	adds	r1, #1
 800becc:	6041      	str	r1, [r0, #4]
 800bece:	0052      	lsls	r2, r2, #1
 800bed0:	e7d8      	b.n	800be84 <_dtoa_r+0x274>
 800bed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed4:	9a05      	ldr	r2, [sp, #20]
 800bed6:	601a      	str	r2, [r3, #0]
 800bed8:	9b06      	ldr	r3, [sp, #24]
 800beda:	2b0e      	cmp	r3, #14
 800bedc:	d900      	bls.n	800bee0 <_dtoa_r+0x2d0>
 800bede:	e0eb      	b.n	800c0b8 <_dtoa_r+0x4a8>
 800bee0:	2c00      	cmp	r4, #0
 800bee2:	d100      	bne.n	800bee6 <_dtoa_r+0x2d6>
 800bee4:	e0e8      	b.n	800c0b8 <_dtoa_r+0x4a8>
 800bee6:	9b02      	ldr	r3, [sp, #8]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	dd68      	ble.n	800bfbe <_dtoa_r+0x3ae>
 800beec:	001a      	movs	r2, r3
 800beee:	210f      	movs	r1, #15
 800bef0:	4b23      	ldr	r3, [pc, #140]	; (800bf80 <_dtoa_r+0x370>)
 800bef2:	400a      	ands	r2, r1
 800bef4:	00d2      	lsls	r2, r2, #3
 800bef6:	189b      	adds	r3, r3, r2
 800bef8:	681d      	ldr	r5, [r3, #0]
 800befa:	685e      	ldr	r6, [r3, #4]
 800befc:	9b02      	ldr	r3, [sp, #8]
 800befe:	111c      	asrs	r4, r3, #4
 800bf00:	2302      	movs	r3, #2
 800bf02:	9310      	str	r3, [sp, #64]	; 0x40
 800bf04:	9b02      	ldr	r3, [sp, #8]
 800bf06:	05db      	lsls	r3, r3, #23
 800bf08:	d50b      	bpl.n	800bf22 <_dtoa_r+0x312>
 800bf0a:	4b22      	ldr	r3, [pc, #136]	; (800bf94 <_dtoa_r+0x384>)
 800bf0c:	400c      	ands	r4, r1
 800bf0e:	6a1a      	ldr	r2, [r3, #32]
 800bf10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf12:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bf14:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bf16:	f7f4 fea1 	bl	8000c5c <__aeabi_ddiv>
 800bf1a:	2303      	movs	r3, #3
 800bf1c:	900a      	str	r0, [sp, #40]	; 0x28
 800bf1e:	910b      	str	r1, [sp, #44]	; 0x2c
 800bf20:	9310      	str	r3, [sp, #64]	; 0x40
 800bf22:	4b1c      	ldr	r3, [pc, #112]	; (800bf94 <_dtoa_r+0x384>)
 800bf24:	9307      	str	r3, [sp, #28]
 800bf26:	2c00      	cmp	r4, #0
 800bf28:	d136      	bne.n	800bf98 <_dtoa_r+0x388>
 800bf2a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800bf2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bf2e:	002a      	movs	r2, r5
 800bf30:	0033      	movs	r3, r6
 800bf32:	f7f4 fe93 	bl	8000c5c <__aeabi_ddiv>
 800bf36:	900a      	str	r0, [sp, #40]	; 0x28
 800bf38:	910b      	str	r1, [sp, #44]	; 0x2c
 800bf3a:	e05c      	b.n	800bff6 <_dtoa_r+0x3e6>
 800bf3c:	08010d05 	.word	0x08010d05
 800bf40:	08010d1c 	.word	0x08010d1c
 800bf44:	7ff00000 	.word	0x7ff00000
 800bf48:	0000270f 	.word	0x0000270f
 800bf4c:	08010d01 	.word	0x08010d01
 800bf50:	08010d04 	.word	0x08010d04
 800bf54:	08010c80 	.word	0x08010c80
 800bf58:	08010c81 	.word	0x08010c81
 800bf5c:	3ff00000 	.word	0x3ff00000
 800bf60:	fffffc01 	.word	0xfffffc01
 800bf64:	3ff80000 	.word	0x3ff80000
 800bf68:	636f4361 	.word	0x636f4361
 800bf6c:	3fd287a7 	.word	0x3fd287a7
 800bf70:	8b60c8b3 	.word	0x8b60c8b3
 800bf74:	3fc68a28 	.word	0x3fc68a28
 800bf78:	509f79fb 	.word	0x509f79fb
 800bf7c:	3fd34413 	.word	0x3fd34413
 800bf80:	08010ef8 	.word	0x08010ef8
 800bf84:	00000432 	.word	0x00000432
 800bf88:	00000412 	.word	0x00000412
 800bf8c:	fe100000 	.word	0xfe100000
 800bf90:	08010d7b 	.word	0x08010d7b
 800bf94:	08010ed0 	.word	0x08010ed0
 800bf98:	2301      	movs	r3, #1
 800bf9a:	421c      	tst	r4, r3
 800bf9c:	d00b      	beq.n	800bfb6 <_dtoa_r+0x3a6>
 800bf9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfa0:	0028      	movs	r0, r5
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	9310      	str	r3, [sp, #64]	; 0x40
 800bfa6:	9b07      	ldr	r3, [sp, #28]
 800bfa8:	0031      	movs	r1, r6
 800bfaa:	681a      	ldr	r2, [r3, #0]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	f7f5 fa5b 	bl	8001468 <__aeabi_dmul>
 800bfb2:	0005      	movs	r5, r0
 800bfb4:	000e      	movs	r6, r1
 800bfb6:	9b07      	ldr	r3, [sp, #28]
 800bfb8:	1064      	asrs	r4, r4, #1
 800bfba:	3308      	adds	r3, #8
 800bfbc:	e7b2      	b.n	800bf24 <_dtoa_r+0x314>
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	9310      	str	r3, [sp, #64]	; 0x40
 800bfc2:	9b02      	ldr	r3, [sp, #8]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d016      	beq.n	800bff6 <_dtoa_r+0x3e6>
 800bfc8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bfca:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bfcc:	425c      	negs	r4, r3
 800bfce:	230f      	movs	r3, #15
 800bfd0:	4ab5      	ldr	r2, [pc, #724]	; (800c2a8 <_dtoa_r+0x698>)
 800bfd2:	4023      	ands	r3, r4
 800bfd4:	00db      	lsls	r3, r3, #3
 800bfd6:	18d3      	adds	r3, r2, r3
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	f7f5 fa44 	bl	8001468 <__aeabi_dmul>
 800bfe0:	2601      	movs	r6, #1
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	900a      	str	r0, [sp, #40]	; 0x28
 800bfe6:	910b      	str	r1, [sp, #44]	; 0x2c
 800bfe8:	4db0      	ldr	r5, [pc, #704]	; (800c2ac <_dtoa_r+0x69c>)
 800bfea:	1124      	asrs	r4, r4, #4
 800bfec:	2c00      	cmp	r4, #0
 800bfee:	d000      	beq.n	800bff2 <_dtoa_r+0x3e2>
 800bff0:	e094      	b.n	800c11c <_dtoa_r+0x50c>
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d19f      	bne.n	800bf36 <_dtoa_r+0x326>
 800bff6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d100      	bne.n	800bffe <_dtoa_r+0x3ee>
 800bffc:	e09b      	b.n	800c136 <_dtoa_r+0x526>
 800bffe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c000:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c002:	2200      	movs	r2, #0
 800c004:	0020      	movs	r0, r4
 800c006:	0029      	movs	r1, r5
 800c008:	4ba9      	ldr	r3, [pc, #676]	; (800c2b0 <_dtoa_r+0x6a0>)
 800c00a:	f7f4 fa25 	bl	8000458 <__aeabi_dcmplt>
 800c00e:	2800      	cmp	r0, #0
 800c010:	d100      	bne.n	800c014 <_dtoa_r+0x404>
 800c012:	e090      	b.n	800c136 <_dtoa_r+0x526>
 800c014:	9b06      	ldr	r3, [sp, #24]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d100      	bne.n	800c01c <_dtoa_r+0x40c>
 800c01a:	e08c      	b.n	800c136 <_dtoa_r+0x526>
 800c01c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c01e:	2b00      	cmp	r3, #0
 800c020:	dd46      	ble.n	800c0b0 <_dtoa_r+0x4a0>
 800c022:	9b02      	ldr	r3, [sp, #8]
 800c024:	2200      	movs	r2, #0
 800c026:	0020      	movs	r0, r4
 800c028:	0029      	movs	r1, r5
 800c02a:	1e5e      	subs	r6, r3, #1
 800c02c:	4ba1      	ldr	r3, [pc, #644]	; (800c2b4 <_dtoa_r+0x6a4>)
 800c02e:	f7f5 fa1b 	bl	8001468 <__aeabi_dmul>
 800c032:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c034:	900a      	str	r0, [sp, #40]	; 0x28
 800c036:	910b      	str	r1, [sp, #44]	; 0x2c
 800c038:	3301      	adds	r3, #1
 800c03a:	9310      	str	r3, [sp, #64]	; 0x40
 800c03c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c03e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c040:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c042:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c044:	9307      	str	r3, [sp, #28]
 800c046:	f7f6 f861 	bl	800210c <__aeabi_i2d>
 800c04a:	0022      	movs	r2, r4
 800c04c:	002b      	movs	r3, r5
 800c04e:	f7f5 fa0b 	bl	8001468 <__aeabi_dmul>
 800c052:	2200      	movs	r2, #0
 800c054:	4b98      	ldr	r3, [pc, #608]	; (800c2b8 <_dtoa_r+0x6a8>)
 800c056:	f7f4 fa97 	bl	8000588 <__aeabi_dadd>
 800c05a:	9010      	str	r0, [sp, #64]	; 0x40
 800c05c:	9111      	str	r1, [sp, #68]	; 0x44
 800c05e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c060:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c062:	920a      	str	r2, [sp, #40]	; 0x28
 800c064:	930b      	str	r3, [sp, #44]	; 0x2c
 800c066:	4a95      	ldr	r2, [pc, #596]	; (800c2bc <_dtoa_r+0x6ac>)
 800c068:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c06a:	4694      	mov	ip, r2
 800c06c:	4463      	add	r3, ip
 800c06e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c070:	930b      	str	r3, [sp, #44]	; 0x2c
 800c072:	9b07      	ldr	r3, [sp, #28]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d161      	bne.n	800c13c <_dtoa_r+0x52c>
 800c078:	2200      	movs	r2, #0
 800c07a:	0020      	movs	r0, r4
 800c07c:	0029      	movs	r1, r5
 800c07e:	4b90      	ldr	r3, [pc, #576]	; (800c2c0 <_dtoa_r+0x6b0>)
 800c080:	f7f5 fc5e 	bl	8001940 <__aeabi_dsub>
 800c084:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c086:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c088:	0004      	movs	r4, r0
 800c08a:	000d      	movs	r5, r1
 800c08c:	f7f4 f9f8 	bl	8000480 <__aeabi_dcmpgt>
 800c090:	2800      	cmp	r0, #0
 800c092:	d000      	beq.n	800c096 <_dtoa_r+0x486>
 800c094:	e2b5      	b.n	800c602 <_dtoa_r+0x9f2>
 800c096:	488b      	ldr	r0, [pc, #556]	; (800c2c4 <_dtoa_r+0x6b4>)
 800c098:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c09a:	4684      	mov	ip, r0
 800c09c:	4461      	add	r1, ip
 800c09e:	000b      	movs	r3, r1
 800c0a0:	0020      	movs	r0, r4
 800c0a2:	0029      	movs	r1, r5
 800c0a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0a6:	f7f4 f9d7 	bl	8000458 <__aeabi_dcmplt>
 800c0aa:	2800      	cmp	r0, #0
 800c0ac:	d000      	beq.n	800c0b0 <_dtoa_r+0x4a0>
 800c0ae:	e2a5      	b.n	800c5fc <_dtoa_r+0x9ec>
 800c0b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0b2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800c0b4:	930a      	str	r3, [sp, #40]	; 0x28
 800c0b6:	940b      	str	r4, [sp, #44]	; 0x2c
 800c0b8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	da00      	bge.n	800c0c0 <_dtoa_r+0x4b0>
 800c0be:	e171      	b.n	800c3a4 <_dtoa_r+0x794>
 800c0c0:	9a02      	ldr	r2, [sp, #8]
 800c0c2:	2a0e      	cmp	r2, #14
 800c0c4:	dd00      	ble.n	800c0c8 <_dtoa_r+0x4b8>
 800c0c6:	e16d      	b.n	800c3a4 <_dtoa_r+0x794>
 800c0c8:	4b77      	ldr	r3, [pc, #476]	; (800c2a8 <_dtoa_r+0x698>)
 800c0ca:	00d2      	lsls	r2, r2, #3
 800c0cc:	189b      	adds	r3, r3, r2
 800c0ce:	685c      	ldr	r4, [r3, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	9308      	str	r3, [sp, #32]
 800c0d4:	9409      	str	r4, [sp, #36]	; 0x24
 800c0d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	db00      	blt.n	800c0de <_dtoa_r+0x4ce>
 800c0dc:	e0f6      	b.n	800c2cc <_dtoa_r+0x6bc>
 800c0de:	9b06      	ldr	r3, [sp, #24]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dd00      	ble.n	800c0e6 <_dtoa_r+0x4d6>
 800c0e4:	e0f2      	b.n	800c2cc <_dtoa_r+0x6bc>
 800c0e6:	d000      	beq.n	800c0ea <_dtoa_r+0x4da>
 800c0e8:	e288      	b.n	800c5fc <_dtoa_r+0x9ec>
 800c0ea:	9808      	ldr	r0, [sp, #32]
 800c0ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	4b73      	ldr	r3, [pc, #460]	; (800c2c0 <_dtoa_r+0x6b0>)
 800c0f2:	f7f5 f9b9 	bl	8001468 <__aeabi_dmul>
 800c0f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0fa:	f7f4 f9cb 	bl	8000494 <__aeabi_dcmpge>
 800c0fe:	9e06      	ldr	r6, [sp, #24]
 800c100:	0035      	movs	r5, r6
 800c102:	2800      	cmp	r0, #0
 800c104:	d000      	beq.n	800c108 <_dtoa_r+0x4f8>
 800c106:	e25f      	b.n	800c5c8 <_dtoa_r+0x9b8>
 800c108:	9b05      	ldr	r3, [sp, #20]
 800c10a:	9a05      	ldr	r2, [sp, #20]
 800c10c:	3301      	adds	r3, #1
 800c10e:	9307      	str	r3, [sp, #28]
 800c110:	2331      	movs	r3, #49	; 0x31
 800c112:	7013      	strb	r3, [r2, #0]
 800c114:	9b02      	ldr	r3, [sp, #8]
 800c116:	3301      	adds	r3, #1
 800c118:	9302      	str	r3, [sp, #8]
 800c11a:	e25a      	b.n	800c5d2 <_dtoa_r+0x9c2>
 800c11c:	4234      	tst	r4, r6
 800c11e:	d007      	beq.n	800c130 <_dtoa_r+0x520>
 800c120:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c122:	3301      	adds	r3, #1
 800c124:	9310      	str	r3, [sp, #64]	; 0x40
 800c126:	682a      	ldr	r2, [r5, #0]
 800c128:	686b      	ldr	r3, [r5, #4]
 800c12a:	f7f5 f99d 	bl	8001468 <__aeabi_dmul>
 800c12e:	0033      	movs	r3, r6
 800c130:	1064      	asrs	r4, r4, #1
 800c132:	3508      	adds	r5, #8
 800c134:	e75a      	b.n	800bfec <_dtoa_r+0x3dc>
 800c136:	9e02      	ldr	r6, [sp, #8]
 800c138:	9b06      	ldr	r3, [sp, #24]
 800c13a:	e780      	b.n	800c03e <_dtoa_r+0x42e>
 800c13c:	9b07      	ldr	r3, [sp, #28]
 800c13e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c140:	1e5a      	subs	r2, r3, #1
 800c142:	4b59      	ldr	r3, [pc, #356]	; (800c2a8 <_dtoa_r+0x698>)
 800c144:	00d2      	lsls	r2, r2, #3
 800c146:	189b      	adds	r3, r3, r2
 800c148:	681a      	ldr	r2, [r3, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	2900      	cmp	r1, #0
 800c14e:	d051      	beq.n	800c1f4 <_dtoa_r+0x5e4>
 800c150:	2000      	movs	r0, #0
 800c152:	495d      	ldr	r1, [pc, #372]	; (800c2c8 <_dtoa_r+0x6b8>)
 800c154:	f7f4 fd82 	bl	8000c5c <__aeabi_ddiv>
 800c158:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c15a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c15c:	f7f5 fbf0 	bl	8001940 <__aeabi_dsub>
 800c160:	9a05      	ldr	r2, [sp, #20]
 800c162:	9b05      	ldr	r3, [sp, #20]
 800c164:	4694      	mov	ip, r2
 800c166:	9310      	str	r3, [sp, #64]	; 0x40
 800c168:	9b07      	ldr	r3, [sp, #28]
 800c16a:	900a      	str	r0, [sp, #40]	; 0x28
 800c16c:	910b      	str	r1, [sp, #44]	; 0x2c
 800c16e:	4463      	add	r3, ip
 800c170:	9319      	str	r3, [sp, #100]	; 0x64
 800c172:	0029      	movs	r1, r5
 800c174:	0020      	movs	r0, r4
 800c176:	f7f5 ff93 	bl	80020a0 <__aeabi_d2iz>
 800c17a:	9017      	str	r0, [sp, #92]	; 0x5c
 800c17c:	f7f5 ffc6 	bl	800210c <__aeabi_i2d>
 800c180:	0002      	movs	r2, r0
 800c182:	000b      	movs	r3, r1
 800c184:	0020      	movs	r0, r4
 800c186:	0029      	movs	r1, r5
 800c188:	f7f5 fbda 	bl	8001940 <__aeabi_dsub>
 800c18c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c18e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c190:	3301      	adds	r3, #1
 800c192:	9307      	str	r3, [sp, #28]
 800c194:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c196:	0004      	movs	r4, r0
 800c198:	3330      	adds	r3, #48	; 0x30
 800c19a:	7013      	strb	r3, [r2, #0]
 800c19c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c19e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1a0:	000d      	movs	r5, r1
 800c1a2:	f7f4 f959 	bl	8000458 <__aeabi_dcmplt>
 800c1a6:	2800      	cmp	r0, #0
 800c1a8:	d175      	bne.n	800c296 <_dtoa_r+0x686>
 800c1aa:	0022      	movs	r2, r4
 800c1ac:	002b      	movs	r3, r5
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	493f      	ldr	r1, [pc, #252]	; (800c2b0 <_dtoa_r+0x6a0>)
 800c1b2:	f7f5 fbc5 	bl	8001940 <__aeabi_dsub>
 800c1b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1ba:	f7f4 f94d 	bl	8000458 <__aeabi_dcmplt>
 800c1be:	2800      	cmp	r0, #0
 800c1c0:	d000      	beq.n	800c1c4 <_dtoa_r+0x5b4>
 800c1c2:	e0d1      	b.n	800c368 <_dtoa_r+0x758>
 800c1c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c1c6:	9a07      	ldr	r2, [sp, #28]
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d100      	bne.n	800c1ce <_dtoa_r+0x5be>
 800c1cc:	e770      	b.n	800c0b0 <_dtoa_r+0x4a0>
 800c1ce:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c1d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	4b37      	ldr	r3, [pc, #220]	; (800c2b4 <_dtoa_r+0x6a4>)
 800c1d6:	f7f5 f947 	bl	8001468 <__aeabi_dmul>
 800c1da:	4b36      	ldr	r3, [pc, #216]	; (800c2b4 <_dtoa_r+0x6a4>)
 800c1dc:	900a      	str	r0, [sp, #40]	; 0x28
 800c1de:	910b      	str	r1, [sp, #44]	; 0x2c
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	0020      	movs	r0, r4
 800c1e4:	0029      	movs	r1, r5
 800c1e6:	f7f5 f93f 	bl	8001468 <__aeabi_dmul>
 800c1ea:	9b07      	ldr	r3, [sp, #28]
 800c1ec:	0004      	movs	r4, r0
 800c1ee:	000d      	movs	r5, r1
 800c1f0:	9310      	str	r3, [sp, #64]	; 0x40
 800c1f2:	e7be      	b.n	800c172 <_dtoa_r+0x562>
 800c1f4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c1f6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1f8:	f7f5 f936 	bl	8001468 <__aeabi_dmul>
 800c1fc:	9a05      	ldr	r2, [sp, #20]
 800c1fe:	9b05      	ldr	r3, [sp, #20]
 800c200:	4694      	mov	ip, r2
 800c202:	930a      	str	r3, [sp, #40]	; 0x28
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	9010      	str	r0, [sp, #64]	; 0x40
 800c208:	9111      	str	r1, [sp, #68]	; 0x44
 800c20a:	4463      	add	r3, ip
 800c20c:	9319      	str	r3, [sp, #100]	; 0x64
 800c20e:	0029      	movs	r1, r5
 800c210:	0020      	movs	r0, r4
 800c212:	f7f5 ff45 	bl	80020a0 <__aeabi_d2iz>
 800c216:	9017      	str	r0, [sp, #92]	; 0x5c
 800c218:	f7f5 ff78 	bl	800210c <__aeabi_i2d>
 800c21c:	0002      	movs	r2, r0
 800c21e:	000b      	movs	r3, r1
 800c220:	0020      	movs	r0, r4
 800c222:	0029      	movs	r1, r5
 800c224:	f7f5 fb8c 	bl	8001940 <__aeabi_dsub>
 800c228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c22a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c22c:	3330      	adds	r3, #48	; 0x30
 800c22e:	7013      	strb	r3, [r2, #0]
 800c230:	0013      	movs	r3, r2
 800c232:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c234:	3301      	adds	r3, #1
 800c236:	0004      	movs	r4, r0
 800c238:	000d      	movs	r5, r1
 800c23a:	930a      	str	r3, [sp, #40]	; 0x28
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d12c      	bne.n	800c29a <_dtoa_r+0x68a>
 800c240:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c242:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c244:	9a05      	ldr	r2, [sp, #20]
 800c246:	9b07      	ldr	r3, [sp, #28]
 800c248:	4694      	mov	ip, r2
 800c24a:	4463      	add	r3, ip
 800c24c:	2200      	movs	r2, #0
 800c24e:	9307      	str	r3, [sp, #28]
 800c250:	4b1d      	ldr	r3, [pc, #116]	; (800c2c8 <_dtoa_r+0x6b8>)
 800c252:	f7f4 f999 	bl	8000588 <__aeabi_dadd>
 800c256:	0002      	movs	r2, r0
 800c258:	000b      	movs	r3, r1
 800c25a:	0020      	movs	r0, r4
 800c25c:	0029      	movs	r1, r5
 800c25e:	f7f4 f90f 	bl	8000480 <__aeabi_dcmpgt>
 800c262:	2800      	cmp	r0, #0
 800c264:	d000      	beq.n	800c268 <_dtoa_r+0x658>
 800c266:	e07f      	b.n	800c368 <_dtoa_r+0x758>
 800c268:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c26a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c26c:	2000      	movs	r0, #0
 800c26e:	4916      	ldr	r1, [pc, #88]	; (800c2c8 <_dtoa_r+0x6b8>)
 800c270:	f7f5 fb66 	bl	8001940 <__aeabi_dsub>
 800c274:	0002      	movs	r2, r0
 800c276:	000b      	movs	r3, r1
 800c278:	0020      	movs	r0, r4
 800c27a:	0029      	movs	r1, r5
 800c27c:	f7f4 f8ec 	bl	8000458 <__aeabi_dcmplt>
 800c280:	2800      	cmp	r0, #0
 800c282:	d100      	bne.n	800c286 <_dtoa_r+0x676>
 800c284:	e714      	b.n	800c0b0 <_dtoa_r+0x4a0>
 800c286:	9b07      	ldr	r3, [sp, #28]
 800c288:	001a      	movs	r2, r3
 800c28a:	3a01      	subs	r2, #1
 800c28c:	9207      	str	r2, [sp, #28]
 800c28e:	7812      	ldrb	r2, [r2, #0]
 800c290:	2a30      	cmp	r2, #48	; 0x30
 800c292:	d0f8      	beq.n	800c286 <_dtoa_r+0x676>
 800c294:	9307      	str	r3, [sp, #28]
 800c296:	9602      	str	r6, [sp, #8]
 800c298:	e054      	b.n	800c344 <_dtoa_r+0x734>
 800c29a:	2200      	movs	r2, #0
 800c29c:	4b05      	ldr	r3, [pc, #20]	; (800c2b4 <_dtoa_r+0x6a4>)
 800c29e:	f7f5 f8e3 	bl	8001468 <__aeabi_dmul>
 800c2a2:	0004      	movs	r4, r0
 800c2a4:	000d      	movs	r5, r1
 800c2a6:	e7b2      	b.n	800c20e <_dtoa_r+0x5fe>
 800c2a8:	08010ef8 	.word	0x08010ef8
 800c2ac:	08010ed0 	.word	0x08010ed0
 800c2b0:	3ff00000 	.word	0x3ff00000
 800c2b4:	40240000 	.word	0x40240000
 800c2b8:	401c0000 	.word	0x401c0000
 800c2bc:	fcc00000 	.word	0xfcc00000
 800c2c0:	40140000 	.word	0x40140000
 800c2c4:	7cc00000 	.word	0x7cc00000
 800c2c8:	3fe00000 	.word	0x3fe00000
 800c2cc:	9b06      	ldr	r3, [sp, #24]
 800c2ce:	9e05      	ldr	r6, [sp, #20]
 800c2d0:	3b01      	subs	r3, #1
 800c2d2:	199b      	adds	r3, r3, r6
 800c2d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c2d6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800c2d8:	930a      	str	r3, [sp, #40]	; 0x28
 800c2da:	9a08      	ldr	r2, [sp, #32]
 800c2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2de:	0020      	movs	r0, r4
 800c2e0:	0029      	movs	r1, r5
 800c2e2:	f7f4 fcbb 	bl	8000c5c <__aeabi_ddiv>
 800c2e6:	f7f5 fedb 	bl	80020a0 <__aeabi_d2iz>
 800c2ea:	9006      	str	r0, [sp, #24]
 800c2ec:	f7f5 ff0e 	bl	800210c <__aeabi_i2d>
 800c2f0:	9a08      	ldr	r2, [sp, #32]
 800c2f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f4:	f7f5 f8b8 	bl	8001468 <__aeabi_dmul>
 800c2f8:	0002      	movs	r2, r0
 800c2fa:	000b      	movs	r3, r1
 800c2fc:	0020      	movs	r0, r4
 800c2fe:	0029      	movs	r1, r5
 800c300:	f7f5 fb1e 	bl	8001940 <__aeabi_dsub>
 800c304:	0033      	movs	r3, r6
 800c306:	9a06      	ldr	r2, [sp, #24]
 800c308:	3601      	adds	r6, #1
 800c30a:	3230      	adds	r2, #48	; 0x30
 800c30c:	701a      	strb	r2, [r3, #0]
 800c30e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c310:	9607      	str	r6, [sp, #28]
 800c312:	429a      	cmp	r2, r3
 800c314:	d139      	bne.n	800c38a <_dtoa_r+0x77a>
 800c316:	0002      	movs	r2, r0
 800c318:	000b      	movs	r3, r1
 800c31a:	f7f4 f935 	bl	8000588 <__aeabi_dadd>
 800c31e:	9a08      	ldr	r2, [sp, #32]
 800c320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c322:	0004      	movs	r4, r0
 800c324:	000d      	movs	r5, r1
 800c326:	f7f4 f8ab 	bl	8000480 <__aeabi_dcmpgt>
 800c32a:	2800      	cmp	r0, #0
 800c32c:	d11b      	bne.n	800c366 <_dtoa_r+0x756>
 800c32e:	9a08      	ldr	r2, [sp, #32]
 800c330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c332:	0020      	movs	r0, r4
 800c334:	0029      	movs	r1, r5
 800c336:	f7f4 f889 	bl	800044c <__aeabi_dcmpeq>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d002      	beq.n	800c344 <_dtoa_r+0x734>
 800c33e:	9b06      	ldr	r3, [sp, #24]
 800c340:	07db      	lsls	r3, r3, #31
 800c342:	d410      	bmi.n	800c366 <_dtoa_r+0x756>
 800c344:	0038      	movs	r0, r7
 800c346:	9904      	ldr	r1, [sp, #16]
 800c348:	f001 f8a0 	bl	800d48c <_Bfree>
 800c34c:	2300      	movs	r3, #0
 800c34e:	9a07      	ldr	r2, [sp, #28]
 800c350:	9802      	ldr	r0, [sp, #8]
 800c352:	7013      	strb	r3, [r2, #0]
 800c354:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c356:	3001      	adds	r0, #1
 800c358:	6018      	str	r0, [r3, #0]
 800c35a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d100      	bne.n	800c362 <_dtoa_r+0x752>
 800c360:	e4a3      	b.n	800bcaa <_dtoa_r+0x9a>
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	e4a1      	b.n	800bcaa <_dtoa_r+0x9a>
 800c366:	9e02      	ldr	r6, [sp, #8]
 800c368:	9b07      	ldr	r3, [sp, #28]
 800c36a:	9307      	str	r3, [sp, #28]
 800c36c:	3b01      	subs	r3, #1
 800c36e:	781a      	ldrb	r2, [r3, #0]
 800c370:	2a39      	cmp	r2, #57	; 0x39
 800c372:	d106      	bne.n	800c382 <_dtoa_r+0x772>
 800c374:	9a05      	ldr	r2, [sp, #20]
 800c376:	429a      	cmp	r2, r3
 800c378:	d1f7      	bne.n	800c36a <_dtoa_r+0x75a>
 800c37a:	2230      	movs	r2, #48	; 0x30
 800c37c:	9905      	ldr	r1, [sp, #20]
 800c37e:	3601      	adds	r6, #1
 800c380:	700a      	strb	r2, [r1, #0]
 800c382:	781a      	ldrb	r2, [r3, #0]
 800c384:	3201      	adds	r2, #1
 800c386:	701a      	strb	r2, [r3, #0]
 800c388:	e785      	b.n	800c296 <_dtoa_r+0x686>
 800c38a:	2200      	movs	r2, #0
 800c38c:	4bad      	ldr	r3, [pc, #692]	; (800c644 <_dtoa_r+0xa34>)
 800c38e:	f7f5 f86b 	bl	8001468 <__aeabi_dmul>
 800c392:	2200      	movs	r2, #0
 800c394:	2300      	movs	r3, #0
 800c396:	0004      	movs	r4, r0
 800c398:	000d      	movs	r5, r1
 800c39a:	f7f4 f857 	bl	800044c <__aeabi_dcmpeq>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d09b      	beq.n	800c2da <_dtoa_r+0x6ca>
 800c3a2:	e7cf      	b.n	800c344 <_dtoa_r+0x734>
 800c3a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c3a6:	2a00      	cmp	r2, #0
 800c3a8:	d100      	bne.n	800c3ac <_dtoa_r+0x79c>
 800c3aa:	e082      	b.n	800c4b2 <_dtoa_r+0x8a2>
 800c3ac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c3ae:	2a01      	cmp	r2, #1
 800c3b0:	dc66      	bgt.n	800c480 <_dtoa_r+0x870>
 800c3b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c3b4:	2a00      	cmp	r2, #0
 800c3b6:	d05f      	beq.n	800c478 <_dtoa_r+0x868>
 800c3b8:	4aa3      	ldr	r2, [pc, #652]	; (800c648 <_dtoa_r+0xa38>)
 800c3ba:	189b      	adds	r3, r3, r2
 800c3bc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c3be:	9c08      	ldr	r4, [sp, #32]
 800c3c0:	9a08      	ldr	r2, [sp, #32]
 800c3c2:	2101      	movs	r1, #1
 800c3c4:	18d2      	adds	r2, r2, r3
 800c3c6:	9208      	str	r2, [sp, #32]
 800c3c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3ca:	0038      	movs	r0, r7
 800c3cc:	18d3      	adds	r3, r2, r3
 800c3ce:	930d      	str	r3, [sp, #52]	; 0x34
 800c3d0:	f001 f958 	bl	800d684 <__i2b>
 800c3d4:	0005      	movs	r5, r0
 800c3d6:	2c00      	cmp	r4, #0
 800c3d8:	dd0e      	ble.n	800c3f8 <_dtoa_r+0x7e8>
 800c3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	dd0b      	ble.n	800c3f8 <_dtoa_r+0x7e8>
 800c3e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3e2:	0023      	movs	r3, r4
 800c3e4:	4294      	cmp	r4, r2
 800c3e6:	dd00      	ble.n	800c3ea <_dtoa_r+0x7da>
 800c3e8:	0013      	movs	r3, r2
 800c3ea:	9a08      	ldr	r2, [sp, #32]
 800c3ec:	1ae4      	subs	r4, r4, r3
 800c3ee:	1ad2      	subs	r2, r2, r3
 800c3f0:	9208      	str	r2, [sp, #32]
 800c3f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	930d      	str	r3, [sp, #52]	; 0x34
 800c3f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d01f      	beq.n	800c43e <_dtoa_r+0x82e>
 800c3fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c400:	2b00      	cmp	r3, #0
 800c402:	d05a      	beq.n	800c4ba <_dtoa_r+0x8aa>
 800c404:	2e00      	cmp	r6, #0
 800c406:	dd11      	ble.n	800c42c <_dtoa_r+0x81c>
 800c408:	0029      	movs	r1, r5
 800c40a:	0032      	movs	r2, r6
 800c40c:	0038      	movs	r0, r7
 800c40e:	f001 f9ff 	bl	800d810 <__pow5mult>
 800c412:	9a04      	ldr	r2, [sp, #16]
 800c414:	0001      	movs	r1, r0
 800c416:	0005      	movs	r5, r0
 800c418:	0038      	movs	r0, r7
 800c41a:	f001 f949 	bl	800d6b0 <__multiply>
 800c41e:	9904      	ldr	r1, [sp, #16]
 800c420:	9007      	str	r0, [sp, #28]
 800c422:	0038      	movs	r0, r7
 800c424:	f001 f832 	bl	800d48c <_Bfree>
 800c428:	9b07      	ldr	r3, [sp, #28]
 800c42a:	9304      	str	r3, [sp, #16]
 800c42c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c42e:	1b9a      	subs	r2, r3, r6
 800c430:	42b3      	cmp	r3, r6
 800c432:	d004      	beq.n	800c43e <_dtoa_r+0x82e>
 800c434:	0038      	movs	r0, r7
 800c436:	9904      	ldr	r1, [sp, #16]
 800c438:	f001 f9ea 	bl	800d810 <__pow5mult>
 800c43c:	9004      	str	r0, [sp, #16]
 800c43e:	2101      	movs	r1, #1
 800c440:	0038      	movs	r0, r7
 800c442:	f001 f91f 	bl	800d684 <__i2b>
 800c446:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c448:	0006      	movs	r6, r0
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	dd37      	ble.n	800c4be <_dtoa_r+0x8ae>
 800c44e:	001a      	movs	r2, r3
 800c450:	0001      	movs	r1, r0
 800c452:	0038      	movs	r0, r7
 800c454:	f001 f9dc 	bl	800d810 <__pow5mult>
 800c458:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c45a:	0006      	movs	r6, r0
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	dd33      	ble.n	800c4c8 <_dtoa_r+0x8b8>
 800c460:	2300      	movs	r3, #0
 800c462:	9307      	str	r3, [sp, #28]
 800c464:	6933      	ldr	r3, [r6, #16]
 800c466:	3303      	adds	r3, #3
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	18f3      	adds	r3, r6, r3
 800c46c:	6858      	ldr	r0, [r3, #4]
 800c46e:	f001 f8c1 	bl	800d5f4 <__hi0bits>
 800c472:	2320      	movs	r3, #32
 800c474:	1a18      	subs	r0, r3, r0
 800c476:	e03f      	b.n	800c4f8 <_dtoa_r+0x8e8>
 800c478:	2336      	movs	r3, #54	; 0x36
 800c47a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c47c:	1a9b      	subs	r3, r3, r2
 800c47e:	e79d      	b.n	800c3bc <_dtoa_r+0x7ac>
 800c480:	9b06      	ldr	r3, [sp, #24]
 800c482:	1e5e      	subs	r6, r3, #1
 800c484:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c486:	42b3      	cmp	r3, r6
 800c488:	db08      	blt.n	800c49c <_dtoa_r+0x88c>
 800c48a:	1b9e      	subs	r6, r3, r6
 800c48c:	9b06      	ldr	r3, [sp, #24]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	da0c      	bge.n	800c4ac <_dtoa_r+0x89c>
 800c492:	9b08      	ldr	r3, [sp, #32]
 800c494:	9a06      	ldr	r2, [sp, #24]
 800c496:	1a9c      	subs	r4, r3, r2
 800c498:	2300      	movs	r3, #0
 800c49a:	e791      	b.n	800c3c0 <_dtoa_r+0x7b0>
 800c49c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c49e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c4a0:	1af3      	subs	r3, r6, r3
 800c4a2:	18d3      	adds	r3, r2, r3
 800c4a4:	960e      	str	r6, [sp, #56]	; 0x38
 800c4a6:	9314      	str	r3, [sp, #80]	; 0x50
 800c4a8:	2600      	movs	r6, #0
 800c4aa:	e7ef      	b.n	800c48c <_dtoa_r+0x87c>
 800c4ac:	9c08      	ldr	r4, [sp, #32]
 800c4ae:	9b06      	ldr	r3, [sp, #24]
 800c4b0:	e786      	b.n	800c3c0 <_dtoa_r+0x7b0>
 800c4b2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800c4b4:	9c08      	ldr	r4, [sp, #32]
 800c4b6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c4b8:	e78d      	b.n	800c3d6 <_dtoa_r+0x7c6>
 800c4ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c4bc:	e7ba      	b.n	800c434 <_dtoa_r+0x824>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	9307      	str	r3, [sp, #28]
 800c4c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	dc13      	bgt.n	800c4f0 <_dtoa_r+0x8e0>
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	9307      	str	r3, [sp, #28]
 800c4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d10e      	bne.n	800c4f0 <_dtoa_r+0x8e0>
 800c4d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4d4:	031b      	lsls	r3, r3, #12
 800c4d6:	d10b      	bne.n	800c4f0 <_dtoa_r+0x8e0>
 800c4d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c4da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c4dc:	4213      	tst	r3, r2
 800c4de:	d007      	beq.n	800c4f0 <_dtoa_r+0x8e0>
 800c4e0:	9b08      	ldr	r3, [sp, #32]
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	9308      	str	r3, [sp, #32]
 800c4e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	930d      	str	r3, [sp, #52]	; 0x34
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	9307      	str	r3, [sp, #28]
 800c4f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4f2:	2001      	movs	r0, #1
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1b5      	bne.n	800c464 <_dtoa_r+0x854>
 800c4f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c4fa:	221f      	movs	r2, #31
 800c4fc:	1818      	adds	r0, r3, r0
 800c4fe:	0003      	movs	r3, r0
 800c500:	4013      	ands	r3, r2
 800c502:	4210      	tst	r0, r2
 800c504:	d046      	beq.n	800c594 <_dtoa_r+0x984>
 800c506:	3201      	adds	r2, #1
 800c508:	1ad2      	subs	r2, r2, r3
 800c50a:	2a04      	cmp	r2, #4
 800c50c:	dd3f      	ble.n	800c58e <_dtoa_r+0x97e>
 800c50e:	221c      	movs	r2, #28
 800c510:	1ad3      	subs	r3, r2, r3
 800c512:	9a08      	ldr	r2, [sp, #32]
 800c514:	18e4      	adds	r4, r4, r3
 800c516:	18d2      	adds	r2, r2, r3
 800c518:	9208      	str	r2, [sp, #32]
 800c51a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c51c:	18d3      	adds	r3, r2, r3
 800c51e:	930d      	str	r3, [sp, #52]	; 0x34
 800c520:	9b08      	ldr	r3, [sp, #32]
 800c522:	2b00      	cmp	r3, #0
 800c524:	dd05      	ble.n	800c532 <_dtoa_r+0x922>
 800c526:	001a      	movs	r2, r3
 800c528:	0038      	movs	r0, r7
 800c52a:	9904      	ldr	r1, [sp, #16]
 800c52c:	f001 f9cc 	bl	800d8c8 <__lshift>
 800c530:	9004      	str	r0, [sp, #16]
 800c532:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c534:	2b00      	cmp	r3, #0
 800c536:	dd05      	ble.n	800c544 <_dtoa_r+0x934>
 800c538:	0031      	movs	r1, r6
 800c53a:	001a      	movs	r2, r3
 800c53c:	0038      	movs	r0, r7
 800c53e:	f001 f9c3 	bl	800d8c8 <__lshift>
 800c542:	0006      	movs	r6, r0
 800c544:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c546:	2b00      	cmp	r3, #0
 800c548:	d026      	beq.n	800c598 <_dtoa_r+0x988>
 800c54a:	0031      	movs	r1, r6
 800c54c:	9804      	ldr	r0, [sp, #16]
 800c54e:	f001 fa2b 	bl	800d9a8 <__mcmp>
 800c552:	2800      	cmp	r0, #0
 800c554:	da20      	bge.n	800c598 <_dtoa_r+0x988>
 800c556:	9b02      	ldr	r3, [sp, #8]
 800c558:	220a      	movs	r2, #10
 800c55a:	3b01      	subs	r3, #1
 800c55c:	9302      	str	r3, [sp, #8]
 800c55e:	0038      	movs	r0, r7
 800c560:	2300      	movs	r3, #0
 800c562:	9904      	ldr	r1, [sp, #16]
 800c564:	f000 ffb6 	bl	800d4d4 <__multadd>
 800c568:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c56a:	9004      	str	r0, [sp, #16]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d100      	bne.n	800c572 <_dtoa_r+0x962>
 800c570:	e160      	b.n	800c834 <_dtoa_r+0xc24>
 800c572:	2300      	movs	r3, #0
 800c574:	0029      	movs	r1, r5
 800c576:	220a      	movs	r2, #10
 800c578:	0038      	movs	r0, r7
 800c57a:	f000 ffab 	bl	800d4d4 <__multadd>
 800c57e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c580:	0005      	movs	r5, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	dc47      	bgt.n	800c616 <_dtoa_r+0xa06>
 800c586:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c588:	2b02      	cmp	r3, #2
 800c58a:	dc0d      	bgt.n	800c5a8 <_dtoa_r+0x998>
 800c58c:	e043      	b.n	800c616 <_dtoa_r+0xa06>
 800c58e:	2a04      	cmp	r2, #4
 800c590:	d0c6      	beq.n	800c520 <_dtoa_r+0x910>
 800c592:	0013      	movs	r3, r2
 800c594:	331c      	adds	r3, #28
 800c596:	e7bc      	b.n	800c512 <_dtoa_r+0x902>
 800c598:	9b06      	ldr	r3, [sp, #24]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	dc35      	bgt.n	800c60a <_dtoa_r+0x9fa>
 800c59e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	dd32      	ble.n	800c60a <_dtoa_r+0x9fa>
 800c5a4:	9b06      	ldr	r3, [sp, #24]
 800c5a6:	930c      	str	r3, [sp, #48]	; 0x30
 800c5a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10c      	bne.n	800c5c8 <_dtoa_r+0x9b8>
 800c5ae:	0031      	movs	r1, r6
 800c5b0:	2205      	movs	r2, #5
 800c5b2:	0038      	movs	r0, r7
 800c5b4:	f000 ff8e 	bl	800d4d4 <__multadd>
 800c5b8:	0006      	movs	r6, r0
 800c5ba:	0001      	movs	r1, r0
 800c5bc:	9804      	ldr	r0, [sp, #16]
 800c5be:	f001 f9f3 	bl	800d9a8 <__mcmp>
 800c5c2:	2800      	cmp	r0, #0
 800c5c4:	dd00      	ble.n	800c5c8 <_dtoa_r+0x9b8>
 800c5c6:	e59f      	b.n	800c108 <_dtoa_r+0x4f8>
 800c5c8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c5ca:	43db      	mvns	r3, r3
 800c5cc:	9302      	str	r3, [sp, #8]
 800c5ce:	9b05      	ldr	r3, [sp, #20]
 800c5d0:	9307      	str	r3, [sp, #28]
 800c5d2:	2400      	movs	r4, #0
 800c5d4:	0031      	movs	r1, r6
 800c5d6:	0038      	movs	r0, r7
 800c5d8:	f000 ff58 	bl	800d48c <_Bfree>
 800c5dc:	2d00      	cmp	r5, #0
 800c5de:	d100      	bne.n	800c5e2 <_dtoa_r+0x9d2>
 800c5e0:	e6b0      	b.n	800c344 <_dtoa_r+0x734>
 800c5e2:	2c00      	cmp	r4, #0
 800c5e4:	d005      	beq.n	800c5f2 <_dtoa_r+0x9e2>
 800c5e6:	42ac      	cmp	r4, r5
 800c5e8:	d003      	beq.n	800c5f2 <_dtoa_r+0x9e2>
 800c5ea:	0021      	movs	r1, r4
 800c5ec:	0038      	movs	r0, r7
 800c5ee:	f000 ff4d 	bl	800d48c <_Bfree>
 800c5f2:	0029      	movs	r1, r5
 800c5f4:	0038      	movs	r0, r7
 800c5f6:	f000 ff49 	bl	800d48c <_Bfree>
 800c5fa:	e6a3      	b.n	800c344 <_dtoa_r+0x734>
 800c5fc:	2600      	movs	r6, #0
 800c5fe:	0035      	movs	r5, r6
 800c600:	e7e2      	b.n	800c5c8 <_dtoa_r+0x9b8>
 800c602:	9602      	str	r6, [sp, #8]
 800c604:	9e07      	ldr	r6, [sp, #28]
 800c606:	0035      	movs	r5, r6
 800c608:	e57e      	b.n	800c108 <_dtoa_r+0x4f8>
 800c60a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d100      	bne.n	800c612 <_dtoa_r+0xa02>
 800c610:	e0c8      	b.n	800c7a4 <_dtoa_r+0xb94>
 800c612:	9b06      	ldr	r3, [sp, #24]
 800c614:	930c      	str	r3, [sp, #48]	; 0x30
 800c616:	2c00      	cmp	r4, #0
 800c618:	dd05      	ble.n	800c626 <_dtoa_r+0xa16>
 800c61a:	0029      	movs	r1, r5
 800c61c:	0022      	movs	r2, r4
 800c61e:	0038      	movs	r0, r7
 800c620:	f001 f952 	bl	800d8c8 <__lshift>
 800c624:	0005      	movs	r5, r0
 800c626:	9b07      	ldr	r3, [sp, #28]
 800c628:	0028      	movs	r0, r5
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d01f      	beq.n	800c66e <_dtoa_r+0xa5e>
 800c62e:	0038      	movs	r0, r7
 800c630:	6869      	ldr	r1, [r5, #4]
 800c632:	f000 fee7 	bl	800d404 <_Balloc>
 800c636:	1e04      	subs	r4, r0, #0
 800c638:	d10c      	bne.n	800c654 <_dtoa_r+0xa44>
 800c63a:	0002      	movs	r2, r0
 800c63c:	4b03      	ldr	r3, [pc, #12]	; (800c64c <_dtoa_r+0xa3c>)
 800c63e:	4904      	ldr	r1, [pc, #16]	; (800c650 <_dtoa_r+0xa40>)
 800c640:	f7ff fafb 	bl	800bc3a <_dtoa_r+0x2a>
 800c644:	40240000 	.word	0x40240000
 800c648:	00000433 	.word	0x00000433
 800c64c:	08010d7b 	.word	0x08010d7b
 800c650:	000002ea 	.word	0x000002ea
 800c654:	0029      	movs	r1, r5
 800c656:	692b      	ldr	r3, [r5, #16]
 800c658:	310c      	adds	r1, #12
 800c65a:	1c9a      	adds	r2, r3, #2
 800c65c:	0092      	lsls	r2, r2, #2
 800c65e:	300c      	adds	r0, #12
 800c660:	f7fd fd36 	bl	800a0d0 <memcpy>
 800c664:	2201      	movs	r2, #1
 800c666:	0021      	movs	r1, r4
 800c668:	0038      	movs	r0, r7
 800c66a:	f001 f92d 	bl	800d8c8 <__lshift>
 800c66e:	002c      	movs	r4, r5
 800c670:	0005      	movs	r5, r0
 800c672:	9b05      	ldr	r3, [sp, #20]
 800c674:	9308      	str	r3, [sp, #32]
 800c676:	0031      	movs	r1, r6
 800c678:	9804      	ldr	r0, [sp, #16]
 800c67a:	f7ff fa3d 	bl	800baf8 <quorem>
 800c67e:	0003      	movs	r3, r0
 800c680:	0021      	movs	r1, r4
 800c682:	3330      	adds	r3, #48	; 0x30
 800c684:	900e      	str	r0, [sp, #56]	; 0x38
 800c686:	9804      	ldr	r0, [sp, #16]
 800c688:	9306      	str	r3, [sp, #24]
 800c68a:	f001 f98d 	bl	800d9a8 <__mcmp>
 800c68e:	002a      	movs	r2, r5
 800c690:	900f      	str	r0, [sp, #60]	; 0x3c
 800c692:	0031      	movs	r1, r6
 800c694:	0038      	movs	r0, r7
 800c696:	f001 f9a3 	bl	800d9e0 <__mdiff>
 800c69a:	68c3      	ldr	r3, [r0, #12]
 800c69c:	9007      	str	r0, [sp, #28]
 800c69e:	9310      	str	r3, [sp, #64]	; 0x40
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	930d      	str	r3, [sp, #52]	; 0x34
 800c6a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d104      	bne.n	800c6b4 <_dtoa_r+0xaa4>
 800c6aa:	0001      	movs	r1, r0
 800c6ac:	9804      	ldr	r0, [sp, #16]
 800c6ae:	f001 f97b 	bl	800d9a8 <__mcmp>
 800c6b2:	900d      	str	r0, [sp, #52]	; 0x34
 800c6b4:	0038      	movs	r0, r7
 800c6b6:	9907      	ldr	r1, [sp, #28]
 800c6b8:	f000 fee8 	bl	800d48c <_Bfree>
 800c6bc:	2301      	movs	r3, #1
 800c6be:	980a      	ldr	r0, [sp, #40]	; 0x28
 800c6c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c6c2:	4018      	ands	r0, r3
 800c6c4:	9b08      	ldr	r3, [sp, #32]
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	9307      	str	r3, [sp, #28]
 800c6ca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	4303      	orrs	r3, r0
 800c6d0:	d10c      	bne.n	800c6ec <_dtoa_r+0xadc>
 800c6d2:	9b06      	ldr	r3, [sp, #24]
 800c6d4:	2b39      	cmp	r3, #57	; 0x39
 800c6d6:	d025      	beq.n	800c724 <_dtoa_r+0xb14>
 800c6d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	dd02      	ble.n	800c6e4 <_dtoa_r+0xad4>
 800c6de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c6e0:	3331      	adds	r3, #49	; 0x31
 800c6e2:	9306      	str	r3, [sp, #24]
 800c6e4:	9b08      	ldr	r3, [sp, #32]
 800c6e6:	9a06      	ldr	r2, [sp, #24]
 800c6e8:	701a      	strb	r2, [r3, #0]
 800c6ea:	e773      	b.n	800c5d4 <_dtoa_r+0x9c4>
 800c6ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	db03      	blt.n	800c6fa <_dtoa_r+0xaea>
 800c6f2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	4303      	orrs	r3, r0
 800c6f8:	d11f      	bne.n	800c73a <_dtoa_r+0xb2a>
 800c6fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	ddf1      	ble.n	800c6e4 <_dtoa_r+0xad4>
 800c700:	9904      	ldr	r1, [sp, #16]
 800c702:	2201      	movs	r2, #1
 800c704:	0038      	movs	r0, r7
 800c706:	f001 f8df 	bl	800d8c8 <__lshift>
 800c70a:	0031      	movs	r1, r6
 800c70c:	9004      	str	r0, [sp, #16]
 800c70e:	f001 f94b 	bl	800d9a8 <__mcmp>
 800c712:	2800      	cmp	r0, #0
 800c714:	dc03      	bgt.n	800c71e <_dtoa_r+0xb0e>
 800c716:	d1e5      	bne.n	800c6e4 <_dtoa_r+0xad4>
 800c718:	9b06      	ldr	r3, [sp, #24]
 800c71a:	07db      	lsls	r3, r3, #31
 800c71c:	d5e2      	bpl.n	800c6e4 <_dtoa_r+0xad4>
 800c71e:	9b06      	ldr	r3, [sp, #24]
 800c720:	2b39      	cmp	r3, #57	; 0x39
 800c722:	d1dc      	bne.n	800c6de <_dtoa_r+0xace>
 800c724:	2339      	movs	r3, #57	; 0x39
 800c726:	9a08      	ldr	r2, [sp, #32]
 800c728:	7013      	strb	r3, [r2, #0]
 800c72a:	9b07      	ldr	r3, [sp, #28]
 800c72c:	9307      	str	r3, [sp, #28]
 800c72e:	3b01      	subs	r3, #1
 800c730:	781a      	ldrb	r2, [r3, #0]
 800c732:	2a39      	cmp	r2, #57	; 0x39
 800c734:	d06c      	beq.n	800c810 <_dtoa_r+0xc00>
 800c736:	3201      	adds	r2, #1
 800c738:	e7d6      	b.n	800c6e8 <_dtoa_r+0xad8>
 800c73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	dd07      	ble.n	800c750 <_dtoa_r+0xb40>
 800c740:	9b06      	ldr	r3, [sp, #24]
 800c742:	2b39      	cmp	r3, #57	; 0x39
 800c744:	d0ee      	beq.n	800c724 <_dtoa_r+0xb14>
 800c746:	9b06      	ldr	r3, [sp, #24]
 800c748:	9a08      	ldr	r2, [sp, #32]
 800c74a:	3301      	adds	r3, #1
 800c74c:	7013      	strb	r3, [r2, #0]
 800c74e:	e741      	b.n	800c5d4 <_dtoa_r+0x9c4>
 800c750:	9b08      	ldr	r3, [sp, #32]
 800c752:	9a06      	ldr	r2, [sp, #24]
 800c754:	701a      	strb	r2, [r3, #0]
 800c756:	2301      	movs	r3, #1
 800c758:	9a05      	ldr	r2, [sp, #20]
 800c75a:	1a9b      	subs	r3, r3, r2
 800c75c:	9a08      	ldr	r2, [sp, #32]
 800c75e:	189b      	adds	r3, r3, r2
 800c760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c762:	429a      	cmp	r2, r3
 800c764:	d03e      	beq.n	800c7e4 <_dtoa_r+0xbd4>
 800c766:	2300      	movs	r3, #0
 800c768:	220a      	movs	r2, #10
 800c76a:	9904      	ldr	r1, [sp, #16]
 800c76c:	0038      	movs	r0, r7
 800c76e:	f000 feb1 	bl	800d4d4 <__multadd>
 800c772:	2300      	movs	r3, #0
 800c774:	9004      	str	r0, [sp, #16]
 800c776:	220a      	movs	r2, #10
 800c778:	0021      	movs	r1, r4
 800c77a:	0038      	movs	r0, r7
 800c77c:	42ac      	cmp	r4, r5
 800c77e:	d106      	bne.n	800c78e <_dtoa_r+0xb7e>
 800c780:	f000 fea8 	bl	800d4d4 <__multadd>
 800c784:	0004      	movs	r4, r0
 800c786:	0005      	movs	r5, r0
 800c788:	9b07      	ldr	r3, [sp, #28]
 800c78a:	9308      	str	r3, [sp, #32]
 800c78c:	e773      	b.n	800c676 <_dtoa_r+0xa66>
 800c78e:	f000 fea1 	bl	800d4d4 <__multadd>
 800c792:	0029      	movs	r1, r5
 800c794:	0004      	movs	r4, r0
 800c796:	2300      	movs	r3, #0
 800c798:	220a      	movs	r2, #10
 800c79a:	0038      	movs	r0, r7
 800c79c:	f000 fe9a 	bl	800d4d4 <__multadd>
 800c7a0:	0005      	movs	r5, r0
 800c7a2:	e7f1      	b.n	800c788 <_dtoa_r+0xb78>
 800c7a4:	9b06      	ldr	r3, [sp, #24]
 800c7a6:	930c      	str	r3, [sp, #48]	; 0x30
 800c7a8:	2400      	movs	r4, #0
 800c7aa:	0031      	movs	r1, r6
 800c7ac:	9804      	ldr	r0, [sp, #16]
 800c7ae:	f7ff f9a3 	bl	800baf8 <quorem>
 800c7b2:	9b05      	ldr	r3, [sp, #20]
 800c7b4:	3030      	adds	r0, #48	; 0x30
 800c7b6:	5518      	strb	r0, [r3, r4]
 800c7b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7ba:	3401      	adds	r4, #1
 800c7bc:	9006      	str	r0, [sp, #24]
 800c7be:	42a3      	cmp	r3, r4
 800c7c0:	dd07      	ble.n	800c7d2 <_dtoa_r+0xbc2>
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	220a      	movs	r2, #10
 800c7c6:	0038      	movs	r0, r7
 800c7c8:	9904      	ldr	r1, [sp, #16]
 800c7ca:	f000 fe83 	bl	800d4d4 <__multadd>
 800c7ce:	9004      	str	r0, [sp, #16]
 800c7d0:	e7eb      	b.n	800c7aa <_dtoa_r+0xb9a>
 800c7d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c7d4:	2001      	movs	r0, #1
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	dd00      	ble.n	800c7dc <_dtoa_r+0xbcc>
 800c7da:	0018      	movs	r0, r3
 800c7dc:	2400      	movs	r4, #0
 800c7de:	9b05      	ldr	r3, [sp, #20]
 800c7e0:	181b      	adds	r3, r3, r0
 800c7e2:	9307      	str	r3, [sp, #28]
 800c7e4:	9904      	ldr	r1, [sp, #16]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	0038      	movs	r0, r7
 800c7ea:	f001 f86d 	bl	800d8c8 <__lshift>
 800c7ee:	0031      	movs	r1, r6
 800c7f0:	9004      	str	r0, [sp, #16]
 800c7f2:	f001 f8d9 	bl	800d9a8 <__mcmp>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	dc97      	bgt.n	800c72a <_dtoa_r+0xb1a>
 800c7fa:	d102      	bne.n	800c802 <_dtoa_r+0xbf2>
 800c7fc:	9b06      	ldr	r3, [sp, #24]
 800c7fe:	07db      	lsls	r3, r3, #31
 800c800:	d493      	bmi.n	800c72a <_dtoa_r+0xb1a>
 800c802:	9b07      	ldr	r3, [sp, #28]
 800c804:	9307      	str	r3, [sp, #28]
 800c806:	3b01      	subs	r3, #1
 800c808:	781a      	ldrb	r2, [r3, #0]
 800c80a:	2a30      	cmp	r2, #48	; 0x30
 800c80c:	d0fa      	beq.n	800c804 <_dtoa_r+0xbf4>
 800c80e:	e6e1      	b.n	800c5d4 <_dtoa_r+0x9c4>
 800c810:	9a05      	ldr	r2, [sp, #20]
 800c812:	429a      	cmp	r2, r3
 800c814:	d18a      	bne.n	800c72c <_dtoa_r+0xb1c>
 800c816:	9b02      	ldr	r3, [sp, #8]
 800c818:	3301      	adds	r3, #1
 800c81a:	9302      	str	r3, [sp, #8]
 800c81c:	2331      	movs	r3, #49	; 0x31
 800c81e:	e795      	b.n	800c74c <_dtoa_r+0xb3c>
 800c820:	4b08      	ldr	r3, [pc, #32]	; (800c844 <_dtoa_r+0xc34>)
 800c822:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800c824:	9305      	str	r3, [sp, #20]
 800c826:	4b08      	ldr	r3, [pc, #32]	; (800c848 <_dtoa_r+0xc38>)
 800c828:	2a00      	cmp	r2, #0
 800c82a:	d001      	beq.n	800c830 <_dtoa_r+0xc20>
 800c82c:	f7ff fa3b 	bl	800bca6 <_dtoa_r+0x96>
 800c830:	f7ff fa3b 	bl	800bcaa <_dtoa_r+0x9a>
 800c834:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c836:	2b00      	cmp	r3, #0
 800c838:	dcb6      	bgt.n	800c7a8 <_dtoa_r+0xb98>
 800c83a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c83c:	2b02      	cmp	r3, #2
 800c83e:	dd00      	ble.n	800c842 <_dtoa_r+0xc32>
 800c840:	e6b2      	b.n	800c5a8 <_dtoa_r+0x998>
 800c842:	e7b1      	b.n	800c7a8 <_dtoa_r+0xb98>
 800c844:	08010cf8 	.word	0x08010cf8
 800c848:	08010d00 	.word	0x08010d00

0800c84c <__sflush_r>:
 800c84c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c84e:	898b      	ldrh	r3, [r1, #12]
 800c850:	0005      	movs	r5, r0
 800c852:	000c      	movs	r4, r1
 800c854:	071a      	lsls	r2, r3, #28
 800c856:	d45f      	bmi.n	800c918 <__sflush_r+0xcc>
 800c858:	684a      	ldr	r2, [r1, #4]
 800c85a:	2a00      	cmp	r2, #0
 800c85c:	dc04      	bgt.n	800c868 <__sflush_r+0x1c>
 800c85e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c860:	2a00      	cmp	r2, #0
 800c862:	dc01      	bgt.n	800c868 <__sflush_r+0x1c>
 800c864:	2000      	movs	r0, #0
 800c866:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c868:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c86a:	2f00      	cmp	r7, #0
 800c86c:	d0fa      	beq.n	800c864 <__sflush_r+0x18>
 800c86e:	2200      	movs	r2, #0
 800c870:	2180      	movs	r1, #128	; 0x80
 800c872:	682e      	ldr	r6, [r5, #0]
 800c874:	602a      	str	r2, [r5, #0]
 800c876:	001a      	movs	r2, r3
 800c878:	0149      	lsls	r1, r1, #5
 800c87a:	400a      	ands	r2, r1
 800c87c:	420b      	tst	r3, r1
 800c87e:	d034      	beq.n	800c8ea <__sflush_r+0x9e>
 800c880:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c882:	89a3      	ldrh	r3, [r4, #12]
 800c884:	075b      	lsls	r3, r3, #29
 800c886:	d506      	bpl.n	800c896 <__sflush_r+0x4a>
 800c888:	6863      	ldr	r3, [r4, #4]
 800c88a:	1ac0      	subs	r0, r0, r3
 800c88c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <__sflush_r+0x4a>
 800c892:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c894:	1ac0      	subs	r0, r0, r3
 800c896:	0002      	movs	r2, r0
 800c898:	6a21      	ldr	r1, [r4, #32]
 800c89a:	2300      	movs	r3, #0
 800c89c:	0028      	movs	r0, r5
 800c89e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c8a0:	47b8      	blx	r7
 800c8a2:	89a1      	ldrh	r1, [r4, #12]
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	d106      	bne.n	800c8b6 <__sflush_r+0x6a>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	2b1d      	cmp	r3, #29
 800c8ac:	d831      	bhi.n	800c912 <__sflush_r+0xc6>
 800c8ae:	4a2c      	ldr	r2, [pc, #176]	; (800c960 <__sflush_r+0x114>)
 800c8b0:	40da      	lsrs	r2, r3
 800c8b2:	07d3      	lsls	r3, r2, #31
 800c8b4:	d52d      	bpl.n	800c912 <__sflush_r+0xc6>
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	6063      	str	r3, [r4, #4]
 800c8ba:	6923      	ldr	r3, [r4, #16]
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	04cb      	lsls	r3, r1, #19
 800c8c0:	d505      	bpl.n	800c8ce <__sflush_r+0x82>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	d102      	bne.n	800c8cc <__sflush_r+0x80>
 800c8c6:	682b      	ldr	r3, [r5, #0]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d100      	bne.n	800c8ce <__sflush_r+0x82>
 800c8cc:	6560      	str	r0, [r4, #84]	; 0x54
 800c8ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8d0:	602e      	str	r6, [r5, #0]
 800c8d2:	2900      	cmp	r1, #0
 800c8d4:	d0c6      	beq.n	800c864 <__sflush_r+0x18>
 800c8d6:	0023      	movs	r3, r4
 800c8d8:	3344      	adds	r3, #68	; 0x44
 800c8da:	4299      	cmp	r1, r3
 800c8dc:	d002      	beq.n	800c8e4 <__sflush_r+0x98>
 800c8de:	0028      	movs	r0, r5
 800c8e0:	f001 fa68 	bl	800ddb4 <_free_r>
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	6360      	str	r0, [r4, #52]	; 0x34
 800c8e8:	e7bd      	b.n	800c866 <__sflush_r+0x1a>
 800c8ea:	2301      	movs	r3, #1
 800c8ec:	0028      	movs	r0, r5
 800c8ee:	6a21      	ldr	r1, [r4, #32]
 800c8f0:	47b8      	blx	r7
 800c8f2:	1c43      	adds	r3, r0, #1
 800c8f4:	d1c5      	bne.n	800c882 <__sflush_r+0x36>
 800c8f6:	682b      	ldr	r3, [r5, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d0c2      	beq.n	800c882 <__sflush_r+0x36>
 800c8fc:	2b1d      	cmp	r3, #29
 800c8fe:	d001      	beq.n	800c904 <__sflush_r+0xb8>
 800c900:	2b16      	cmp	r3, #22
 800c902:	d101      	bne.n	800c908 <__sflush_r+0xbc>
 800c904:	602e      	str	r6, [r5, #0]
 800c906:	e7ad      	b.n	800c864 <__sflush_r+0x18>
 800c908:	2340      	movs	r3, #64	; 0x40
 800c90a:	89a2      	ldrh	r2, [r4, #12]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	81a3      	strh	r3, [r4, #12]
 800c910:	e7a9      	b.n	800c866 <__sflush_r+0x1a>
 800c912:	2340      	movs	r3, #64	; 0x40
 800c914:	430b      	orrs	r3, r1
 800c916:	e7fa      	b.n	800c90e <__sflush_r+0xc2>
 800c918:	690f      	ldr	r7, [r1, #16]
 800c91a:	2f00      	cmp	r7, #0
 800c91c:	d0a2      	beq.n	800c864 <__sflush_r+0x18>
 800c91e:	680a      	ldr	r2, [r1, #0]
 800c920:	600f      	str	r7, [r1, #0]
 800c922:	1bd2      	subs	r2, r2, r7
 800c924:	9201      	str	r2, [sp, #4]
 800c926:	2200      	movs	r2, #0
 800c928:	079b      	lsls	r3, r3, #30
 800c92a:	d100      	bne.n	800c92e <__sflush_r+0xe2>
 800c92c:	694a      	ldr	r2, [r1, #20]
 800c92e:	60a2      	str	r2, [r4, #8]
 800c930:	9b01      	ldr	r3, [sp, #4]
 800c932:	2b00      	cmp	r3, #0
 800c934:	dc00      	bgt.n	800c938 <__sflush_r+0xec>
 800c936:	e795      	b.n	800c864 <__sflush_r+0x18>
 800c938:	003a      	movs	r2, r7
 800c93a:	0028      	movs	r0, r5
 800c93c:	9b01      	ldr	r3, [sp, #4]
 800c93e:	6a21      	ldr	r1, [r4, #32]
 800c940:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c942:	47b0      	blx	r6
 800c944:	2800      	cmp	r0, #0
 800c946:	dc06      	bgt.n	800c956 <__sflush_r+0x10a>
 800c948:	2340      	movs	r3, #64	; 0x40
 800c94a:	2001      	movs	r0, #1
 800c94c:	89a2      	ldrh	r2, [r4, #12]
 800c94e:	4240      	negs	r0, r0
 800c950:	4313      	orrs	r3, r2
 800c952:	81a3      	strh	r3, [r4, #12]
 800c954:	e787      	b.n	800c866 <__sflush_r+0x1a>
 800c956:	9b01      	ldr	r3, [sp, #4]
 800c958:	183f      	adds	r7, r7, r0
 800c95a:	1a1b      	subs	r3, r3, r0
 800c95c:	9301      	str	r3, [sp, #4]
 800c95e:	e7e7      	b.n	800c930 <__sflush_r+0xe4>
 800c960:	20400001 	.word	0x20400001

0800c964 <_fflush_r>:
 800c964:	690b      	ldr	r3, [r1, #16]
 800c966:	b570      	push	{r4, r5, r6, lr}
 800c968:	0005      	movs	r5, r0
 800c96a:	000c      	movs	r4, r1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d102      	bne.n	800c976 <_fflush_r+0x12>
 800c970:	2500      	movs	r5, #0
 800c972:	0028      	movs	r0, r5
 800c974:	bd70      	pop	{r4, r5, r6, pc}
 800c976:	2800      	cmp	r0, #0
 800c978:	d004      	beq.n	800c984 <_fflush_r+0x20>
 800c97a:	6983      	ldr	r3, [r0, #24]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d101      	bne.n	800c984 <_fflush_r+0x20>
 800c980:	f000 f892 	bl	800caa8 <__sinit>
 800c984:	4b14      	ldr	r3, [pc, #80]	; (800c9d8 <_fflush_r+0x74>)
 800c986:	429c      	cmp	r4, r3
 800c988:	d11b      	bne.n	800c9c2 <_fflush_r+0x5e>
 800c98a:	686c      	ldr	r4, [r5, #4]
 800c98c:	220c      	movs	r2, #12
 800c98e:	5ea3      	ldrsh	r3, [r4, r2]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d0ed      	beq.n	800c970 <_fflush_r+0xc>
 800c994:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c996:	07d2      	lsls	r2, r2, #31
 800c998:	d404      	bmi.n	800c9a4 <_fflush_r+0x40>
 800c99a:	059b      	lsls	r3, r3, #22
 800c99c:	d402      	bmi.n	800c9a4 <_fflush_r+0x40>
 800c99e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9a0:	f000 fc99 	bl	800d2d6 <__retarget_lock_acquire_recursive>
 800c9a4:	0028      	movs	r0, r5
 800c9a6:	0021      	movs	r1, r4
 800c9a8:	f7ff ff50 	bl	800c84c <__sflush_r>
 800c9ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9ae:	0005      	movs	r5, r0
 800c9b0:	07db      	lsls	r3, r3, #31
 800c9b2:	d4de      	bmi.n	800c972 <_fflush_r+0xe>
 800c9b4:	89a3      	ldrh	r3, [r4, #12]
 800c9b6:	059b      	lsls	r3, r3, #22
 800c9b8:	d4db      	bmi.n	800c972 <_fflush_r+0xe>
 800c9ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9bc:	f000 fc8c 	bl	800d2d8 <__retarget_lock_release_recursive>
 800c9c0:	e7d7      	b.n	800c972 <_fflush_r+0xe>
 800c9c2:	4b06      	ldr	r3, [pc, #24]	; (800c9dc <_fflush_r+0x78>)
 800c9c4:	429c      	cmp	r4, r3
 800c9c6:	d101      	bne.n	800c9cc <_fflush_r+0x68>
 800c9c8:	68ac      	ldr	r4, [r5, #8]
 800c9ca:	e7df      	b.n	800c98c <_fflush_r+0x28>
 800c9cc:	4b04      	ldr	r3, [pc, #16]	; (800c9e0 <_fflush_r+0x7c>)
 800c9ce:	429c      	cmp	r4, r3
 800c9d0:	d1dc      	bne.n	800c98c <_fflush_r+0x28>
 800c9d2:	68ec      	ldr	r4, [r5, #12]
 800c9d4:	e7da      	b.n	800c98c <_fflush_r+0x28>
 800c9d6:	46c0      	nop			; (mov r8, r8)
 800c9d8:	08010dac 	.word	0x08010dac
 800c9dc:	08010dcc 	.word	0x08010dcc
 800c9e0:	08010d8c 	.word	0x08010d8c

0800c9e4 <std>:
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	b510      	push	{r4, lr}
 800c9e8:	0004      	movs	r4, r0
 800c9ea:	6003      	str	r3, [r0, #0]
 800c9ec:	6043      	str	r3, [r0, #4]
 800c9ee:	6083      	str	r3, [r0, #8]
 800c9f0:	8181      	strh	r1, [r0, #12]
 800c9f2:	6643      	str	r3, [r0, #100]	; 0x64
 800c9f4:	0019      	movs	r1, r3
 800c9f6:	81c2      	strh	r2, [r0, #14]
 800c9f8:	6103      	str	r3, [r0, #16]
 800c9fa:	6143      	str	r3, [r0, #20]
 800c9fc:	6183      	str	r3, [r0, #24]
 800c9fe:	2208      	movs	r2, #8
 800ca00:	305c      	adds	r0, #92	; 0x5c
 800ca02:	f7fd fb6e 	bl	800a0e2 <memset>
 800ca06:	4b05      	ldr	r3, [pc, #20]	; (800ca1c <std+0x38>)
 800ca08:	6263      	str	r3, [r4, #36]	; 0x24
 800ca0a:	4b05      	ldr	r3, [pc, #20]	; (800ca20 <std+0x3c>)
 800ca0c:	6224      	str	r4, [r4, #32]
 800ca0e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ca10:	4b04      	ldr	r3, [pc, #16]	; (800ca24 <std+0x40>)
 800ca12:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ca14:	4b04      	ldr	r3, [pc, #16]	; (800ca28 <std+0x44>)
 800ca16:	6323      	str	r3, [r4, #48]	; 0x30
 800ca18:	bd10      	pop	{r4, pc}
 800ca1a:	46c0      	nop			; (mov r8, r8)
 800ca1c:	0800e1f9 	.word	0x0800e1f9
 800ca20:	0800e221 	.word	0x0800e221
 800ca24:	0800e259 	.word	0x0800e259
 800ca28:	0800e285 	.word	0x0800e285

0800ca2c <_cleanup_r>:
 800ca2c:	b510      	push	{r4, lr}
 800ca2e:	4902      	ldr	r1, [pc, #8]	; (800ca38 <_cleanup_r+0xc>)
 800ca30:	f000 f8ba 	bl	800cba8 <_fwalk_reent>
 800ca34:	bd10      	pop	{r4, pc}
 800ca36:	46c0      	nop			; (mov r8, r8)
 800ca38:	0800c965 	.word	0x0800c965

0800ca3c <__sfmoreglue>:
 800ca3c:	b570      	push	{r4, r5, r6, lr}
 800ca3e:	2568      	movs	r5, #104	; 0x68
 800ca40:	1e4a      	subs	r2, r1, #1
 800ca42:	4355      	muls	r5, r2
 800ca44:	000e      	movs	r6, r1
 800ca46:	0029      	movs	r1, r5
 800ca48:	3174      	adds	r1, #116	; 0x74
 800ca4a:	f001 f9fd 	bl	800de48 <_malloc_r>
 800ca4e:	1e04      	subs	r4, r0, #0
 800ca50:	d008      	beq.n	800ca64 <__sfmoreglue+0x28>
 800ca52:	2100      	movs	r1, #0
 800ca54:	002a      	movs	r2, r5
 800ca56:	6001      	str	r1, [r0, #0]
 800ca58:	6046      	str	r6, [r0, #4]
 800ca5a:	300c      	adds	r0, #12
 800ca5c:	60a0      	str	r0, [r4, #8]
 800ca5e:	3268      	adds	r2, #104	; 0x68
 800ca60:	f7fd fb3f 	bl	800a0e2 <memset>
 800ca64:	0020      	movs	r0, r4
 800ca66:	bd70      	pop	{r4, r5, r6, pc}

0800ca68 <__sfp_lock_acquire>:
 800ca68:	b510      	push	{r4, lr}
 800ca6a:	4802      	ldr	r0, [pc, #8]	; (800ca74 <__sfp_lock_acquire+0xc>)
 800ca6c:	f000 fc33 	bl	800d2d6 <__retarget_lock_acquire_recursive>
 800ca70:	bd10      	pop	{r4, pc}
 800ca72:	46c0      	nop			; (mov r8, r8)
 800ca74:	200026f8 	.word	0x200026f8

0800ca78 <__sfp_lock_release>:
 800ca78:	b510      	push	{r4, lr}
 800ca7a:	4802      	ldr	r0, [pc, #8]	; (800ca84 <__sfp_lock_release+0xc>)
 800ca7c:	f000 fc2c 	bl	800d2d8 <__retarget_lock_release_recursive>
 800ca80:	bd10      	pop	{r4, pc}
 800ca82:	46c0      	nop			; (mov r8, r8)
 800ca84:	200026f8 	.word	0x200026f8

0800ca88 <__sinit_lock_acquire>:
 800ca88:	b510      	push	{r4, lr}
 800ca8a:	4802      	ldr	r0, [pc, #8]	; (800ca94 <__sinit_lock_acquire+0xc>)
 800ca8c:	f000 fc23 	bl	800d2d6 <__retarget_lock_acquire_recursive>
 800ca90:	bd10      	pop	{r4, pc}
 800ca92:	46c0      	nop			; (mov r8, r8)
 800ca94:	200026f3 	.word	0x200026f3

0800ca98 <__sinit_lock_release>:
 800ca98:	b510      	push	{r4, lr}
 800ca9a:	4802      	ldr	r0, [pc, #8]	; (800caa4 <__sinit_lock_release+0xc>)
 800ca9c:	f000 fc1c 	bl	800d2d8 <__retarget_lock_release_recursive>
 800caa0:	bd10      	pop	{r4, pc}
 800caa2:	46c0      	nop			; (mov r8, r8)
 800caa4:	200026f3 	.word	0x200026f3

0800caa8 <__sinit>:
 800caa8:	b513      	push	{r0, r1, r4, lr}
 800caaa:	0004      	movs	r4, r0
 800caac:	f7ff ffec 	bl	800ca88 <__sinit_lock_acquire>
 800cab0:	69a3      	ldr	r3, [r4, #24]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d002      	beq.n	800cabc <__sinit+0x14>
 800cab6:	f7ff ffef 	bl	800ca98 <__sinit_lock_release>
 800caba:	bd13      	pop	{r0, r1, r4, pc}
 800cabc:	64a3      	str	r3, [r4, #72]	; 0x48
 800cabe:	64e3      	str	r3, [r4, #76]	; 0x4c
 800cac0:	6523      	str	r3, [r4, #80]	; 0x50
 800cac2:	4b13      	ldr	r3, [pc, #76]	; (800cb10 <__sinit+0x68>)
 800cac4:	4a13      	ldr	r2, [pc, #76]	; (800cb14 <__sinit+0x6c>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	62a2      	str	r2, [r4, #40]	; 0x28
 800caca:	9301      	str	r3, [sp, #4]
 800cacc:	42a3      	cmp	r3, r4
 800cace:	d101      	bne.n	800cad4 <__sinit+0x2c>
 800cad0:	2301      	movs	r3, #1
 800cad2:	61a3      	str	r3, [r4, #24]
 800cad4:	0020      	movs	r0, r4
 800cad6:	f000 f81f 	bl	800cb18 <__sfp>
 800cada:	6060      	str	r0, [r4, #4]
 800cadc:	0020      	movs	r0, r4
 800cade:	f000 f81b 	bl	800cb18 <__sfp>
 800cae2:	60a0      	str	r0, [r4, #8]
 800cae4:	0020      	movs	r0, r4
 800cae6:	f000 f817 	bl	800cb18 <__sfp>
 800caea:	2200      	movs	r2, #0
 800caec:	2104      	movs	r1, #4
 800caee:	60e0      	str	r0, [r4, #12]
 800caf0:	6860      	ldr	r0, [r4, #4]
 800caf2:	f7ff ff77 	bl	800c9e4 <std>
 800caf6:	2201      	movs	r2, #1
 800caf8:	2109      	movs	r1, #9
 800cafa:	68a0      	ldr	r0, [r4, #8]
 800cafc:	f7ff ff72 	bl	800c9e4 <std>
 800cb00:	2202      	movs	r2, #2
 800cb02:	2112      	movs	r1, #18
 800cb04:	68e0      	ldr	r0, [r4, #12]
 800cb06:	f7ff ff6d 	bl	800c9e4 <std>
 800cb0a:	2301      	movs	r3, #1
 800cb0c:	61a3      	str	r3, [r4, #24]
 800cb0e:	e7d2      	b.n	800cab6 <__sinit+0xe>
 800cb10:	08010c6c 	.word	0x08010c6c
 800cb14:	0800ca2d 	.word	0x0800ca2d

0800cb18 <__sfp>:
 800cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb1a:	0007      	movs	r7, r0
 800cb1c:	f7ff ffa4 	bl	800ca68 <__sfp_lock_acquire>
 800cb20:	4b1f      	ldr	r3, [pc, #124]	; (800cba0 <__sfp+0x88>)
 800cb22:	681e      	ldr	r6, [r3, #0]
 800cb24:	69b3      	ldr	r3, [r6, #24]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d102      	bne.n	800cb30 <__sfp+0x18>
 800cb2a:	0030      	movs	r0, r6
 800cb2c:	f7ff ffbc 	bl	800caa8 <__sinit>
 800cb30:	3648      	adds	r6, #72	; 0x48
 800cb32:	68b4      	ldr	r4, [r6, #8]
 800cb34:	6873      	ldr	r3, [r6, #4]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	d504      	bpl.n	800cb44 <__sfp+0x2c>
 800cb3a:	6833      	ldr	r3, [r6, #0]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d022      	beq.n	800cb86 <__sfp+0x6e>
 800cb40:	6836      	ldr	r6, [r6, #0]
 800cb42:	e7f6      	b.n	800cb32 <__sfp+0x1a>
 800cb44:	220c      	movs	r2, #12
 800cb46:	5ea5      	ldrsh	r5, [r4, r2]
 800cb48:	2d00      	cmp	r5, #0
 800cb4a:	d11a      	bne.n	800cb82 <__sfp+0x6a>
 800cb4c:	0020      	movs	r0, r4
 800cb4e:	4b15      	ldr	r3, [pc, #84]	; (800cba4 <__sfp+0x8c>)
 800cb50:	3058      	adds	r0, #88	; 0x58
 800cb52:	60e3      	str	r3, [r4, #12]
 800cb54:	6665      	str	r5, [r4, #100]	; 0x64
 800cb56:	f000 fbbd 	bl	800d2d4 <__retarget_lock_init_recursive>
 800cb5a:	f7ff ff8d 	bl	800ca78 <__sfp_lock_release>
 800cb5e:	0020      	movs	r0, r4
 800cb60:	2208      	movs	r2, #8
 800cb62:	0029      	movs	r1, r5
 800cb64:	6025      	str	r5, [r4, #0]
 800cb66:	60a5      	str	r5, [r4, #8]
 800cb68:	6065      	str	r5, [r4, #4]
 800cb6a:	6125      	str	r5, [r4, #16]
 800cb6c:	6165      	str	r5, [r4, #20]
 800cb6e:	61a5      	str	r5, [r4, #24]
 800cb70:	305c      	adds	r0, #92	; 0x5c
 800cb72:	f7fd fab6 	bl	800a0e2 <memset>
 800cb76:	6365      	str	r5, [r4, #52]	; 0x34
 800cb78:	63a5      	str	r5, [r4, #56]	; 0x38
 800cb7a:	64a5      	str	r5, [r4, #72]	; 0x48
 800cb7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800cb7e:	0020      	movs	r0, r4
 800cb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb82:	3468      	adds	r4, #104	; 0x68
 800cb84:	e7d7      	b.n	800cb36 <__sfp+0x1e>
 800cb86:	2104      	movs	r1, #4
 800cb88:	0038      	movs	r0, r7
 800cb8a:	f7ff ff57 	bl	800ca3c <__sfmoreglue>
 800cb8e:	1e04      	subs	r4, r0, #0
 800cb90:	6030      	str	r0, [r6, #0]
 800cb92:	d1d5      	bne.n	800cb40 <__sfp+0x28>
 800cb94:	f7ff ff70 	bl	800ca78 <__sfp_lock_release>
 800cb98:	230c      	movs	r3, #12
 800cb9a:	603b      	str	r3, [r7, #0]
 800cb9c:	e7ef      	b.n	800cb7e <__sfp+0x66>
 800cb9e:	46c0      	nop			; (mov r8, r8)
 800cba0:	08010c6c 	.word	0x08010c6c
 800cba4:	ffff0001 	.word	0xffff0001

0800cba8 <_fwalk_reent>:
 800cba8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbaa:	0004      	movs	r4, r0
 800cbac:	0006      	movs	r6, r0
 800cbae:	2700      	movs	r7, #0
 800cbb0:	9101      	str	r1, [sp, #4]
 800cbb2:	3448      	adds	r4, #72	; 0x48
 800cbb4:	6863      	ldr	r3, [r4, #4]
 800cbb6:	68a5      	ldr	r5, [r4, #8]
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	9b00      	ldr	r3, [sp, #0]
 800cbbc:	3b01      	subs	r3, #1
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	d504      	bpl.n	800cbcc <_fwalk_reent+0x24>
 800cbc2:	6824      	ldr	r4, [r4, #0]
 800cbc4:	2c00      	cmp	r4, #0
 800cbc6:	d1f5      	bne.n	800cbb4 <_fwalk_reent+0xc>
 800cbc8:	0038      	movs	r0, r7
 800cbca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cbcc:	89ab      	ldrh	r3, [r5, #12]
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d908      	bls.n	800cbe4 <_fwalk_reent+0x3c>
 800cbd2:	220e      	movs	r2, #14
 800cbd4:	5eab      	ldrsh	r3, [r5, r2]
 800cbd6:	3301      	adds	r3, #1
 800cbd8:	d004      	beq.n	800cbe4 <_fwalk_reent+0x3c>
 800cbda:	0029      	movs	r1, r5
 800cbdc:	0030      	movs	r0, r6
 800cbde:	9b01      	ldr	r3, [sp, #4]
 800cbe0:	4798      	blx	r3
 800cbe2:	4307      	orrs	r7, r0
 800cbe4:	3568      	adds	r5, #104	; 0x68
 800cbe6:	e7e8      	b.n	800cbba <_fwalk_reent+0x12>

0800cbe8 <rshift>:
 800cbe8:	0002      	movs	r2, r0
 800cbea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbec:	6907      	ldr	r7, [r0, #16]
 800cbee:	3214      	adds	r2, #20
 800cbf0:	0013      	movs	r3, r2
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	114e      	asrs	r6, r1, #5
 800cbf6:	42b7      	cmp	r7, r6
 800cbf8:	dd31      	ble.n	800cc5e <rshift+0x76>
 800cbfa:	00b3      	lsls	r3, r6, #2
 800cbfc:	18d3      	adds	r3, r2, r3
 800cbfe:	251f      	movs	r5, #31
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	000b      	movs	r3, r1
 800cc04:	00bc      	lsls	r4, r7, #2
 800cc06:	402b      	ands	r3, r5
 800cc08:	1914      	adds	r4, r2, r4
 800cc0a:	9302      	str	r3, [sp, #8]
 800cc0c:	4229      	tst	r1, r5
 800cc0e:	d10c      	bne.n	800cc2a <rshift+0x42>
 800cc10:	0015      	movs	r5, r2
 800cc12:	9901      	ldr	r1, [sp, #4]
 800cc14:	428c      	cmp	r4, r1
 800cc16:	d838      	bhi.n	800cc8a <rshift+0xa2>
 800cc18:	9901      	ldr	r1, [sp, #4]
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	3903      	subs	r1, #3
 800cc1e:	428c      	cmp	r4, r1
 800cc20:	d301      	bcc.n	800cc26 <rshift+0x3e>
 800cc22:	1bbb      	subs	r3, r7, r6
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	18d3      	adds	r3, r2, r3
 800cc28:	e019      	b.n	800cc5e <rshift+0x76>
 800cc2a:	2120      	movs	r1, #32
 800cc2c:	9b02      	ldr	r3, [sp, #8]
 800cc2e:	9d01      	ldr	r5, [sp, #4]
 800cc30:	1acb      	subs	r3, r1, r3
 800cc32:	9303      	str	r3, [sp, #12]
 800cc34:	cd02      	ldmia	r5!, {r1}
 800cc36:	9b02      	ldr	r3, [sp, #8]
 800cc38:	4694      	mov	ip, r2
 800cc3a:	40d9      	lsrs	r1, r3
 800cc3c:	9100      	str	r1, [sp, #0]
 800cc3e:	42ac      	cmp	r4, r5
 800cc40:	d816      	bhi.n	800cc70 <rshift+0x88>
 800cc42:	9d01      	ldr	r5, [sp, #4]
 800cc44:	2300      	movs	r3, #0
 800cc46:	3501      	adds	r5, #1
 800cc48:	42ac      	cmp	r4, r5
 800cc4a:	d302      	bcc.n	800cc52 <rshift+0x6a>
 800cc4c:	1bbb      	subs	r3, r7, r6
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	3b04      	subs	r3, #4
 800cc52:	9900      	ldr	r1, [sp, #0]
 800cc54:	18d3      	adds	r3, r2, r3
 800cc56:	6019      	str	r1, [r3, #0]
 800cc58:	2900      	cmp	r1, #0
 800cc5a:	d000      	beq.n	800cc5e <rshift+0x76>
 800cc5c:	3304      	adds	r3, #4
 800cc5e:	1a99      	subs	r1, r3, r2
 800cc60:	1089      	asrs	r1, r1, #2
 800cc62:	6101      	str	r1, [r0, #16]
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d101      	bne.n	800cc6c <rshift+0x84>
 800cc68:	2300      	movs	r3, #0
 800cc6a:	6143      	str	r3, [r0, #20]
 800cc6c:	b005      	add	sp, #20
 800cc6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc70:	682b      	ldr	r3, [r5, #0]
 800cc72:	9903      	ldr	r1, [sp, #12]
 800cc74:	408b      	lsls	r3, r1
 800cc76:	9900      	ldr	r1, [sp, #0]
 800cc78:	4319      	orrs	r1, r3
 800cc7a:	4663      	mov	r3, ip
 800cc7c:	c302      	stmia	r3!, {r1}
 800cc7e:	469c      	mov	ip, r3
 800cc80:	cd02      	ldmia	r5!, {r1}
 800cc82:	9b02      	ldr	r3, [sp, #8]
 800cc84:	40d9      	lsrs	r1, r3
 800cc86:	9100      	str	r1, [sp, #0]
 800cc88:	e7d9      	b.n	800cc3e <rshift+0x56>
 800cc8a:	c908      	ldmia	r1!, {r3}
 800cc8c:	c508      	stmia	r5!, {r3}
 800cc8e:	e7c1      	b.n	800cc14 <rshift+0x2c>

0800cc90 <__hexdig_fun>:
 800cc90:	0002      	movs	r2, r0
 800cc92:	3a30      	subs	r2, #48	; 0x30
 800cc94:	0003      	movs	r3, r0
 800cc96:	2a09      	cmp	r2, #9
 800cc98:	d802      	bhi.n	800cca0 <__hexdig_fun+0x10>
 800cc9a:	3b20      	subs	r3, #32
 800cc9c:	b2d8      	uxtb	r0, r3
 800cc9e:	4770      	bx	lr
 800cca0:	0002      	movs	r2, r0
 800cca2:	3a61      	subs	r2, #97	; 0x61
 800cca4:	2a05      	cmp	r2, #5
 800cca6:	d801      	bhi.n	800ccac <__hexdig_fun+0x1c>
 800cca8:	3b47      	subs	r3, #71	; 0x47
 800ccaa:	e7f7      	b.n	800cc9c <__hexdig_fun+0xc>
 800ccac:	001a      	movs	r2, r3
 800ccae:	3a41      	subs	r2, #65	; 0x41
 800ccb0:	2000      	movs	r0, #0
 800ccb2:	2a05      	cmp	r2, #5
 800ccb4:	d8f3      	bhi.n	800cc9e <__hexdig_fun+0xe>
 800ccb6:	3b27      	subs	r3, #39	; 0x27
 800ccb8:	e7f0      	b.n	800cc9c <__hexdig_fun+0xc>
	...

0800ccbc <__gethex>:
 800ccbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccbe:	b08d      	sub	sp, #52	; 0x34
 800ccc0:	930a      	str	r3, [sp, #40]	; 0x28
 800ccc2:	4bbd      	ldr	r3, [pc, #756]	; (800cfb8 <__gethex+0x2fc>)
 800ccc4:	9005      	str	r0, [sp, #20]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	9109      	str	r1, [sp, #36]	; 0x24
 800ccca:	0018      	movs	r0, r3
 800cccc:	9202      	str	r2, [sp, #8]
 800ccce:	9307      	str	r3, [sp, #28]
 800ccd0:	f7f3 fa1a 	bl	8000108 <strlen>
 800ccd4:	2202      	movs	r2, #2
 800ccd6:	9b07      	ldr	r3, [sp, #28]
 800ccd8:	4252      	negs	r2, r2
 800ccda:	181b      	adds	r3, r3, r0
 800ccdc:	3b01      	subs	r3, #1
 800ccde:	781b      	ldrb	r3, [r3, #0]
 800cce0:	9003      	str	r0, [sp, #12]
 800cce2:	930b      	str	r3, [sp, #44]	; 0x2c
 800cce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cce6:	6819      	ldr	r1, [r3, #0]
 800cce8:	1c8b      	adds	r3, r1, #2
 800ccea:	1a52      	subs	r2, r2, r1
 800ccec:	18d1      	adds	r1, r2, r3
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	9108      	str	r1, [sp, #32]
 800ccf2:	9901      	ldr	r1, [sp, #4]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	7808      	ldrb	r0, [r1, #0]
 800ccf8:	2830      	cmp	r0, #48	; 0x30
 800ccfa:	d0f7      	beq.n	800ccec <__gethex+0x30>
 800ccfc:	f7ff ffc8 	bl	800cc90 <__hexdig_fun>
 800cd00:	1e04      	subs	r4, r0, #0
 800cd02:	d13e      	bne.n	800cd82 <__gethex+0xc6>
 800cd04:	9a03      	ldr	r2, [sp, #12]
 800cd06:	9907      	ldr	r1, [sp, #28]
 800cd08:	9801      	ldr	r0, [sp, #4]
 800cd0a:	f7fd ffcb 	bl	800aca4 <strncmp>
 800cd0e:	1e07      	subs	r7, r0, #0
 800cd10:	d000      	beq.n	800cd14 <__gethex+0x58>
 800cd12:	e06f      	b.n	800cdf4 <__gethex+0x138>
 800cd14:	9b01      	ldr	r3, [sp, #4]
 800cd16:	9a03      	ldr	r2, [sp, #12]
 800cd18:	5c98      	ldrb	r0, [r3, r2]
 800cd1a:	189d      	adds	r5, r3, r2
 800cd1c:	f7ff ffb8 	bl	800cc90 <__hexdig_fun>
 800cd20:	2301      	movs	r3, #1
 800cd22:	9304      	str	r3, [sp, #16]
 800cd24:	2800      	cmp	r0, #0
 800cd26:	d034      	beq.n	800cd92 <__gethex+0xd6>
 800cd28:	9501      	str	r5, [sp, #4]
 800cd2a:	9b01      	ldr	r3, [sp, #4]
 800cd2c:	7818      	ldrb	r0, [r3, #0]
 800cd2e:	2830      	cmp	r0, #48	; 0x30
 800cd30:	d009      	beq.n	800cd46 <__gethex+0x8a>
 800cd32:	f7ff ffad 	bl	800cc90 <__hexdig_fun>
 800cd36:	4243      	negs	r3, r0
 800cd38:	4143      	adcs	r3, r0
 800cd3a:	9304      	str	r3, [sp, #16]
 800cd3c:	2301      	movs	r3, #1
 800cd3e:	002c      	movs	r4, r5
 800cd40:	9308      	str	r3, [sp, #32]
 800cd42:	9d01      	ldr	r5, [sp, #4]
 800cd44:	e004      	b.n	800cd50 <__gethex+0x94>
 800cd46:	9b01      	ldr	r3, [sp, #4]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	9301      	str	r3, [sp, #4]
 800cd4c:	e7ed      	b.n	800cd2a <__gethex+0x6e>
 800cd4e:	3501      	adds	r5, #1
 800cd50:	7828      	ldrb	r0, [r5, #0]
 800cd52:	f7ff ff9d 	bl	800cc90 <__hexdig_fun>
 800cd56:	1e07      	subs	r7, r0, #0
 800cd58:	d1f9      	bne.n	800cd4e <__gethex+0x92>
 800cd5a:	0028      	movs	r0, r5
 800cd5c:	9a03      	ldr	r2, [sp, #12]
 800cd5e:	9907      	ldr	r1, [sp, #28]
 800cd60:	f7fd ffa0 	bl	800aca4 <strncmp>
 800cd64:	2800      	cmp	r0, #0
 800cd66:	d112      	bne.n	800cd8e <__gethex+0xd2>
 800cd68:	2c00      	cmp	r4, #0
 800cd6a:	d107      	bne.n	800cd7c <__gethex+0xc0>
 800cd6c:	9b03      	ldr	r3, [sp, #12]
 800cd6e:	18ed      	adds	r5, r5, r3
 800cd70:	002c      	movs	r4, r5
 800cd72:	7828      	ldrb	r0, [r5, #0]
 800cd74:	f7ff ff8c 	bl	800cc90 <__hexdig_fun>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d106      	bne.n	800cd8a <__gethex+0xce>
 800cd7c:	1b67      	subs	r7, r4, r5
 800cd7e:	00bf      	lsls	r7, r7, #2
 800cd80:	e007      	b.n	800cd92 <__gethex+0xd6>
 800cd82:	2300      	movs	r3, #0
 800cd84:	001c      	movs	r4, r3
 800cd86:	9304      	str	r3, [sp, #16]
 800cd88:	e7db      	b.n	800cd42 <__gethex+0x86>
 800cd8a:	3501      	adds	r5, #1
 800cd8c:	e7f1      	b.n	800cd72 <__gethex+0xb6>
 800cd8e:	2c00      	cmp	r4, #0
 800cd90:	d1f4      	bne.n	800cd7c <__gethex+0xc0>
 800cd92:	2220      	movs	r2, #32
 800cd94:	782b      	ldrb	r3, [r5, #0]
 800cd96:	002e      	movs	r6, r5
 800cd98:	4393      	bics	r3, r2
 800cd9a:	2b50      	cmp	r3, #80	; 0x50
 800cd9c:	d11d      	bne.n	800cdda <__gethex+0x11e>
 800cd9e:	786b      	ldrb	r3, [r5, #1]
 800cda0:	2b2b      	cmp	r3, #43	; 0x2b
 800cda2:	d02c      	beq.n	800cdfe <__gethex+0x142>
 800cda4:	2b2d      	cmp	r3, #45	; 0x2d
 800cda6:	d02e      	beq.n	800ce06 <__gethex+0x14a>
 800cda8:	2300      	movs	r3, #0
 800cdaa:	1c6e      	adds	r6, r5, #1
 800cdac:	9306      	str	r3, [sp, #24]
 800cdae:	7830      	ldrb	r0, [r6, #0]
 800cdb0:	f7ff ff6e 	bl	800cc90 <__hexdig_fun>
 800cdb4:	1e43      	subs	r3, r0, #1
 800cdb6:	b2db      	uxtb	r3, r3
 800cdb8:	2b18      	cmp	r3, #24
 800cdba:	d82b      	bhi.n	800ce14 <__gethex+0x158>
 800cdbc:	3810      	subs	r0, #16
 800cdbe:	0004      	movs	r4, r0
 800cdc0:	7870      	ldrb	r0, [r6, #1]
 800cdc2:	f7ff ff65 	bl	800cc90 <__hexdig_fun>
 800cdc6:	1e43      	subs	r3, r0, #1
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	3601      	adds	r6, #1
 800cdcc:	2b18      	cmp	r3, #24
 800cdce:	d91c      	bls.n	800ce0a <__gethex+0x14e>
 800cdd0:	9b06      	ldr	r3, [sp, #24]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d000      	beq.n	800cdd8 <__gethex+0x11c>
 800cdd6:	4264      	negs	r4, r4
 800cdd8:	193f      	adds	r7, r7, r4
 800cdda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cddc:	601e      	str	r6, [r3, #0]
 800cdde:	9b04      	ldr	r3, [sp, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d019      	beq.n	800ce18 <__gethex+0x15c>
 800cde4:	2600      	movs	r6, #0
 800cde6:	9b08      	ldr	r3, [sp, #32]
 800cde8:	42b3      	cmp	r3, r6
 800cdea:	d100      	bne.n	800cdee <__gethex+0x132>
 800cdec:	3606      	adds	r6, #6
 800cdee:	0030      	movs	r0, r6
 800cdf0:	b00d      	add	sp, #52	; 0x34
 800cdf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	0027      	movs	r7, r4
 800cdf8:	9d01      	ldr	r5, [sp, #4]
 800cdfa:	9304      	str	r3, [sp, #16]
 800cdfc:	e7c9      	b.n	800cd92 <__gethex+0xd6>
 800cdfe:	2300      	movs	r3, #0
 800ce00:	9306      	str	r3, [sp, #24]
 800ce02:	1cae      	adds	r6, r5, #2
 800ce04:	e7d3      	b.n	800cdae <__gethex+0xf2>
 800ce06:	2301      	movs	r3, #1
 800ce08:	e7fa      	b.n	800ce00 <__gethex+0x144>
 800ce0a:	230a      	movs	r3, #10
 800ce0c:	435c      	muls	r4, r3
 800ce0e:	1824      	adds	r4, r4, r0
 800ce10:	3c10      	subs	r4, #16
 800ce12:	e7d5      	b.n	800cdc0 <__gethex+0x104>
 800ce14:	002e      	movs	r6, r5
 800ce16:	e7e0      	b.n	800cdda <__gethex+0x11e>
 800ce18:	9b01      	ldr	r3, [sp, #4]
 800ce1a:	9904      	ldr	r1, [sp, #16]
 800ce1c:	1aeb      	subs	r3, r5, r3
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	2b07      	cmp	r3, #7
 800ce22:	dc0a      	bgt.n	800ce3a <__gethex+0x17e>
 800ce24:	9805      	ldr	r0, [sp, #20]
 800ce26:	f000 faed 	bl	800d404 <_Balloc>
 800ce2a:	1e04      	subs	r4, r0, #0
 800ce2c:	d108      	bne.n	800ce40 <__gethex+0x184>
 800ce2e:	0002      	movs	r2, r0
 800ce30:	21de      	movs	r1, #222	; 0xde
 800ce32:	4b62      	ldr	r3, [pc, #392]	; (800cfbc <__gethex+0x300>)
 800ce34:	4862      	ldr	r0, [pc, #392]	; (800cfc0 <__gethex+0x304>)
 800ce36:	f001 fa4d 	bl	800e2d4 <__assert_func>
 800ce3a:	3101      	adds	r1, #1
 800ce3c:	105b      	asrs	r3, r3, #1
 800ce3e:	e7ef      	b.n	800ce20 <__gethex+0x164>
 800ce40:	0003      	movs	r3, r0
 800ce42:	3314      	adds	r3, #20
 800ce44:	9304      	str	r3, [sp, #16]
 800ce46:	9309      	str	r3, [sp, #36]	; 0x24
 800ce48:	2300      	movs	r3, #0
 800ce4a:	001e      	movs	r6, r3
 800ce4c:	9306      	str	r3, [sp, #24]
 800ce4e:	9b01      	ldr	r3, [sp, #4]
 800ce50:	42ab      	cmp	r3, r5
 800ce52:	d340      	bcc.n	800ced6 <__gethex+0x21a>
 800ce54:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ce56:	9b04      	ldr	r3, [sp, #16]
 800ce58:	c540      	stmia	r5!, {r6}
 800ce5a:	1aed      	subs	r5, r5, r3
 800ce5c:	10ad      	asrs	r5, r5, #2
 800ce5e:	0030      	movs	r0, r6
 800ce60:	6125      	str	r5, [r4, #16]
 800ce62:	f000 fbc7 	bl	800d5f4 <__hi0bits>
 800ce66:	9b02      	ldr	r3, [sp, #8]
 800ce68:	016d      	lsls	r5, r5, #5
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	1a2e      	subs	r6, r5, r0
 800ce6e:	9301      	str	r3, [sp, #4]
 800ce70:	429e      	cmp	r6, r3
 800ce72:	dd5a      	ble.n	800cf2a <__gethex+0x26e>
 800ce74:	1af6      	subs	r6, r6, r3
 800ce76:	0031      	movs	r1, r6
 800ce78:	0020      	movs	r0, r4
 800ce7a:	f000 ff6a 	bl	800dd52 <__any_on>
 800ce7e:	1e05      	subs	r5, r0, #0
 800ce80:	d016      	beq.n	800ceb0 <__gethex+0x1f4>
 800ce82:	2501      	movs	r5, #1
 800ce84:	211f      	movs	r1, #31
 800ce86:	0028      	movs	r0, r5
 800ce88:	1e73      	subs	r3, r6, #1
 800ce8a:	4019      	ands	r1, r3
 800ce8c:	4088      	lsls	r0, r1
 800ce8e:	0001      	movs	r1, r0
 800ce90:	115a      	asrs	r2, r3, #5
 800ce92:	9804      	ldr	r0, [sp, #16]
 800ce94:	0092      	lsls	r2, r2, #2
 800ce96:	5812      	ldr	r2, [r2, r0]
 800ce98:	420a      	tst	r2, r1
 800ce9a:	d009      	beq.n	800ceb0 <__gethex+0x1f4>
 800ce9c:	42ab      	cmp	r3, r5
 800ce9e:	dd06      	ble.n	800ceae <__gethex+0x1f2>
 800cea0:	0020      	movs	r0, r4
 800cea2:	1eb1      	subs	r1, r6, #2
 800cea4:	f000 ff55 	bl	800dd52 <__any_on>
 800cea8:	3502      	adds	r5, #2
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d100      	bne.n	800ceb0 <__gethex+0x1f4>
 800ceae:	2502      	movs	r5, #2
 800ceb0:	0031      	movs	r1, r6
 800ceb2:	0020      	movs	r0, r4
 800ceb4:	f7ff fe98 	bl	800cbe8 <rshift>
 800ceb8:	19bf      	adds	r7, r7, r6
 800ceba:	9b02      	ldr	r3, [sp, #8]
 800cebc:	689b      	ldr	r3, [r3, #8]
 800cebe:	9303      	str	r3, [sp, #12]
 800cec0:	42bb      	cmp	r3, r7
 800cec2:	da42      	bge.n	800cf4a <__gethex+0x28e>
 800cec4:	0021      	movs	r1, r4
 800cec6:	9805      	ldr	r0, [sp, #20]
 800cec8:	f000 fae0 	bl	800d48c <_Bfree>
 800cecc:	2300      	movs	r3, #0
 800cece:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ced0:	26a3      	movs	r6, #163	; 0xa3
 800ced2:	6013      	str	r3, [r2, #0]
 800ced4:	e78b      	b.n	800cdee <__gethex+0x132>
 800ced6:	1e6b      	subs	r3, r5, #1
 800ced8:	9308      	str	r3, [sp, #32]
 800ceda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	4293      	cmp	r3, r2
 800cee0:	d014      	beq.n	800cf0c <__gethex+0x250>
 800cee2:	9b06      	ldr	r3, [sp, #24]
 800cee4:	2b20      	cmp	r3, #32
 800cee6:	d104      	bne.n	800cef2 <__gethex+0x236>
 800cee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceea:	c340      	stmia	r3!, {r6}
 800ceec:	2600      	movs	r6, #0
 800ceee:	9309      	str	r3, [sp, #36]	; 0x24
 800cef0:	9606      	str	r6, [sp, #24]
 800cef2:	9b08      	ldr	r3, [sp, #32]
 800cef4:	7818      	ldrb	r0, [r3, #0]
 800cef6:	f7ff fecb 	bl	800cc90 <__hexdig_fun>
 800cefa:	230f      	movs	r3, #15
 800cefc:	4018      	ands	r0, r3
 800cefe:	9b06      	ldr	r3, [sp, #24]
 800cf00:	9d08      	ldr	r5, [sp, #32]
 800cf02:	4098      	lsls	r0, r3
 800cf04:	3304      	adds	r3, #4
 800cf06:	4306      	orrs	r6, r0
 800cf08:	9306      	str	r3, [sp, #24]
 800cf0a:	e7a0      	b.n	800ce4e <__gethex+0x192>
 800cf0c:	2301      	movs	r3, #1
 800cf0e:	9a03      	ldr	r2, [sp, #12]
 800cf10:	1a9d      	subs	r5, r3, r2
 800cf12:	9b08      	ldr	r3, [sp, #32]
 800cf14:	195d      	adds	r5, r3, r5
 800cf16:	9b01      	ldr	r3, [sp, #4]
 800cf18:	429d      	cmp	r5, r3
 800cf1a:	d3e2      	bcc.n	800cee2 <__gethex+0x226>
 800cf1c:	0028      	movs	r0, r5
 800cf1e:	9907      	ldr	r1, [sp, #28]
 800cf20:	f7fd fec0 	bl	800aca4 <strncmp>
 800cf24:	2800      	cmp	r0, #0
 800cf26:	d1dc      	bne.n	800cee2 <__gethex+0x226>
 800cf28:	e791      	b.n	800ce4e <__gethex+0x192>
 800cf2a:	9b01      	ldr	r3, [sp, #4]
 800cf2c:	2500      	movs	r5, #0
 800cf2e:	429e      	cmp	r6, r3
 800cf30:	dac3      	bge.n	800ceba <__gethex+0x1fe>
 800cf32:	1b9e      	subs	r6, r3, r6
 800cf34:	0021      	movs	r1, r4
 800cf36:	0032      	movs	r2, r6
 800cf38:	9805      	ldr	r0, [sp, #20]
 800cf3a:	f000 fcc5 	bl	800d8c8 <__lshift>
 800cf3e:	0003      	movs	r3, r0
 800cf40:	3314      	adds	r3, #20
 800cf42:	0004      	movs	r4, r0
 800cf44:	1bbf      	subs	r7, r7, r6
 800cf46:	9304      	str	r3, [sp, #16]
 800cf48:	e7b7      	b.n	800ceba <__gethex+0x1fe>
 800cf4a:	9b02      	ldr	r3, [sp, #8]
 800cf4c:	685e      	ldr	r6, [r3, #4]
 800cf4e:	42be      	cmp	r6, r7
 800cf50:	dd71      	ble.n	800d036 <__gethex+0x37a>
 800cf52:	9b01      	ldr	r3, [sp, #4]
 800cf54:	1bf6      	subs	r6, r6, r7
 800cf56:	42b3      	cmp	r3, r6
 800cf58:	dc38      	bgt.n	800cfcc <__gethex+0x310>
 800cf5a:	9b02      	ldr	r3, [sp, #8]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	2b02      	cmp	r3, #2
 800cf60:	d026      	beq.n	800cfb0 <__gethex+0x2f4>
 800cf62:	2b03      	cmp	r3, #3
 800cf64:	d02e      	beq.n	800cfc4 <__gethex+0x308>
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d119      	bne.n	800cf9e <__gethex+0x2e2>
 800cf6a:	9b01      	ldr	r3, [sp, #4]
 800cf6c:	42b3      	cmp	r3, r6
 800cf6e:	d116      	bne.n	800cf9e <__gethex+0x2e2>
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d10d      	bne.n	800cf90 <__gethex+0x2d4>
 800cf74:	9b02      	ldr	r3, [sp, #8]
 800cf76:	2662      	movs	r6, #98	; 0x62
 800cf78:	685b      	ldr	r3, [r3, #4]
 800cf7a:	9301      	str	r3, [sp, #4]
 800cf7c:	9a01      	ldr	r2, [sp, #4]
 800cf7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf80:	601a      	str	r2, [r3, #0]
 800cf82:	2301      	movs	r3, #1
 800cf84:	9a04      	ldr	r2, [sp, #16]
 800cf86:	6123      	str	r3, [r4, #16]
 800cf88:	6013      	str	r3, [r2, #0]
 800cf8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800cf8c:	601c      	str	r4, [r3, #0]
 800cf8e:	e72e      	b.n	800cdee <__gethex+0x132>
 800cf90:	9901      	ldr	r1, [sp, #4]
 800cf92:	0020      	movs	r0, r4
 800cf94:	3901      	subs	r1, #1
 800cf96:	f000 fedc 	bl	800dd52 <__any_on>
 800cf9a:	2800      	cmp	r0, #0
 800cf9c:	d1ea      	bne.n	800cf74 <__gethex+0x2b8>
 800cf9e:	0021      	movs	r1, r4
 800cfa0:	9805      	ldr	r0, [sp, #20]
 800cfa2:	f000 fa73 	bl	800d48c <_Bfree>
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cfaa:	2650      	movs	r6, #80	; 0x50
 800cfac:	6013      	str	r3, [r2, #0]
 800cfae:	e71e      	b.n	800cdee <__gethex+0x132>
 800cfb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d1f3      	bne.n	800cf9e <__gethex+0x2e2>
 800cfb6:	e7dd      	b.n	800cf74 <__gethex+0x2b8>
 800cfb8:	08010e58 	.word	0x08010e58
 800cfbc:	08010d7b 	.word	0x08010d7b
 800cfc0:	08010dec 	.word	0x08010dec
 800cfc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1d4      	bne.n	800cf74 <__gethex+0x2b8>
 800cfca:	e7e8      	b.n	800cf9e <__gethex+0x2e2>
 800cfcc:	1e77      	subs	r7, r6, #1
 800cfce:	2d00      	cmp	r5, #0
 800cfd0:	d12f      	bne.n	800d032 <__gethex+0x376>
 800cfd2:	2f00      	cmp	r7, #0
 800cfd4:	d004      	beq.n	800cfe0 <__gethex+0x324>
 800cfd6:	0039      	movs	r1, r7
 800cfd8:	0020      	movs	r0, r4
 800cfda:	f000 feba 	bl	800dd52 <__any_on>
 800cfde:	0005      	movs	r5, r0
 800cfe0:	231f      	movs	r3, #31
 800cfe2:	117a      	asrs	r2, r7, #5
 800cfe4:	401f      	ands	r7, r3
 800cfe6:	3b1e      	subs	r3, #30
 800cfe8:	40bb      	lsls	r3, r7
 800cfea:	9904      	ldr	r1, [sp, #16]
 800cfec:	0092      	lsls	r2, r2, #2
 800cfee:	5852      	ldr	r2, [r2, r1]
 800cff0:	421a      	tst	r2, r3
 800cff2:	d001      	beq.n	800cff8 <__gethex+0x33c>
 800cff4:	2302      	movs	r3, #2
 800cff6:	431d      	orrs	r5, r3
 800cff8:	9b01      	ldr	r3, [sp, #4]
 800cffa:	0031      	movs	r1, r6
 800cffc:	1b9b      	subs	r3, r3, r6
 800cffe:	2602      	movs	r6, #2
 800d000:	0020      	movs	r0, r4
 800d002:	9301      	str	r3, [sp, #4]
 800d004:	f7ff fdf0 	bl	800cbe8 <rshift>
 800d008:	9b02      	ldr	r3, [sp, #8]
 800d00a:	685f      	ldr	r7, [r3, #4]
 800d00c:	2d00      	cmp	r5, #0
 800d00e:	d041      	beq.n	800d094 <__gethex+0x3d8>
 800d010:	9b02      	ldr	r3, [sp, #8]
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	2b02      	cmp	r3, #2
 800d016:	d010      	beq.n	800d03a <__gethex+0x37e>
 800d018:	2b03      	cmp	r3, #3
 800d01a:	d012      	beq.n	800d042 <__gethex+0x386>
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	d106      	bne.n	800d02e <__gethex+0x372>
 800d020:	07aa      	lsls	r2, r5, #30
 800d022:	d504      	bpl.n	800d02e <__gethex+0x372>
 800d024:	9a04      	ldr	r2, [sp, #16]
 800d026:	6810      	ldr	r0, [r2, #0]
 800d028:	4305      	orrs	r5, r0
 800d02a:	421d      	tst	r5, r3
 800d02c:	d10c      	bne.n	800d048 <__gethex+0x38c>
 800d02e:	2310      	movs	r3, #16
 800d030:	e02f      	b.n	800d092 <__gethex+0x3d6>
 800d032:	2501      	movs	r5, #1
 800d034:	e7d4      	b.n	800cfe0 <__gethex+0x324>
 800d036:	2601      	movs	r6, #1
 800d038:	e7e8      	b.n	800d00c <__gethex+0x350>
 800d03a:	2301      	movs	r3, #1
 800d03c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d03e:	1a9b      	subs	r3, r3, r2
 800d040:	9313      	str	r3, [sp, #76]	; 0x4c
 800d042:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d044:	2b00      	cmp	r3, #0
 800d046:	d0f2      	beq.n	800d02e <__gethex+0x372>
 800d048:	6923      	ldr	r3, [r4, #16]
 800d04a:	2000      	movs	r0, #0
 800d04c:	9303      	str	r3, [sp, #12]
 800d04e:	009b      	lsls	r3, r3, #2
 800d050:	9304      	str	r3, [sp, #16]
 800d052:	0023      	movs	r3, r4
 800d054:	9a04      	ldr	r2, [sp, #16]
 800d056:	3314      	adds	r3, #20
 800d058:	1899      	adds	r1, r3, r2
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	1c55      	adds	r5, r2, #1
 800d05e:	d01e      	beq.n	800d09e <__gethex+0x3e2>
 800d060:	3201      	adds	r2, #1
 800d062:	601a      	str	r2, [r3, #0]
 800d064:	0023      	movs	r3, r4
 800d066:	3314      	adds	r3, #20
 800d068:	2e02      	cmp	r6, #2
 800d06a:	d140      	bne.n	800d0ee <__gethex+0x432>
 800d06c:	9a02      	ldr	r2, [sp, #8]
 800d06e:	9901      	ldr	r1, [sp, #4]
 800d070:	6812      	ldr	r2, [r2, #0]
 800d072:	3a01      	subs	r2, #1
 800d074:	428a      	cmp	r2, r1
 800d076:	d10b      	bne.n	800d090 <__gethex+0x3d4>
 800d078:	114a      	asrs	r2, r1, #5
 800d07a:	211f      	movs	r1, #31
 800d07c:	9801      	ldr	r0, [sp, #4]
 800d07e:	0092      	lsls	r2, r2, #2
 800d080:	4001      	ands	r1, r0
 800d082:	2001      	movs	r0, #1
 800d084:	0005      	movs	r5, r0
 800d086:	408d      	lsls	r5, r1
 800d088:	58d3      	ldr	r3, [r2, r3]
 800d08a:	422b      	tst	r3, r5
 800d08c:	d000      	beq.n	800d090 <__gethex+0x3d4>
 800d08e:	2601      	movs	r6, #1
 800d090:	2320      	movs	r3, #32
 800d092:	431e      	orrs	r6, r3
 800d094:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d096:	601c      	str	r4, [r3, #0]
 800d098:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d09a:	601f      	str	r7, [r3, #0]
 800d09c:	e6a7      	b.n	800cdee <__gethex+0x132>
 800d09e:	c301      	stmia	r3!, {r0}
 800d0a0:	4299      	cmp	r1, r3
 800d0a2:	d8da      	bhi.n	800d05a <__gethex+0x39e>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	68a2      	ldr	r2, [r4, #8]
 800d0a8:	4293      	cmp	r3, r2
 800d0aa:	db17      	blt.n	800d0dc <__gethex+0x420>
 800d0ac:	6863      	ldr	r3, [r4, #4]
 800d0ae:	9805      	ldr	r0, [sp, #20]
 800d0b0:	1c59      	adds	r1, r3, #1
 800d0b2:	f000 f9a7 	bl	800d404 <_Balloc>
 800d0b6:	1e05      	subs	r5, r0, #0
 800d0b8:	d103      	bne.n	800d0c2 <__gethex+0x406>
 800d0ba:	0002      	movs	r2, r0
 800d0bc:	2184      	movs	r1, #132	; 0x84
 800d0be:	4b1c      	ldr	r3, [pc, #112]	; (800d130 <__gethex+0x474>)
 800d0c0:	e6b8      	b.n	800ce34 <__gethex+0x178>
 800d0c2:	0021      	movs	r1, r4
 800d0c4:	6923      	ldr	r3, [r4, #16]
 800d0c6:	310c      	adds	r1, #12
 800d0c8:	1c9a      	adds	r2, r3, #2
 800d0ca:	0092      	lsls	r2, r2, #2
 800d0cc:	300c      	adds	r0, #12
 800d0ce:	f7fc ffff 	bl	800a0d0 <memcpy>
 800d0d2:	0021      	movs	r1, r4
 800d0d4:	9805      	ldr	r0, [sp, #20]
 800d0d6:	f000 f9d9 	bl	800d48c <_Bfree>
 800d0da:	002c      	movs	r4, r5
 800d0dc:	6923      	ldr	r3, [r4, #16]
 800d0de:	1c5a      	adds	r2, r3, #1
 800d0e0:	6122      	str	r2, [r4, #16]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	3304      	adds	r3, #4
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	18e3      	adds	r3, r4, r3
 800d0ea:	605a      	str	r2, [r3, #4]
 800d0ec:	e7ba      	b.n	800d064 <__gethex+0x3a8>
 800d0ee:	6922      	ldr	r2, [r4, #16]
 800d0f0:	9903      	ldr	r1, [sp, #12]
 800d0f2:	428a      	cmp	r2, r1
 800d0f4:	dd09      	ble.n	800d10a <__gethex+0x44e>
 800d0f6:	2101      	movs	r1, #1
 800d0f8:	0020      	movs	r0, r4
 800d0fa:	f7ff fd75 	bl	800cbe8 <rshift>
 800d0fe:	9b02      	ldr	r3, [sp, #8]
 800d100:	3701      	adds	r7, #1
 800d102:	689b      	ldr	r3, [r3, #8]
 800d104:	42bb      	cmp	r3, r7
 800d106:	dac2      	bge.n	800d08e <__gethex+0x3d2>
 800d108:	e6dc      	b.n	800cec4 <__gethex+0x208>
 800d10a:	221f      	movs	r2, #31
 800d10c:	9d01      	ldr	r5, [sp, #4]
 800d10e:	9901      	ldr	r1, [sp, #4]
 800d110:	2601      	movs	r6, #1
 800d112:	4015      	ands	r5, r2
 800d114:	4211      	tst	r1, r2
 800d116:	d0bb      	beq.n	800d090 <__gethex+0x3d4>
 800d118:	9a04      	ldr	r2, [sp, #16]
 800d11a:	189b      	adds	r3, r3, r2
 800d11c:	3b04      	subs	r3, #4
 800d11e:	6818      	ldr	r0, [r3, #0]
 800d120:	f000 fa68 	bl	800d5f4 <__hi0bits>
 800d124:	2320      	movs	r3, #32
 800d126:	1b5d      	subs	r5, r3, r5
 800d128:	42a8      	cmp	r0, r5
 800d12a:	dbe4      	blt.n	800d0f6 <__gethex+0x43a>
 800d12c:	e7b0      	b.n	800d090 <__gethex+0x3d4>
 800d12e:	46c0      	nop			; (mov r8, r8)
 800d130:	08010d7b 	.word	0x08010d7b

0800d134 <L_shift>:
 800d134:	2308      	movs	r3, #8
 800d136:	b570      	push	{r4, r5, r6, lr}
 800d138:	2520      	movs	r5, #32
 800d13a:	1a9a      	subs	r2, r3, r2
 800d13c:	0092      	lsls	r2, r2, #2
 800d13e:	1aad      	subs	r5, r5, r2
 800d140:	6843      	ldr	r3, [r0, #4]
 800d142:	6806      	ldr	r6, [r0, #0]
 800d144:	001c      	movs	r4, r3
 800d146:	40ac      	lsls	r4, r5
 800d148:	40d3      	lsrs	r3, r2
 800d14a:	4334      	orrs	r4, r6
 800d14c:	6004      	str	r4, [r0, #0]
 800d14e:	6043      	str	r3, [r0, #4]
 800d150:	3004      	adds	r0, #4
 800d152:	4288      	cmp	r0, r1
 800d154:	d3f4      	bcc.n	800d140 <L_shift+0xc>
 800d156:	bd70      	pop	{r4, r5, r6, pc}

0800d158 <__match>:
 800d158:	b530      	push	{r4, r5, lr}
 800d15a:	6803      	ldr	r3, [r0, #0]
 800d15c:	780c      	ldrb	r4, [r1, #0]
 800d15e:	3301      	adds	r3, #1
 800d160:	2c00      	cmp	r4, #0
 800d162:	d102      	bne.n	800d16a <__match+0x12>
 800d164:	6003      	str	r3, [r0, #0]
 800d166:	2001      	movs	r0, #1
 800d168:	bd30      	pop	{r4, r5, pc}
 800d16a:	781a      	ldrb	r2, [r3, #0]
 800d16c:	0015      	movs	r5, r2
 800d16e:	3d41      	subs	r5, #65	; 0x41
 800d170:	2d19      	cmp	r5, #25
 800d172:	d800      	bhi.n	800d176 <__match+0x1e>
 800d174:	3220      	adds	r2, #32
 800d176:	3101      	adds	r1, #1
 800d178:	42a2      	cmp	r2, r4
 800d17a:	d0ef      	beq.n	800d15c <__match+0x4>
 800d17c:	2000      	movs	r0, #0
 800d17e:	e7f3      	b.n	800d168 <__match+0x10>

0800d180 <__hexnan>:
 800d180:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d182:	680b      	ldr	r3, [r1, #0]
 800d184:	b08b      	sub	sp, #44	; 0x2c
 800d186:	115c      	asrs	r4, r3, #5
 800d188:	00a4      	lsls	r4, r4, #2
 800d18a:	9201      	str	r2, [sp, #4]
 800d18c:	1912      	adds	r2, r2, r4
 800d18e:	0019      	movs	r1, r3
 800d190:	9202      	str	r2, [sp, #8]
 800d192:	221f      	movs	r2, #31
 800d194:	4011      	ands	r1, r2
 800d196:	9008      	str	r0, [sp, #32]
 800d198:	9106      	str	r1, [sp, #24]
 800d19a:	4213      	tst	r3, r2
 800d19c:	d002      	beq.n	800d1a4 <__hexnan+0x24>
 800d19e:	9b02      	ldr	r3, [sp, #8]
 800d1a0:	3304      	adds	r3, #4
 800d1a2:	9302      	str	r3, [sp, #8]
 800d1a4:	9b02      	ldr	r3, [sp, #8]
 800d1a6:	2500      	movs	r5, #0
 800d1a8:	1f1e      	subs	r6, r3, #4
 800d1aa:	0037      	movs	r7, r6
 800d1ac:	0034      	movs	r4, r6
 800d1ae:	9b08      	ldr	r3, [sp, #32]
 800d1b0:	6035      	str	r5, [r6, #0]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	9507      	str	r5, [sp, #28]
 800d1b6:	9305      	str	r3, [sp, #20]
 800d1b8:	9503      	str	r5, [sp, #12]
 800d1ba:	9b05      	ldr	r3, [sp, #20]
 800d1bc:	3301      	adds	r3, #1
 800d1be:	9309      	str	r3, [sp, #36]	; 0x24
 800d1c0:	9b05      	ldr	r3, [sp, #20]
 800d1c2:	785b      	ldrb	r3, [r3, #1]
 800d1c4:	9304      	str	r3, [sp, #16]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d028      	beq.n	800d21c <__hexnan+0x9c>
 800d1ca:	9804      	ldr	r0, [sp, #16]
 800d1cc:	f7ff fd60 	bl	800cc90 <__hexdig_fun>
 800d1d0:	2800      	cmp	r0, #0
 800d1d2:	d154      	bne.n	800d27e <__hexnan+0xfe>
 800d1d4:	9b04      	ldr	r3, [sp, #16]
 800d1d6:	2b20      	cmp	r3, #32
 800d1d8:	d819      	bhi.n	800d20e <__hexnan+0x8e>
 800d1da:	9b03      	ldr	r3, [sp, #12]
 800d1dc:	9a07      	ldr	r2, [sp, #28]
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	dd12      	ble.n	800d208 <__hexnan+0x88>
 800d1e2:	42bc      	cmp	r4, r7
 800d1e4:	d206      	bcs.n	800d1f4 <__hexnan+0x74>
 800d1e6:	2d07      	cmp	r5, #7
 800d1e8:	dc04      	bgt.n	800d1f4 <__hexnan+0x74>
 800d1ea:	002a      	movs	r2, r5
 800d1ec:	0039      	movs	r1, r7
 800d1ee:	0020      	movs	r0, r4
 800d1f0:	f7ff ffa0 	bl	800d134 <L_shift>
 800d1f4:	9b01      	ldr	r3, [sp, #4]
 800d1f6:	2508      	movs	r5, #8
 800d1f8:	429c      	cmp	r4, r3
 800d1fa:	d905      	bls.n	800d208 <__hexnan+0x88>
 800d1fc:	1f27      	subs	r7, r4, #4
 800d1fe:	2500      	movs	r5, #0
 800d200:	003c      	movs	r4, r7
 800d202:	9b03      	ldr	r3, [sp, #12]
 800d204:	603d      	str	r5, [r7, #0]
 800d206:	9307      	str	r3, [sp, #28]
 800d208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d20a:	9305      	str	r3, [sp, #20]
 800d20c:	e7d5      	b.n	800d1ba <__hexnan+0x3a>
 800d20e:	9b04      	ldr	r3, [sp, #16]
 800d210:	2b29      	cmp	r3, #41	; 0x29
 800d212:	d158      	bne.n	800d2c6 <__hexnan+0x146>
 800d214:	9b05      	ldr	r3, [sp, #20]
 800d216:	9a08      	ldr	r2, [sp, #32]
 800d218:	3302      	adds	r3, #2
 800d21a:	6013      	str	r3, [r2, #0]
 800d21c:	9b03      	ldr	r3, [sp, #12]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d051      	beq.n	800d2c6 <__hexnan+0x146>
 800d222:	42bc      	cmp	r4, r7
 800d224:	d206      	bcs.n	800d234 <__hexnan+0xb4>
 800d226:	2d07      	cmp	r5, #7
 800d228:	dc04      	bgt.n	800d234 <__hexnan+0xb4>
 800d22a:	002a      	movs	r2, r5
 800d22c:	0039      	movs	r1, r7
 800d22e:	0020      	movs	r0, r4
 800d230:	f7ff ff80 	bl	800d134 <L_shift>
 800d234:	9b01      	ldr	r3, [sp, #4]
 800d236:	429c      	cmp	r4, r3
 800d238:	d935      	bls.n	800d2a6 <__hexnan+0x126>
 800d23a:	001a      	movs	r2, r3
 800d23c:	0023      	movs	r3, r4
 800d23e:	cb02      	ldmia	r3!, {r1}
 800d240:	c202      	stmia	r2!, {r1}
 800d242:	429e      	cmp	r6, r3
 800d244:	d2fb      	bcs.n	800d23e <__hexnan+0xbe>
 800d246:	9b02      	ldr	r3, [sp, #8]
 800d248:	1c61      	adds	r1, r4, #1
 800d24a:	1eda      	subs	r2, r3, #3
 800d24c:	2304      	movs	r3, #4
 800d24e:	4291      	cmp	r1, r2
 800d250:	d805      	bhi.n	800d25e <__hexnan+0xde>
 800d252:	9b02      	ldr	r3, [sp, #8]
 800d254:	3b04      	subs	r3, #4
 800d256:	1b1c      	subs	r4, r3, r4
 800d258:	08a4      	lsrs	r4, r4, #2
 800d25a:	3401      	adds	r4, #1
 800d25c:	00a3      	lsls	r3, r4, #2
 800d25e:	9a01      	ldr	r2, [sp, #4]
 800d260:	18d4      	adds	r4, r2, r3
 800d262:	2300      	movs	r3, #0
 800d264:	c408      	stmia	r4!, {r3}
 800d266:	42a6      	cmp	r6, r4
 800d268:	d2fc      	bcs.n	800d264 <__hexnan+0xe4>
 800d26a:	6833      	ldr	r3, [r6, #0]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d104      	bne.n	800d27a <__hexnan+0xfa>
 800d270:	9b01      	ldr	r3, [sp, #4]
 800d272:	429e      	cmp	r6, r3
 800d274:	d125      	bne.n	800d2c2 <__hexnan+0x142>
 800d276:	2301      	movs	r3, #1
 800d278:	6033      	str	r3, [r6, #0]
 800d27a:	2005      	movs	r0, #5
 800d27c:	e024      	b.n	800d2c8 <__hexnan+0x148>
 800d27e:	9b03      	ldr	r3, [sp, #12]
 800d280:	3501      	adds	r5, #1
 800d282:	3301      	adds	r3, #1
 800d284:	9303      	str	r3, [sp, #12]
 800d286:	2d08      	cmp	r5, #8
 800d288:	dd06      	ble.n	800d298 <__hexnan+0x118>
 800d28a:	9b01      	ldr	r3, [sp, #4]
 800d28c:	429c      	cmp	r4, r3
 800d28e:	d9bb      	bls.n	800d208 <__hexnan+0x88>
 800d290:	2300      	movs	r3, #0
 800d292:	2501      	movs	r5, #1
 800d294:	3c04      	subs	r4, #4
 800d296:	6023      	str	r3, [r4, #0]
 800d298:	220f      	movs	r2, #15
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	4010      	ands	r0, r2
 800d29e:	011b      	lsls	r3, r3, #4
 800d2a0:	4318      	orrs	r0, r3
 800d2a2:	6020      	str	r0, [r4, #0]
 800d2a4:	e7b0      	b.n	800d208 <__hexnan+0x88>
 800d2a6:	9b06      	ldr	r3, [sp, #24]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0de      	beq.n	800d26a <__hexnan+0xea>
 800d2ac:	2220      	movs	r2, #32
 800d2ae:	1ad2      	subs	r2, r2, r3
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	425b      	negs	r3, r3
 800d2b4:	40d3      	lsrs	r3, r2
 800d2b6:	9c02      	ldr	r4, [sp, #8]
 800d2b8:	3c04      	subs	r4, #4
 800d2ba:	6822      	ldr	r2, [r4, #0]
 800d2bc:	4013      	ands	r3, r2
 800d2be:	6023      	str	r3, [r4, #0]
 800d2c0:	e7d3      	b.n	800d26a <__hexnan+0xea>
 800d2c2:	3e04      	subs	r6, #4
 800d2c4:	e7d1      	b.n	800d26a <__hexnan+0xea>
 800d2c6:	2004      	movs	r0, #4
 800d2c8:	b00b      	add	sp, #44	; 0x2c
 800d2ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d2cc <_localeconv_r>:
 800d2cc:	4800      	ldr	r0, [pc, #0]	; (800d2d0 <_localeconv_r+0x4>)
 800d2ce:	4770      	bx	lr
 800d2d0:	20000164 	.word	0x20000164

0800d2d4 <__retarget_lock_init_recursive>:
 800d2d4:	4770      	bx	lr

0800d2d6 <__retarget_lock_acquire_recursive>:
 800d2d6:	4770      	bx	lr

0800d2d8 <__retarget_lock_release_recursive>:
 800d2d8:	4770      	bx	lr
	...

0800d2dc <__swhatbuf_r>:
 800d2dc:	b570      	push	{r4, r5, r6, lr}
 800d2de:	000e      	movs	r6, r1
 800d2e0:	001d      	movs	r5, r3
 800d2e2:	230e      	movs	r3, #14
 800d2e4:	5ec9      	ldrsh	r1, [r1, r3]
 800d2e6:	0014      	movs	r4, r2
 800d2e8:	b096      	sub	sp, #88	; 0x58
 800d2ea:	2900      	cmp	r1, #0
 800d2ec:	da07      	bge.n	800d2fe <__swhatbuf_r+0x22>
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	602b      	str	r3, [r5, #0]
 800d2f2:	89b3      	ldrh	r3, [r6, #12]
 800d2f4:	061b      	lsls	r3, r3, #24
 800d2f6:	d411      	bmi.n	800d31c <__swhatbuf_r+0x40>
 800d2f8:	2380      	movs	r3, #128	; 0x80
 800d2fa:	00db      	lsls	r3, r3, #3
 800d2fc:	e00f      	b.n	800d31e <__swhatbuf_r+0x42>
 800d2fe:	466a      	mov	r2, sp
 800d300:	f001 f828 	bl	800e354 <_fstat_r>
 800d304:	2800      	cmp	r0, #0
 800d306:	dbf2      	blt.n	800d2ee <__swhatbuf_r+0x12>
 800d308:	23f0      	movs	r3, #240	; 0xf0
 800d30a:	9901      	ldr	r1, [sp, #4]
 800d30c:	021b      	lsls	r3, r3, #8
 800d30e:	4019      	ands	r1, r3
 800d310:	4b05      	ldr	r3, [pc, #20]	; (800d328 <__swhatbuf_r+0x4c>)
 800d312:	18c9      	adds	r1, r1, r3
 800d314:	424b      	negs	r3, r1
 800d316:	4159      	adcs	r1, r3
 800d318:	6029      	str	r1, [r5, #0]
 800d31a:	e7ed      	b.n	800d2f8 <__swhatbuf_r+0x1c>
 800d31c:	2340      	movs	r3, #64	; 0x40
 800d31e:	2000      	movs	r0, #0
 800d320:	6023      	str	r3, [r4, #0]
 800d322:	b016      	add	sp, #88	; 0x58
 800d324:	bd70      	pop	{r4, r5, r6, pc}
 800d326:	46c0      	nop			; (mov r8, r8)
 800d328:	ffffe000 	.word	0xffffe000

0800d32c <__smakebuf_r>:
 800d32c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d32e:	2602      	movs	r6, #2
 800d330:	898b      	ldrh	r3, [r1, #12]
 800d332:	0005      	movs	r5, r0
 800d334:	000c      	movs	r4, r1
 800d336:	4233      	tst	r3, r6
 800d338:	d006      	beq.n	800d348 <__smakebuf_r+0x1c>
 800d33a:	0023      	movs	r3, r4
 800d33c:	3347      	adds	r3, #71	; 0x47
 800d33e:	6023      	str	r3, [r4, #0]
 800d340:	6123      	str	r3, [r4, #16]
 800d342:	2301      	movs	r3, #1
 800d344:	6163      	str	r3, [r4, #20]
 800d346:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d348:	466a      	mov	r2, sp
 800d34a:	ab01      	add	r3, sp, #4
 800d34c:	f7ff ffc6 	bl	800d2dc <__swhatbuf_r>
 800d350:	9900      	ldr	r1, [sp, #0]
 800d352:	0007      	movs	r7, r0
 800d354:	0028      	movs	r0, r5
 800d356:	f000 fd77 	bl	800de48 <_malloc_r>
 800d35a:	2800      	cmp	r0, #0
 800d35c:	d108      	bne.n	800d370 <__smakebuf_r+0x44>
 800d35e:	220c      	movs	r2, #12
 800d360:	5ea3      	ldrsh	r3, [r4, r2]
 800d362:	059a      	lsls	r2, r3, #22
 800d364:	d4ef      	bmi.n	800d346 <__smakebuf_r+0x1a>
 800d366:	2203      	movs	r2, #3
 800d368:	4393      	bics	r3, r2
 800d36a:	431e      	orrs	r6, r3
 800d36c:	81a6      	strh	r6, [r4, #12]
 800d36e:	e7e4      	b.n	800d33a <__smakebuf_r+0xe>
 800d370:	4b0f      	ldr	r3, [pc, #60]	; (800d3b0 <__smakebuf_r+0x84>)
 800d372:	62ab      	str	r3, [r5, #40]	; 0x28
 800d374:	2380      	movs	r3, #128	; 0x80
 800d376:	89a2      	ldrh	r2, [r4, #12]
 800d378:	6020      	str	r0, [r4, #0]
 800d37a:	4313      	orrs	r3, r2
 800d37c:	81a3      	strh	r3, [r4, #12]
 800d37e:	9b00      	ldr	r3, [sp, #0]
 800d380:	6120      	str	r0, [r4, #16]
 800d382:	6163      	str	r3, [r4, #20]
 800d384:	9b01      	ldr	r3, [sp, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d00d      	beq.n	800d3a6 <__smakebuf_r+0x7a>
 800d38a:	0028      	movs	r0, r5
 800d38c:	230e      	movs	r3, #14
 800d38e:	5ee1      	ldrsh	r1, [r4, r3]
 800d390:	f000 fff2 	bl	800e378 <_isatty_r>
 800d394:	2800      	cmp	r0, #0
 800d396:	d006      	beq.n	800d3a6 <__smakebuf_r+0x7a>
 800d398:	2203      	movs	r2, #3
 800d39a:	89a3      	ldrh	r3, [r4, #12]
 800d39c:	4393      	bics	r3, r2
 800d39e:	001a      	movs	r2, r3
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	81a3      	strh	r3, [r4, #12]
 800d3a6:	89a0      	ldrh	r0, [r4, #12]
 800d3a8:	4307      	orrs	r7, r0
 800d3aa:	81a7      	strh	r7, [r4, #12]
 800d3ac:	e7cb      	b.n	800d346 <__smakebuf_r+0x1a>
 800d3ae:	46c0      	nop			; (mov r8, r8)
 800d3b0:	0800ca2d 	.word	0x0800ca2d

0800d3b4 <malloc>:
 800d3b4:	b510      	push	{r4, lr}
 800d3b6:	4b03      	ldr	r3, [pc, #12]	; (800d3c4 <malloc+0x10>)
 800d3b8:	0001      	movs	r1, r0
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	f000 fd44 	bl	800de48 <_malloc_r>
 800d3c0:	bd10      	pop	{r4, pc}
 800d3c2:	46c0      	nop			; (mov r8, r8)
 800d3c4:	2000000c 	.word	0x2000000c

0800d3c8 <__ascii_mbtowc>:
 800d3c8:	b082      	sub	sp, #8
 800d3ca:	2900      	cmp	r1, #0
 800d3cc:	d100      	bne.n	800d3d0 <__ascii_mbtowc+0x8>
 800d3ce:	a901      	add	r1, sp, #4
 800d3d0:	1e10      	subs	r0, r2, #0
 800d3d2:	d006      	beq.n	800d3e2 <__ascii_mbtowc+0x1a>
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d006      	beq.n	800d3e6 <__ascii_mbtowc+0x1e>
 800d3d8:	7813      	ldrb	r3, [r2, #0]
 800d3da:	600b      	str	r3, [r1, #0]
 800d3dc:	7810      	ldrb	r0, [r2, #0]
 800d3de:	1e43      	subs	r3, r0, #1
 800d3e0:	4198      	sbcs	r0, r3
 800d3e2:	b002      	add	sp, #8
 800d3e4:	4770      	bx	lr
 800d3e6:	2002      	movs	r0, #2
 800d3e8:	4240      	negs	r0, r0
 800d3ea:	e7fa      	b.n	800d3e2 <__ascii_mbtowc+0x1a>

0800d3ec <memchr>:
 800d3ec:	b2c9      	uxtb	r1, r1
 800d3ee:	1882      	adds	r2, r0, r2
 800d3f0:	4290      	cmp	r0, r2
 800d3f2:	d101      	bne.n	800d3f8 <memchr+0xc>
 800d3f4:	2000      	movs	r0, #0
 800d3f6:	4770      	bx	lr
 800d3f8:	7803      	ldrb	r3, [r0, #0]
 800d3fa:	428b      	cmp	r3, r1
 800d3fc:	d0fb      	beq.n	800d3f6 <memchr+0xa>
 800d3fe:	3001      	adds	r0, #1
 800d400:	e7f6      	b.n	800d3f0 <memchr+0x4>
	...

0800d404 <_Balloc>:
 800d404:	b570      	push	{r4, r5, r6, lr}
 800d406:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d408:	0006      	movs	r6, r0
 800d40a:	000c      	movs	r4, r1
 800d40c:	2d00      	cmp	r5, #0
 800d40e:	d10e      	bne.n	800d42e <_Balloc+0x2a>
 800d410:	2010      	movs	r0, #16
 800d412:	f7ff ffcf 	bl	800d3b4 <malloc>
 800d416:	1e02      	subs	r2, r0, #0
 800d418:	6270      	str	r0, [r6, #36]	; 0x24
 800d41a:	d104      	bne.n	800d426 <_Balloc+0x22>
 800d41c:	2166      	movs	r1, #102	; 0x66
 800d41e:	4b19      	ldr	r3, [pc, #100]	; (800d484 <_Balloc+0x80>)
 800d420:	4819      	ldr	r0, [pc, #100]	; (800d488 <_Balloc+0x84>)
 800d422:	f000 ff57 	bl	800e2d4 <__assert_func>
 800d426:	6045      	str	r5, [r0, #4]
 800d428:	6085      	str	r5, [r0, #8]
 800d42a:	6005      	str	r5, [r0, #0]
 800d42c:	60c5      	str	r5, [r0, #12]
 800d42e:	6a75      	ldr	r5, [r6, #36]	; 0x24
 800d430:	68eb      	ldr	r3, [r5, #12]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d013      	beq.n	800d45e <_Balloc+0x5a>
 800d436:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d438:	00a2      	lsls	r2, r4, #2
 800d43a:	68db      	ldr	r3, [r3, #12]
 800d43c:	189b      	adds	r3, r3, r2
 800d43e:	6818      	ldr	r0, [r3, #0]
 800d440:	2800      	cmp	r0, #0
 800d442:	d118      	bne.n	800d476 <_Balloc+0x72>
 800d444:	2101      	movs	r1, #1
 800d446:	000d      	movs	r5, r1
 800d448:	40a5      	lsls	r5, r4
 800d44a:	1d6a      	adds	r2, r5, #5
 800d44c:	0030      	movs	r0, r6
 800d44e:	0092      	lsls	r2, r2, #2
 800d450:	f000 fca2 	bl	800dd98 <_calloc_r>
 800d454:	2800      	cmp	r0, #0
 800d456:	d00c      	beq.n	800d472 <_Balloc+0x6e>
 800d458:	6044      	str	r4, [r0, #4]
 800d45a:	6085      	str	r5, [r0, #8]
 800d45c:	e00d      	b.n	800d47a <_Balloc+0x76>
 800d45e:	2221      	movs	r2, #33	; 0x21
 800d460:	2104      	movs	r1, #4
 800d462:	0030      	movs	r0, r6
 800d464:	f000 fc98 	bl	800dd98 <_calloc_r>
 800d468:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d46a:	60e8      	str	r0, [r5, #12]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1e1      	bne.n	800d436 <_Balloc+0x32>
 800d472:	2000      	movs	r0, #0
 800d474:	bd70      	pop	{r4, r5, r6, pc}
 800d476:	6802      	ldr	r2, [r0, #0]
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	2300      	movs	r3, #0
 800d47c:	6103      	str	r3, [r0, #16]
 800d47e:	60c3      	str	r3, [r0, #12]
 800d480:	e7f8      	b.n	800d474 <_Balloc+0x70>
 800d482:	46c0      	nop			; (mov r8, r8)
 800d484:	08010d05 	.word	0x08010d05
 800d488:	08010e6c 	.word	0x08010e6c

0800d48c <_Bfree>:
 800d48c:	b570      	push	{r4, r5, r6, lr}
 800d48e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d490:	0005      	movs	r5, r0
 800d492:	000c      	movs	r4, r1
 800d494:	2e00      	cmp	r6, #0
 800d496:	d10e      	bne.n	800d4b6 <_Bfree+0x2a>
 800d498:	2010      	movs	r0, #16
 800d49a:	f7ff ff8b 	bl	800d3b4 <malloc>
 800d49e:	1e02      	subs	r2, r0, #0
 800d4a0:	6268      	str	r0, [r5, #36]	; 0x24
 800d4a2:	d104      	bne.n	800d4ae <_Bfree+0x22>
 800d4a4:	218a      	movs	r1, #138	; 0x8a
 800d4a6:	4b09      	ldr	r3, [pc, #36]	; (800d4cc <_Bfree+0x40>)
 800d4a8:	4809      	ldr	r0, [pc, #36]	; (800d4d0 <_Bfree+0x44>)
 800d4aa:	f000 ff13 	bl	800e2d4 <__assert_func>
 800d4ae:	6046      	str	r6, [r0, #4]
 800d4b0:	6086      	str	r6, [r0, #8]
 800d4b2:	6006      	str	r6, [r0, #0]
 800d4b4:	60c6      	str	r6, [r0, #12]
 800d4b6:	2c00      	cmp	r4, #0
 800d4b8:	d007      	beq.n	800d4ca <_Bfree+0x3e>
 800d4ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d4bc:	6862      	ldr	r2, [r4, #4]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	0092      	lsls	r2, r2, #2
 800d4c2:	189b      	adds	r3, r3, r2
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	6022      	str	r2, [r4, #0]
 800d4c8:	601c      	str	r4, [r3, #0]
 800d4ca:	bd70      	pop	{r4, r5, r6, pc}
 800d4cc:	08010d05 	.word	0x08010d05
 800d4d0:	08010e6c 	.word	0x08010e6c

0800d4d4 <__multadd>:
 800d4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4d6:	000e      	movs	r6, r1
 800d4d8:	9001      	str	r0, [sp, #4]
 800d4da:	000c      	movs	r4, r1
 800d4dc:	001d      	movs	r5, r3
 800d4de:	2000      	movs	r0, #0
 800d4e0:	690f      	ldr	r7, [r1, #16]
 800d4e2:	3614      	adds	r6, #20
 800d4e4:	6833      	ldr	r3, [r6, #0]
 800d4e6:	3001      	adds	r0, #1
 800d4e8:	b299      	uxth	r1, r3
 800d4ea:	4351      	muls	r1, r2
 800d4ec:	0c1b      	lsrs	r3, r3, #16
 800d4ee:	4353      	muls	r3, r2
 800d4f0:	1949      	adds	r1, r1, r5
 800d4f2:	0c0d      	lsrs	r5, r1, #16
 800d4f4:	195b      	adds	r3, r3, r5
 800d4f6:	0c1d      	lsrs	r5, r3, #16
 800d4f8:	b289      	uxth	r1, r1
 800d4fa:	041b      	lsls	r3, r3, #16
 800d4fc:	185b      	adds	r3, r3, r1
 800d4fe:	c608      	stmia	r6!, {r3}
 800d500:	4287      	cmp	r7, r0
 800d502:	dcef      	bgt.n	800d4e4 <__multadd+0x10>
 800d504:	2d00      	cmp	r5, #0
 800d506:	d022      	beq.n	800d54e <__multadd+0x7a>
 800d508:	68a3      	ldr	r3, [r4, #8]
 800d50a:	42bb      	cmp	r3, r7
 800d50c:	dc19      	bgt.n	800d542 <__multadd+0x6e>
 800d50e:	6863      	ldr	r3, [r4, #4]
 800d510:	9801      	ldr	r0, [sp, #4]
 800d512:	1c59      	adds	r1, r3, #1
 800d514:	f7ff ff76 	bl	800d404 <_Balloc>
 800d518:	1e06      	subs	r6, r0, #0
 800d51a:	d105      	bne.n	800d528 <__multadd+0x54>
 800d51c:	0002      	movs	r2, r0
 800d51e:	21b5      	movs	r1, #181	; 0xb5
 800d520:	4b0c      	ldr	r3, [pc, #48]	; (800d554 <__multadd+0x80>)
 800d522:	480d      	ldr	r0, [pc, #52]	; (800d558 <__multadd+0x84>)
 800d524:	f000 fed6 	bl	800e2d4 <__assert_func>
 800d528:	0021      	movs	r1, r4
 800d52a:	6923      	ldr	r3, [r4, #16]
 800d52c:	310c      	adds	r1, #12
 800d52e:	1c9a      	adds	r2, r3, #2
 800d530:	0092      	lsls	r2, r2, #2
 800d532:	300c      	adds	r0, #12
 800d534:	f7fc fdcc 	bl	800a0d0 <memcpy>
 800d538:	0021      	movs	r1, r4
 800d53a:	9801      	ldr	r0, [sp, #4]
 800d53c:	f7ff ffa6 	bl	800d48c <_Bfree>
 800d540:	0034      	movs	r4, r6
 800d542:	1d3b      	adds	r3, r7, #4
 800d544:	009b      	lsls	r3, r3, #2
 800d546:	18e3      	adds	r3, r4, r3
 800d548:	605d      	str	r5, [r3, #4]
 800d54a:	1c7b      	adds	r3, r7, #1
 800d54c:	6123      	str	r3, [r4, #16]
 800d54e:	0020      	movs	r0, r4
 800d550:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d552:	46c0      	nop			; (mov r8, r8)
 800d554:	08010d7b 	.word	0x08010d7b
 800d558:	08010e6c 	.word	0x08010e6c

0800d55c <__s2b>:
 800d55c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d55e:	0006      	movs	r6, r0
 800d560:	0018      	movs	r0, r3
 800d562:	000c      	movs	r4, r1
 800d564:	3008      	adds	r0, #8
 800d566:	2109      	movs	r1, #9
 800d568:	9301      	str	r3, [sp, #4]
 800d56a:	0015      	movs	r5, r2
 800d56c:	f7f2 fe72 	bl	8000254 <__divsi3>
 800d570:	2301      	movs	r3, #1
 800d572:	2100      	movs	r1, #0
 800d574:	4283      	cmp	r3, r0
 800d576:	db0a      	blt.n	800d58e <__s2b+0x32>
 800d578:	0030      	movs	r0, r6
 800d57a:	f7ff ff43 	bl	800d404 <_Balloc>
 800d57e:	1e01      	subs	r1, r0, #0
 800d580:	d108      	bne.n	800d594 <__s2b+0x38>
 800d582:	0002      	movs	r2, r0
 800d584:	4b19      	ldr	r3, [pc, #100]	; (800d5ec <__s2b+0x90>)
 800d586:	481a      	ldr	r0, [pc, #104]	; (800d5f0 <__s2b+0x94>)
 800d588:	31ce      	adds	r1, #206	; 0xce
 800d58a:	f000 fea3 	bl	800e2d4 <__assert_func>
 800d58e:	005b      	lsls	r3, r3, #1
 800d590:	3101      	adds	r1, #1
 800d592:	e7ef      	b.n	800d574 <__s2b+0x18>
 800d594:	9b08      	ldr	r3, [sp, #32]
 800d596:	6143      	str	r3, [r0, #20]
 800d598:	2301      	movs	r3, #1
 800d59a:	6103      	str	r3, [r0, #16]
 800d59c:	2d09      	cmp	r5, #9
 800d59e:	dd18      	ble.n	800d5d2 <__s2b+0x76>
 800d5a0:	0023      	movs	r3, r4
 800d5a2:	3309      	adds	r3, #9
 800d5a4:	001f      	movs	r7, r3
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	1964      	adds	r4, r4, r5
 800d5aa:	783b      	ldrb	r3, [r7, #0]
 800d5ac:	220a      	movs	r2, #10
 800d5ae:	0030      	movs	r0, r6
 800d5b0:	3b30      	subs	r3, #48	; 0x30
 800d5b2:	f7ff ff8f 	bl	800d4d4 <__multadd>
 800d5b6:	3701      	adds	r7, #1
 800d5b8:	0001      	movs	r1, r0
 800d5ba:	42a7      	cmp	r7, r4
 800d5bc:	d1f5      	bne.n	800d5aa <__s2b+0x4e>
 800d5be:	002c      	movs	r4, r5
 800d5c0:	9b00      	ldr	r3, [sp, #0]
 800d5c2:	3c08      	subs	r4, #8
 800d5c4:	191c      	adds	r4, r3, r4
 800d5c6:	002f      	movs	r7, r5
 800d5c8:	9b01      	ldr	r3, [sp, #4]
 800d5ca:	429f      	cmp	r7, r3
 800d5cc:	db04      	blt.n	800d5d8 <__s2b+0x7c>
 800d5ce:	0008      	movs	r0, r1
 800d5d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d5d2:	2509      	movs	r5, #9
 800d5d4:	340a      	adds	r4, #10
 800d5d6:	e7f6      	b.n	800d5c6 <__s2b+0x6a>
 800d5d8:	1b63      	subs	r3, r4, r5
 800d5da:	5ddb      	ldrb	r3, [r3, r7]
 800d5dc:	220a      	movs	r2, #10
 800d5de:	0030      	movs	r0, r6
 800d5e0:	3b30      	subs	r3, #48	; 0x30
 800d5e2:	f7ff ff77 	bl	800d4d4 <__multadd>
 800d5e6:	3701      	adds	r7, #1
 800d5e8:	0001      	movs	r1, r0
 800d5ea:	e7ed      	b.n	800d5c8 <__s2b+0x6c>
 800d5ec:	08010d7b 	.word	0x08010d7b
 800d5f0:	08010e6c 	.word	0x08010e6c

0800d5f4 <__hi0bits>:
 800d5f4:	0003      	movs	r3, r0
 800d5f6:	0c02      	lsrs	r2, r0, #16
 800d5f8:	2000      	movs	r0, #0
 800d5fa:	4282      	cmp	r2, r0
 800d5fc:	d101      	bne.n	800d602 <__hi0bits+0xe>
 800d5fe:	041b      	lsls	r3, r3, #16
 800d600:	3010      	adds	r0, #16
 800d602:	0e1a      	lsrs	r2, r3, #24
 800d604:	d101      	bne.n	800d60a <__hi0bits+0x16>
 800d606:	3008      	adds	r0, #8
 800d608:	021b      	lsls	r3, r3, #8
 800d60a:	0f1a      	lsrs	r2, r3, #28
 800d60c:	d101      	bne.n	800d612 <__hi0bits+0x1e>
 800d60e:	3004      	adds	r0, #4
 800d610:	011b      	lsls	r3, r3, #4
 800d612:	0f9a      	lsrs	r2, r3, #30
 800d614:	d101      	bne.n	800d61a <__hi0bits+0x26>
 800d616:	3002      	adds	r0, #2
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	db03      	blt.n	800d626 <__hi0bits+0x32>
 800d61e:	3001      	adds	r0, #1
 800d620:	005b      	lsls	r3, r3, #1
 800d622:	d400      	bmi.n	800d626 <__hi0bits+0x32>
 800d624:	2020      	movs	r0, #32
 800d626:	4770      	bx	lr

0800d628 <__lo0bits>:
 800d628:	6803      	ldr	r3, [r0, #0]
 800d62a:	0002      	movs	r2, r0
 800d62c:	2107      	movs	r1, #7
 800d62e:	0018      	movs	r0, r3
 800d630:	4008      	ands	r0, r1
 800d632:	420b      	tst	r3, r1
 800d634:	d00d      	beq.n	800d652 <__lo0bits+0x2a>
 800d636:	3906      	subs	r1, #6
 800d638:	2000      	movs	r0, #0
 800d63a:	420b      	tst	r3, r1
 800d63c:	d105      	bne.n	800d64a <__lo0bits+0x22>
 800d63e:	3002      	adds	r0, #2
 800d640:	4203      	tst	r3, r0
 800d642:	d003      	beq.n	800d64c <__lo0bits+0x24>
 800d644:	40cb      	lsrs	r3, r1
 800d646:	0008      	movs	r0, r1
 800d648:	6013      	str	r3, [r2, #0]
 800d64a:	4770      	bx	lr
 800d64c:	089b      	lsrs	r3, r3, #2
 800d64e:	6013      	str	r3, [r2, #0]
 800d650:	e7fb      	b.n	800d64a <__lo0bits+0x22>
 800d652:	b299      	uxth	r1, r3
 800d654:	2900      	cmp	r1, #0
 800d656:	d101      	bne.n	800d65c <__lo0bits+0x34>
 800d658:	2010      	movs	r0, #16
 800d65a:	0c1b      	lsrs	r3, r3, #16
 800d65c:	b2d9      	uxtb	r1, r3
 800d65e:	2900      	cmp	r1, #0
 800d660:	d101      	bne.n	800d666 <__lo0bits+0x3e>
 800d662:	3008      	adds	r0, #8
 800d664:	0a1b      	lsrs	r3, r3, #8
 800d666:	0719      	lsls	r1, r3, #28
 800d668:	d101      	bne.n	800d66e <__lo0bits+0x46>
 800d66a:	3004      	adds	r0, #4
 800d66c:	091b      	lsrs	r3, r3, #4
 800d66e:	0799      	lsls	r1, r3, #30
 800d670:	d101      	bne.n	800d676 <__lo0bits+0x4e>
 800d672:	3002      	adds	r0, #2
 800d674:	089b      	lsrs	r3, r3, #2
 800d676:	07d9      	lsls	r1, r3, #31
 800d678:	d4e9      	bmi.n	800d64e <__lo0bits+0x26>
 800d67a:	3001      	adds	r0, #1
 800d67c:	085b      	lsrs	r3, r3, #1
 800d67e:	d1e6      	bne.n	800d64e <__lo0bits+0x26>
 800d680:	2020      	movs	r0, #32
 800d682:	e7e2      	b.n	800d64a <__lo0bits+0x22>

0800d684 <__i2b>:
 800d684:	b510      	push	{r4, lr}
 800d686:	000c      	movs	r4, r1
 800d688:	2101      	movs	r1, #1
 800d68a:	f7ff febb 	bl	800d404 <_Balloc>
 800d68e:	2800      	cmp	r0, #0
 800d690:	d106      	bne.n	800d6a0 <__i2b+0x1c>
 800d692:	21a0      	movs	r1, #160	; 0xa0
 800d694:	0002      	movs	r2, r0
 800d696:	4b04      	ldr	r3, [pc, #16]	; (800d6a8 <__i2b+0x24>)
 800d698:	4804      	ldr	r0, [pc, #16]	; (800d6ac <__i2b+0x28>)
 800d69a:	0049      	lsls	r1, r1, #1
 800d69c:	f000 fe1a 	bl	800e2d4 <__assert_func>
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	6144      	str	r4, [r0, #20]
 800d6a4:	6103      	str	r3, [r0, #16]
 800d6a6:	bd10      	pop	{r4, pc}
 800d6a8:	08010d7b 	.word	0x08010d7b
 800d6ac:	08010e6c 	.word	0x08010e6c

0800d6b0 <__multiply>:
 800d6b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6b2:	690b      	ldr	r3, [r1, #16]
 800d6b4:	0014      	movs	r4, r2
 800d6b6:	6912      	ldr	r2, [r2, #16]
 800d6b8:	000d      	movs	r5, r1
 800d6ba:	b089      	sub	sp, #36	; 0x24
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	da01      	bge.n	800d6c4 <__multiply+0x14>
 800d6c0:	0025      	movs	r5, r4
 800d6c2:	000c      	movs	r4, r1
 800d6c4:	692f      	ldr	r7, [r5, #16]
 800d6c6:	6926      	ldr	r6, [r4, #16]
 800d6c8:	6869      	ldr	r1, [r5, #4]
 800d6ca:	19bb      	adds	r3, r7, r6
 800d6cc:	9302      	str	r3, [sp, #8]
 800d6ce:	68ab      	ldr	r3, [r5, #8]
 800d6d0:	19ba      	adds	r2, r7, r6
 800d6d2:	4293      	cmp	r3, r2
 800d6d4:	da00      	bge.n	800d6d8 <__multiply+0x28>
 800d6d6:	3101      	adds	r1, #1
 800d6d8:	f7ff fe94 	bl	800d404 <_Balloc>
 800d6dc:	9001      	str	r0, [sp, #4]
 800d6de:	2800      	cmp	r0, #0
 800d6e0:	d106      	bne.n	800d6f0 <__multiply+0x40>
 800d6e2:	215e      	movs	r1, #94	; 0x5e
 800d6e4:	0002      	movs	r2, r0
 800d6e6:	4b48      	ldr	r3, [pc, #288]	; (800d808 <__multiply+0x158>)
 800d6e8:	4848      	ldr	r0, [pc, #288]	; (800d80c <__multiply+0x15c>)
 800d6ea:	31ff      	adds	r1, #255	; 0xff
 800d6ec:	f000 fdf2 	bl	800e2d4 <__assert_func>
 800d6f0:	9b01      	ldr	r3, [sp, #4]
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	3314      	adds	r3, #20
 800d6f6:	469c      	mov	ip, r3
 800d6f8:	19bb      	adds	r3, r7, r6
 800d6fa:	009b      	lsls	r3, r3, #2
 800d6fc:	4463      	add	r3, ip
 800d6fe:	9303      	str	r3, [sp, #12]
 800d700:	4663      	mov	r3, ip
 800d702:	9903      	ldr	r1, [sp, #12]
 800d704:	428b      	cmp	r3, r1
 800d706:	d32c      	bcc.n	800d762 <__multiply+0xb2>
 800d708:	002b      	movs	r3, r5
 800d70a:	0022      	movs	r2, r4
 800d70c:	3314      	adds	r3, #20
 800d70e:	00bf      	lsls	r7, r7, #2
 800d710:	3214      	adds	r2, #20
 800d712:	9306      	str	r3, [sp, #24]
 800d714:	00b6      	lsls	r6, r6, #2
 800d716:	19db      	adds	r3, r3, r7
 800d718:	9304      	str	r3, [sp, #16]
 800d71a:	1993      	adds	r3, r2, r6
 800d71c:	9307      	str	r3, [sp, #28]
 800d71e:	2304      	movs	r3, #4
 800d720:	9305      	str	r3, [sp, #20]
 800d722:	002b      	movs	r3, r5
 800d724:	9904      	ldr	r1, [sp, #16]
 800d726:	3315      	adds	r3, #21
 800d728:	9200      	str	r2, [sp, #0]
 800d72a:	4299      	cmp	r1, r3
 800d72c:	d305      	bcc.n	800d73a <__multiply+0x8a>
 800d72e:	1b4b      	subs	r3, r1, r5
 800d730:	3b15      	subs	r3, #21
 800d732:	089b      	lsrs	r3, r3, #2
 800d734:	3301      	adds	r3, #1
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	9305      	str	r3, [sp, #20]
 800d73a:	9b07      	ldr	r3, [sp, #28]
 800d73c:	9a00      	ldr	r2, [sp, #0]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d311      	bcc.n	800d766 <__multiply+0xb6>
 800d742:	9b02      	ldr	r3, [sp, #8]
 800d744:	2b00      	cmp	r3, #0
 800d746:	dd06      	ble.n	800d756 <__multiply+0xa6>
 800d748:	9b03      	ldr	r3, [sp, #12]
 800d74a:	3b04      	subs	r3, #4
 800d74c:	9303      	str	r3, [sp, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	9300      	str	r3, [sp, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d054      	beq.n	800d800 <__multiply+0x150>
 800d756:	9b01      	ldr	r3, [sp, #4]
 800d758:	9a02      	ldr	r2, [sp, #8]
 800d75a:	0018      	movs	r0, r3
 800d75c:	611a      	str	r2, [r3, #16]
 800d75e:	b009      	add	sp, #36	; 0x24
 800d760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d762:	c304      	stmia	r3!, {r2}
 800d764:	e7cd      	b.n	800d702 <__multiply+0x52>
 800d766:	9b00      	ldr	r3, [sp, #0]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	b298      	uxth	r0, r3
 800d76c:	2800      	cmp	r0, #0
 800d76e:	d01c      	beq.n	800d7aa <__multiply+0xfa>
 800d770:	4667      	mov	r7, ip
 800d772:	2400      	movs	r4, #0
 800d774:	9e06      	ldr	r6, [sp, #24]
 800d776:	ce02      	ldmia	r6!, {r1}
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	b28b      	uxth	r3, r1
 800d77c:	4343      	muls	r3, r0
 800d77e:	0c09      	lsrs	r1, r1, #16
 800d780:	4341      	muls	r1, r0
 800d782:	b292      	uxth	r2, r2
 800d784:	189b      	adds	r3, r3, r2
 800d786:	191b      	adds	r3, r3, r4
 800d788:	000c      	movs	r4, r1
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	0c11      	lsrs	r1, r2, #16
 800d78e:	1861      	adds	r1, r4, r1
 800d790:	0c1c      	lsrs	r4, r3, #16
 800d792:	1909      	adds	r1, r1, r4
 800d794:	0c0c      	lsrs	r4, r1, #16
 800d796:	b29b      	uxth	r3, r3
 800d798:	0409      	lsls	r1, r1, #16
 800d79a:	430b      	orrs	r3, r1
 800d79c:	c708      	stmia	r7!, {r3}
 800d79e:	9b04      	ldr	r3, [sp, #16]
 800d7a0:	42b3      	cmp	r3, r6
 800d7a2:	d8e8      	bhi.n	800d776 <__multiply+0xc6>
 800d7a4:	4663      	mov	r3, ip
 800d7a6:	9a05      	ldr	r2, [sp, #20]
 800d7a8:	509c      	str	r4, [r3, r2]
 800d7aa:	9b00      	ldr	r3, [sp, #0]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	0c1e      	lsrs	r6, r3, #16
 800d7b0:	d020      	beq.n	800d7f4 <__multiply+0x144>
 800d7b2:	4663      	mov	r3, ip
 800d7b4:	002c      	movs	r4, r5
 800d7b6:	4660      	mov	r0, ip
 800d7b8:	2700      	movs	r7, #0
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	3414      	adds	r4, #20
 800d7be:	6822      	ldr	r2, [r4, #0]
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	b291      	uxth	r1, r2
 800d7c4:	4371      	muls	r1, r6
 800d7c6:	6802      	ldr	r2, [r0, #0]
 800d7c8:	0c12      	lsrs	r2, r2, #16
 800d7ca:	1889      	adds	r1, r1, r2
 800d7cc:	19cf      	adds	r7, r1, r7
 800d7ce:	0439      	lsls	r1, r7, #16
 800d7d0:	430b      	orrs	r3, r1
 800d7d2:	6003      	str	r3, [r0, #0]
 800d7d4:	cc02      	ldmia	r4!, {r1}
 800d7d6:	6843      	ldr	r3, [r0, #4]
 800d7d8:	0c09      	lsrs	r1, r1, #16
 800d7da:	4371      	muls	r1, r6
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	0c3f      	lsrs	r7, r7, #16
 800d7e0:	18cb      	adds	r3, r1, r3
 800d7e2:	9a04      	ldr	r2, [sp, #16]
 800d7e4:	19db      	adds	r3, r3, r7
 800d7e6:	0c1f      	lsrs	r7, r3, #16
 800d7e8:	3004      	adds	r0, #4
 800d7ea:	42a2      	cmp	r2, r4
 800d7ec:	d8e7      	bhi.n	800d7be <__multiply+0x10e>
 800d7ee:	4662      	mov	r2, ip
 800d7f0:	9905      	ldr	r1, [sp, #20]
 800d7f2:	5053      	str	r3, [r2, r1]
 800d7f4:	9b00      	ldr	r3, [sp, #0]
 800d7f6:	3304      	adds	r3, #4
 800d7f8:	9300      	str	r3, [sp, #0]
 800d7fa:	2304      	movs	r3, #4
 800d7fc:	449c      	add	ip, r3
 800d7fe:	e79c      	b.n	800d73a <__multiply+0x8a>
 800d800:	9b02      	ldr	r3, [sp, #8]
 800d802:	3b01      	subs	r3, #1
 800d804:	9302      	str	r3, [sp, #8]
 800d806:	e79c      	b.n	800d742 <__multiply+0x92>
 800d808:	08010d7b 	.word	0x08010d7b
 800d80c:	08010e6c 	.word	0x08010e6c

0800d810 <__pow5mult>:
 800d810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d812:	2303      	movs	r3, #3
 800d814:	0015      	movs	r5, r2
 800d816:	0007      	movs	r7, r0
 800d818:	000e      	movs	r6, r1
 800d81a:	401a      	ands	r2, r3
 800d81c:	421d      	tst	r5, r3
 800d81e:	d008      	beq.n	800d832 <__pow5mult+0x22>
 800d820:	4925      	ldr	r1, [pc, #148]	; (800d8b8 <__pow5mult+0xa8>)
 800d822:	3a01      	subs	r2, #1
 800d824:	0092      	lsls	r2, r2, #2
 800d826:	5852      	ldr	r2, [r2, r1]
 800d828:	2300      	movs	r3, #0
 800d82a:	0031      	movs	r1, r6
 800d82c:	f7ff fe52 	bl	800d4d4 <__multadd>
 800d830:	0006      	movs	r6, r0
 800d832:	10ad      	asrs	r5, r5, #2
 800d834:	d03d      	beq.n	800d8b2 <__pow5mult+0xa2>
 800d836:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d838:	2c00      	cmp	r4, #0
 800d83a:	d10f      	bne.n	800d85c <__pow5mult+0x4c>
 800d83c:	2010      	movs	r0, #16
 800d83e:	f7ff fdb9 	bl	800d3b4 <malloc>
 800d842:	1e02      	subs	r2, r0, #0
 800d844:	6278      	str	r0, [r7, #36]	; 0x24
 800d846:	d105      	bne.n	800d854 <__pow5mult+0x44>
 800d848:	21d7      	movs	r1, #215	; 0xd7
 800d84a:	4b1c      	ldr	r3, [pc, #112]	; (800d8bc <__pow5mult+0xac>)
 800d84c:	481c      	ldr	r0, [pc, #112]	; (800d8c0 <__pow5mult+0xb0>)
 800d84e:	0049      	lsls	r1, r1, #1
 800d850:	f000 fd40 	bl	800e2d4 <__assert_func>
 800d854:	6044      	str	r4, [r0, #4]
 800d856:	6084      	str	r4, [r0, #8]
 800d858:	6004      	str	r4, [r0, #0]
 800d85a:	60c4      	str	r4, [r0, #12]
 800d85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d85e:	689c      	ldr	r4, [r3, #8]
 800d860:	9301      	str	r3, [sp, #4]
 800d862:	2c00      	cmp	r4, #0
 800d864:	d108      	bne.n	800d878 <__pow5mult+0x68>
 800d866:	0038      	movs	r0, r7
 800d868:	4916      	ldr	r1, [pc, #88]	; (800d8c4 <__pow5mult+0xb4>)
 800d86a:	f7ff ff0b 	bl	800d684 <__i2b>
 800d86e:	9b01      	ldr	r3, [sp, #4]
 800d870:	0004      	movs	r4, r0
 800d872:	6098      	str	r0, [r3, #8]
 800d874:	2300      	movs	r3, #0
 800d876:	6003      	str	r3, [r0, #0]
 800d878:	2301      	movs	r3, #1
 800d87a:	421d      	tst	r5, r3
 800d87c:	d00a      	beq.n	800d894 <__pow5mult+0x84>
 800d87e:	0031      	movs	r1, r6
 800d880:	0022      	movs	r2, r4
 800d882:	0038      	movs	r0, r7
 800d884:	f7ff ff14 	bl	800d6b0 <__multiply>
 800d888:	0031      	movs	r1, r6
 800d88a:	9001      	str	r0, [sp, #4]
 800d88c:	0038      	movs	r0, r7
 800d88e:	f7ff fdfd 	bl	800d48c <_Bfree>
 800d892:	9e01      	ldr	r6, [sp, #4]
 800d894:	106d      	asrs	r5, r5, #1
 800d896:	d00c      	beq.n	800d8b2 <__pow5mult+0xa2>
 800d898:	6820      	ldr	r0, [r4, #0]
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d107      	bne.n	800d8ae <__pow5mult+0x9e>
 800d89e:	0022      	movs	r2, r4
 800d8a0:	0021      	movs	r1, r4
 800d8a2:	0038      	movs	r0, r7
 800d8a4:	f7ff ff04 	bl	800d6b0 <__multiply>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	6020      	str	r0, [r4, #0]
 800d8ac:	6003      	str	r3, [r0, #0]
 800d8ae:	0004      	movs	r4, r0
 800d8b0:	e7e2      	b.n	800d878 <__pow5mult+0x68>
 800d8b2:	0030      	movs	r0, r6
 800d8b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d8b6:	46c0      	nop			; (mov r8, r8)
 800d8b8:	08010fc0 	.word	0x08010fc0
 800d8bc:	08010d05 	.word	0x08010d05
 800d8c0:	08010e6c 	.word	0x08010e6c
 800d8c4:	00000271 	.word	0x00000271

0800d8c8 <__lshift>:
 800d8c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d8ca:	000c      	movs	r4, r1
 800d8cc:	0017      	movs	r7, r2
 800d8ce:	6923      	ldr	r3, [r4, #16]
 800d8d0:	1155      	asrs	r5, r2, #5
 800d8d2:	b087      	sub	sp, #28
 800d8d4:	18eb      	adds	r3, r5, r3
 800d8d6:	9302      	str	r3, [sp, #8]
 800d8d8:	3301      	adds	r3, #1
 800d8da:	9301      	str	r3, [sp, #4]
 800d8dc:	6849      	ldr	r1, [r1, #4]
 800d8de:	68a3      	ldr	r3, [r4, #8]
 800d8e0:	9004      	str	r0, [sp, #16]
 800d8e2:	9a01      	ldr	r2, [sp, #4]
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	db11      	blt.n	800d90c <__lshift+0x44>
 800d8e8:	9804      	ldr	r0, [sp, #16]
 800d8ea:	f7ff fd8b 	bl	800d404 <_Balloc>
 800d8ee:	0002      	movs	r2, r0
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	3214      	adds	r2, #20
 800d8f4:	0006      	movs	r6, r0
 800d8f6:	0011      	movs	r1, r2
 800d8f8:	9203      	str	r2, [sp, #12]
 800d8fa:	4298      	cmp	r0, r3
 800d8fc:	d10d      	bne.n	800d91a <__lshift+0x52>
 800d8fe:	21da      	movs	r1, #218	; 0xda
 800d900:	0002      	movs	r2, r0
 800d902:	4b27      	ldr	r3, [pc, #156]	; (800d9a0 <__lshift+0xd8>)
 800d904:	4827      	ldr	r0, [pc, #156]	; (800d9a4 <__lshift+0xdc>)
 800d906:	31ff      	adds	r1, #255	; 0xff
 800d908:	f000 fce4 	bl	800e2d4 <__assert_func>
 800d90c:	3101      	adds	r1, #1
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	e7e7      	b.n	800d8e2 <__lshift+0x1a>
 800d912:	2200      	movs	r2, #0
 800d914:	0098      	lsls	r0, r3, #2
 800d916:	500a      	str	r2, [r1, r0]
 800d918:	3301      	adds	r3, #1
 800d91a:	42ab      	cmp	r3, r5
 800d91c:	dbf9      	blt.n	800d912 <__lshift+0x4a>
 800d91e:	43eb      	mvns	r3, r5
 800d920:	17db      	asrs	r3, r3, #31
 800d922:	401d      	ands	r5, r3
 800d924:	9b03      	ldr	r3, [sp, #12]
 800d926:	00ad      	lsls	r5, r5, #2
 800d928:	211f      	movs	r1, #31
 800d92a:	0038      	movs	r0, r7
 800d92c:	195d      	adds	r5, r3, r5
 800d92e:	0023      	movs	r3, r4
 800d930:	6922      	ldr	r2, [r4, #16]
 800d932:	3314      	adds	r3, #20
 800d934:	0092      	lsls	r2, r2, #2
 800d936:	4008      	ands	r0, r1
 800d938:	4684      	mov	ip, r0
 800d93a:	189a      	adds	r2, r3, r2
 800d93c:	420f      	tst	r7, r1
 800d93e:	d02a      	beq.n	800d996 <__lshift+0xce>
 800d940:	3101      	adds	r1, #1
 800d942:	1a09      	subs	r1, r1, r0
 800d944:	9105      	str	r1, [sp, #20]
 800d946:	2100      	movs	r1, #0
 800d948:	9503      	str	r5, [sp, #12]
 800d94a:	4667      	mov	r7, ip
 800d94c:	6818      	ldr	r0, [r3, #0]
 800d94e:	40b8      	lsls	r0, r7
 800d950:	4301      	orrs	r1, r0
 800d952:	9803      	ldr	r0, [sp, #12]
 800d954:	c002      	stmia	r0!, {r1}
 800d956:	cb02      	ldmia	r3!, {r1}
 800d958:	9003      	str	r0, [sp, #12]
 800d95a:	9805      	ldr	r0, [sp, #20]
 800d95c:	40c1      	lsrs	r1, r0
 800d95e:	429a      	cmp	r2, r3
 800d960:	d8f3      	bhi.n	800d94a <__lshift+0x82>
 800d962:	0020      	movs	r0, r4
 800d964:	3015      	adds	r0, #21
 800d966:	2304      	movs	r3, #4
 800d968:	4282      	cmp	r2, r0
 800d96a:	d304      	bcc.n	800d976 <__lshift+0xae>
 800d96c:	1b13      	subs	r3, r2, r4
 800d96e:	3b15      	subs	r3, #21
 800d970:	089b      	lsrs	r3, r3, #2
 800d972:	3301      	adds	r3, #1
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	50e9      	str	r1, [r5, r3]
 800d978:	2900      	cmp	r1, #0
 800d97a:	d002      	beq.n	800d982 <__lshift+0xba>
 800d97c:	9b02      	ldr	r3, [sp, #8]
 800d97e:	3302      	adds	r3, #2
 800d980:	9301      	str	r3, [sp, #4]
 800d982:	9b01      	ldr	r3, [sp, #4]
 800d984:	9804      	ldr	r0, [sp, #16]
 800d986:	3b01      	subs	r3, #1
 800d988:	0021      	movs	r1, r4
 800d98a:	6133      	str	r3, [r6, #16]
 800d98c:	f7ff fd7e 	bl	800d48c <_Bfree>
 800d990:	0030      	movs	r0, r6
 800d992:	b007      	add	sp, #28
 800d994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d996:	cb02      	ldmia	r3!, {r1}
 800d998:	c502      	stmia	r5!, {r1}
 800d99a:	429a      	cmp	r2, r3
 800d99c:	d8fb      	bhi.n	800d996 <__lshift+0xce>
 800d99e:	e7f0      	b.n	800d982 <__lshift+0xba>
 800d9a0:	08010d7b 	.word	0x08010d7b
 800d9a4:	08010e6c 	.word	0x08010e6c

0800d9a8 <__mcmp>:
 800d9a8:	6902      	ldr	r2, [r0, #16]
 800d9aa:	690b      	ldr	r3, [r1, #16]
 800d9ac:	b530      	push	{r4, r5, lr}
 800d9ae:	0004      	movs	r4, r0
 800d9b0:	1ad0      	subs	r0, r2, r3
 800d9b2:	429a      	cmp	r2, r3
 800d9b4:	d10d      	bne.n	800d9d2 <__mcmp+0x2a>
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	3414      	adds	r4, #20
 800d9ba:	3114      	adds	r1, #20
 800d9bc:	18e2      	adds	r2, r4, r3
 800d9be:	18c9      	adds	r1, r1, r3
 800d9c0:	3a04      	subs	r2, #4
 800d9c2:	3904      	subs	r1, #4
 800d9c4:	6815      	ldr	r5, [r2, #0]
 800d9c6:	680b      	ldr	r3, [r1, #0]
 800d9c8:	429d      	cmp	r5, r3
 800d9ca:	d003      	beq.n	800d9d4 <__mcmp+0x2c>
 800d9cc:	2001      	movs	r0, #1
 800d9ce:	429d      	cmp	r5, r3
 800d9d0:	d303      	bcc.n	800d9da <__mcmp+0x32>
 800d9d2:	bd30      	pop	{r4, r5, pc}
 800d9d4:	4294      	cmp	r4, r2
 800d9d6:	d3f3      	bcc.n	800d9c0 <__mcmp+0x18>
 800d9d8:	e7fb      	b.n	800d9d2 <__mcmp+0x2a>
 800d9da:	4240      	negs	r0, r0
 800d9dc:	e7f9      	b.n	800d9d2 <__mcmp+0x2a>
	...

0800d9e0 <__mdiff>:
 800d9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9e2:	000e      	movs	r6, r1
 800d9e4:	0007      	movs	r7, r0
 800d9e6:	0011      	movs	r1, r2
 800d9e8:	0030      	movs	r0, r6
 800d9ea:	b087      	sub	sp, #28
 800d9ec:	0014      	movs	r4, r2
 800d9ee:	f7ff ffdb 	bl	800d9a8 <__mcmp>
 800d9f2:	1e05      	subs	r5, r0, #0
 800d9f4:	d110      	bne.n	800da18 <__mdiff+0x38>
 800d9f6:	0001      	movs	r1, r0
 800d9f8:	0038      	movs	r0, r7
 800d9fa:	f7ff fd03 	bl	800d404 <_Balloc>
 800d9fe:	1e02      	subs	r2, r0, #0
 800da00:	d104      	bne.n	800da0c <__mdiff+0x2c>
 800da02:	4b40      	ldr	r3, [pc, #256]	; (800db04 <__mdiff+0x124>)
 800da04:	4940      	ldr	r1, [pc, #256]	; (800db08 <__mdiff+0x128>)
 800da06:	4841      	ldr	r0, [pc, #260]	; (800db0c <__mdiff+0x12c>)
 800da08:	f000 fc64 	bl	800e2d4 <__assert_func>
 800da0c:	2301      	movs	r3, #1
 800da0e:	6145      	str	r5, [r0, #20]
 800da10:	6103      	str	r3, [r0, #16]
 800da12:	0010      	movs	r0, r2
 800da14:	b007      	add	sp, #28
 800da16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da18:	2301      	movs	r3, #1
 800da1a:	9301      	str	r3, [sp, #4]
 800da1c:	2800      	cmp	r0, #0
 800da1e:	db04      	blt.n	800da2a <__mdiff+0x4a>
 800da20:	0023      	movs	r3, r4
 800da22:	0034      	movs	r4, r6
 800da24:	001e      	movs	r6, r3
 800da26:	2300      	movs	r3, #0
 800da28:	9301      	str	r3, [sp, #4]
 800da2a:	0038      	movs	r0, r7
 800da2c:	6861      	ldr	r1, [r4, #4]
 800da2e:	f7ff fce9 	bl	800d404 <_Balloc>
 800da32:	1e02      	subs	r2, r0, #0
 800da34:	d103      	bne.n	800da3e <__mdiff+0x5e>
 800da36:	2190      	movs	r1, #144	; 0x90
 800da38:	4b32      	ldr	r3, [pc, #200]	; (800db04 <__mdiff+0x124>)
 800da3a:	0089      	lsls	r1, r1, #2
 800da3c:	e7e3      	b.n	800da06 <__mdiff+0x26>
 800da3e:	9b01      	ldr	r3, [sp, #4]
 800da40:	2700      	movs	r7, #0
 800da42:	60c3      	str	r3, [r0, #12]
 800da44:	6920      	ldr	r0, [r4, #16]
 800da46:	3414      	adds	r4, #20
 800da48:	9401      	str	r4, [sp, #4]
 800da4a:	9b01      	ldr	r3, [sp, #4]
 800da4c:	0084      	lsls	r4, r0, #2
 800da4e:	191b      	adds	r3, r3, r4
 800da50:	0034      	movs	r4, r6
 800da52:	9302      	str	r3, [sp, #8]
 800da54:	6933      	ldr	r3, [r6, #16]
 800da56:	3414      	adds	r4, #20
 800da58:	0099      	lsls	r1, r3, #2
 800da5a:	1863      	adds	r3, r4, r1
 800da5c:	9303      	str	r3, [sp, #12]
 800da5e:	0013      	movs	r3, r2
 800da60:	3314      	adds	r3, #20
 800da62:	469c      	mov	ip, r3
 800da64:	9305      	str	r3, [sp, #20]
 800da66:	9b01      	ldr	r3, [sp, #4]
 800da68:	9304      	str	r3, [sp, #16]
 800da6a:	9b04      	ldr	r3, [sp, #16]
 800da6c:	cc02      	ldmia	r4!, {r1}
 800da6e:	cb20      	ldmia	r3!, {r5}
 800da70:	9304      	str	r3, [sp, #16]
 800da72:	b2ab      	uxth	r3, r5
 800da74:	19df      	adds	r7, r3, r7
 800da76:	b28b      	uxth	r3, r1
 800da78:	1afb      	subs	r3, r7, r3
 800da7a:	0c2d      	lsrs	r5, r5, #16
 800da7c:	0c09      	lsrs	r1, r1, #16
 800da7e:	1a69      	subs	r1, r5, r1
 800da80:	141d      	asrs	r5, r3, #16
 800da82:	1949      	adds	r1, r1, r5
 800da84:	140f      	asrs	r7, r1, #16
 800da86:	b29b      	uxth	r3, r3
 800da88:	0409      	lsls	r1, r1, #16
 800da8a:	430b      	orrs	r3, r1
 800da8c:	4661      	mov	r1, ip
 800da8e:	c108      	stmia	r1!, {r3}
 800da90:	9b03      	ldr	r3, [sp, #12]
 800da92:	468c      	mov	ip, r1
 800da94:	42a3      	cmp	r3, r4
 800da96:	d8e8      	bhi.n	800da6a <__mdiff+0x8a>
 800da98:	0031      	movs	r1, r6
 800da9a:	9c03      	ldr	r4, [sp, #12]
 800da9c:	3115      	adds	r1, #21
 800da9e:	2304      	movs	r3, #4
 800daa0:	428c      	cmp	r4, r1
 800daa2:	d304      	bcc.n	800daae <__mdiff+0xce>
 800daa4:	1ba3      	subs	r3, r4, r6
 800daa6:	3b15      	subs	r3, #21
 800daa8:	089b      	lsrs	r3, r3, #2
 800daaa:	3301      	adds	r3, #1
 800daac:	009b      	lsls	r3, r3, #2
 800daae:	9901      	ldr	r1, [sp, #4]
 800dab0:	18cc      	adds	r4, r1, r3
 800dab2:	9905      	ldr	r1, [sp, #20]
 800dab4:	0026      	movs	r6, r4
 800dab6:	18cb      	adds	r3, r1, r3
 800dab8:	469c      	mov	ip, r3
 800daba:	9902      	ldr	r1, [sp, #8]
 800dabc:	428e      	cmp	r6, r1
 800dabe:	d310      	bcc.n	800dae2 <__mdiff+0x102>
 800dac0:	9e02      	ldr	r6, [sp, #8]
 800dac2:	1ee5      	subs	r5, r4, #3
 800dac4:	2100      	movs	r1, #0
 800dac6:	42ae      	cmp	r6, r5
 800dac8:	d304      	bcc.n	800dad4 <__mdiff+0xf4>
 800daca:	0031      	movs	r1, r6
 800dacc:	3103      	adds	r1, #3
 800dace:	1b09      	subs	r1, r1, r4
 800dad0:	0889      	lsrs	r1, r1, #2
 800dad2:	0089      	lsls	r1, r1, #2
 800dad4:	185b      	adds	r3, r3, r1
 800dad6:	3b04      	subs	r3, #4
 800dad8:	6819      	ldr	r1, [r3, #0]
 800dada:	2900      	cmp	r1, #0
 800dadc:	d00f      	beq.n	800dafe <__mdiff+0x11e>
 800dade:	6110      	str	r0, [r2, #16]
 800dae0:	e797      	b.n	800da12 <__mdiff+0x32>
 800dae2:	ce02      	ldmia	r6!, {r1}
 800dae4:	b28d      	uxth	r5, r1
 800dae6:	19ed      	adds	r5, r5, r7
 800dae8:	0c0f      	lsrs	r7, r1, #16
 800daea:	1429      	asrs	r1, r5, #16
 800daec:	1879      	adds	r1, r7, r1
 800daee:	140f      	asrs	r7, r1, #16
 800daf0:	b2ad      	uxth	r5, r5
 800daf2:	0409      	lsls	r1, r1, #16
 800daf4:	430d      	orrs	r5, r1
 800daf6:	4661      	mov	r1, ip
 800daf8:	c120      	stmia	r1!, {r5}
 800dafa:	468c      	mov	ip, r1
 800dafc:	e7dd      	b.n	800daba <__mdiff+0xda>
 800dafe:	3801      	subs	r0, #1
 800db00:	e7e9      	b.n	800dad6 <__mdiff+0xf6>
 800db02:	46c0      	nop			; (mov r8, r8)
 800db04:	08010d7b 	.word	0x08010d7b
 800db08:	00000232 	.word	0x00000232
 800db0c:	08010e6c 	.word	0x08010e6c

0800db10 <__ulp>:
 800db10:	4b0f      	ldr	r3, [pc, #60]	; (800db50 <__ulp+0x40>)
 800db12:	4019      	ands	r1, r3
 800db14:	4b0f      	ldr	r3, [pc, #60]	; (800db54 <__ulp+0x44>)
 800db16:	18c9      	adds	r1, r1, r3
 800db18:	2900      	cmp	r1, #0
 800db1a:	dd04      	ble.n	800db26 <__ulp+0x16>
 800db1c:	2200      	movs	r2, #0
 800db1e:	000b      	movs	r3, r1
 800db20:	0010      	movs	r0, r2
 800db22:	0019      	movs	r1, r3
 800db24:	4770      	bx	lr
 800db26:	4249      	negs	r1, r1
 800db28:	2200      	movs	r2, #0
 800db2a:	2300      	movs	r3, #0
 800db2c:	1509      	asrs	r1, r1, #20
 800db2e:	2913      	cmp	r1, #19
 800db30:	dc04      	bgt.n	800db3c <__ulp+0x2c>
 800db32:	2080      	movs	r0, #128	; 0x80
 800db34:	0300      	lsls	r0, r0, #12
 800db36:	4108      	asrs	r0, r1
 800db38:	0003      	movs	r3, r0
 800db3a:	e7f1      	b.n	800db20 <__ulp+0x10>
 800db3c:	3914      	subs	r1, #20
 800db3e:	2001      	movs	r0, #1
 800db40:	291e      	cmp	r1, #30
 800db42:	dc02      	bgt.n	800db4a <__ulp+0x3a>
 800db44:	2080      	movs	r0, #128	; 0x80
 800db46:	0600      	lsls	r0, r0, #24
 800db48:	40c8      	lsrs	r0, r1
 800db4a:	0002      	movs	r2, r0
 800db4c:	e7e8      	b.n	800db20 <__ulp+0x10>
 800db4e:	46c0      	nop			; (mov r8, r8)
 800db50:	7ff00000 	.word	0x7ff00000
 800db54:	fcc00000 	.word	0xfcc00000

0800db58 <__b2d>:
 800db58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db5a:	0006      	movs	r6, r0
 800db5c:	6903      	ldr	r3, [r0, #16]
 800db5e:	3614      	adds	r6, #20
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	18f3      	adds	r3, r6, r3
 800db64:	1f1d      	subs	r5, r3, #4
 800db66:	682c      	ldr	r4, [r5, #0]
 800db68:	000f      	movs	r7, r1
 800db6a:	0020      	movs	r0, r4
 800db6c:	9301      	str	r3, [sp, #4]
 800db6e:	f7ff fd41 	bl	800d5f4 <__hi0bits>
 800db72:	2320      	movs	r3, #32
 800db74:	1a1b      	subs	r3, r3, r0
 800db76:	491f      	ldr	r1, [pc, #124]	; (800dbf4 <__b2d+0x9c>)
 800db78:	603b      	str	r3, [r7, #0]
 800db7a:	280a      	cmp	r0, #10
 800db7c:	dc16      	bgt.n	800dbac <__b2d+0x54>
 800db7e:	230b      	movs	r3, #11
 800db80:	0027      	movs	r7, r4
 800db82:	1a1b      	subs	r3, r3, r0
 800db84:	40df      	lsrs	r7, r3
 800db86:	4339      	orrs	r1, r7
 800db88:	469c      	mov	ip, r3
 800db8a:	000b      	movs	r3, r1
 800db8c:	2100      	movs	r1, #0
 800db8e:	42ae      	cmp	r6, r5
 800db90:	d202      	bcs.n	800db98 <__b2d+0x40>
 800db92:	9901      	ldr	r1, [sp, #4]
 800db94:	3908      	subs	r1, #8
 800db96:	6809      	ldr	r1, [r1, #0]
 800db98:	3015      	adds	r0, #21
 800db9a:	4084      	lsls	r4, r0
 800db9c:	4660      	mov	r0, ip
 800db9e:	40c1      	lsrs	r1, r0
 800dba0:	430c      	orrs	r4, r1
 800dba2:	0022      	movs	r2, r4
 800dba4:	0010      	movs	r0, r2
 800dba6:	0019      	movs	r1, r3
 800dba8:	b003      	add	sp, #12
 800dbaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbac:	2700      	movs	r7, #0
 800dbae:	42ae      	cmp	r6, r5
 800dbb0:	d202      	bcs.n	800dbb8 <__b2d+0x60>
 800dbb2:	9d01      	ldr	r5, [sp, #4]
 800dbb4:	3d08      	subs	r5, #8
 800dbb6:	682f      	ldr	r7, [r5, #0]
 800dbb8:	230b      	movs	r3, #11
 800dbba:	425b      	negs	r3, r3
 800dbbc:	469c      	mov	ip, r3
 800dbbe:	4484      	add	ip, r0
 800dbc0:	280b      	cmp	r0, #11
 800dbc2:	d013      	beq.n	800dbec <__b2d+0x94>
 800dbc4:	4663      	mov	r3, ip
 800dbc6:	2020      	movs	r0, #32
 800dbc8:	409c      	lsls	r4, r3
 800dbca:	1ac0      	subs	r0, r0, r3
 800dbcc:	003b      	movs	r3, r7
 800dbce:	40c3      	lsrs	r3, r0
 800dbd0:	431c      	orrs	r4, r3
 800dbd2:	4321      	orrs	r1, r4
 800dbd4:	000b      	movs	r3, r1
 800dbd6:	2100      	movs	r1, #0
 800dbd8:	42b5      	cmp	r5, r6
 800dbda:	d901      	bls.n	800dbe0 <__b2d+0x88>
 800dbdc:	3d04      	subs	r5, #4
 800dbde:	6829      	ldr	r1, [r5, #0]
 800dbe0:	4664      	mov	r4, ip
 800dbe2:	40c1      	lsrs	r1, r0
 800dbe4:	40a7      	lsls	r7, r4
 800dbe6:	430f      	orrs	r7, r1
 800dbe8:	003a      	movs	r2, r7
 800dbea:	e7db      	b.n	800dba4 <__b2d+0x4c>
 800dbec:	4321      	orrs	r1, r4
 800dbee:	000b      	movs	r3, r1
 800dbf0:	e7fa      	b.n	800dbe8 <__b2d+0x90>
 800dbf2:	46c0      	nop			; (mov r8, r8)
 800dbf4:	3ff00000 	.word	0x3ff00000

0800dbf8 <__d2b>:
 800dbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbfa:	2101      	movs	r1, #1
 800dbfc:	0014      	movs	r4, r2
 800dbfe:	001e      	movs	r6, r3
 800dc00:	9f08      	ldr	r7, [sp, #32]
 800dc02:	f7ff fbff 	bl	800d404 <_Balloc>
 800dc06:	1e05      	subs	r5, r0, #0
 800dc08:	d105      	bne.n	800dc16 <__d2b+0x1e>
 800dc0a:	0002      	movs	r2, r0
 800dc0c:	4b26      	ldr	r3, [pc, #152]	; (800dca8 <__d2b+0xb0>)
 800dc0e:	4927      	ldr	r1, [pc, #156]	; (800dcac <__d2b+0xb4>)
 800dc10:	4827      	ldr	r0, [pc, #156]	; (800dcb0 <__d2b+0xb8>)
 800dc12:	f000 fb5f 	bl	800e2d4 <__assert_func>
 800dc16:	0333      	lsls	r3, r6, #12
 800dc18:	0076      	lsls	r6, r6, #1
 800dc1a:	0b1b      	lsrs	r3, r3, #12
 800dc1c:	0d76      	lsrs	r6, r6, #21
 800dc1e:	d124      	bne.n	800dc6a <__d2b+0x72>
 800dc20:	9301      	str	r3, [sp, #4]
 800dc22:	2c00      	cmp	r4, #0
 800dc24:	d027      	beq.n	800dc76 <__d2b+0x7e>
 800dc26:	4668      	mov	r0, sp
 800dc28:	9400      	str	r4, [sp, #0]
 800dc2a:	f7ff fcfd 	bl	800d628 <__lo0bits>
 800dc2e:	9c00      	ldr	r4, [sp, #0]
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d01e      	beq.n	800dc72 <__d2b+0x7a>
 800dc34:	9b01      	ldr	r3, [sp, #4]
 800dc36:	2120      	movs	r1, #32
 800dc38:	001a      	movs	r2, r3
 800dc3a:	1a09      	subs	r1, r1, r0
 800dc3c:	408a      	lsls	r2, r1
 800dc3e:	40c3      	lsrs	r3, r0
 800dc40:	4322      	orrs	r2, r4
 800dc42:	616a      	str	r2, [r5, #20]
 800dc44:	9301      	str	r3, [sp, #4]
 800dc46:	9c01      	ldr	r4, [sp, #4]
 800dc48:	61ac      	str	r4, [r5, #24]
 800dc4a:	1e63      	subs	r3, r4, #1
 800dc4c:	419c      	sbcs	r4, r3
 800dc4e:	3401      	adds	r4, #1
 800dc50:	612c      	str	r4, [r5, #16]
 800dc52:	2e00      	cmp	r6, #0
 800dc54:	d018      	beq.n	800dc88 <__d2b+0x90>
 800dc56:	4b17      	ldr	r3, [pc, #92]	; (800dcb4 <__d2b+0xbc>)
 800dc58:	18f6      	adds	r6, r6, r3
 800dc5a:	2335      	movs	r3, #53	; 0x35
 800dc5c:	1836      	adds	r6, r6, r0
 800dc5e:	1a18      	subs	r0, r3, r0
 800dc60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc62:	603e      	str	r6, [r7, #0]
 800dc64:	6018      	str	r0, [r3, #0]
 800dc66:	0028      	movs	r0, r5
 800dc68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc6a:	2280      	movs	r2, #128	; 0x80
 800dc6c:	0352      	lsls	r2, r2, #13
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	e7d6      	b.n	800dc20 <__d2b+0x28>
 800dc72:	616c      	str	r4, [r5, #20]
 800dc74:	e7e7      	b.n	800dc46 <__d2b+0x4e>
 800dc76:	a801      	add	r0, sp, #4
 800dc78:	f7ff fcd6 	bl	800d628 <__lo0bits>
 800dc7c:	2401      	movs	r4, #1
 800dc7e:	9b01      	ldr	r3, [sp, #4]
 800dc80:	612c      	str	r4, [r5, #16]
 800dc82:	616b      	str	r3, [r5, #20]
 800dc84:	3020      	adds	r0, #32
 800dc86:	e7e4      	b.n	800dc52 <__d2b+0x5a>
 800dc88:	4b0b      	ldr	r3, [pc, #44]	; (800dcb8 <__d2b+0xc0>)
 800dc8a:	18c0      	adds	r0, r0, r3
 800dc8c:	4b0b      	ldr	r3, [pc, #44]	; (800dcbc <__d2b+0xc4>)
 800dc8e:	6038      	str	r0, [r7, #0]
 800dc90:	18e3      	adds	r3, r4, r3
 800dc92:	009b      	lsls	r3, r3, #2
 800dc94:	18eb      	adds	r3, r5, r3
 800dc96:	6958      	ldr	r0, [r3, #20]
 800dc98:	f7ff fcac 	bl	800d5f4 <__hi0bits>
 800dc9c:	0164      	lsls	r4, r4, #5
 800dc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dca0:	1a24      	subs	r4, r4, r0
 800dca2:	601c      	str	r4, [r3, #0]
 800dca4:	e7df      	b.n	800dc66 <__d2b+0x6e>
 800dca6:	46c0      	nop			; (mov r8, r8)
 800dca8:	08010d7b 	.word	0x08010d7b
 800dcac:	0000030a 	.word	0x0000030a
 800dcb0:	08010e6c 	.word	0x08010e6c
 800dcb4:	fffffbcd 	.word	0xfffffbcd
 800dcb8:	fffffbce 	.word	0xfffffbce
 800dcbc:	3fffffff 	.word	0x3fffffff

0800dcc0 <__ratio>:
 800dcc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcc2:	b085      	sub	sp, #20
 800dcc4:	000d      	movs	r5, r1
 800dcc6:	a902      	add	r1, sp, #8
 800dcc8:	0004      	movs	r4, r0
 800dcca:	f7ff ff45 	bl	800db58 <__b2d>
 800dcce:	9000      	str	r0, [sp, #0]
 800dcd0:	9101      	str	r1, [sp, #4]
 800dcd2:	9e00      	ldr	r6, [sp, #0]
 800dcd4:	9f01      	ldr	r7, [sp, #4]
 800dcd6:	0028      	movs	r0, r5
 800dcd8:	a903      	add	r1, sp, #12
 800dcda:	f7ff ff3d 	bl	800db58 <__b2d>
 800dcde:	6924      	ldr	r4, [r4, #16]
 800dce0:	692d      	ldr	r5, [r5, #16]
 800dce2:	0002      	movs	r2, r0
 800dce4:	1b65      	subs	r5, r4, r5
 800dce6:	016c      	lsls	r4, r5, #5
 800dce8:	46a4      	mov	ip, r4
 800dcea:	9d03      	ldr	r5, [sp, #12]
 800dcec:	9c02      	ldr	r4, [sp, #8]
 800dcee:	000b      	movs	r3, r1
 800dcf0:	1b64      	subs	r4, r4, r5
 800dcf2:	4464      	add	r4, ip
 800dcf4:	0525      	lsls	r5, r4, #20
 800dcf6:	2c00      	cmp	r4, #0
 800dcf8:	dd07      	ble.n	800dd0a <__ratio+0x4a>
 800dcfa:	9901      	ldr	r1, [sp, #4]
 800dcfc:	186f      	adds	r7, r5, r1
 800dcfe:	0030      	movs	r0, r6
 800dd00:	0039      	movs	r1, r7
 800dd02:	f7f2 ffab 	bl	8000c5c <__aeabi_ddiv>
 800dd06:	b005      	add	sp, #20
 800dd08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd0a:	1b4b      	subs	r3, r1, r5
 800dd0c:	e7f7      	b.n	800dcfe <__ratio+0x3e>

0800dd0e <__copybits>:
 800dd0e:	b570      	push	{r4, r5, r6, lr}
 800dd10:	0015      	movs	r5, r2
 800dd12:	6913      	ldr	r3, [r2, #16]
 800dd14:	3514      	adds	r5, #20
 800dd16:	009c      	lsls	r4, r3, #2
 800dd18:	0006      	movs	r6, r0
 800dd1a:	002b      	movs	r3, r5
 800dd1c:	3901      	subs	r1, #1
 800dd1e:	1149      	asrs	r1, r1, #5
 800dd20:	3101      	adds	r1, #1
 800dd22:	0089      	lsls	r1, r1, #2
 800dd24:	1841      	adds	r1, r0, r1
 800dd26:	192c      	adds	r4, r5, r4
 800dd28:	429c      	cmp	r4, r3
 800dd2a:	d80d      	bhi.n	800dd48 <__copybits+0x3a>
 800dd2c:	0015      	movs	r5, r2
 800dd2e:	3511      	adds	r5, #17
 800dd30:	2300      	movs	r3, #0
 800dd32:	42a5      	cmp	r5, r4
 800dd34:	d803      	bhi.n	800dd3e <__copybits+0x30>
 800dd36:	1aa3      	subs	r3, r4, r2
 800dd38:	3b11      	subs	r3, #17
 800dd3a:	089b      	lsrs	r3, r3, #2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	18c0      	adds	r0, r0, r3
 800dd40:	2300      	movs	r3, #0
 800dd42:	4281      	cmp	r1, r0
 800dd44:	d803      	bhi.n	800dd4e <__copybits+0x40>
 800dd46:	bd70      	pop	{r4, r5, r6, pc}
 800dd48:	cb20      	ldmia	r3!, {r5}
 800dd4a:	c620      	stmia	r6!, {r5}
 800dd4c:	e7ec      	b.n	800dd28 <__copybits+0x1a>
 800dd4e:	c008      	stmia	r0!, {r3}
 800dd50:	e7f7      	b.n	800dd42 <__copybits+0x34>

0800dd52 <__any_on>:
 800dd52:	0002      	movs	r2, r0
 800dd54:	6900      	ldr	r0, [r0, #16]
 800dd56:	b510      	push	{r4, lr}
 800dd58:	3214      	adds	r2, #20
 800dd5a:	114b      	asrs	r3, r1, #5
 800dd5c:	4298      	cmp	r0, r3
 800dd5e:	db13      	blt.n	800dd88 <__any_on+0x36>
 800dd60:	dd0c      	ble.n	800dd7c <__any_on+0x2a>
 800dd62:	241f      	movs	r4, #31
 800dd64:	0008      	movs	r0, r1
 800dd66:	4020      	ands	r0, r4
 800dd68:	4221      	tst	r1, r4
 800dd6a:	d007      	beq.n	800dd7c <__any_on+0x2a>
 800dd6c:	0099      	lsls	r1, r3, #2
 800dd6e:	588c      	ldr	r4, [r1, r2]
 800dd70:	0021      	movs	r1, r4
 800dd72:	40c1      	lsrs	r1, r0
 800dd74:	4081      	lsls	r1, r0
 800dd76:	2001      	movs	r0, #1
 800dd78:	428c      	cmp	r4, r1
 800dd7a:	d104      	bne.n	800dd86 <__any_on+0x34>
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	18d3      	adds	r3, r2, r3
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d803      	bhi.n	800dd8c <__any_on+0x3a>
 800dd84:	2000      	movs	r0, #0
 800dd86:	bd10      	pop	{r4, pc}
 800dd88:	0003      	movs	r3, r0
 800dd8a:	e7f7      	b.n	800dd7c <__any_on+0x2a>
 800dd8c:	3b04      	subs	r3, #4
 800dd8e:	6819      	ldr	r1, [r3, #0]
 800dd90:	2900      	cmp	r1, #0
 800dd92:	d0f5      	beq.n	800dd80 <__any_on+0x2e>
 800dd94:	2001      	movs	r0, #1
 800dd96:	e7f6      	b.n	800dd86 <__any_on+0x34>

0800dd98 <_calloc_r>:
 800dd98:	434a      	muls	r2, r1
 800dd9a:	b570      	push	{r4, r5, r6, lr}
 800dd9c:	0011      	movs	r1, r2
 800dd9e:	0015      	movs	r5, r2
 800dda0:	f000 f852 	bl	800de48 <_malloc_r>
 800dda4:	1e04      	subs	r4, r0, #0
 800dda6:	d003      	beq.n	800ddb0 <_calloc_r+0x18>
 800dda8:	002a      	movs	r2, r5
 800ddaa:	2100      	movs	r1, #0
 800ddac:	f7fc f999 	bl	800a0e2 <memset>
 800ddb0:	0020      	movs	r0, r4
 800ddb2:	bd70      	pop	{r4, r5, r6, pc}

0800ddb4 <_free_r>:
 800ddb4:	b570      	push	{r4, r5, r6, lr}
 800ddb6:	0005      	movs	r5, r0
 800ddb8:	2900      	cmp	r1, #0
 800ddba:	d010      	beq.n	800ddde <_free_r+0x2a>
 800ddbc:	1f0c      	subs	r4, r1, #4
 800ddbe:	6823      	ldr	r3, [r4, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	da00      	bge.n	800ddc6 <_free_r+0x12>
 800ddc4:	18e4      	adds	r4, r4, r3
 800ddc6:	0028      	movs	r0, r5
 800ddc8:	f000 fafc 	bl	800e3c4 <__malloc_lock>
 800ddcc:	4a1d      	ldr	r2, [pc, #116]	; (800de44 <_free_r+0x90>)
 800ddce:	6813      	ldr	r3, [r2, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d105      	bne.n	800dde0 <_free_r+0x2c>
 800ddd4:	6063      	str	r3, [r4, #4]
 800ddd6:	6014      	str	r4, [r2, #0]
 800ddd8:	0028      	movs	r0, r5
 800ddda:	f000 fafb 	bl	800e3d4 <__malloc_unlock>
 800ddde:	bd70      	pop	{r4, r5, r6, pc}
 800dde0:	42a3      	cmp	r3, r4
 800dde2:	d908      	bls.n	800ddf6 <_free_r+0x42>
 800dde4:	6821      	ldr	r1, [r4, #0]
 800dde6:	1860      	adds	r0, r4, r1
 800dde8:	4283      	cmp	r3, r0
 800ddea:	d1f3      	bne.n	800ddd4 <_free_r+0x20>
 800ddec:	6818      	ldr	r0, [r3, #0]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	1841      	adds	r1, r0, r1
 800ddf2:	6021      	str	r1, [r4, #0]
 800ddf4:	e7ee      	b.n	800ddd4 <_free_r+0x20>
 800ddf6:	001a      	movs	r2, r3
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <_free_r+0x4e>
 800ddfe:	42a3      	cmp	r3, r4
 800de00:	d9f9      	bls.n	800ddf6 <_free_r+0x42>
 800de02:	6811      	ldr	r1, [r2, #0]
 800de04:	1850      	adds	r0, r2, r1
 800de06:	42a0      	cmp	r0, r4
 800de08:	d10b      	bne.n	800de22 <_free_r+0x6e>
 800de0a:	6820      	ldr	r0, [r4, #0]
 800de0c:	1809      	adds	r1, r1, r0
 800de0e:	1850      	adds	r0, r2, r1
 800de10:	6011      	str	r1, [r2, #0]
 800de12:	4283      	cmp	r3, r0
 800de14:	d1e0      	bne.n	800ddd8 <_free_r+0x24>
 800de16:	6818      	ldr	r0, [r3, #0]
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	1841      	adds	r1, r0, r1
 800de1c:	6011      	str	r1, [r2, #0]
 800de1e:	6053      	str	r3, [r2, #4]
 800de20:	e7da      	b.n	800ddd8 <_free_r+0x24>
 800de22:	42a0      	cmp	r0, r4
 800de24:	d902      	bls.n	800de2c <_free_r+0x78>
 800de26:	230c      	movs	r3, #12
 800de28:	602b      	str	r3, [r5, #0]
 800de2a:	e7d5      	b.n	800ddd8 <_free_r+0x24>
 800de2c:	6821      	ldr	r1, [r4, #0]
 800de2e:	1860      	adds	r0, r4, r1
 800de30:	4283      	cmp	r3, r0
 800de32:	d103      	bne.n	800de3c <_free_r+0x88>
 800de34:	6818      	ldr	r0, [r3, #0]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	1841      	adds	r1, r0, r1
 800de3a:	6021      	str	r1, [r4, #0]
 800de3c:	6063      	str	r3, [r4, #4]
 800de3e:	6054      	str	r4, [r2, #4]
 800de40:	e7ca      	b.n	800ddd8 <_free_r+0x24>
 800de42:	46c0      	nop			; (mov r8, r8)
 800de44:	20002488 	.word	0x20002488

0800de48 <_malloc_r>:
 800de48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de4a:	2303      	movs	r3, #3
 800de4c:	1ccd      	adds	r5, r1, #3
 800de4e:	439d      	bics	r5, r3
 800de50:	3508      	adds	r5, #8
 800de52:	0006      	movs	r6, r0
 800de54:	2d0c      	cmp	r5, #12
 800de56:	d21f      	bcs.n	800de98 <_malloc_r+0x50>
 800de58:	250c      	movs	r5, #12
 800de5a:	42a9      	cmp	r1, r5
 800de5c:	d81e      	bhi.n	800de9c <_malloc_r+0x54>
 800de5e:	0030      	movs	r0, r6
 800de60:	f000 fab0 	bl	800e3c4 <__malloc_lock>
 800de64:	4925      	ldr	r1, [pc, #148]	; (800defc <_malloc_r+0xb4>)
 800de66:	680a      	ldr	r2, [r1, #0]
 800de68:	0014      	movs	r4, r2
 800de6a:	2c00      	cmp	r4, #0
 800de6c:	d11a      	bne.n	800dea4 <_malloc_r+0x5c>
 800de6e:	4f24      	ldr	r7, [pc, #144]	; (800df00 <_malloc_r+0xb8>)
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d104      	bne.n	800de80 <_malloc_r+0x38>
 800de76:	0021      	movs	r1, r4
 800de78:	0030      	movs	r0, r6
 800de7a:	f000 f9ab 	bl	800e1d4 <_sbrk_r>
 800de7e:	6038      	str	r0, [r7, #0]
 800de80:	0029      	movs	r1, r5
 800de82:	0030      	movs	r0, r6
 800de84:	f000 f9a6 	bl	800e1d4 <_sbrk_r>
 800de88:	1c43      	adds	r3, r0, #1
 800de8a:	d12b      	bne.n	800dee4 <_malloc_r+0x9c>
 800de8c:	230c      	movs	r3, #12
 800de8e:	0030      	movs	r0, r6
 800de90:	6033      	str	r3, [r6, #0]
 800de92:	f000 fa9f 	bl	800e3d4 <__malloc_unlock>
 800de96:	e003      	b.n	800dea0 <_malloc_r+0x58>
 800de98:	2d00      	cmp	r5, #0
 800de9a:	dade      	bge.n	800de5a <_malloc_r+0x12>
 800de9c:	230c      	movs	r3, #12
 800de9e:	6033      	str	r3, [r6, #0]
 800dea0:	2000      	movs	r0, #0
 800dea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dea4:	6823      	ldr	r3, [r4, #0]
 800dea6:	1b5b      	subs	r3, r3, r5
 800dea8:	d419      	bmi.n	800dede <_malloc_r+0x96>
 800deaa:	2b0b      	cmp	r3, #11
 800deac:	d903      	bls.n	800deb6 <_malloc_r+0x6e>
 800deae:	6023      	str	r3, [r4, #0]
 800deb0:	18e4      	adds	r4, r4, r3
 800deb2:	6025      	str	r5, [r4, #0]
 800deb4:	e003      	b.n	800debe <_malloc_r+0x76>
 800deb6:	6863      	ldr	r3, [r4, #4]
 800deb8:	42a2      	cmp	r2, r4
 800deba:	d10e      	bne.n	800deda <_malloc_r+0x92>
 800debc:	600b      	str	r3, [r1, #0]
 800debe:	0030      	movs	r0, r6
 800dec0:	f000 fa88 	bl	800e3d4 <__malloc_unlock>
 800dec4:	0020      	movs	r0, r4
 800dec6:	2207      	movs	r2, #7
 800dec8:	300b      	adds	r0, #11
 800deca:	1d23      	adds	r3, r4, #4
 800decc:	4390      	bics	r0, r2
 800dece:	1ac2      	subs	r2, r0, r3
 800ded0:	4298      	cmp	r0, r3
 800ded2:	d0e6      	beq.n	800dea2 <_malloc_r+0x5a>
 800ded4:	1a1b      	subs	r3, r3, r0
 800ded6:	50a3      	str	r3, [r4, r2]
 800ded8:	e7e3      	b.n	800dea2 <_malloc_r+0x5a>
 800deda:	6053      	str	r3, [r2, #4]
 800dedc:	e7ef      	b.n	800debe <_malloc_r+0x76>
 800dede:	0022      	movs	r2, r4
 800dee0:	6864      	ldr	r4, [r4, #4]
 800dee2:	e7c2      	b.n	800de6a <_malloc_r+0x22>
 800dee4:	2303      	movs	r3, #3
 800dee6:	1cc4      	adds	r4, r0, #3
 800dee8:	439c      	bics	r4, r3
 800deea:	42a0      	cmp	r0, r4
 800deec:	d0e1      	beq.n	800deb2 <_malloc_r+0x6a>
 800deee:	1a21      	subs	r1, r4, r0
 800def0:	0030      	movs	r0, r6
 800def2:	f000 f96f 	bl	800e1d4 <_sbrk_r>
 800def6:	1c43      	adds	r3, r0, #1
 800def8:	d1db      	bne.n	800deb2 <_malloc_r+0x6a>
 800defa:	e7c7      	b.n	800de8c <_malloc_r+0x44>
 800defc:	20002488 	.word	0x20002488
 800df00:	2000248c 	.word	0x2000248c

0800df04 <__sfputc_r>:
 800df04:	6893      	ldr	r3, [r2, #8]
 800df06:	b510      	push	{r4, lr}
 800df08:	3b01      	subs	r3, #1
 800df0a:	6093      	str	r3, [r2, #8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	da04      	bge.n	800df1a <__sfputc_r+0x16>
 800df10:	6994      	ldr	r4, [r2, #24]
 800df12:	42a3      	cmp	r3, r4
 800df14:	db07      	blt.n	800df26 <__sfputc_r+0x22>
 800df16:	290a      	cmp	r1, #10
 800df18:	d005      	beq.n	800df26 <__sfputc_r+0x22>
 800df1a:	6813      	ldr	r3, [r2, #0]
 800df1c:	1c58      	adds	r0, r3, #1
 800df1e:	6010      	str	r0, [r2, #0]
 800df20:	7019      	strb	r1, [r3, #0]
 800df22:	0008      	movs	r0, r1
 800df24:	bd10      	pop	{r4, pc}
 800df26:	f7fd fd19 	bl	800b95c <__swbuf_r>
 800df2a:	0001      	movs	r1, r0
 800df2c:	e7f9      	b.n	800df22 <__sfputc_r+0x1e>

0800df2e <__sfputs_r>:
 800df2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df30:	0006      	movs	r6, r0
 800df32:	000f      	movs	r7, r1
 800df34:	0014      	movs	r4, r2
 800df36:	18d5      	adds	r5, r2, r3
 800df38:	42ac      	cmp	r4, r5
 800df3a:	d101      	bne.n	800df40 <__sfputs_r+0x12>
 800df3c:	2000      	movs	r0, #0
 800df3e:	e007      	b.n	800df50 <__sfputs_r+0x22>
 800df40:	7821      	ldrb	r1, [r4, #0]
 800df42:	003a      	movs	r2, r7
 800df44:	0030      	movs	r0, r6
 800df46:	f7ff ffdd 	bl	800df04 <__sfputc_r>
 800df4a:	3401      	adds	r4, #1
 800df4c:	1c43      	adds	r3, r0, #1
 800df4e:	d1f3      	bne.n	800df38 <__sfputs_r+0xa>
 800df50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800df54 <_vfiprintf_r>:
 800df54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df56:	b0a1      	sub	sp, #132	; 0x84
 800df58:	0006      	movs	r6, r0
 800df5a:	000c      	movs	r4, r1
 800df5c:	001f      	movs	r7, r3
 800df5e:	9203      	str	r2, [sp, #12]
 800df60:	2800      	cmp	r0, #0
 800df62:	d004      	beq.n	800df6e <_vfiprintf_r+0x1a>
 800df64:	6983      	ldr	r3, [r0, #24]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d101      	bne.n	800df6e <_vfiprintf_r+0x1a>
 800df6a:	f7fe fd9d 	bl	800caa8 <__sinit>
 800df6e:	4b8e      	ldr	r3, [pc, #568]	; (800e1a8 <_vfiprintf_r+0x254>)
 800df70:	429c      	cmp	r4, r3
 800df72:	d11c      	bne.n	800dfae <_vfiprintf_r+0x5a>
 800df74:	6874      	ldr	r4, [r6, #4]
 800df76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df78:	07db      	lsls	r3, r3, #31
 800df7a:	d405      	bmi.n	800df88 <_vfiprintf_r+0x34>
 800df7c:	89a3      	ldrh	r3, [r4, #12]
 800df7e:	059b      	lsls	r3, r3, #22
 800df80:	d402      	bmi.n	800df88 <_vfiprintf_r+0x34>
 800df82:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df84:	f7ff f9a7 	bl	800d2d6 <__retarget_lock_acquire_recursive>
 800df88:	89a3      	ldrh	r3, [r4, #12]
 800df8a:	071b      	lsls	r3, r3, #28
 800df8c:	d502      	bpl.n	800df94 <_vfiprintf_r+0x40>
 800df8e:	6923      	ldr	r3, [r4, #16]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d11d      	bne.n	800dfd0 <_vfiprintf_r+0x7c>
 800df94:	0021      	movs	r1, r4
 800df96:	0030      	movs	r0, r6
 800df98:	f7fd fd36 	bl	800ba08 <__swsetup_r>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d017      	beq.n	800dfd0 <_vfiprintf_r+0x7c>
 800dfa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dfa2:	07db      	lsls	r3, r3, #31
 800dfa4:	d50d      	bpl.n	800dfc2 <_vfiprintf_r+0x6e>
 800dfa6:	2001      	movs	r0, #1
 800dfa8:	4240      	negs	r0, r0
 800dfaa:	b021      	add	sp, #132	; 0x84
 800dfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfae:	4b7f      	ldr	r3, [pc, #508]	; (800e1ac <_vfiprintf_r+0x258>)
 800dfb0:	429c      	cmp	r4, r3
 800dfb2:	d101      	bne.n	800dfb8 <_vfiprintf_r+0x64>
 800dfb4:	68b4      	ldr	r4, [r6, #8]
 800dfb6:	e7de      	b.n	800df76 <_vfiprintf_r+0x22>
 800dfb8:	4b7d      	ldr	r3, [pc, #500]	; (800e1b0 <_vfiprintf_r+0x25c>)
 800dfba:	429c      	cmp	r4, r3
 800dfbc:	d1db      	bne.n	800df76 <_vfiprintf_r+0x22>
 800dfbe:	68f4      	ldr	r4, [r6, #12]
 800dfc0:	e7d9      	b.n	800df76 <_vfiprintf_r+0x22>
 800dfc2:	89a3      	ldrh	r3, [r4, #12]
 800dfc4:	059b      	lsls	r3, r3, #22
 800dfc6:	d4ee      	bmi.n	800dfa6 <_vfiprintf_r+0x52>
 800dfc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dfca:	f7ff f985 	bl	800d2d8 <__retarget_lock_release_recursive>
 800dfce:	e7ea      	b.n	800dfa6 <_vfiprintf_r+0x52>
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	ad08      	add	r5, sp, #32
 800dfd4:	616b      	str	r3, [r5, #20]
 800dfd6:	3320      	adds	r3, #32
 800dfd8:	766b      	strb	r3, [r5, #25]
 800dfda:	3310      	adds	r3, #16
 800dfdc:	76ab      	strb	r3, [r5, #26]
 800dfde:	9707      	str	r7, [sp, #28]
 800dfe0:	9f03      	ldr	r7, [sp, #12]
 800dfe2:	783b      	ldrb	r3, [r7, #0]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d001      	beq.n	800dfec <_vfiprintf_r+0x98>
 800dfe8:	2b25      	cmp	r3, #37	; 0x25
 800dfea:	d14e      	bne.n	800e08a <_vfiprintf_r+0x136>
 800dfec:	9b03      	ldr	r3, [sp, #12]
 800dfee:	1afb      	subs	r3, r7, r3
 800dff0:	9305      	str	r3, [sp, #20]
 800dff2:	9b03      	ldr	r3, [sp, #12]
 800dff4:	429f      	cmp	r7, r3
 800dff6:	d00d      	beq.n	800e014 <_vfiprintf_r+0xc0>
 800dff8:	9b05      	ldr	r3, [sp, #20]
 800dffa:	0021      	movs	r1, r4
 800dffc:	0030      	movs	r0, r6
 800dffe:	9a03      	ldr	r2, [sp, #12]
 800e000:	f7ff ff95 	bl	800df2e <__sfputs_r>
 800e004:	1c43      	adds	r3, r0, #1
 800e006:	d100      	bne.n	800e00a <_vfiprintf_r+0xb6>
 800e008:	e0b5      	b.n	800e176 <_vfiprintf_r+0x222>
 800e00a:	696a      	ldr	r2, [r5, #20]
 800e00c:	9b05      	ldr	r3, [sp, #20]
 800e00e:	4694      	mov	ip, r2
 800e010:	4463      	add	r3, ip
 800e012:	616b      	str	r3, [r5, #20]
 800e014:	783b      	ldrb	r3, [r7, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d100      	bne.n	800e01c <_vfiprintf_r+0xc8>
 800e01a:	e0ac      	b.n	800e176 <_vfiprintf_r+0x222>
 800e01c:	2201      	movs	r2, #1
 800e01e:	1c7b      	adds	r3, r7, #1
 800e020:	9303      	str	r3, [sp, #12]
 800e022:	2300      	movs	r3, #0
 800e024:	4252      	negs	r2, r2
 800e026:	606a      	str	r2, [r5, #4]
 800e028:	a904      	add	r1, sp, #16
 800e02a:	3254      	adds	r2, #84	; 0x54
 800e02c:	1852      	adds	r2, r2, r1
 800e02e:	602b      	str	r3, [r5, #0]
 800e030:	60eb      	str	r3, [r5, #12]
 800e032:	60ab      	str	r3, [r5, #8]
 800e034:	7013      	strb	r3, [r2, #0]
 800e036:	65ab      	str	r3, [r5, #88]	; 0x58
 800e038:	9b03      	ldr	r3, [sp, #12]
 800e03a:	2205      	movs	r2, #5
 800e03c:	7819      	ldrb	r1, [r3, #0]
 800e03e:	485d      	ldr	r0, [pc, #372]	; (800e1b4 <_vfiprintf_r+0x260>)
 800e040:	f7ff f9d4 	bl	800d3ec <memchr>
 800e044:	9b03      	ldr	r3, [sp, #12]
 800e046:	1c5f      	adds	r7, r3, #1
 800e048:	2800      	cmp	r0, #0
 800e04a:	d120      	bne.n	800e08e <_vfiprintf_r+0x13a>
 800e04c:	682a      	ldr	r2, [r5, #0]
 800e04e:	06d3      	lsls	r3, r2, #27
 800e050:	d504      	bpl.n	800e05c <_vfiprintf_r+0x108>
 800e052:	2353      	movs	r3, #83	; 0x53
 800e054:	a904      	add	r1, sp, #16
 800e056:	185b      	adds	r3, r3, r1
 800e058:	2120      	movs	r1, #32
 800e05a:	7019      	strb	r1, [r3, #0]
 800e05c:	0713      	lsls	r3, r2, #28
 800e05e:	d504      	bpl.n	800e06a <_vfiprintf_r+0x116>
 800e060:	2353      	movs	r3, #83	; 0x53
 800e062:	a904      	add	r1, sp, #16
 800e064:	185b      	adds	r3, r3, r1
 800e066:	212b      	movs	r1, #43	; 0x2b
 800e068:	7019      	strb	r1, [r3, #0]
 800e06a:	9b03      	ldr	r3, [sp, #12]
 800e06c:	781b      	ldrb	r3, [r3, #0]
 800e06e:	2b2a      	cmp	r3, #42	; 0x2a
 800e070:	d016      	beq.n	800e0a0 <_vfiprintf_r+0x14c>
 800e072:	2100      	movs	r1, #0
 800e074:	68eb      	ldr	r3, [r5, #12]
 800e076:	9f03      	ldr	r7, [sp, #12]
 800e078:	783a      	ldrb	r2, [r7, #0]
 800e07a:	1c78      	adds	r0, r7, #1
 800e07c:	3a30      	subs	r2, #48	; 0x30
 800e07e:	4684      	mov	ip, r0
 800e080:	2a09      	cmp	r2, #9
 800e082:	d94f      	bls.n	800e124 <_vfiprintf_r+0x1d0>
 800e084:	2900      	cmp	r1, #0
 800e086:	d111      	bne.n	800e0ac <_vfiprintf_r+0x158>
 800e088:	e017      	b.n	800e0ba <_vfiprintf_r+0x166>
 800e08a:	3701      	adds	r7, #1
 800e08c:	e7a9      	b.n	800dfe2 <_vfiprintf_r+0x8e>
 800e08e:	4b49      	ldr	r3, [pc, #292]	; (800e1b4 <_vfiprintf_r+0x260>)
 800e090:	682a      	ldr	r2, [r5, #0]
 800e092:	1ac0      	subs	r0, r0, r3
 800e094:	2301      	movs	r3, #1
 800e096:	4083      	lsls	r3, r0
 800e098:	4313      	orrs	r3, r2
 800e09a:	602b      	str	r3, [r5, #0]
 800e09c:	9703      	str	r7, [sp, #12]
 800e09e:	e7cb      	b.n	800e038 <_vfiprintf_r+0xe4>
 800e0a0:	9b07      	ldr	r3, [sp, #28]
 800e0a2:	1d19      	adds	r1, r3, #4
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	9107      	str	r1, [sp, #28]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	db01      	blt.n	800e0b0 <_vfiprintf_r+0x15c>
 800e0ac:	930b      	str	r3, [sp, #44]	; 0x2c
 800e0ae:	e004      	b.n	800e0ba <_vfiprintf_r+0x166>
 800e0b0:	425b      	negs	r3, r3
 800e0b2:	60eb      	str	r3, [r5, #12]
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	4313      	orrs	r3, r2
 800e0b8:	602b      	str	r3, [r5, #0]
 800e0ba:	783b      	ldrb	r3, [r7, #0]
 800e0bc:	2b2e      	cmp	r3, #46	; 0x2e
 800e0be:	d10a      	bne.n	800e0d6 <_vfiprintf_r+0x182>
 800e0c0:	787b      	ldrb	r3, [r7, #1]
 800e0c2:	2b2a      	cmp	r3, #42	; 0x2a
 800e0c4:	d137      	bne.n	800e136 <_vfiprintf_r+0x1e2>
 800e0c6:	9b07      	ldr	r3, [sp, #28]
 800e0c8:	3702      	adds	r7, #2
 800e0ca:	1d1a      	adds	r2, r3, #4
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	9207      	str	r2, [sp, #28]
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	db2d      	blt.n	800e130 <_vfiprintf_r+0x1dc>
 800e0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d6:	2203      	movs	r2, #3
 800e0d8:	7839      	ldrb	r1, [r7, #0]
 800e0da:	4837      	ldr	r0, [pc, #220]	; (800e1b8 <_vfiprintf_r+0x264>)
 800e0dc:	f7ff f986 	bl	800d3ec <memchr>
 800e0e0:	2800      	cmp	r0, #0
 800e0e2:	d007      	beq.n	800e0f4 <_vfiprintf_r+0x1a0>
 800e0e4:	4b34      	ldr	r3, [pc, #208]	; (800e1b8 <_vfiprintf_r+0x264>)
 800e0e6:	682a      	ldr	r2, [r5, #0]
 800e0e8:	1ac0      	subs	r0, r0, r3
 800e0ea:	2340      	movs	r3, #64	; 0x40
 800e0ec:	4083      	lsls	r3, r0
 800e0ee:	4313      	orrs	r3, r2
 800e0f0:	3701      	adds	r7, #1
 800e0f2:	602b      	str	r3, [r5, #0]
 800e0f4:	7839      	ldrb	r1, [r7, #0]
 800e0f6:	1c7b      	adds	r3, r7, #1
 800e0f8:	2206      	movs	r2, #6
 800e0fa:	4830      	ldr	r0, [pc, #192]	; (800e1bc <_vfiprintf_r+0x268>)
 800e0fc:	9303      	str	r3, [sp, #12]
 800e0fe:	7629      	strb	r1, [r5, #24]
 800e100:	f7ff f974 	bl	800d3ec <memchr>
 800e104:	2800      	cmp	r0, #0
 800e106:	d045      	beq.n	800e194 <_vfiprintf_r+0x240>
 800e108:	4b2d      	ldr	r3, [pc, #180]	; (800e1c0 <_vfiprintf_r+0x26c>)
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d127      	bne.n	800e15e <_vfiprintf_r+0x20a>
 800e10e:	2207      	movs	r2, #7
 800e110:	9b07      	ldr	r3, [sp, #28]
 800e112:	3307      	adds	r3, #7
 800e114:	4393      	bics	r3, r2
 800e116:	3308      	adds	r3, #8
 800e118:	9307      	str	r3, [sp, #28]
 800e11a:	696b      	ldr	r3, [r5, #20]
 800e11c:	9a04      	ldr	r2, [sp, #16]
 800e11e:	189b      	adds	r3, r3, r2
 800e120:	616b      	str	r3, [r5, #20]
 800e122:	e75d      	b.n	800dfe0 <_vfiprintf_r+0x8c>
 800e124:	210a      	movs	r1, #10
 800e126:	434b      	muls	r3, r1
 800e128:	4667      	mov	r7, ip
 800e12a:	189b      	adds	r3, r3, r2
 800e12c:	3909      	subs	r1, #9
 800e12e:	e7a3      	b.n	800e078 <_vfiprintf_r+0x124>
 800e130:	2301      	movs	r3, #1
 800e132:	425b      	negs	r3, r3
 800e134:	e7ce      	b.n	800e0d4 <_vfiprintf_r+0x180>
 800e136:	2300      	movs	r3, #0
 800e138:	001a      	movs	r2, r3
 800e13a:	3701      	adds	r7, #1
 800e13c:	606b      	str	r3, [r5, #4]
 800e13e:	7839      	ldrb	r1, [r7, #0]
 800e140:	1c78      	adds	r0, r7, #1
 800e142:	3930      	subs	r1, #48	; 0x30
 800e144:	4684      	mov	ip, r0
 800e146:	2909      	cmp	r1, #9
 800e148:	d903      	bls.n	800e152 <_vfiprintf_r+0x1fe>
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d0c3      	beq.n	800e0d6 <_vfiprintf_r+0x182>
 800e14e:	9209      	str	r2, [sp, #36]	; 0x24
 800e150:	e7c1      	b.n	800e0d6 <_vfiprintf_r+0x182>
 800e152:	230a      	movs	r3, #10
 800e154:	435a      	muls	r2, r3
 800e156:	4667      	mov	r7, ip
 800e158:	1852      	adds	r2, r2, r1
 800e15a:	3b09      	subs	r3, #9
 800e15c:	e7ef      	b.n	800e13e <_vfiprintf_r+0x1ea>
 800e15e:	ab07      	add	r3, sp, #28
 800e160:	9300      	str	r3, [sp, #0]
 800e162:	0022      	movs	r2, r4
 800e164:	0029      	movs	r1, r5
 800e166:	0030      	movs	r0, r6
 800e168:	4b16      	ldr	r3, [pc, #88]	; (800e1c4 <_vfiprintf_r+0x270>)
 800e16a:	f7fc f86d 	bl	800a248 <_printf_float>
 800e16e:	9004      	str	r0, [sp, #16]
 800e170:	9b04      	ldr	r3, [sp, #16]
 800e172:	3301      	adds	r3, #1
 800e174:	d1d1      	bne.n	800e11a <_vfiprintf_r+0x1c6>
 800e176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e178:	07db      	lsls	r3, r3, #31
 800e17a:	d405      	bmi.n	800e188 <_vfiprintf_r+0x234>
 800e17c:	89a3      	ldrh	r3, [r4, #12]
 800e17e:	059b      	lsls	r3, r3, #22
 800e180:	d402      	bmi.n	800e188 <_vfiprintf_r+0x234>
 800e182:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e184:	f7ff f8a8 	bl	800d2d8 <__retarget_lock_release_recursive>
 800e188:	89a3      	ldrh	r3, [r4, #12]
 800e18a:	065b      	lsls	r3, r3, #25
 800e18c:	d500      	bpl.n	800e190 <_vfiprintf_r+0x23c>
 800e18e:	e70a      	b.n	800dfa6 <_vfiprintf_r+0x52>
 800e190:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e192:	e70a      	b.n	800dfaa <_vfiprintf_r+0x56>
 800e194:	ab07      	add	r3, sp, #28
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	0022      	movs	r2, r4
 800e19a:	0029      	movs	r1, r5
 800e19c:	0030      	movs	r0, r6
 800e19e:	4b09      	ldr	r3, [pc, #36]	; (800e1c4 <_vfiprintf_r+0x270>)
 800e1a0:	f7fc fb10 	bl	800a7c4 <_printf_i>
 800e1a4:	e7e3      	b.n	800e16e <_vfiprintf_r+0x21a>
 800e1a6:	46c0      	nop			; (mov r8, r8)
 800e1a8:	08010dac 	.word	0x08010dac
 800e1ac:	08010dcc 	.word	0x08010dcc
 800e1b0:	08010d8c 	.word	0x08010d8c
 800e1b4:	08010fcc 	.word	0x08010fcc
 800e1b8:	08010fd2 	.word	0x08010fd2
 800e1bc:	08010fd6 	.word	0x08010fd6
 800e1c0:	0800a249 	.word	0x0800a249
 800e1c4:	0800df2f 	.word	0x0800df2f

0800e1c8 <nan>:
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	4901      	ldr	r1, [pc, #4]	; (800e1d0 <nan+0x8>)
 800e1cc:	4770      	bx	lr
 800e1ce:	46c0      	nop			; (mov r8, r8)
 800e1d0:	7ff80000 	.word	0x7ff80000

0800e1d4 <_sbrk_r>:
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	b570      	push	{r4, r5, r6, lr}
 800e1d8:	4d06      	ldr	r5, [pc, #24]	; (800e1f4 <_sbrk_r+0x20>)
 800e1da:	0004      	movs	r4, r0
 800e1dc:	0008      	movs	r0, r1
 800e1de:	602b      	str	r3, [r5, #0]
 800e1e0:	f7f6 fa38 	bl	8004654 <_sbrk>
 800e1e4:	1c43      	adds	r3, r0, #1
 800e1e6:	d103      	bne.n	800e1f0 <_sbrk_r+0x1c>
 800e1e8:	682b      	ldr	r3, [r5, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d000      	beq.n	800e1f0 <_sbrk_r+0x1c>
 800e1ee:	6023      	str	r3, [r4, #0]
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	46c0      	nop			; (mov r8, r8)
 800e1f4:	200026fc 	.word	0x200026fc

0800e1f8 <__sread>:
 800e1f8:	b570      	push	{r4, r5, r6, lr}
 800e1fa:	000c      	movs	r4, r1
 800e1fc:	250e      	movs	r5, #14
 800e1fe:	5f49      	ldrsh	r1, [r1, r5]
 800e200:	f000 f8f0 	bl	800e3e4 <_read_r>
 800e204:	2800      	cmp	r0, #0
 800e206:	db03      	blt.n	800e210 <__sread+0x18>
 800e208:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e20a:	181b      	adds	r3, r3, r0
 800e20c:	6563      	str	r3, [r4, #84]	; 0x54
 800e20e:	bd70      	pop	{r4, r5, r6, pc}
 800e210:	89a3      	ldrh	r3, [r4, #12]
 800e212:	4a02      	ldr	r2, [pc, #8]	; (800e21c <__sread+0x24>)
 800e214:	4013      	ands	r3, r2
 800e216:	81a3      	strh	r3, [r4, #12]
 800e218:	e7f9      	b.n	800e20e <__sread+0x16>
 800e21a:	46c0      	nop			; (mov r8, r8)
 800e21c:	ffffefff 	.word	0xffffefff

0800e220 <__swrite>:
 800e220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e222:	001f      	movs	r7, r3
 800e224:	898b      	ldrh	r3, [r1, #12]
 800e226:	0005      	movs	r5, r0
 800e228:	000c      	movs	r4, r1
 800e22a:	0016      	movs	r6, r2
 800e22c:	05db      	lsls	r3, r3, #23
 800e22e:	d505      	bpl.n	800e23c <__swrite+0x1c>
 800e230:	230e      	movs	r3, #14
 800e232:	5ec9      	ldrsh	r1, [r1, r3]
 800e234:	2200      	movs	r2, #0
 800e236:	2302      	movs	r3, #2
 800e238:	f000 f8b0 	bl	800e39c <_lseek_r>
 800e23c:	89a3      	ldrh	r3, [r4, #12]
 800e23e:	4a05      	ldr	r2, [pc, #20]	; (800e254 <__swrite+0x34>)
 800e240:	0028      	movs	r0, r5
 800e242:	4013      	ands	r3, r2
 800e244:	81a3      	strh	r3, [r4, #12]
 800e246:	0032      	movs	r2, r6
 800e248:	230e      	movs	r3, #14
 800e24a:	5ee1      	ldrsh	r1, [r4, r3]
 800e24c:	003b      	movs	r3, r7
 800e24e:	f000 f82d 	bl	800e2ac <_write_r>
 800e252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e254:	ffffefff 	.word	0xffffefff

0800e258 <__sseek>:
 800e258:	b570      	push	{r4, r5, r6, lr}
 800e25a:	000c      	movs	r4, r1
 800e25c:	250e      	movs	r5, #14
 800e25e:	5f49      	ldrsh	r1, [r1, r5]
 800e260:	f000 f89c 	bl	800e39c <_lseek_r>
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	1c42      	adds	r2, r0, #1
 800e268:	d103      	bne.n	800e272 <__sseek+0x1a>
 800e26a:	4a05      	ldr	r2, [pc, #20]	; (800e280 <__sseek+0x28>)
 800e26c:	4013      	ands	r3, r2
 800e26e:	81a3      	strh	r3, [r4, #12]
 800e270:	bd70      	pop	{r4, r5, r6, pc}
 800e272:	2280      	movs	r2, #128	; 0x80
 800e274:	0152      	lsls	r2, r2, #5
 800e276:	4313      	orrs	r3, r2
 800e278:	81a3      	strh	r3, [r4, #12]
 800e27a:	6560      	str	r0, [r4, #84]	; 0x54
 800e27c:	e7f8      	b.n	800e270 <__sseek+0x18>
 800e27e:	46c0      	nop			; (mov r8, r8)
 800e280:	ffffefff 	.word	0xffffefff

0800e284 <__sclose>:
 800e284:	b510      	push	{r4, lr}
 800e286:	230e      	movs	r3, #14
 800e288:	5ec9      	ldrsh	r1, [r1, r3]
 800e28a:	f000 f841 	bl	800e310 <_close_r>
 800e28e:	bd10      	pop	{r4, pc}

0800e290 <__ascii_wctomb>:
 800e290:	0003      	movs	r3, r0
 800e292:	1e08      	subs	r0, r1, #0
 800e294:	d005      	beq.n	800e2a2 <__ascii_wctomb+0x12>
 800e296:	2aff      	cmp	r2, #255	; 0xff
 800e298:	d904      	bls.n	800e2a4 <__ascii_wctomb+0x14>
 800e29a:	228a      	movs	r2, #138	; 0x8a
 800e29c:	2001      	movs	r0, #1
 800e29e:	601a      	str	r2, [r3, #0]
 800e2a0:	4240      	negs	r0, r0
 800e2a2:	4770      	bx	lr
 800e2a4:	2001      	movs	r0, #1
 800e2a6:	700a      	strb	r2, [r1, #0]
 800e2a8:	e7fb      	b.n	800e2a2 <__ascii_wctomb+0x12>
	...

0800e2ac <_write_r>:
 800e2ac:	b570      	push	{r4, r5, r6, lr}
 800e2ae:	0004      	movs	r4, r0
 800e2b0:	0008      	movs	r0, r1
 800e2b2:	0011      	movs	r1, r2
 800e2b4:	001a      	movs	r2, r3
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	4d05      	ldr	r5, [pc, #20]	; (800e2d0 <_write_r+0x24>)
 800e2ba:	602b      	str	r3, [r5, #0]
 800e2bc:	f7f5 fc94 	bl	8003be8 <_write>
 800e2c0:	1c43      	adds	r3, r0, #1
 800e2c2:	d103      	bne.n	800e2cc <_write_r+0x20>
 800e2c4:	682b      	ldr	r3, [r5, #0]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d000      	beq.n	800e2cc <_write_r+0x20>
 800e2ca:	6023      	str	r3, [r4, #0]
 800e2cc:	bd70      	pop	{r4, r5, r6, pc}
 800e2ce:	46c0      	nop			; (mov r8, r8)
 800e2d0:	200026fc 	.word	0x200026fc

0800e2d4 <__assert_func>:
 800e2d4:	b530      	push	{r4, r5, lr}
 800e2d6:	0014      	movs	r4, r2
 800e2d8:	001a      	movs	r2, r3
 800e2da:	4b09      	ldr	r3, [pc, #36]	; (800e300 <__assert_func+0x2c>)
 800e2dc:	0005      	movs	r5, r0
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	b085      	sub	sp, #20
 800e2e2:	68d8      	ldr	r0, [r3, #12]
 800e2e4:	4b07      	ldr	r3, [pc, #28]	; (800e304 <__assert_func+0x30>)
 800e2e6:	2c00      	cmp	r4, #0
 800e2e8:	d101      	bne.n	800e2ee <__assert_func+0x1a>
 800e2ea:	4b07      	ldr	r3, [pc, #28]	; (800e308 <__assert_func+0x34>)
 800e2ec:	001c      	movs	r4, r3
 800e2ee:	9301      	str	r3, [sp, #4]
 800e2f0:	9100      	str	r1, [sp, #0]
 800e2f2:	002b      	movs	r3, r5
 800e2f4:	4905      	ldr	r1, [pc, #20]	; (800e30c <__assert_func+0x38>)
 800e2f6:	9402      	str	r4, [sp, #8]
 800e2f8:	f000 f81c 	bl	800e334 <fiprintf>
 800e2fc:	f000 f886 	bl	800e40c <abort>
 800e300:	2000000c 	.word	0x2000000c
 800e304:	08010fdd 	.word	0x08010fdd
 800e308:	08011018 	.word	0x08011018
 800e30c:	08010fea 	.word	0x08010fea

0800e310 <_close_r>:
 800e310:	2300      	movs	r3, #0
 800e312:	b570      	push	{r4, r5, r6, lr}
 800e314:	4d06      	ldr	r5, [pc, #24]	; (800e330 <_close_r+0x20>)
 800e316:	0004      	movs	r4, r0
 800e318:	0008      	movs	r0, r1
 800e31a:	602b      	str	r3, [r5, #0]
 800e31c:	f7f5 fc92 	bl	8003c44 <_close>
 800e320:	1c43      	adds	r3, r0, #1
 800e322:	d103      	bne.n	800e32c <_close_r+0x1c>
 800e324:	682b      	ldr	r3, [r5, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d000      	beq.n	800e32c <_close_r+0x1c>
 800e32a:	6023      	str	r3, [r4, #0]
 800e32c:	bd70      	pop	{r4, r5, r6, pc}
 800e32e:	46c0      	nop			; (mov r8, r8)
 800e330:	200026fc 	.word	0x200026fc

0800e334 <fiprintf>:
 800e334:	b40e      	push	{r1, r2, r3}
 800e336:	b503      	push	{r0, r1, lr}
 800e338:	0001      	movs	r1, r0
 800e33a:	ab03      	add	r3, sp, #12
 800e33c:	4804      	ldr	r0, [pc, #16]	; (800e350 <fiprintf+0x1c>)
 800e33e:	cb04      	ldmia	r3!, {r2}
 800e340:	6800      	ldr	r0, [r0, #0]
 800e342:	9301      	str	r3, [sp, #4]
 800e344:	f7ff fe06 	bl	800df54 <_vfiprintf_r>
 800e348:	b002      	add	sp, #8
 800e34a:	bc08      	pop	{r3}
 800e34c:	b003      	add	sp, #12
 800e34e:	4718      	bx	r3
 800e350:	2000000c 	.word	0x2000000c

0800e354 <_fstat_r>:
 800e354:	2300      	movs	r3, #0
 800e356:	b570      	push	{r4, r5, r6, lr}
 800e358:	4d06      	ldr	r5, [pc, #24]	; (800e374 <_fstat_r+0x20>)
 800e35a:	0004      	movs	r4, r0
 800e35c:	0008      	movs	r0, r1
 800e35e:	0011      	movs	r1, r2
 800e360:	602b      	str	r3, [r5, #0]
 800e362:	f7f5 fcc1 	bl	8003ce8 <_fstat>
 800e366:	1c43      	adds	r3, r0, #1
 800e368:	d103      	bne.n	800e372 <_fstat_r+0x1e>
 800e36a:	682b      	ldr	r3, [r5, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d000      	beq.n	800e372 <_fstat_r+0x1e>
 800e370:	6023      	str	r3, [r4, #0]
 800e372:	bd70      	pop	{r4, r5, r6, pc}
 800e374:	200026fc 	.word	0x200026fc

0800e378 <_isatty_r>:
 800e378:	2300      	movs	r3, #0
 800e37a:	b570      	push	{r4, r5, r6, lr}
 800e37c:	4d06      	ldr	r5, [pc, #24]	; (800e398 <_isatty_r+0x20>)
 800e37e:	0004      	movs	r4, r0
 800e380:	0008      	movs	r0, r1
 800e382:	602b      	str	r3, [r5, #0]
 800e384:	f7f5 fc1a 	bl	8003bbc <_isatty>
 800e388:	1c43      	adds	r3, r0, #1
 800e38a:	d103      	bne.n	800e394 <_isatty_r+0x1c>
 800e38c:	682b      	ldr	r3, [r5, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d000      	beq.n	800e394 <_isatty_r+0x1c>
 800e392:	6023      	str	r3, [r4, #0]
 800e394:	bd70      	pop	{r4, r5, r6, pc}
 800e396:	46c0      	nop			; (mov r8, r8)
 800e398:	200026fc 	.word	0x200026fc

0800e39c <_lseek_r>:
 800e39c:	b570      	push	{r4, r5, r6, lr}
 800e39e:	0004      	movs	r4, r0
 800e3a0:	0008      	movs	r0, r1
 800e3a2:	0011      	movs	r1, r2
 800e3a4:	001a      	movs	r2, r3
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	4d05      	ldr	r5, [pc, #20]	; (800e3c0 <_lseek_r+0x24>)
 800e3aa:	602b      	str	r3, [r5, #0]
 800e3ac:	f7f5 fc61 	bl	8003c72 <_lseek>
 800e3b0:	1c43      	adds	r3, r0, #1
 800e3b2:	d103      	bne.n	800e3bc <_lseek_r+0x20>
 800e3b4:	682b      	ldr	r3, [r5, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d000      	beq.n	800e3bc <_lseek_r+0x20>
 800e3ba:	6023      	str	r3, [r4, #0]
 800e3bc:	bd70      	pop	{r4, r5, r6, pc}
 800e3be:	46c0      	nop			; (mov r8, r8)
 800e3c0:	200026fc 	.word	0x200026fc

0800e3c4 <__malloc_lock>:
 800e3c4:	b510      	push	{r4, lr}
 800e3c6:	4802      	ldr	r0, [pc, #8]	; (800e3d0 <__malloc_lock+0xc>)
 800e3c8:	f7fe ff85 	bl	800d2d6 <__retarget_lock_acquire_recursive>
 800e3cc:	bd10      	pop	{r4, pc}
 800e3ce:	46c0      	nop			; (mov r8, r8)
 800e3d0:	200026f4 	.word	0x200026f4

0800e3d4 <__malloc_unlock>:
 800e3d4:	b510      	push	{r4, lr}
 800e3d6:	4802      	ldr	r0, [pc, #8]	; (800e3e0 <__malloc_unlock+0xc>)
 800e3d8:	f7fe ff7e 	bl	800d2d8 <__retarget_lock_release_recursive>
 800e3dc:	bd10      	pop	{r4, pc}
 800e3de:	46c0      	nop			; (mov r8, r8)
 800e3e0:	200026f4 	.word	0x200026f4

0800e3e4 <_read_r>:
 800e3e4:	b570      	push	{r4, r5, r6, lr}
 800e3e6:	0004      	movs	r4, r0
 800e3e8:	0008      	movs	r0, r1
 800e3ea:	0011      	movs	r1, r2
 800e3ec:	001a      	movs	r2, r3
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	4d05      	ldr	r5, [pc, #20]	; (800e408 <_read_r+0x24>)
 800e3f2:	602b      	str	r3, [r5, #0]
 800e3f4:	f7f5 fc4e 	bl	8003c94 <_read>
 800e3f8:	1c43      	adds	r3, r0, #1
 800e3fa:	d103      	bne.n	800e404 <_read_r+0x20>
 800e3fc:	682b      	ldr	r3, [r5, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d000      	beq.n	800e404 <_read_r+0x20>
 800e402:	6023      	str	r3, [r4, #0]
 800e404:	bd70      	pop	{r4, r5, r6, pc}
 800e406:	46c0      	nop			; (mov r8, r8)
 800e408:	200026fc 	.word	0x200026fc

0800e40c <abort>:
 800e40c:	2006      	movs	r0, #6
 800e40e:	b510      	push	{r4, lr}
 800e410:	f000 f82e 	bl	800e470 <raise>
 800e414:	2001      	movs	r0, #1
 800e416:	f002 f9e5 	bl	80107e4 <_exit>

0800e41a <_raise_r>:
 800e41a:	b570      	push	{r4, r5, r6, lr}
 800e41c:	0004      	movs	r4, r0
 800e41e:	000d      	movs	r5, r1
 800e420:	291f      	cmp	r1, #31
 800e422:	d904      	bls.n	800e42e <_raise_r+0x14>
 800e424:	2316      	movs	r3, #22
 800e426:	6003      	str	r3, [r0, #0]
 800e428:	2001      	movs	r0, #1
 800e42a:	4240      	negs	r0, r0
 800e42c:	bd70      	pop	{r4, r5, r6, pc}
 800e42e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e430:	2b00      	cmp	r3, #0
 800e432:	d004      	beq.n	800e43e <_raise_r+0x24>
 800e434:	008a      	lsls	r2, r1, #2
 800e436:	189b      	adds	r3, r3, r2
 800e438:	681a      	ldr	r2, [r3, #0]
 800e43a:	2a00      	cmp	r2, #0
 800e43c:	d108      	bne.n	800e450 <_raise_r+0x36>
 800e43e:	0020      	movs	r0, r4
 800e440:	f000 f832 	bl	800e4a8 <_getpid_r>
 800e444:	002a      	movs	r2, r5
 800e446:	0001      	movs	r1, r0
 800e448:	0020      	movs	r0, r4
 800e44a:	f000 f81b 	bl	800e484 <_kill_r>
 800e44e:	e7ed      	b.n	800e42c <_raise_r+0x12>
 800e450:	2000      	movs	r0, #0
 800e452:	2a01      	cmp	r2, #1
 800e454:	d0ea      	beq.n	800e42c <_raise_r+0x12>
 800e456:	1c51      	adds	r1, r2, #1
 800e458:	d103      	bne.n	800e462 <_raise_r+0x48>
 800e45a:	2316      	movs	r3, #22
 800e45c:	3001      	adds	r0, #1
 800e45e:	6023      	str	r3, [r4, #0]
 800e460:	e7e4      	b.n	800e42c <_raise_r+0x12>
 800e462:	2400      	movs	r4, #0
 800e464:	0028      	movs	r0, r5
 800e466:	601c      	str	r4, [r3, #0]
 800e468:	4790      	blx	r2
 800e46a:	0020      	movs	r0, r4
 800e46c:	e7de      	b.n	800e42c <_raise_r+0x12>
	...

0800e470 <raise>:
 800e470:	b510      	push	{r4, lr}
 800e472:	4b03      	ldr	r3, [pc, #12]	; (800e480 <raise+0x10>)
 800e474:	0001      	movs	r1, r0
 800e476:	6818      	ldr	r0, [r3, #0]
 800e478:	f7ff ffcf 	bl	800e41a <_raise_r>
 800e47c:	bd10      	pop	{r4, pc}
 800e47e:	46c0      	nop			; (mov r8, r8)
 800e480:	2000000c 	.word	0x2000000c

0800e484 <_kill_r>:
 800e484:	2300      	movs	r3, #0
 800e486:	b570      	push	{r4, r5, r6, lr}
 800e488:	4d06      	ldr	r5, [pc, #24]	; (800e4a4 <_kill_r+0x20>)
 800e48a:	0004      	movs	r4, r0
 800e48c:	0008      	movs	r0, r1
 800e48e:	0011      	movs	r1, r2
 800e490:	602b      	str	r3, [r5, #0]
 800e492:	f002 f99f 	bl	80107d4 <_kill>
 800e496:	1c43      	adds	r3, r0, #1
 800e498:	d103      	bne.n	800e4a2 <_kill_r+0x1e>
 800e49a:	682b      	ldr	r3, [r5, #0]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d000      	beq.n	800e4a2 <_kill_r+0x1e>
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	bd70      	pop	{r4, r5, r6, pc}
 800e4a4:	200026fc 	.word	0x200026fc

0800e4a8 <_getpid_r>:
 800e4a8:	b510      	push	{r4, lr}
 800e4aa:	f002 f98b 	bl	80107c4 <_getpid>
 800e4ae:	bd10      	pop	{r4, pc}

0800e4b0 <cos>:
 800e4b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4b2:	4a1e      	ldr	r2, [pc, #120]	; (800e52c <cos+0x7c>)
 800e4b4:	004b      	lsls	r3, r1, #1
 800e4b6:	b087      	sub	sp, #28
 800e4b8:	085b      	lsrs	r3, r3, #1
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	dc04      	bgt.n	800e4c8 <cos+0x18>
 800e4be:	2200      	movs	r2, #0
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f001 fb0b 	bl	800fadc <__kernel_cos>
 800e4c6:	e006      	b.n	800e4d6 <cos+0x26>
 800e4c8:	4a19      	ldr	r2, [pc, #100]	; (800e530 <cos+0x80>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	dd05      	ble.n	800e4da <cos+0x2a>
 800e4ce:	0002      	movs	r2, r0
 800e4d0:	000b      	movs	r3, r1
 800e4d2:	f7f3 fa35 	bl	8001940 <__aeabi_dsub>
 800e4d6:	b007      	add	sp, #28
 800e4d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4da:	aa02      	add	r2, sp, #8
 800e4dc:	f001 f85e 	bl	800f59c <__ieee754_rem_pio2>
 800e4e0:	9c04      	ldr	r4, [sp, #16]
 800e4e2:	9d05      	ldr	r5, [sp, #20]
 800e4e4:	2303      	movs	r3, #3
 800e4e6:	4003      	ands	r3, r0
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d008      	beq.n	800e4fe <cos+0x4e>
 800e4ec:	9802      	ldr	r0, [sp, #8]
 800e4ee:	9903      	ldr	r1, [sp, #12]
 800e4f0:	2b02      	cmp	r3, #2
 800e4f2:	d00f      	beq.n	800e514 <cos+0x64>
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d112      	bne.n	800e51e <cos+0x6e>
 800e4f8:	0022      	movs	r2, r4
 800e4fa:	002b      	movs	r3, r5
 800e4fc:	e7e1      	b.n	800e4c2 <cos+0x12>
 800e4fe:	9300      	str	r3, [sp, #0]
 800e500:	0022      	movs	r2, r4
 800e502:	9802      	ldr	r0, [sp, #8]
 800e504:	9903      	ldr	r1, [sp, #12]
 800e506:	002b      	movs	r3, r5
 800e508:	f001 ff1e 	bl	8010348 <__kernel_sin>
 800e50c:	2380      	movs	r3, #128	; 0x80
 800e50e:	061b      	lsls	r3, r3, #24
 800e510:	18c9      	adds	r1, r1, r3
 800e512:	e7e0      	b.n	800e4d6 <cos+0x26>
 800e514:	0022      	movs	r2, r4
 800e516:	002b      	movs	r3, r5
 800e518:	f001 fae0 	bl	800fadc <__kernel_cos>
 800e51c:	e7f6      	b.n	800e50c <cos+0x5c>
 800e51e:	2301      	movs	r3, #1
 800e520:	0022      	movs	r2, r4
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	002b      	movs	r3, r5
 800e526:	f001 ff0f 	bl	8010348 <__kernel_sin>
 800e52a:	e7d4      	b.n	800e4d6 <cos+0x26>
 800e52c:	3fe921fb 	.word	0x3fe921fb
 800e530:	7fefffff 	.word	0x7fefffff

0800e534 <sin>:
 800e534:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e536:	4a20      	ldr	r2, [pc, #128]	; (800e5b8 <sin+0x84>)
 800e538:	004b      	lsls	r3, r1, #1
 800e53a:	b087      	sub	sp, #28
 800e53c:	085b      	lsrs	r3, r3, #1
 800e53e:	4293      	cmp	r3, r2
 800e540:	dc06      	bgt.n	800e550 <sin+0x1c>
 800e542:	2300      	movs	r3, #0
 800e544:	2200      	movs	r2, #0
 800e546:	9300      	str	r3, [sp, #0]
 800e548:	2300      	movs	r3, #0
 800e54a:	f001 fefd 	bl	8010348 <__kernel_sin>
 800e54e:	e006      	b.n	800e55e <sin+0x2a>
 800e550:	4a1a      	ldr	r2, [pc, #104]	; (800e5bc <sin+0x88>)
 800e552:	4293      	cmp	r3, r2
 800e554:	dd05      	ble.n	800e562 <sin+0x2e>
 800e556:	0002      	movs	r2, r0
 800e558:	000b      	movs	r3, r1
 800e55a:	f7f3 f9f1 	bl	8001940 <__aeabi_dsub>
 800e55e:	b007      	add	sp, #28
 800e560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e562:	aa02      	add	r2, sp, #8
 800e564:	f001 f81a 	bl	800f59c <__ieee754_rem_pio2>
 800e568:	9c04      	ldr	r4, [sp, #16]
 800e56a:	9d05      	ldr	r5, [sp, #20]
 800e56c:	2303      	movs	r3, #3
 800e56e:	4003      	ands	r3, r0
 800e570:	2b01      	cmp	r3, #1
 800e572:	d00a      	beq.n	800e58a <sin+0x56>
 800e574:	9802      	ldr	r0, [sp, #8]
 800e576:	9903      	ldr	r1, [sp, #12]
 800e578:	2b02      	cmp	r3, #2
 800e57a:	d00d      	beq.n	800e598 <sin+0x64>
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d115      	bne.n	800e5ac <sin+0x78>
 800e580:	3301      	adds	r3, #1
 800e582:	9300      	str	r3, [sp, #0]
 800e584:	0022      	movs	r2, r4
 800e586:	002b      	movs	r3, r5
 800e588:	e7df      	b.n	800e54a <sin+0x16>
 800e58a:	0022      	movs	r2, r4
 800e58c:	9802      	ldr	r0, [sp, #8]
 800e58e:	9903      	ldr	r1, [sp, #12]
 800e590:	002b      	movs	r3, r5
 800e592:	f001 faa3 	bl	800fadc <__kernel_cos>
 800e596:	e7e2      	b.n	800e55e <sin+0x2a>
 800e598:	2301      	movs	r3, #1
 800e59a:	0022      	movs	r2, r4
 800e59c:	9300      	str	r3, [sp, #0]
 800e59e:	002b      	movs	r3, r5
 800e5a0:	f001 fed2 	bl	8010348 <__kernel_sin>
 800e5a4:	2380      	movs	r3, #128	; 0x80
 800e5a6:	061b      	lsls	r3, r3, #24
 800e5a8:	18c9      	adds	r1, r1, r3
 800e5aa:	e7d8      	b.n	800e55e <sin+0x2a>
 800e5ac:	0022      	movs	r2, r4
 800e5ae:	002b      	movs	r3, r5
 800e5b0:	f001 fa94 	bl	800fadc <__kernel_cos>
 800e5b4:	e7f6      	b.n	800e5a4 <sin+0x70>
 800e5b6:	46c0      	nop			; (mov r8, r8)
 800e5b8:	3fe921fb 	.word	0x3fe921fb
 800e5bc:	7fefffff 	.word	0x7fefffff

0800e5c0 <asin>:
 800e5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5c2:	0004      	movs	r4, r0
 800e5c4:	000d      	movs	r5, r1
 800e5c6:	f000 f911 	bl	800e7ec <__ieee754_asin>
 800e5ca:	4b12      	ldr	r3, [pc, #72]	; (800e614 <asin+0x54>)
 800e5cc:	0006      	movs	r6, r0
 800e5ce:	781b      	ldrb	r3, [r3, #0]
 800e5d0:	000f      	movs	r7, r1
 800e5d2:	b25b      	sxtb	r3, r3
 800e5d4:	3301      	adds	r3, #1
 800e5d6:	d01a      	beq.n	800e60e <asin+0x4e>
 800e5d8:	0022      	movs	r2, r4
 800e5da:	002b      	movs	r3, r5
 800e5dc:	0020      	movs	r0, r4
 800e5de:	0029      	movs	r1, r5
 800e5e0:	f7f3 fd40 	bl	8002064 <__aeabi_dcmpun>
 800e5e4:	2800      	cmp	r0, #0
 800e5e6:	d112      	bne.n	800e60e <asin+0x4e>
 800e5e8:	0020      	movs	r0, r4
 800e5ea:	0029      	movs	r1, r5
 800e5ec:	f001 ff58 	bl	80104a0 <fabs>
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	4b09      	ldr	r3, [pc, #36]	; (800e618 <asin+0x58>)
 800e5f4:	f7f1 ff44 	bl	8000480 <__aeabi_dcmpgt>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d008      	beq.n	800e60e <asin+0x4e>
 800e5fc:	f7fb fd3e 	bl	800a07c <__errno>
 800e600:	2321      	movs	r3, #33	; 0x21
 800e602:	6003      	str	r3, [r0, #0]
 800e604:	4805      	ldr	r0, [pc, #20]	; (800e61c <asin+0x5c>)
 800e606:	f7ff fddf 	bl	800e1c8 <nan>
 800e60a:	0006      	movs	r6, r0
 800e60c:	000f      	movs	r7, r1
 800e60e:	0030      	movs	r0, r6
 800e610:	0039      	movs	r1, r7
 800e612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e614:	200001e0 	.word	0x200001e0
 800e618:	3ff00000 	.word	0x3ff00000
 800e61c:	08011018 	.word	0x08011018

0800e620 <pow>:
 800e620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e622:	001d      	movs	r5, r3
 800e624:	0014      	movs	r4, r2
 800e626:	9000      	str	r0, [sp, #0]
 800e628:	9101      	str	r1, [sp, #4]
 800e62a:	f000 fab7 	bl	800eb9c <__ieee754_pow>
 800e62e:	4b54      	ldr	r3, [pc, #336]	; (800e780 <pow+0x160>)
 800e630:	0006      	movs	r6, r0
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	000f      	movs	r7, r1
 800e636:	b25b      	sxtb	r3, r3
 800e638:	3301      	adds	r3, #1
 800e63a:	d018      	beq.n	800e66e <pow+0x4e>
 800e63c:	0022      	movs	r2, r4
 800e63e:	002b      	movs	r3, r5
 800e640:	0020      	movs	r0, r4
 800e642:	0029      	movs	r1, r5
 800e644:	f7f3 fd0e 	bl	8002064 <__aeabi_dcmpun>
 800e648:	2800      	cmp	r0, #0
 800e64a:	d110      	bne.n	800e66e <pow+0x4e>
 800e64c:	9a00      	ldr	r2, [sp, #0]
 800e64e:	9b01      	ldr	r3, [sp, #4]
 800e650:	0010      	movs	r0, r2
 800e652:	0019      	movs	r1, r3
 800e654:	f7f3 fd06 	bl	8002064 <__aeabi_dcmpun>
 800e658:	2200      	movs	r2, #0
 800e65a:	2300      	movs	r3, #0
 800e65c:	2800      	cmp	r0, #0
 800e65e:	d00a      	beq.n	800e676 <pow+0x56>
 800e660:	0020      	movs	r0, r4
 800e662:	0029      	movs	r1, r5
 800e664:	f7f1 fef2 	bl	800044c <__aeabi_dcmpeq>
 800e668:	2800      	cmp	r0, #0
 800e66a:	d000      	beq.n	800e66e <pow+0x4e>
 800e66c:	e084      	b.n	800e778 <pow+0x158>
 800e66e:	0030      	movs	r0, r6
 800e670:	0039      	movs	r1, r7
 800e672:	b003      	add	sp, #12
 800e674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e676:	9800      	ldr	r0, [sp, #0]
 800e678:	9901      	ldr	r1, [sp, #4]
 800e67a:	f7f1 fee7 	bl	800044c <__aeabi_dcmpeq>
 800e67e:	2800      	cmp	r0, #0
 800e680:	d01c      	beq.n	800e6bc <pow+0x9c>
 800e682:	2200      	movs	r2, #0
 800e684:	2300      	movs	r3, #0
 800e686:	0020      	movs	r0, r4
 800e688:	0029      	movs	r1, r5
 800e68a:	f7f1 fedf 	bl	800044c <__aeabi_dcmpeq>
 800e68e:	2800      	cmp	r0, #0
 800e690:	d172      	bne.n	800e778 <pow+0x158>
 800e692:	0020      	movs	r0, r4
 800e694:	0029      	movs	r1, r5
 800e696:	f001 ff07 	bl	80104a8 <finite>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d0e7      	beq.n	800e66e <pow+0x4e>
 800e69e:	2200      	movs	r2, #0
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	0020      	movs	r0, r4
 800e6a4:	0029      	movs	r1, r5
 800e6a6:	f7f1 fed7 	bl	8000458 <__aeabi_dcmplt>
 800e6aa:	2800      	cmp	r0, #0
 800e6ac:	d0df      	beq.n	800e66e <pow+0x4e>
 800e6ae:	f7fb fce5 	bl	800a07c <__errno>
 800e6b2:	2321      	movs	r3, #33	; 0x21
 800e6b4:	2600      	movs	r6, #0
 800e6b6:	6003      	str	r3, [r0, #0]
 800e6b8:	4f32      	ldr	r7, [pc, #200]	; (800e784 <pow+0x164>)
 800e6ba:	e7d8      	b.n	800e66e <pow+0x4e>
 800e6bc:	0030      	movs	r0, r6
 800e6be:	0039      	movs	r1, r7
 800e6c0:	f001 fef2 	bl	80104a8 <finite>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d139      	bne.n	800e73c <pow+0x11c>
 800e6c8:	9800      	ldr	r0, [sp, #0]
 800e6ca:	9901      	ldr	r1, [sp, #4]
 800e6cc:	f001 feec 	bl	80104a8 <finite>
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d033      	beq.n	800e73c <pow+0x11c>
 800e6d4:	0020      	movs	r0, r4
 800e6d6:	0029      	movs	r1, r5
 800e6d8:	f001 fee6 	bl	80104a8 <finite>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d02d      	beq.n	800e73c <pow+0x11c>
 800e6e0:	0032      	movs	r2, r6
 800e6e2:	003b      	movs	r3, r7
 800e6e4:	0030      	movs	r0, r6
 800e6e6:	0039      	movs	r1, r7
 800e6e8:	f7f3 fcbc 	bl	8002064 <__aeabi_dcmpun>
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	d00c      	beq.n	800e70a <pow+0xea>
 800e6f0:	f7fb fcc4 	bl	800a07c <__errno>
 800e6f4:	2321      	movs	r3, #33	; 0x21
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	6003      	str	r3, [r0, #0]
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	0010      	movs	r0, r2
 800e6fe:	0019      	movs	r1, r3
 800e700:	f7f2 faac 	bl	8000c5c <__aeabi_ddiv>
 800e704:	0006      	movs	r6, r0
 800e706:	000f      	movs	r7, r1
 800e708:	e7b1      	b.n	800e66e <pow+0x4e>
 800e70a:	f7fb fcb7 	bl	800a07c <__errno>
 800e70e:	2322      	movs	r3, #34	; 0x22
 800e710:	2200      	movs	r2, #0
 800e712:	6003      	str	r3, [r0, #0]
 800e714:	2300      	movs	r3, #0
 800e716:	9800      	ldr	r0, [sp, #0]
 800e718:	9901      	ldr	r1, [sp, #4]
 800e71a:	f7f1 fe9d 	bl	8000458 <__aeabi_dcmplt>
 800e71e:	2600      	movs	r6, #0
 800e720:	2800      	cmp	r0, #0
 800e722:	d009      	beq.n	800e738 <pow+0x118>
 800e724:	0020      	movs	r0, r4
 800e726:	0029      	movs	r1, r5
 800e728:	f001 ff50 	bl	80105cc <rint>
 800e72c:	0022      	movs	r2, r4
 800e72e:	002b      	movs	r3, r5
 800e730:	f7f1 fe8c 	bl	800044c <__aeabi_dcmpeq>
 800e734:	2800      	cmp	r0, #0
 800e736:	d0bf      	beq.n	800e6b8 <pow+0x98>
 800e738:	4f13      	ldr	r7, [pc, #76]	; (800e788 <pow+0x168>)
 800e73a:	e798      	b.n	800e66e <pow+0x4e>
 800e73c:	2200      	movs	r2, #0
 800e73e:	2300      	movs	r3, #0
 800e740:	0030      	movs	r0, r6
 800e742:	0039      	movs	r1, r7
 800e744:	f7f1 fe82 	bl	800044c <__aeabi_dcmpeq>
 800e748:	2800      	cmp	r0, #0
 800e74a:	d100      	bne.n	800e74e <pow+0x12e>
 800e74c:	e78f      	b.n	800e66e <pow+0x4e>
 800e74e:	9800      	ldr	r0, [sp, #0]
 800e750:	9901      	ldr	r1, [sp, #4]
 800e752:	f001 fea9 	bl	80104a8 <finite>
 800e756:	2800      	cmp	r0, #0
 800e758:	d100      	bne.n	800e75c <pow+0x13c>
 800e75a:	e788      	b.n	800e66e <pow+0x4e>
 800e75c:	0020      	movs	r0, r4
 800e75e:	0029      	movs	r1, r5
 800e760:	f001 fea2 	bl	80104a8 <finite>
 800e764:	2800      	cmp	r0, #0
 800e766:	d100      	bne.n	800e76a <pow+0x14a>
 800e768:	e781      	b.n	800e66e <pow+0x4e>
 800e76a:	f7fb fc87 	bl	800a07c <__errno>
 800e76e:	2322      	movs	r3, #34	; 0x22
 800e770:	2600      	movs	r6, #0
 800e772:	2700      	movs	r7, #0
 800e774:	6003      	str	r3, [r0, #0]
 800e776:	e77a      	b.n	800e66e <pow+0x4e>
 800e778:	2600      	movs	r6, #0
 800e77a:	4f04      	ldr	r7, [pc, #16]	; (800e78c <pow+0x16c>)
 800e77c:	e777      	b.n	800e66e <pow+0x4e>
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	200001e0 	.word	0x200001e0
 800e784:	fff00000 	.word	0xfff00000
 800e788:	7ff00000 	.word	0x7ff00000
 800e78c:	3ff00000 	.word	0x3ff00000

0800e790 <sqrt>:
 800e790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e792:	0004      	movs	r4, r0
 800e794:	000d      	movs	r5, r1
 800e796:	f001 f8ed 	bl	800f974 <__ieee754_sqrt>
 800e79a:	4b13      	ldr	r3, [pc, #76]	; (800e7e8 <sqrt+0x58>)
 800e79c:	0006      	movs	r6, r0
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	000f      	movs	r7, r1
 800e7a2:	b25b      	sxtb	r3, r3
 800e7a4:	3301      	adds	r3, #1
 800e7a6:	d01b      	beq.n	800e7e0 <sqrt+0x50>
 800e7a8:	0022      	movs	r2, r4
 800e7aa:	002b      	movs	r3, r5
 800e7ac:	0020      	movs	r0, r4
 800e7ae:	0029      	movs	r1, r5
 800e7b0:	f7f3 fc58 	bl	8002064 <__aeabi_dcmpun>
 800e7b4:	2800      	cmp	r0, #0
 800e7b6:	d113      	bne.n	800e7e0 <sqrt+0x50>
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	0020      	movs	r0, r4
 800e7be:	0029      	movs	r1, r5
 800e7c0:	f7f1 fe4a 	bl	8000458 <__aeabi_dcmplt>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d00b      	beq.n	800e7e0 <sqrt+0x50>
 800e7c8:	f7fb fc58 	bl	800a07c <__errno>
 800e7cc:	2321      	movs	r3, #33	; 0x21
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	6003      	str	r3, [r0, #0]
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	0010      	movs	r0, r2
 800e7d6:	0019      	movs	r1, r3
 800e7d8:	f7f2 fa40 	bl	8000c5c <__aeabi_ddiv>
 800e7dc:	0006      	movs	r6, r0
 800e7de:	000f      	movs	r7, r1
 800e7e0:	0030      	movs	r0, r6
 800e7e2:	0039      	movs	r1, r7
 800e7e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e7e6:	46c0      	nop			; (mov r8, r8)
 800e7e8:	200001e0 	.word	0x200001e0

0800e7ec <__ieee754_asin>:
 800e7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7ee:	4bca      	ldr	r3, [pc, #808]	; (800eb18 <__ieee754_asin+0x32c>)
 800e7f0:	b08b      	sub	sp, #44	; 0x2c
 800e7f2:	004e      	lsls	r6, r1, #1
 800e7f4:	0004      	movs	r4, r0
 800e7f6:	000d      	movs	r5, r1
 800e7f8:	9107      	str	r1, [sp, #28]
 800e7fa:	0876      	lsrs	r6, r6, #1
 800e7fc:	429e      	cmp	r6, r3
 800e7fe:	dd24      	ble.n	800e84a <__ieee754_asin+0x5e>
 800e800:	4bc6      	ldr	r3, [pc, #792]	; (800eb1c <__ieee754_asin+0x330>)
 800e802:	18f6      	adds	r6, r6, r3
 800e804:	4306      	orrs	r6, r0
 800e806:	d112      	bne.n	800e82e <__ieee754_asin+0x42>
 800e808:	4ac5      	ldr	r2, [pc, #788]	; (800eb20 <__ieee754_asin+0x334>)
 800e80a:	4bc6      	ldr	r3, [pc, #792]	; (800eb24 <__ieee754_asin+0x338>)
 800e80c:	f7f2 fe2c 	bl	8001468 <__aeabi_dmul>
 800e810:	4ac5      	ldr	r2, [pc, #788]	; (800eb28 <__ieee754_asin+0x33c>)
 800e812:	0006      	movs	r6, r0
 800e814:	000f      	movs	r7, r1
 800e816:	4bc5      	ldr	r3, [pc, #788]	; (800eb2c <__ieee754_asin+0x340>)
 800e818:	0020      	movs	r0, r4
 800e81a:	0029      	movs	r1, r5
 800e81c:	f7f2 fe24 	bl	8001468 <__aeabi_dmul>
 800e820:	0002      	movs	r2, r0
 800e822:	000b      	movs	r3, r1
 800e824:	0030      	movs	r0, r6
 800e826:	0039      	movs	r1, r7
 800e828:	f7f1 feae 	bl	8000588 <__aeabi_dadd>
 800e82c:	e007      	b.n	800e83e <__ieee754_asin+0x52>
 800e82e:	0002      	movs	r2, r0
 800e830:	000b      	movs	r3, r1
 800e832:	f7f3 f885 	bl	8001940 <__aeabi_dsub>
 800e836:	0002      	movs	r2, r0
 800e838:	000b      	movs	r3, r1
 800e83a:	f7f2 fa0f 	bl	8000c5c <__aeabi_ddiv>
 800e83e:	0004      	movs	r4, r0
 800e840:	000d      	movs	r5, r1
 800e842:	0020      	movs	r0, r4
 800e844:	0029      	movs	r1, r5
 800e846:	b00b      	add	sp, #44	; 0x2c
 800e848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e84a:	4bb9      	ldr	r3, [pc, #740]	; (800eb30 <__ieee754_asin+0x344>)
 800e84c:	429e      	cmp	r6, r3
 800e84e:	dc0e      	bgt.n	800e86e <__ieee754_asin+0x82>
 800e850:	23f9      	movs	r3, #249	; 0xf9
 800e852:	059b      	lsls	r3, r3, #22
 800e854:	429e      	cmp	r6, r3
 800e856:	db00      	blt.n	800e85a <__ieee754_asin+0x6e>
 800e858:	e09c      	b.n	800e994 <__ieee754_asin+0x1a8>
 800e85a:	4ab6      	ldr	r2, [pc, #728]	; (800eb34 <__ieee754_asin+0x348>)
 800e85c:	4bb6      	ldr	r3, [pc, #728]	; (800eb38 <__ieee754_asin+0x34c>)
 800e85e:	f7f1 fe93 	bl	8000588 <__aeabi_dadd>
 800e862:	2200      	movs	r2, #0
 800e864:	4bb5      	ldr	r3, [pc, #724]	; (800eb3c <__ieee754_asin+0x350>)
 800e866:	f7f1 fe0b 	bl	8000480 <__aeabi_dcmpgt>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	d1e9      	bne.n	800e842 <__ieee754_asin+0x56>
 800e86e:	0020      	movs	r0, r4
 800e870:	0029      	movs	r1, r5
 800e872:	f001 fe15 	bl	80104a0 <fabs>
 800e876:	0002      	movs	r2, r0
 800e878:	000b      	movs	r3, r1
 800e87a:	2000      	movs	r0, #0
 800e87c:	49af      	ldr	r1, [pc, #700]	; (800eb3c <__ieee754_asin+0x350>)
 800e87e:	f7f3 f85f 	bl	8001940 <__aeabi_dsub>
 800e882:	2200      	movs	r2, #0
 800e884:	4bae      	ldr	r3, [pc, #696]	; (800eb40 <__ieee754_asin+0x354>)
 800e886:	f7f2 fdef 	bl	8001468 <__aeabi_dmul>
 800e88a:	0004      	movs	r4, r0
 800e88c:	000d      	movs	r5, r1
 800e88e:	4aad      	ldr	r2, [pc, #692]	; (800eb44 <__ieee754_asin+0x358>)
 800e890:	4bad      	ldr	r3, [pc, #692]	; (800eb48 <__ieee754_asin+0x35c>)
 800e892:	f7f2 fde9 	bl	8001468 <__aeabi_dmul>
 800e896:	4aad      	ldr	r2, [pc, #692]	; (800eb4c <__ieee754_asin+0x360>)
 800e898:	4bad      	ldr	r3, [pc, #692]	; (800eb50 <__ieee754_asin+0x364>)
 800e89a:	f7f1 fe75 	bl	8000588 <__aeabi_dadd>
 800e89e:	0022      	movs	r2, r4
 800e8a0:	002b      	movs	r3, r5
 800e8a2:	f7f2 fde1 	bl	8001468 <__aeabi_dmul>
 800e8a6:	4aab      	ldr	r2, [pc, #684]	; (800eb54 <__ieee754_asin+0x368>)
 800e8a8:	4bab      	ldr	r3, [pc, #684]	; (800eb58 <__ieee754_asin+0x36c>)
 800e8aa:	f7f3 f849 	bl	8001940 <__aeabi_dsub>
 800e8ae:	0022      	movs	r2, r4
 800e8b0:	002b      	movs	r3, r5
 800e8b2:	f7f2 fdd9 	bl	8001468 <__aeabi_dmul>
 800e8b6:	4aa9      	ldr	r2, [pc, #676]	; (800eb5c <__ieee754_asin+0x370>)
 800e8b8:	4ba9      	ldr	r3, [pc, #676]	; (800eb60 <__ieee754_asin+0x374>)
 800e8ba:	f7f1 fe65 	bl	8000588 <__aeabi_dadd>
 800e8be:	0022      	movs	r2, r4
 800e8c0:	002b      	movs	r3, r5
 800e8c2:	f7f2 fdd1 	bl	8001468 <__aeabi_dmul>
 800e8c6:	4aa7      	ldr	r2, [pc, #668]	; (800eb64 <__ieee754_asin+0x378>)
 800e8c8:	4ba7      	ldr	r3, [pc, #668]	; (800eb68 <__ieee754_asin+0x37c>)
 800e8ca:	f7f3 f839 	bl	8001940 <__aeabi_dsub>
 800e8ce:	0022      	movs	r2, r4
 800e8d0:	002b      	movs	r3, r5
 800e8d2:	f7f2 fdc9 	bl	8001468 <__aeabi_dmul>
 800e8d6:	4aa5      	ldr	r2, [pc, #660]	; (800eb6c <__ieee754_asin+0x380>)
 800e8d8:	4ba5      	ldr	r3, [pc, #660]	; (800eb70 <__ieee754_asin+0x384>)
 800e8da:	f7f1 fe55 	bl	8000588 <__aeabi_dadd>
 800e8de:	0022      	movs	r2, r4
 800e8e0:	002b      	movs	r3, r5
 800e8e2:	f7f2 fdc1 	bl	8001468 <__aeabi_dmul>
 800e8e6:	4aa3      	ldr	r2, [pc, #652]	; (800eb74 <__ieee754_asin+0x388>)
 800e8e8:	9002      	str	r0, [sp, #8]
 800e8ea:	9103      	str	r1, [sp, #12]
 800e8ec:	4ba2      	ldr	r3, [pc, #648]	; (800eb78 <__ieee754_asin+0x38c>)
 800e8ee:	0020      	movs	r0, r4
 800e8f0:	0029      	movs	r1, r5
 800e8f2:	f7f2 fdb9 	bl	8001468 <__aeabi_dmul>
 800e8f6:	4aa1      	ldr	r2, [pc, #644]	; (800eb7c <__ieee754_asin+0x390>)
 800e8f8:	4ba1      	ldr	r3, [pc, #644]	; (800eb80 <__ieee754_asin+0x394>)
 800e8fa:	f7f3 f821 	bl	8001940 <__aeabi_dsub>
 800e8fe:	0022      	movs	r2, r4
 800e900:	002b      	movs	r3, r5
 800e902:	f7f2 fdb1 	bl	8001468 <__aeabi_dmul>
 800e906:	4a9f      	ldr	r2, [pc, #636]	; (800eb84 <__ieee754_asin+0x398>)
 800e908:	4b9f      	ldr	r3, [pc, #636]	; (800eb88 <__ieee754_asin+0x39c>)
 800e90a:	f7f1 fe3d 	bl	8000588 <__aeabi_dadd>
 800e90e:	0022      	movs	r2, r4
 800e910:	002b      	movs	r3, r5
 800e912:	f7f2 fda9 	bl	8001468 <__aeabi_dmul>
 800e916:	4a9d      	ldr	r2, [pc, #628]	; (800eb8c <__ieee754_asin+0x3a0>)
 800e918:	4b9d      	ldr	r3, [pc, #628]	; (800eb90 <__ieee754_asin+0x3a4>)
 800e91a:	f7f3 f811 	bl	8001940 <__aeabi_dsub>
 800e91e:	0022      	movs	r2, r4
 800e920:	002b      	movs	r3, r5
 800e922:	f7f2 fda1 	bl	8001468 <__aeabi_dmul>
 800e926:	4b85      	ldr	r3, [pc, #532]	; (800eb3c <__ieee754_asin+0x350>)
 800e928:	2200      	movs	r2, #0
 800e92a:	f7f1 fe2d 	bl	8000588 <__aeabi_dadd>
 800e92e:	9004      	str	r0, [sp, #16]
 800e930:	9105      	str	r1, [sp, #20]
 800e932:	0020      	movs	r0, r4
 800e934:	0029      	movs	r1, r5
 800e936:	f001 f81d 	bl	800f974 <__ieee754_sqrt>
 800e93a:	4b96      	ldr	r3, [pc, #600]	; (800eb94 <__ieee754_asin+0x3a8>)
 800e93c:	9000      	str	r0, [sp, #0]
 800e93e:	9101      	str	r1, [sp, #4]
 800e940:	429e      	cmp	r6, r3
 800e942:	dc00      	bgt.n	800e946 <__ieee754_asin+0x15a>
 800e944:	e08b      	b.n	800ea5e <__ieee754_asin+0x272>
 800e946:	9a04      	ldr	r2, [sp, #16]
 800e948:	9b05      	ldr	r3, [sp, #20]
 800e94a:	9802      	ldr	r0, [sp, #8]
 800e94c:	9903      	ldr	r1, [sp, #12]
 800e94e:	f7f2 f985 	bl	8000c5c <__aeabi_ddiv>
 800e952:	9a00      	ldr	r2, [sp, #0]
 800e954:	9b01      	ldr	r3, [sp, #4]
 800e956:	f7f2 fd87 	bl	8001468 <__aeabi_dmul>
 800e95a:	9a00      	ldr	r2, [sp, #0]
 800e95c:	9b01      	ldr	r3, [sp, #4]
 800e95e:	f7f1 fe13 	bl	8000588 <__aeabi_dadd>
 800e962:	0002      	movs	r2, r0
 800e964:	000b      	movs	r3, r1
 800e966:	f7f1 fe0f 	bl	8000588 <__aeabi_dadd>
 800e96a:	4a6f      	ldr	r2, [pc, #444]	; (800eb28 <__ieee754_asin+0x33c>)
 800e96c:	4b6f      	ldr	r3, [pc, #444]	; (800eb2c <__ieee754_asin+0x340>)
 800e96e:	f7f2 ffe7 	bl	8001940 <__aeabi_dsub>
 800e972:	0002      	movs	r2, r0
 800e974:	000b      	movs	r3, r1
 800e976:	486a      	ldr	r0, [pc, #424]	; (800eb20 <__ieee754_asin+0x334>)
 800e978:	496a      	ldr	r1, [pc, #424]	; (800eb24 <__ieee754_asin+0x338>)
 800e97a:	f7f2 ffe1 	bl	8001940 <__aeabi_dsub>
 800e97e:	9b07      	ldr	r3, [sp, #28]
 800e980:	0004      	movs	r4, r0
 800e982:	000d      	movs	r5, r1
 800e984:	2b00      	cmp	r3, #0
 800e986:	dd00      	ble.n	800e98a <__ieee754_asin+0x19e>
 800e988:	e75b      	b.n	800e842 <__ieee754_asin+0x56>
 800e98a:	2180      	movs	r1, #128	; 0x80
 800e98c:	0609      	lsls	r1, r1, #24
 800e98e:	186b      	adds	r3, r5, r1
 800e990:	001d      	movs	r5, r3
 800e992:	e756      	b.n	800e842 <__ieee754_asin+0x56>
 800e994:	0002      	movs	r2, r0
 800e996:	000b      	movs	r3, r1
 800e998:	f7f2 fd66 	bl	8001468 <__aeabi_dmul>
 800e99c:	0006      	movs	r6, r0
 800e99e:	000f      	movs	r7, r1
 800e9a0:	4a68      	ldr	r2, [pc, #416]	; (800eb44 <__ieee754_asin+0x358>)
 800e9a2:	4b69      	ldr	r3, [pc, #420]	; (800eb48 <__ieee754_asin+0x35c>)
 800e9a4:	f7f2 fd60 	bl	8001468 <__aeabi_dmul>
 800e9a8:	4a68      	ldr	r2, [pc, #416]	; (800eb4c <__ieee754_asin+0x360>)
 800e9aa:	4b69      	ldr	r3, [pc, #420]	; (800eb50 <__ieee754_asin+0x364>)
 800e9ac:	f7f1 fdec 	bl	8000588 <__aeabi_dadd>
 800e9b0:	0032      	movs	r2, r6
 800e9b2:	003b      	movs	r3, r7
 800e9b4:	f7f2 fd58 	bl	8001468 <__aeabi_dmul>
 800e9b8:	4a66      	ldr	r2, [pc, #408]	; (800eb54 <__ieee754_asin+0x368>)
 800e9ba:	4b67      	ldr	r3, [pc, #412]	; (800eb58 <__ieee754_asin+0x36c>)
 800e9bc:	f7f2 ffc0 	bl	8001940 <__aeabi_dsub>
 800e9c0:	0032      	movs	r2, r6
 800e9c2:	003b      	movs	r3, r7
 800e9c4:	f7f2 fd50 	bl	8001468 <__aeabi_dmul>
 800e9c8:	4a64      	ldr	r2, [pc, #400]	; (800eb5c <__ieee754_asin+0x370>)
 800e9ca:	4b65      	ldr	r3, [pc, #404]	; (800eb60 <__ieee754_asin+0x374>)
 800e9cc:	f7f1 fddc 	bl	8000588 <__aeabi_dadd>
 800e9d0:	0032      	movs	r2, r6
 800e9d2:	003b      	movs	r3, r7
 800e9d4:	f7f2 fd48 	bl	8001468 <__aeabi_dmul>
 800e9d8:	4a62      	ldr	r2, [pc, #392]	; (800eb64 <__ieee754_asin+0x378>)
 800e9da:	4b63      	ldr	r3, [pc, #396]	; (800eb68 <__ieee754_asin+0x37c>)
 800e9dc:	f7f2 ffb0 	bl	8001940 <__aeabi_dsub>
 800e9e0:	0032      	movs	r2, r6
 800e9e2:	003b      	movs	r3, r7
 800e9e4:	f7f2 fd40 	bl	8001468 <__aeabi_dmul>
 800e9e8:	4a60      	ldr	r2, [pc, #384]	; (800eb6c <__ieee754_asin+0x380>)
 800e9ea:	4b61      	ldr	r3, [pc, #388]	; (800eb70 <__ieee754_asin+0x384>)
 800e9ec:	f7f1 fdcc 	bl	8000588 <__aeabi_dadd>
 800e9f0:	0032      	movs	r2, r6
 800e9f2:	003b      	movs	r3, r7
 800e9f4:	f7f2 fd38 	bl	8001468 <__aeabi_dmul>
 800e9f8:	4a5e      	ldr	r2, [pc, #376]	; (800eb74 <__ieee754_asin+0x388>)
 800e9fa:	9000      	str	r0, [sp, #0]
 800e9fc:	9101      	str	r1, [sp, #4]
 800e9fe:	4b5e      	ldr	r3, [pc, #376]	; (800eb78 <__ieee754_asin+0x38c>)
 800ea00:	0030      	movs	r0, r6
 800ea02:	0039      	movs	r1, r7
 800ea04:	f7f2 fd30 	bl	8001468 <__aeabi_dmul>
 800ea08:	4a5c      	ldr	r2, [pc, #368]	; (800eb7c <__ieee754_asin+0x390>)
 800ea0a:	4b5d      	ldr	r3, [pc, #372]	; (800eb80 <__ieee754_asin+0x394>)
 800ea0c:	f7f2 ff98 	bl	8001940 <__aeabi_dsub>
 800ea10:	0032      	movs	r2, r6
 800ea12:	003b      	movs	r3, r7
 800ea14:	f7f2 fd28 	bl	8001468 <__aeabi_dmul>
 800ea18:	4a5a      	ldr	r2, [pc, #360]	; (800eb84 <__ieee754_asin+0x398>)
 800ea1a:	4b5b      	ldr	r3, [pc, #364]	; (800eb88 <__ieee754_asin+0x39c>)
 800ea1c:	f7f1 fdb4 	bl	8000588 <__aeabi_dadd>
 800ea20:	0032      	movs	r2, r6
 800ea22:	003b      	movs	r3, r7
 800ea24:	f7f2 fd20 	bl	8001468 <__aeabi_dmul>
 800ea28:	4a58      	ldr	r2, [pc, #352]	; (800eb8c <__ieee754_asin+0x3a0>)
 800ea2a:	4b59      	ldr	r3, [pc, #356]	; (800eb90 <__ieee754_asin+0x3a4>)
 800ea2c:	f7f2 ff88 	bl	8001940 <__aeabi_dsub>
 800ea30:	0032      	movs	r2, r6
 800ea32:	003b      	movs	r3, r7
 800ea34:	f7f2 fd18 	bl	8001468 <__aeabi_dmul>
 800ea38:	2200      	movs	r2, #0
 800ea3a:	4b40      	ldr	r3, [pc, #256]	; (800eb3c <__ieee754_asin+0x350>)
 800ea3c:	f7f1 fda4 	bl	8000588 <__aeabi_dadd>
 800ea40:	0002      	movs	r2, r0
 800ea42:	000b      	movs	r3, r1
 800ea44:	9800      	ldr	r0, [sp, #0]
 800ea46:	9901      	ldr	r1, [sp, #4]
 800ea48:	f7f2 f908 	bl	8000c5c <__aeabi_ddiv>
 800ea4c:	0022      	movs	r2, r4
 800ea4e:	002b      	movs	r3, r5
 800ea50:	f7f2 fd0a 	bl	8001468 <__aeabi_dmul>
 800ea54:	0002      	movs	r2, r0
 800ea56:	000b      	movs	r3, r1
 800ea58:	0020      	movs	r0, r4
 800ea5a:	0029      	movs	r1, r5
 800ea5c:	e6e4      	b.n	800e828 <__ieee754_asin+0x3c>
 800ea5e:	9a00      	ldr	r2, [sp, #0]
 800ea60:	9b01      	ldr	r3, [sp, #4]
 800ea62:	0010      	movs	r0, r2
 800ea64:	9e00      	ldr	r6, [sp, #0]
 800ea66:	9f01      	ldr	r7, [sp, #4]
 800ea68:	0019      	movs	r1, r3
 800ea6a:	f7f1 fd8d 	bl	8000588 <__aeabi_dadd>
 800ea6e:	9a04      	ldr	r2, [sp, #16]
 800ea70:	9b05      	ldr	r3, [sp, #20]
 800ea72:	9008      	str	r0, [sp, #32]
 800ea74:	9109      	str	r1, [sp, #36]	; 0x24
 800ea76:	9802      	ldr	r0, [sp, #8]
 800ea78:	9903      	ldr	r1, [sp, #12]
 800ea7a:	f7f2 f8ef 	bl	8000c5c <__aeabi_ddiv>
 800ea7e:	0002      	movs	r2, r0
 800ea80:	000b      	movs	r3, r1
 800ea82:	9808      	ldr	r0, [sp, #32]
 800ea84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea86:	f7f2 fcef 	bl	8001468 <__aeabi_dmul>
 800ea8a:	2600      	movs	r6, #0
 800ea8c:	9002      	str	r0, [sp, #8]
 800ea8e:	9103      	str	r1, [sp, #12]
 800ea90:	0032      	movs	r2, r6
 800ea92:	003b      	movs	r3, r7
 800ea94:	0030      	movs	r0, r6
 800ea96:	0039      	movs	r1, r7
 800ea98:	f7f2 fce6 	bl	8001468 <__aeabi_dmul>
 800ea9c:	0002      	movs	r2, r0
 800ea9e:	000b      	movs	r3, r1
 800eaa0:	0020      	movs	r0, r4
 800eaa2:	0029      	movs	r1, r5
 800eaa4:	f7f2 ff4c 	bl	8001940 <__aeabi_dsub>
 800eaa8:	0032      	movs	r2, r6
 800eaaa:	0004      	movs	r4, r0
 800eaac:	000d      	movs	r5, r1
 800eaae:	9800      	ldr	r0, [sp, #0]
 800eab0:	9901      	ldr	r1, [sp, #4]
 800eab2:	003b      	movs	r3, r7
 800eab4:	f7f1 fd68 	bl	8000588 <__aeabi_dadd>
 800eab8:	0002      	movs	r2, r0
 800eaba:	000b      	movs	r3, r1
 800eabc:	0020      	movs	r0, r4
 800eabe:	0029      	movs	r1, r5
 800eac0:	f7f2 f8cc 	bl	8000c5c <__aeabi_ddiv>
 800eac4:	0002      	movs	r2, r0
 800eac6:	000b      	movs	r3, r1
 800eac8:	f7f1 fd5e 	bl	8000588 <__aeabi_dadd>
 800eacc:	0002      	movs	r2, r0
 800eace:	000b      	movs	r3, r1
 800ead0:	4815      	ldr	r0, [pc, #84]	; (800eb28 <__ieee754_asin+0x33c>)
 800ead2:	4916      	ldr	r1, [pc, #88]	; (800eb2c <__ieee754_asin+0x340>)
 800ead4:	f7f2 ff34 	bl	8001940 <__aeabi_dsub>
 800ead8:	0002      	movs	r2, r0
 800eada:	000b      	movs	r3, r1
 800eadc:	9802      	ldr	r0, [sp, #8]
 800eade:	9903      	ldr	r1, [sp, #12]
 800eae0:	f7f2 ff2e 	bl	8001940 <__aeabi_dsub>
 800eae4:	0032      	movs	r2, r6
 800eae6:	0004      	movs	r4, r0
 800eae8:	000d      	movs	r5, r1
 800eaea:	003b      	movs	r3, r7
 800eaec:	0030      	movs	r0, r6
 800eaee:	0039      	movs	r1, r7
 800eaf0:	f7f1 fd4a 	bl	8000588 <__aeabi_dadd>
 800eaf4:	0002      	movs	r2, r0
 800eaf6:	000b      	movs	r3, r1
 800eaf8:	4809      	ldr	r0, [pc, #36]	; (800eb20 <__ieee754_asin+0x334>)
 800eafa:	4927      	ldr	r1, [pc, #156]	; (800eb98 <__ieee754_asin+0x3ac>)
 800eafc:	f7f2 ff20 	bl	8001940 <__aeabi_dsub>
 800eb00:	0002      	movs	r2, r0
 800eb02:	000b      	movs	r3, r1
 800eb04:	0020      	movs	r0, r4
 800eb06:	0029      	movs	r1, r5
 800eb08:	f7f2 ff1a 	bl	8001940 <__aeabi_dsub>
 800eb0c:	0002      	movs	r2, r0
 800eb0e:	000b      	movs	r3, r1
 800eb10:	4803      	ldr	r0, [pc, #12]	; (800eb20 <__ieee754_asin+0x334>)
 800eb12:	4921      	ldr	r1, [pc, #132]	; (800eb98 <__ieee754_asin+0x3ac>)
 800eb14:	e731      	b.n	800e97a <__ieee754_asin+0x18e>
 800eb16:	46c0      	nop			; (mov r8, r8)
 800eb18:	3fefffff 	.word	0x3fefffff
 800eb1c:	c0100000 	.word	0xc0100000
 800eb20:	54442d18 	.word	0x54442d18
 800eb24:	3ff921fb 	.word	0x3ff921fb
 800eb28:	33145c07 	.word	0x33145c07
 800eb2c:	3c91a626 	.word	0x3c91a626
 800eb30:	3fdfffff 	.word	0x3fdfffff
 800eb34:	8800759c 	.word	0x8800759c
 800eb38:	7e37e43c 	.word	0x7e37e43c
 800eb3c:	3ff00000 	.word	0x3ff00000
 800eb40:	3fe00000 	.word	0x3fe00000
 800eb44:	0dfdf709 	.word	0x0dfdf709
 800eb48:	3f023de1 	.word	0x3f023de1
 800eb4c:	7501b288 	.word	0x7501b288
 800eb50:	3f49efe0 	.word	0x3f49efe0
 800eb54:	b5688f3b 	.word	0xb5688f3b
 800eb58:	3fa48228 	.word	0x3fa48228
 800eb5c:	0e884455 	.word	0x0e884455
 800eb60:	3fc9c155 	.word	0x3fc9c155
 800eb64:	03eb6f7d 	.word	0x03eb6f7d
 800eb68:	3fd4d612 	.word	0x3fd4d612
 800eb6c:	55555555 	.word	0x55555555
 800eb70:	3fc55555 	.word	0x3fc55555
 800eb74:	b12e9282 	.word	0xb12e9282
 800eb78:	3fb3b8c5 	.word	0x3fb3b8c5
 800eb7c:	1b8d0159 	.word	0x1b8d0159
 800eb80:	3fe6066c 	.word	0x3fe6066c
 800eb84:	9c598ac8 	.word	0x9c598ac8
 800eb88:	40002ae5 	.word	0x40002ae5
 800eb8c:	1c8a2d4b 	.word	0x1c8a2d4b
 800eb90:	40033a27 	.word	0x40033a27
 800eb94:	3fef3332 	.word	0x3fef3332
 800eb98:	3fe921fb 	.word	0x3fe921fb

0800eb9c <__ieee754_pow>:
 800eb9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb9e:	b095      	sub	sp, #84	; 0x54
 800eba0:	9202      	str	r2, [sp, #8]
 800eba2:	9303      	str	r3, [sp, #12]
 800eba4:	9b03      	ldr	r3, [sp, #12]
 800eba6:	9a03      	ldr	r2, [sp, #12]
 800eba8:	9304      	str	r3, [sp, #16]
 800ebaa:	9b02      	ldr	r3, [sp, #8]
 800ebac:	0055      	lsls	r5, r2, #1
 800ebae:	001a      	movs	r2, r3
 800ebb0:	086d      	lsrs	r5, r5, #1
 800ebb2:	0007      	movs	r7, r0
 800ebb4:	000e      	movs	r6, r1
 800ebb6:	432a      	orrs	r2, r5
 800ebb8:	d101      	bne.n	800ebbe <__ieee754_pow+0x22>
 800ebba:	f000 fcb6 	bl	800f52a <__ieee754_pow+0x98e>
 800ebbe:	4a82      	ldr	r2, [pc, #520]	; (800edc8 <__ieee754_pow+0x22c>)
 800ebc0:	004c      	lsls	r4, r1, #1
 800ebc2:	9108      	str	r1, [sp, #32]
 800ebc4:	9000      	str	r0, [sp, #0]
 800ebc6:	0864      	lsrs	r4, r4, #1
 800ebc8:	4294      	cmp	r4, r2
 800ebca:	dc0d      	bgt.n	800ebe8 <__ieee754_pow+0x4c>
 800ebcc:	d104      	bne.n	800ebd8 <__ieee754_pow+0x3c>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d110      	bne.n	800ebf4 <__ieee754_pow+0x58>
 800ebd2:	42a5      	cmp	r5, r4
 800ebd4:	dd03      	ble.n	800ebde <__ieee754_pow+0x42>
 800ebd6:	e00d      	b.n	800ebf4 <__ieee754_pow+0x58>
 800ebd8:	4a7b      	ldr	r2, [pc, #492]	; (800edc8 <__ieee754_pow+0x22c>)
 800ebda:	4295      	cmp	r5, r2
 800ebdc:	dc04      	bgt.n	800ebe8 <__ieee754_pow+0x4c>
 800ebde:	4a7a      	ldr	r2, [pc, #488]	; (800edc8 <__ieee754_pow+0x22c>)
 800ebe0:	4295      	cmp	r5, r2
 800ebe2:	d10d      	bne.n	800ec00 <__ieee754_pow+0x64>
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d00b      	beq.n	800ec00 <__ieee754_pow+0x64>
 800ebe8:	4b78      	ldr	r3, [pc, #480]	; (800edcc <__ieee754_pow+0x230>)
 800ebea:	18e4      	adds	r4, r4, r3
 800ebec:	4327      	orrs	r7, r4
 800ebee:	d101      	bne.n	800ebf4 <__ieee754_pow+0x58>
 800ebf0:	f000 fc9b 	bl	800f52a <__ieee754_pow+0x98e>
 800ebf4:	4876      	ldr	r0, [pc, #472]	; (800edd0 <__ieee754_pow+0x234>)
 800ebf6:	f7ff fae7 	bl	800e1c8 <nan>
 800ebfa:	9000      	str	r0, [sp, #0]
 800ebfc:	9101      	str	r1, [sp, #4]
 800ebfe:	e092      	b.n	800ed26 <__ieee754_pow+0x18a>
 800ec00:	2200      	movs	r2, #0
 800ec02:	9206      	str	r2, [sp, #24]
 800ec04:	2e00      	cmp	r6, #0
 800ec06:	da69      	bge.n	800ecdc <__ieee754_pow+0x140>
 800ec08:	4a72      	ldr	r2, [pc, #456]	; (800edd4 <__ieee754_pow+0x238>)
 800ec0a:	4295      	cmp	r5, r2
 800ec0c:	dc64      	bgt.n	800ecd8 <__ieee754_pow+0x13c>
 800ec0e:	4a72      	ldr	r2, [pc, #456]	; (800edd8 <__ieee754_pow+0x23c>)
 800ec10:	4295      	cmp	r5, r2
 800ec12:	dd11      	ble.n	800ec38 <__ieee754_pow+0x9c>
 800ec14:	4971      	ldr	r1, [pc, #452]	; (800eddc <__ieee754_pow+0x240>)
 800ec16:	152a      	asrs	r2, r5, #20
 800ec18:	1852      	adds	r2, r2, r1
 800ec1a:	2a14      	cmp	r2, #20
 800ec1c:	dd3c      	ble.n	800ec98 <__ieee754_pow+0xfc>
 800ec1e:	2134      	movs	r1, #52	; 0x34
 800ec20:	1a8a      	subs	r2, r1, r2
 800ec22:	9902      	ldr	r1, [sp, #8]
 800ec24:	40d1      	lsrs	r1, r2
 800ec26:	0008      	movs	r0, r1
 800ec28:	4090      	lsls	r0, r2
 800ec2a:	4298      	cmp	r0, r3
 800ec2c:	d104      	bne.n	800ec38 <__ieee754_pow+0x9c>
 800ec2e:	2201      	movs	r2, #1
 800ec30:	4011      	ands	r1, r2
 800ec32:	1892      	adds	r2, r2, r2
 800ec34:	1a52      	subs	r2, r2, r1
 800ec36:	9206      	str	r2, [sp, #24]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d03c      	beq.n	800ecb6 <__ieee754_pow+0x11a>
 800ec3c:	0038      	movs	r0, r7
 800ec3e:	0031      	movs	r1, r6
 800ec40:	f001 fc2e 	bl	80104a0 <fabs>
 800ec44:	9000      	str	r0, [sp, #0]
 800ec46:	9101      	str	r1, [sp, #4]
 800ec48:	2f00      	cmp	r7, #0
 800ec4a:	d000      	beq.n	800ec4e <__ieee754_pow+0xb2>
 800ec4c:	e094      	b.n	800ed78 <__ieee754_pow+0x1dc>
 800ec4e:	2c00      	cmp	r4, #0
 800ec50:	d005      	beq.n	800ec5e <__ieee754_pow+0xc2>
 800ec52:	4a63      	ldr	r2, [pc, #396]	; (800ede0 <__ieee754_pow+0x244>)
 800ec54:	00b3      	lsls	r3, r6, #2
 800ec56:	089b      	lsrs	r3, r3, #2
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d000      	beq.n	800ec5e <__ieee754_pow+0xc2>
 800ec5c:	e08c      	b.n	800ed78 <__ieee754_pow+0x1dc>
 800ec5e:	9b04      	ldr	r3, [sp, #16]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	da07      	bge.n	800ec74 <__ieee754_pow+0xd8>
 800ec64:	9a00      	ldr	r2, [sp, #0]
 800ec66:	9b01      	ldr	r3, [sp, #4]
 800ec68:	2000      	movs	r0, #0
 800ec6a:	495d      	ldr	r1, [pc, #372]	; (800ede0 <__ieee754_pow+0x244>)
 800ec6c:	f7f1 fff6 	bl	8000c5c <__aeabi_ddiv>
 800ec70:	9000      	str	r0, [sp, #0]
 800ec72:	9101      	str	r1, [sp, #4]
 800ec74:	9b08      	ldr	r3, [sp, #32]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	da55      	bge.n	800ed26 <__ieee754_pow+0x18a>
 800ec7a:	4b54      	ldr	r3, [pc, #336]	; (800edcc <__ieee754_pow+0x230>)
 800ec7c:	18e4      	adds	r4, r4, r3
 800ec7e:	9b06      	ldr	r3, [sp, #24]
 800ec80:	431c      	orrs	r4, r3
 800ec82:	d000      	beq.n	800ec86 <__ieee754_pow+0xea>
 800ec84:	e06c      	b.n	800ed60 <__ieee754_pow+0x1c4>
 800ec86:	9a00      	ldr	r2, [sp, #0]
 800ec88:	9b01      	ldr	r3, [sp, #4]
 800ec8a:	0010      	movs	r0, r2
 800ec8c:	0019      	movs	r1, r3
 800ec8e:	f7f2 fe57 	bl	8001940 <__aeabi_dsub>
 800ec92:	0002      	movs	r2, r0
 800ec94:	000b      	movs	r3, r1
 800ec96:	e01c      	b.n	800ecd2 <__ieee754_pow+0x136>
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1cf      	bne.n	800ec3c <__ieee754_pow+0xa0>
 800ec9c:	3314      	adds	r3, #20
 800ec9e:	1a9a      	subs	r2, r3, r2
 800eca0:	002b      	movs	r3, r5
 800eca2:	4113      	asrs	r3, r2
 800eca4:	0019      	movs	r1, r3
 800eca6:	4091      	lsls	r1, r2
 800eca8:	42a9      	cmp	r1, r5
 800ecaa:	d104      	bne.n	800ecb6 <__ieee754_pow+0x11a>
 800ecac:	2201      	movs	r2, #1
 800ecae:	4013      	ands	r3, r2
 800ecb0:	1892      	adds	r2, r2, r2
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	9306      	str	r3, [sp, #24]
 800ecb6:	4b4a      	ldr	r3, [pc, #296]	; (800ede0 <__ieee754_pow+0x244>)
 800ecb8:	429d      	cmp	r5, r3
 800ecba:	d138      	bne.n	800ed2e <__ieee754_pow+0x192>
 800ecbc:	0038      	movs	r0, r7
 800ecbe:	0031      	movs	r1, r6
 800ecc0:	9b04      	ldr	r3, [sp, #16]
 800ecc2:	9000      	str	r0, [sp, #0]
 800ecc4:	9101      	str	r1, [sp, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	da2d      	bge.n	800ed26 <__ieee754_pow+0x18a>
 800ecca:	003a      	movs	r2, r7
 800eccc:	0033      	movs	r3, r6
 800ecce:	2000      	movs	r0, #0
 800ecd0:	4943      	ldr	r1, [pc, #268]	; (800ede0 <__ieee754_pow+0x244>)
 800ecd2:	f7f1 ffc3 	bl	8000c5c <__aeabi_ddiv>
 800ecd6:	e790      	b.n	800ebfa <__ieee754_pow+0x5e>
 800ecd8:	2202      	movs	r2, #2
 800ecda:	9206      	str	r2, [sp, #24]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d1ad      	bne.n	800ec3c <__ieee754_pow+0xa0>
 800ece0:	4b39      	ldr	r3, [pc, #228]	; (800edc8 <__ieee754_pow+0x22c>)
 800ece2:	429d      	cmp	r5, r3
 800ece4:	d1e7      	bne.n	800ecb6 <__ieee754_pow+0x11a>
 800ece6:	4b39      	ldr	r3, [pc, #228]	; (800edcc <__ieee754_pow+0x230>)
 800ece8:	18e3      	adds	r3, r4, r3
 800ecea:	431f      	orrs	r7, r3
 800ecec:	d101      	bne.n	800ecf2 <__ieee754_pow+0x156>
 800ecee:	f000 fc1c 	bl	800f52a <__ieee754_pow+0x98e>
 800ecf2:	4b39      	ldr	r3, [pc, #228]	; (800edd8 <__ieee754_pow+0x23c>)
 800ecf4:	429c      	cmp	r4, r3
 800ecf6:	dd0b      	ble.n	800ed10 <__ieee754_pow+0x174>
 800ecf8:	9b02      	ldr	r3, [sp, #8]
 800ecfa:	9c03      	ldr	r4, [sp, #12]
 800ecfc:	9300      	str	r3, [sp, #0]
 800ecfe:	9401      	str	r4, [sp, #4]
 800ed00:	9b04      	ldr	r3, [sp, #16]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	da0f      	bge.n	800ed26 <__ieee754_pow+0x18a>
 800ed06:	2300      	movs	r3, #0
 800ed08:	2400      	movs	r4, #0
 800ed0a:	9300      	str	r3, [sp, #0]
 800ed0c:	9401      	str	r4, [sp, #4]
 800ed0e:	e00a      	b.n	800ed26 <__ieee754_pow+0x18a>
 800ed10:	9b04      	ldr	r3, [sp, #16]
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	daf7      	bge.n	800ed06 <__ieee754_pow+0x16a>
 800ed16:	2280      	movs	r2, #128	; 0x80
 800ed18:	0612      	lsls	r2, r2, #24
 800ed1a:	4694      	mov	ip, r2
 800ed1c:	9b02      	ldr	r3, [sp, #8]
 800ed1e:	9300      	str	r3, [sp, #0]
 800ed20:	9b03      	ldr	r3, [sp, #12]
 800ed22:	4463      	add	r3, ip
 800ed24:	9301      	str	r3, [sp, #4]
 800ed26:	9800      	ldr	r0, [sp, #0]
 800ed28:	9901      	ldr	r1, [sp, #4]
 800ed2a:	b015      	add	sp, #84	; 0x54
 800ed2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed2e:	2380      	movs	r3, #128	; 0x80
 800ed30:	9a04      	ldr	r2, [sp, #16]
 800ed32:	05db      	lsls	r3, r3, #23
 800ed34:	429a      	cmp	r2, r3
 800ed36:	d106      	bne.n	800ed46 <__ieee754_pow+0x1aa>
 800ed38:	003a      	movs	r2, r7
 800ed3a:	0033      	movs	r3, r6
 800ed3c:	0038      	movs	r0, r7
 800ed3e:	0031      	movs	r1, r6
 800ed40:	f7f2 fb92 	bl	8001468 <__aeabi_dmul>
 800ed44:	e759      	b.n	800ebfa <__ieee754_pow+0x5e>
 800ed46:	4b27      	ldr	r3, [pc, #156]	; (800ede4 <__ieee754_pow+0x248>)
 800ed48:	9a04      	ldr	r2, [sp, #16]
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d000      	beq.n	800ed50 <__ieee754_pow+0x1b4>
 800ed4e:	e775      	b.n	800ec3c <__ieee754_pow+0xa0>
 800ed50:	2e00      	cmp	r6, #0
 800ed52:	da00      	bge.n	800ed56 <__ieee754_pow+0x1ba>
 800ed54:	e772      	b.n	800ec3c <__ieee754_pow+0xa0>
 800ed56:	0038      	movs	r0, r7
 800ed58:	0031      	movs	r1, r6
 800ed5a:	f000 fe0b 	bl	800f974 <__ieee754_sqrt>
 800ed5e:	e74c      	b.n	800ebfa <__ieee754_pow+0x5e>
 800ed60:	9b06      	ldr	r3, [sp, #24]
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	d1df      	bne.n	800ed26 <__ieee754_pow+0x18a>
 800ed66:	9800      	ldr	r0, [sp, #0]
 800ed68:	2180      	movs	r1, #128	; 0x80
 800ed6a:	0002      	movs	r2, r0
 800ed6c:	9801      	ldr	r0, [sp, #4]
 800ed6e:	0609      	lsls	r1, r1, #24
 800ed70:	1843      	adds	r3, r0, r1
 800ed72:	9200      	str	r2, [sp, #0]
 800ed74:	9301      	str	r3, [sp, #4]
 800ed76:	e7d6      	b.n	800ed26 <__ieee754_pow+0x18a>
 800ed78:	0ff3      	lsrs	r3, r6, #31
 800ed7a:	3b01      	subs	r3, #1
 800ed7c:	9310      	str	r3, [sp, #64]	; 0x40
 800ed7e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ed80:	9b06      	ldr	r3, [sp, #24]
 800ed82:	4313      	orrs	r3, r2
 800ed84:	d104      	bne.n	800ed90 <__ieee754_pow+0x1f4>
 800ed86:	003a      	movs	r2, r7
 800ed88:	0033      	movs	r3, r6
 800ed8a:	0038      	movs	r0, r7
 800ed8c:	0031      	movs	r1, r6
 800ed8e:	e77e      	b.n	800ec8e <__ieee754_pow+0xf2>
 800ed90:	4b15      	ldr	r3, [pc, #84]	; (800ede8 <__ieee754_pow+0x24c>)
 800ed92:	429d      	cmp	r5, r3
 800ed94:	dc00      	bgt.n	800ed98 <__ieee754_pow+0x1fc>
 800ed96:	e0f5      	b.n	800ef84 <__ieee754_pow+0x3e8>
 800ed98:	4b14      	ldr	r3, [pc, #80]	; (800edec <__ieee754_pow+0x250>)
 800ed9a:	429d      	cmp	r5, r3
 800ed9c:	dd0a      	ble.n	800edb4 <__ieee754_pow+0x218>
 800ed9e:	4b0e      	ldr	r3, [pc, #56]	; (800edd8 <__ieee754_pow+0x23c>)
 800eda0:	429c      	cmp	r4, r3
 800eda2:	dc0d      	bgt.n	800edc0 <__ieee754_pow+0x224>
 800eda4:	9b04      	ldr	r3, [sp, #16]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	daad      	bge.n	800ed06 <__ieee754_pow+0x16a>
 800edaa:	4a11      	ldr	r2, [pc, #68]	; (800edf0 <__ieee754_pow+0x254>)
 800edac:	4b11      	ldr	r3, [pc, #68]	; (800edf4 <__ieee754_pow+0x258>)
 800edae:	0010      	movs	r0, r2
 800edb0:	0019      	movs	r1, r3
 800edb2:	e7c5      	b.n	800ed40 <__ieee754_pow+0x1a4>
 800edb4:	4b10      	ldr	r3, [pc, #64]	; (800edf8 <__ieee754_pow+0x25c>)
 800edb6:	429c      	cmp	r4, r3
 800edb8:	ddf4      	ble.n	800eda4 <__ieee754_pow+0x208>
 800edba:	4b09      	ldr	r3, [pc, #36]	; (800ede0 <__ieee754_pow+0x244>)
 800edbc:	429c      	cmp	r4, r3
 800edbe:	dd1d      	ble.n	800edfc <__ieee754_pow+0x260>
 800edc0:	9b04      	ldr	r3, [sp, #16]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	dcf1      	bgt.n	800edaa <__ieee754_pow+0x20e>
 800edc6:	e79e      	b.n	800ed06 <__ieee754_pow+0x16a>
 800edc8:	7ff00000 	.word	0x7ff00000
 800edcc:	c0100000 	.word	0xc0100000
 800edd0:	08011018 	.word	0x08011018
 800edd4:	433fffff 	.word	0x433fffff
 800edd8:	3fefffff 	.word	0x3fefffff
 800eddc:	fffffc01 	.word	0xfffffc01
 800ede0:	3ff00000 	.word	0x3ff00000
 800ede4:	3fe00000 	.word	0x3fe00000
 800ede8:	41e00000 	.word	0x41e00000
 800edec:	43f00000 	.word	0x43f00000
 800edf0:	8800759c 	.word	0x8800759c
 800edf4:	7e37e43c 	.word	0x7e37e43c
 800edf8:	3feffffe 	.word	0x3feffffe
 800edfc:	2200      	movs	r2, #0
 800edfe:	9800      	ldr	r0, [sp, #0]
 800ee00:	9901      	ldr	r1, [sp, #4]
 800ee02:	4b52      	ldr	r3, [pc, #328]	; (800ef4c <__ieee754_pow+0x3b0>)
 800ee04:	f7f2 fd9c 	bl	8001940 <__aeabi_dsub>
 800ee08:	22c0      	movs	r2, #192	; 0xc0
 800ee0a:	4b51      	ldr	r3, [pc, #324]	; (800ef50 <__ieee754_pow+0x3b4>)
 800ee0c:	05d2      	lsls	r2, r2, #23
 800ee0e:	0004      	movs	r4, r0
 800ee10:	000d      	movs	r5, r1
 800ee12:	f7f2 fb29 	bl	8001468 <__aeabi_dmul>
 800ee16:	4a4f      	ldr	r2, [pc, #316]	; (800ef54 <__ieee754_pow+0x3b8>)
 800ee18:	9000      	str	r0, [sp, #0]
 800ee1a:	9101      	str	r1, [sp, #4]
 800ee1c:	4b4e      	ldr	r3, [pc, #312]	; (800ef58 <__ieee754_pow+0x3bc>)
 800ee1e:	0020      	movs	r0, r4
 800ee20:	0029      	movs	r1, r5
 800ee22:	f7f2 fb21 	bl	8001468 <__aeabi_dmul>
 800ee26:	2200      	movs	r2, #0
 800ee28:	9004      	str	r0, [sp, #16]
 800ee2a:	9105      	str	r1, [sp, #20]
 800ee2c:	4b4b      	ldr	r3, [pc, #300]	; (800ef5c <__ieee754_pow+0x3c0>)
 800ee2e:	0020      	movs	r0, r4
 800ee30:	0029      	movs	r1, r5
 800ee32:	f7f2 fb19 	bl	8001468 <__aeabi_dmul>
 800ee36:	0002      	movs	r2, r0
 800ee38:	000b      	movs	r3, r1
 800ee3a:	4849      	ldr	r0, [pc, #292]	; (800ef60 <__ieee754_pow+0x3c4>)
 800ee3c:	4949      	ldr	r1, [pc, #292]	; (800ef64 <__ieee754_pow+0x3c8>)
 800ee3e:	f7f2 fd7f 	bl	8001940 <__aeabi_dsub>
 800ee42:	0022      	movs	r2, r4
 800ee44:	002b      	movs	r3, r5
 800ee46:	f7f2 fb0f 	bl	8001468 <__aeabi_dmul>
 800ee4a:	0002      	movs	r2, r0
 800ee4c:	000b      	movs	r3, r1
 800ee4e:	2000      	movs	r0, #0
 800ee50:	4945      	ldr	r1, [pc, #276]	; (800ef68 <__ieee754_pow+0x3cc>)
 800ee52:	f7f2 fd75 	bl	8001940 <__aeabi_dsub>
 800ee56:	0022      	movs	r2, r4
 800ee58:	0006      	movs	r6, r0
 800ee5a:	000f      	movs	r7, r1
 800ee5c:	002b      	movs	r3, r5
 800ee5e:	0020      	movs	r0, r4
 800ee60:	0029      	movs	r1, r5
 800ee62:	f7f2 fb01 	bl	8001468 <__aeabi_dmul>
 800ee66:	0002      	movs	r2, r0
 800ee68:	000b      	movs	r3, r1
 800ee6a:	0030      	movs	r0, r6
 800ee6c:	0039      	movs	r1, r7
 800ee6e:	f7f2 fafb 	bl	8001468 <__aeabi_dmul>
 800ee72:	4a3e      	ldr	r2, [pc, #248]	; (800ef6c <__ieee754_pow+0x3d0>)
 800ee74:	4b36      	ldr	r3, [pc, #216]	; (800ef50 <__ieee754_pow+0x3b4>)
 800ee76:	f7f2 faf7 	bl	8001468 <__aeabi_dmul>
 800ee7a:	0002      	movs	r2, r0
 800ee7c:	000b      	movs	r3, r1
 800ee7e:	9804      	ldr	r0, [sp, #16]
 800ee80:	9905      	ldr	r1, [sp, #20]
 800ee82:	f7f2 fd5d 	bl	8001940 <__aeabi_dsub>
 800ee86:	0002      	movs	r2, r0
 800ee88:	000b      	movs	r3, r1
 800ee8a:	0004      	movs	r4, r0
 800ee8c:	000d      	movs	r5, r1
 800ee8e:	9800      	ldr	r0, [sp, #0]
 800ee90:	9901      	ldr	r1, [sp, #4]
 800ee92:	f7f1 fb79 	bl	8000588 <__aeabi_dadd>
 800ee96:	9a00      	ldr	r2, [sp, #0]
 800ee98:	9b01      	ldr	r3, [sp, #4]
 800ee9a:	2000      	movs	r0, #0
 800ee9c:	000f      	movs	r7, r1
 800ee9e:	0006      	movs	r6, r0
 800eea0:	f7f2 fd4e 	bl	8001940 <__aeabi_dsub>
 800eea4:	0002      	movs	r2, r0
 800eea6:	000b      	movs	r3, r1
 800eea8:	0020      	movs	r0, r4
 800eeaa:	0029      	movs	r1, r5
 800eeac:	f7f2 fd48 	bl	8001940 <__aeabi_dsub>
 800eeb0:	9b06      	ldr	r3, [sp, #24]
 800eeb2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eeb4:	3b01      	subs	r3, #1
 800eeb6:	9004      	str	r0, [sp, #16]
 800eeb8:	9105      	str	r1, [sp, #20]
 800eeba:	4313      	orrs	r3, r2
 800eebc:	d000      	beq.n	800eec0 <__ieee754_pow+0x324>
 800eebe:	e1e0      	b.n	800f282 <__ieee754_pow+0x6e6>
 800eec0:	2300      	movs	r3, #0
 800eec2:	4c2b      	ldr	r4, [pc, #172]	; (800ef70 <__ieee754_pow+0x3d4>)
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	9401      	str	r4, [sp, #4]
 800eec8:	9c02      	ldr	r4, [sp, #8]
 800eeca:	9d03      	ldr	r5, [sp, #12]
 800eecc:	9802      	ldr	r0, [sp, #8]
 800eece:	9903      	ldr	r1, [sp, #12]
 800eed0:	2400      	movs	r4, #0
 800eed2:	002b      	movs	r3, r5
 800eed4:	0022      	movs	r2, r4
 800eed6:	f7f2 fd33 	bl	8001940 <__aeabi_dsub>
 800eeda:	0032      	movs	r2, r6
 800eedc:	003b      	movs	r3, r7
 800eede:	f7f2 fac3 	bl	8001468 <__aeabi_dmul>
 800eee2:	9a02      	ldr	r2, [sp, #8]
 800eee4:	9b03      	ldr	r3, [sp, #12]
 800eee6:	9006      	str	r0, [sp, #24]
 800eee8:	9107      	str	r1, [sp, #28]
 800eeea:	9804      	ldr	r0, [sp, #16]
 800eeec:	9905      	ldr	r1, [sp, #20]
 800eeee:	f7f2 fabb 	bl	8001468 <__aeabi_dmul>
 800eef2:	0002      	movs	r2, r0
 800eef4:	000b      	movs	r3, r1
 800eef6:	9806      	ldr	r0, [sp, #24]
 800eef8:	9907      	ldr	r1, [sp, #28]
 800eefa:	f7f1 fb45 	bl	8000588 <__aeabi_dadd>
 800eefe:	0022      	movs	r2, r4
 800ef00:	002b      	movs	r3, r5
 800ef02:	9004      	str	r0, [sp, #16]
 800ef04:	9105      	str	r1, [sp, #20]
 800ef06:	0030      	movs	r0, r6
 800ef08:	0039      	movs	r1, r7
 800ef0a:	f7f2 faad 	bl	8001468 <__aeabi_dmul>
 800ef0e:	0006      	movs	r6, r0
 800ef10:	000f      	movs	r7, r1
 800ef12:	000b      	movs	r3, r1
 800ef14:	0002      	movs	r2, r0
 800ef16:	9804      	ldr	r0, [sp, #16]
 800ef18:	9905      	ldr	r1, [sp, #20]
 800ef1a:	9606      	str	r6, [sp, #24]
 800ef1c:	9707      	str	r7, [sp, #28]
 800ef1e:	f7f1 fb33 	bl	8000588 <__aeabi_dadd>
 800ef22:	4b14      	ldr	r3, [pc, #80]	; (800ef74 <__ieee754_pow+0x3d8>)
 800ef24:	0005      	movs	r5, r0
 800ef26:	000c      	movs	r4, r1
 800ef28:	9108      	str	r1, [sp, #32]
 800ef2a:	4299      	cmp	r1, r3
 800ef2c:	dc00      	bgt.n	800ef30 <__ieee754_pow+0x394>
 800ef2e:	e2da      	b.n	800f4e6 <__ieee754_pow+0x94a>
 800ef30:	4b11      	ldr	r3, [pc, #68]	; (800ef78 <__ieee754_pow+0x3dc>)
 800ef32:	18cb      	adds	r3, r1, r3
 800ef34:	4303      	orrs	r3, r0
 800ef36:	d100      	bne.n	800ef3a <__ieee754_pow+0x39e>
 800ef38:	e1dc      	b.n	800f2f4 <__ieee754_pow+0x758>
 800ef3a:	9800      	ldr	r0, [sp, #0]
 800ef3c:	9901      	ldr	r1, [sp, #4]
 800ef3e:	4a0f      	ldr	r2, [pc, #60]	; (800ef7c <__ieee754_pow+0x3e0>)
 800ef40:	4b0f      	ldr	r3, [pc, #60]	; (800ef80 <__ieee754_pow+0x3e4>)
 800ef42:	f7f2 fa91 	bl	8001468 <__aeabi_dmul>
 800ef46:	4a0d      	ldr	r2, [pc, #52]	; (800ef7c <__ieee754_pow+0x3e0>)
 800ef48:	4b0d      	ldr	r3, [pc, #52]	; (800ef80 <__ieee754_pow+0x3e4>)
 800ef4a:	e6f9      	b.n	800ed40 <__ieee754_pow+0x1a4>
 800ef4c:	3ff00000 	.word	0x3ff00000
 800ef50:	3ff71547 	.word	0x3ff71547
 800ef54:	f85ddf44 	.word	0xf85ddf44
 800ef58:	3e54ae0b 	.word	0x3e54ae0b
 800ef5c:	3fd00000 	.word	0x3fd00000
 800ef60:	55555555 	.word	0x55555555
 800ef64:	3fd55555 	.word	0x3fd55555
 800ef68:	3fe00000 	.word	0x3fe00000
 800ef6c:	652b82fe 	.word	0x652b82fe
 800ef70:	bff00000 	.word	0xbff00000
 800ef74:	408fffff 	.word	0x408fffff
 800ef78:	bf700000 	.word	0xbf700000
 800ef7c:	8800759c 	.word	0x8800759c
 800ef80:	7e37e43c 	.word	0x7e37e43c
 800ef84:	4bc0      	ldr	r3, [pc, #768]	; (800f288 <__ieee754_pow+0x6ec>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	4233      	tst	r3, r6
 800ef8a:	d10a      	bne.n	800efa2 <__ieee754_pow+0x406>
 800ef8c:	9800      	ldr	r0, [sp, #0]
 800ef8e:	9901      	ldr	r1, [sp, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	4bbe      	ldr	r3, [pc, #760]	; (800f28c <__ieee754_pow+0x6f0>)
 800ef94:	f7f2 fa68 	bl	8001468 <__aeabi_dmul>
 800ef98:	2235      	movs	r2, #53	; 0x35
 800ef9a:	9000      	str	r0, [sp, #0]
 800ef9c:	9101      	str	r1, [sp, #4]
 800ef9e:	9c01      	ldr	r4, [sp, #4]
 800efa0:	4252      	negs	r2, r2
 800efa2:	49bb      	ldr	r1, [pc, #748]	; (800f290 <__ieee754_pow+0x6f4>)
 800efa4:	1523      	asrs	r3, r4, #20
 800efa6:	185b      	adds	r3, r3, r1
 800efa8:	189b      	adds	r3, r3, r2
 800efaa:	0324      	lsls	r4, r4, #12
 800efac:	4db9      	ldr	r5, [pc, #740]	; (800f294 <__ieee754_pow+0x6f8>)
 800efae:	930d      	str	r3, [sp, #52]	; 0x34
 800efb0:	4bb9      	ldr	r3, [pc, #740]	; (800f298 <__ieee754_pow+0x6fc>)
 800efb2:	0b22      	lsrs	r2, r4, #12
 800efb4:	4315      	orrs	r5, r2
 800efb6:	2400      	movs	r4, #0
 800efb8:	429a      	cmp	r2, r3
 800efba:	dd09      	ble.n	800efd0 <__ieee754_pow+0x434>
 800efbc:	4bb7      	ldr	r3, [pc, #732]	; (800f29c <__ieee754_pow+0x700>)
 800efbe:	3401      	adds	r4, #1
 800efc0:	429a      	cmp	r2, r3
 800efc2:	dd05      	ble.n	800efd0 <__ieee754_pow+0x434>
 800efc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800efc6:	191b      	adds	r3, r3, r4
 800efc8:	2400      	movs	r4, #0
 800efca:	930d      	str	r3, [sp, #52]	; 0x34
 800efcc:	4bb4      	ldr	r3, [pc, #720]	; (800f2a0 <__ieee754_pow+0x704>)
 800efce:	18ed      	adds	r5, r5, r3
 800efd0:	9800      	ldr	r0, [sp, #0]
 800efd2:	9901      	ldr	r1, [sp, #4]
 800efd4:	0029      	movs	r1, r5
 800efd6:	00e3      	lsls	r3, r4, #3
 800efd8:	9311      	str	r3, [sp, #68]	; 0x44
 800efda:	4bb2      	ldr	r3, [pc, #712]	; (800f2a4 <__ieee754_pow+0x708>)
 800efdc:	00e2      	lsls	r2, r4, #3
 800efde:	189b      	adds	r3, r3, r2
 800efe0:	681a      	ldr	r2, [r3, #0]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	900e      	str	r0, [sp, #56]	; 0x38
 800efe6:	910f      	str	r1, [sp, #60]	; 0x3c
 800efe8:	920a      	str	r2, [sp, #40]	; 0x28
 800efea:	930b      	str	r3, [sp, #44]	; 0x2c
 800efec:	f7f2 fca8 	bl	8001940 <__aeabi_dsub>
 800eff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800eff2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eff4:	0006      	movs	r6, r0
 800eff6:	000f      	movs	r7, r1
 800eff8:	980a      	ldr	r0, [sp, #40]	; 0x28
 800effa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800effc:	f7f1 fac4 	bl	8000588 <__aeabi_dadd>
 800f000:	0002      	movs	r2, r0
 800f002:	000b      	movs	r3, r1
 800f004:	2000      	movs	r0, #0
 800f006:	49a3      	ldr	r1, [pc, #652]	; (800f294 <__ieee754_pow+0x6f8>)
 800f008:	f7f1 fe28 	bl	8000c5c <__aeabi_ddiv>
 800f00c:	0002      	movs	r2, r0
 800f00e:	000b      	movs	r3, r1
 800f010:	9012      	str	r0, [sp, #72]	; 0x48
 800f012:	9113      	str	r1, [sp, #76]	; 0x4c
 800f014:	0030      	movs	r0, r6
 800f016:	0039      	movs	r1, r7
 800f018:	f7f2 fa26 	bl	8001468 <__aeabi_dmul>
 800f01c:	9008      	str	r0, [sp, #32]
 800f01e:	9109      	str	r1, [sp, #36]	; 0x24
 800f020:	9a08      	ldr	r2, [sp, #32]
 800f022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f024:	2180      	movs	r1, #128	; 0x80
 800f026:	9204      	str	r2, [sp, #16]
 800f028:	9305      	str	r3, [sp, #20]
 800f02a:	2300      	movs	r3, #0
 800f02c:	0589      	lsls	r1, r1, #22
 800f02e:	106d      	asrs	r5, r5, #1
 800f030:	430d      	orrs	r5, r1
 800f032:	2180      	movs	r1, #128	; 0x80
 800f034:	9304      	str	r3, [sp, #16]
 800f036:	9a04      	ldr	r2, [sp, #16]
 800f038:	9b05      	ldr	r3, [sp, #20]
 800f03a:	9200      	str	r2, [sp, #0]
 800f03c:	9301      	str	r3, [sp, #4]
 800f03e:	2200      	movs	r2, #0
 800f040:	0309      	lsls	r1, r1, #12
 800f042:	186d      	adds	r5, r5, r1
 800f044:	04a1      	lsls	r1, r4, #18
 800f046:	186b      	adds	r3, r5, r1
 800f048:	9800      	ldr	r0, [sp, #0]
 800f04a:	9901      	ldr	r1, [sp, #4]
 800f04c:	0014      	movs	r4, r2
 800f04e:	001d      	movs	r5, r3
 800f050:	f7f2 fa0a 	bl	8001468 <__aeabi_dmul>
 800f054:	0002      	movs	r2, r0
 800f056:	000b      	movs	r3, r1
 800f058:	0030      	movs	r0, r6
 800f05a:	0039      	movs	r1, r7
 800f05c:	f7f2 fc70 	bl	8001940 <__aeabi_dsub>
 800f060:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f064:	0006      	movs	r6, r0
 800f066:	000f      	movs	r7, r1
 800f068:	0020      	movs	r0, r4
 800f06a:	0029      	movs	r1, r5
 800f06c:	f7f2 fc68 	bl	8001940 <__aeabi_dsub>
 800f070:	0002      	movs	r2, r0
 800f072:	000b      	movs	r3, r1
 800f074:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f076:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f078:	f7f2 fc62 	bl	8001940 <__aeabi_dsub>
 800f07c:	9a00      	ldr	r2, [sp, #0]
 800f07e:	9b01      	ldr	r3, [sp, #4]
 800f080:	f7f2 f9f2 	bl	8001468 <__aeabi_dmul>
 800f084:	0002      	movs	r2, r0
 800f086:	000b      	movs	r3, r1
 800f088:	0030      	movs	r0, r6
 800f08a:	0039      	movs	r1, r7
 800f08c:	f7f2 fc58 	bl	8001940 <__aeabi_dsub>
 800f090:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f092:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800f094:	f7f2 f9e8 	bl	8001468 <__aeabi_dmul>
 800f098:	9a08      	ldr	r2, [sp, #32]
 800f09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f09c:	900a      	str	r0, [sp, #40]	; 0x28
 800f09e:	910b      	str	r1, [sp, #44]	; 0x2c
 800f0a0:	0010      	movs	r0, r2
 800f0a2:	0019      	movs	r1, r3
 800f0a4:	f7f2 f9e0 	bl	8001468 <__aeabi_dmul>
 800f0a8:	0006      	movs	r6, r0
 800f0aa:	000f      	movs	r7, r1
 800f0ac:	4a7e      	ldr	r2, [pc, #504]	; (800f2a8 <__ieee754_pow+0x70c>)
 800f0ae:	4b7f      	ldr	r3, [pc, #508]	; (800f2ac <__ieee754_pow+0x710>)
 800f0b0:	f7f2 f9da 	bl	8001468 <__aeabi_dmul>
 800f0b4:	4a7e      	ldr	r2, [pc, #504]	; (800f2b0 <__ieee754_pow+0x714>)
 800f0b6:	4b7f      	ldr	r3, [pc, #508]	; (800f2b4 <__ieee754_pow+0x718>)
 800f0b8:	f7f1 fa66 	bl	8000588 <__aeabi_dadd>
 800f0bc:	0032      	movs	r2, r6
 800f0be:	003b      	movs	r3, r7
 800f0c0:	f7f2 f9d2 	bl	8001468 <__aeabi_dmul>
 800f0c4:	4a7c      	ldr	r2, [pc, #496]	; (800f2b8 <__ieee754_pow+0x71c>)
 800f0c6:	4b7d      	ldr	r3, [pc, #500]	; (800f2bc <__ieee754_pow+0x720>)
 800f0c8:	f7f1 fa5e 	bl	8000588 <__aeabi_dadd>
 800f0cc:	0032      	movs	r2, r6
 800f0ce:	003b      	movs	r3, r7
 800f0d0:	f7f2 f9ca 	bl	8001468 <__aeabi_dmul>
 800f0d4:	4a7a      	ldr	r2, [pc, #488]	; (800f2c0 <__ieee754_pow+0x724>)
 800f0d6:	4b7b      	ldr	r3, [pc, #492]	; (800f2c4 <__ieee754_pow+0x728>)
 800f0d8:	f7f1 fa56 	bl	8000588 <__aeabi_dadd>
 800f0dc:	0032      	movs	r2, r6
 800f0de:	003b      	movs	r3, r7
 800f0e0:	f7f2 f9c2 	bl	8001468 <__aeabi_dmul>
 800f0e4:	4a78      	ldr	r2, [pc, #480]	; (800f2c8 <__ieee754_pow+0x72c>)
 800f0e6:	4b79      	ldr	r3, [pc, #484]	; (800f2cc <__ieee754_pow+0x730>)
 800f0e8:	f7f1 fa4e 	bl	8000588 <__aeabi_dadd>
 800f0ec:	0032      	movs	r2, r6
 800f0ee:	003b      	movs	r3, r7
 800f0f0:	f7f2 f9ba 	bl	8001468 <__aeabi_dmul>
 800f0f4:	4a76      	ldr	r2, [pc, #472]	; (800f2d0 <__ieee754_pow+0x734>)
 800f0f6:	4b77      	ldr	r3, [pc, #476]	; (800f2d4 <__ieee754_pow+0x738>)
 800f0f8:	f7f1 fa46 	bl	8000588 <__aeabi_dadd>
 800f0fc:	0032      	movs	r2, r6
 800f0fe:	0004      	movs	r4, r0
 800f100:	000d      	movs	r5, r1
 800f102:	003b      	movs	r3, r7
 800f104:	0030      	movs	r0, r6
 800f106:	0039      	movs	r1, r7
 800f108:	f7f2 f9ae 	bl	8001468 <__aeabi_dmul>
 800f10c:	0002      	movs	r2, r0
 800f10e:	000b      	movs	r3, r1
 800f110:	0020      	movs	r0, r4
 800f112:	0029      	movs	r1, r5
 800f114:	f7f2 f9a8 	bl	8001468 <__aeabi_dmul>
 800f118:	9a00      	ldr	r2, [sp, #0]
 800f11a:	9b01      	ldr	r3, [sp, #4]
 800f11c:	0004      	movs	r4, r0
 800f11e:	000d      	movs	r5, r1
 800f120:	9808      	ldr	r0, [sp, #32]
 800f122:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f124:	f7f1 fa30 	bl	8000588 <__aeabi_dadd>
 800f128:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f12a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f12c:	f7f2 f99c 	bl	8001468 <__aeabi_dmul>
 800f130:	0022      	movs	r2, r4
 800f132:	002b      	movs	r3, r5
 800f134:	f7f1 fa28 	bl	8000588 <__aeabi_dadd>
 800f138:	9a00      	ldr	r2, [sp, #0]
 800f13a:	9b01      	ldr	r3, [sp, #4]
 800f13c:	900e      	str	r0, [sp, #56]	; 0x38
 800f13e:	910f      	str	r1, [sp, #60]	; 0x3c
 800f140:	0010      	movs	r0, r2
 800f142:	0019      	movs	r1, r3
 800f144:	f7f2 f990 	bl	8001468 <__aeabi_dmul>
 800f148:	2200      	movs	r2, #0
 800f14a:	4b63      	ldr	r3, [pc, #396]	; (800f2d8 <__ieee754_pow+0x73c>)
 800f14c:	0004      	movs	r4, r0
 800f14e:	000d      	movs	r5, r1
 800f150:	f7f1 fa1a 	bl	8000588 <__aeabi_dadd>
 800f154:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f156:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f158:	f7f1 fa16 	bl	8000588 <__aeabi_dadd>
 800f15c:	9e04      	ldr	r6, [sp, #16]
 800f15e:	000f      	movs	r7, r1
 800f160:	0032      	movs	r2, r6
 800f162:	000b      	movs	r3, r1
 800f164:	9800      	ldr	r0, [sp, #0]
 800f166:	9901      	ldr	r1, [sp, #4]
 800f168:	f7f2 f97e 	bl	8001468 <__aeabi_dmul>
 800f16c:	2200      	movs	r2, #0
 800f16e:	9000      	str	r0, [sp, #0]
 800f170:	9101      	str	r1, [sp, #4]
 800f172:	4b59      	ldr	r3, [pc, #356]	; (800f2d8 <__ieee754_pow+0x73c>)
 800f174:	0030      	movs	r0, r6
 800f176:	0039      	movs	r1, r7
 800f178:	f7f2 fbe2 	bl	8001940 <__aeabi_dsub>
 800f17c:	0022      	movs	r2, r4
 800f17e:	002b      	movs	r3, r5
 800f180:	f7f2 fbde 	bl	8001940 <__aeabi_dsub>
 800f184:	0002      	movs	r2, r0
 800f186:	000b      	movs	r3, r1
 800f188:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f18a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f18c:	f7f2 fbd8 	bl	8001940 <__aeabi_dsub>
 800f190:	9a08      	ldr	r2, [sp, #32]
 800f192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f194:	f7f2 f968 	bl	8001468 <__aeabi_dmul>
 800f198:	0032      	movs	r2, r6
 800f19a:	0004      	movs	r4, r0
 800f19c:	000d      	movs	r5, r1
 800f19e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f1a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f1a2:	003b      	movs	r3, r7
 800f1a4:	f7f2 f960 	bl	8001468 <__aeabi_dmul>
 800f1a8:	0002      	movs	r2, r0
 800f1aa:	000b      	movs	r3, r1
 800f1ac:	0020      	movs	r0, r4
 800f1ae:	0029      	movs	r1, r5
 800f1b0:	f7f1 f9ea 	bl	8000588 <__aeabi_dadd>
 800f1b4:	0004      	movs	r4, r0
 800f1b6:	000d      	movs	r5, r1
 800f1b8:	0002      	movs	r2, r0
 800f1ba:	000b      	movs	r3, r1
 800f1bc:	9800      	ldr	r0, [sp, #0]
 800f1be:	9901      	ldr	r1, [sp, #4]
 800f1c0:	f7f1 f9e2 	bl	8000588 <__aeabi_dadd>
 800f1c4:	22e0      	movs	r2, #224	; 0xe0
 800f1c6:	9e04      	ldr	r6, [sp, #16]
 800f1c8:	4b44      	ldr	r3, [pc, #272]	; (800f2dc <__ieee754_pow+0x740>)
 800f1ca:	0030      	movs	r0, r6
 800f1cc:	0612      	lsls	r2, r2, #24
 800f1ce:	000f      	movs	r7, r1
 800f1d0:	f7f2 f94a 	bl	8001468 <__aeabi_dmul>
 800f1d4:	9008      	str	r0, [sp, #32]
 800f1d6:	9109      	str	r1, [sp, #36]	; 0x24
 800f1d8:	9a00      	ldr	r2, [sp, #0]
 800f1da:	9b01      	ldr	r3, [sp, #4]
 800f1dc:	0030      	movs	r0, r6
 800f1de:	0039      	movs	r1, r7
 800f1e0:	f7f2 fbae 	bl	8001940 <__aeabi_dsub>
 800f1e4:	0002      	movs	r2, r0
 800f1e6:	000b      	movs	r3, r1
 800f1e8:	0020      	movs	r0, r4
 800f1ea:	0029      	movs	r1, r5
 800f1ec:	f7f2 fba8 	bl	8001940 <__aeabi_dsub>
 800f1f0:	4a3b      	ldr	r2, [pc, #236]	; (800f2e0 <__ieee754_pow+0x744>)
 800f1f2:	4b3a      	ldr	r3, [pc, #232]	; (800f2dc <__ieee754_pow+0x740>)
 800f1f4:	f7f2 f938 	bl	8001468 <__aeabi_dmul>
 800f1f8:	4a3a      	ldr	r2, [pc, #232]	; (800f2e4 <__ieee754_pow+0x748>)
 800f1fa:	0004      	movs	r4, r0
 800f1fc:	000d      	movs	r5, r1
 800f1fe:	0030      	movs	r0, r6
 800f200:	0039      	movs	r1, r7
 800f202:	4b39      	ldr	r3, [pc, #228]	; (800f2e8 <__ieee754_pow+0x74c>)
 800f204:	f7f2 f930 	bl	8001468 <__aeabi_dmul>
 800f208:	0002      	movs	r2, r0
 800f20a:	000b      	movs	r3, r1
 800f20c:	0020      	movs	r0, r4
 800f20e:	0029      	movs	r1, r5
 800f210:	f7f1 f9ba 	bl	8000588 <__aeabi_dadd>
 800f214:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f216:	4b35      	ldr	r3, [pc, #212]	; (800f2ec <__ieee754_pow+0x750>)
 800f218:	189b      	adds	r3, r3, r2
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	685b      	ldr	r3, [r3, #4]
 800f21e:	f7f1 f9b3 	bl	8000588 <__aeabi_dadd>
 800f222:	900a      	str	r0, [sp, #40]	; 0x28
 800f224:	910b      	str	r1, [sp, #44]	; 0x2c
 800f226:	980d      	ldr	r0, [sp, #52]	; 0x34
 800f228:	f7f2 ff70 	bl	800210c <__aeabi_i2d>
 800f22c:	0004      	movs	r4, r0
 800f22e:	000d      	movs	r5, r1
 800f230:	9808      	ldr	r0, [sp, #32]
 800f232:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f234:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f236:	4b2e      	ldr	r3, [pc, #184]	; (800f2f0 <__ieee754_pow+0x754>)
 800f238:	189b      	adds	r3, r3, r2
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	685b      	ldr	r3, [r3, #4]
 800f23e:	9200      	str	r2, [sp, #0]
 800f240:	9301      	str	r3, [sp, #4]
 800f242:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f244:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f246:	f7f1 f99f 	bl	8000588 <__aeabi_dadd>
 800f24a:	9a00      	ldr	r2, [sp, #0]
 800f24c:	9b01      	ldr	r3, [sp, #4]
 800f24e:	f7f1 f99b 	bl	8000588 <__aeabi_dadd>
 800f252:	0022      	movs	r2, r4
 800f254:	002b      	movs	r3, r5
 800f256:	f7f1 f997 	bl	8000588 <__aeabi_dadd>
 800f25a:	9804      	ldr	r0, [sp, #16]
 800f25c:	0022      	movs	r2, r4
 800f25e:	002b      	movs	r3, r5
 800f260:	0006      	movs	r6, r0
 800f262:	000f      	movs	r7, r1
 800f264:	f7f2 fb6c 	bl	8001940 <__aeabi_dsub>
 800f268:	9a00      	ldr	r2, [sp, #0]
 800f26a:	9b01      	ldr	r3, [sp, #4]
 800f26c:	f7f2 fb68 	bl	8001940 <__aeabi_dsub>
 800f270:	9a08      	ldr	r2, [sp, #32]
 800f272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f274:	f7f2 fb64 	bl	8001940 <__aeabi_dsub>
 800f278:	0002      	movs	r2, r0
 800f27a:	000b      	movs	r3, r1
 800f27c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800f27e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f280:	e614      	b.n	800eeac <__ieee754_pow+0x310>
 800f282:	2300      	movs	r3, #0
 800f284:	4c03      	ldr	r4, [pc, #12]	; (800f294 <__ieee754_pow+0x6f8>)
 800f286:	e61d      	b.n	800eec4 <__ieee754_pow+0x328>
 800f288:	7ff00000 	.word	0x7ff00000
 800f28c:	43400000 	.word	0x43400000
 800f290:	fffffc01 	.word	0xfffffc01
 800f294:	3ff00000 	.word	0x3ff00000
 800f298:	0003988e 	.word	0x0003988e
 800f29c:	000bb679 	.word	0x000bb679
 800f2a0:	fff00000 	.word	0xfff00000
 800f2a4:	08011120 	.word	0x08011120
 800f2a8:	4a454eef 	.word	0x4a454eef
 800f2ac:	3fca7e28 	.word	0x3fca7e28
 800f2b0:	93c9db65 	.word	0x93c9db65
 800f2b4:	3fcd864a 	.word	0x3fcd864a
 800f2b8:	a91d4101 	.word	0xa91d4101
 800f2bc:	3fd17460 	.word	0x3fd17460
 800f2c0:	518f264d 	.word	0x518f264d
 800f2c4:	3fd55555 	.word	0x3fd55555
 800f2c8:	db6fabff 	.word	0xdb6fabff
 800f2cc:	3fdb6db6 	.word	0x3fdb6db6
 800f2d0:	33333303 	.word	0x33333303
 800f2d4:	3fe33333 	.word	0x3fe33333
 800f2d8:	40080000 	.word	0x40080000
 800f2dc:	3feec709 	.word	0x3feec709
 800f2e0:	dc3a03fd 	.word	0xdc3a03fd
 800f2e4:	145b01f5 	.word	0x145b01f5
 800f2e8:	be3e2fe0 	.word	0xbe3e2fe0
 800f2ec:	08011140 	.word	0x08011140
 800f2f0:	08011130 	.word	0x08011130
 800f2f4:	4a8f      	ldr	r2, [pc, #572]	; (800f534 <__ieee754_pow+0x998>)
 800f2f6:	4b90      	ldr	r3, [pc, #576]	; (800f538 <__ieee754_pow+0x99c>)
 800f2f8:	9804      	ldr	r0, [sp, #16]
 800f2fa:	9905      	ldr	r1, [sp, #20]
 800f2fc:	f7f1 f944 	bl	8000588 <__aeabi_dadd>
 800f300:	0032      	movs	r2, r6
 800f302:	9002      	str	r0, [sp, #8]
 800f304:	9103      	str	r1, [sp, #12]
 800f306:	003b      	movs	r3, r7
 800f308:	0028      	movs	r0, r5
 800f30a:	0021      	movs	r1, r4
 800f30c:	f7f2 fb18 	bl	8001940 <__aeabi_dsub>
 800f310:	0002      	movs	r2, r0
 800f312:	000b      	movs	r3, r1
 800f314:	9802      	ldr	r0, [sp, #8]
 800f316:	9903      	ldr	r1, [sp, #12]
 800f318:	f7f1 f8b2 	bl	8000480 <__aeabi_dcmpgt>
 800f31c:	2800      	cmp	r0, #0
 800f31e:	d000      	beq.n	800f322 <__ieee754_pow+0x786>
 800f320:	e60b      	b.n	800ef3a <__ieee754_pow+0x39e>
 800f322:	2100      	movs	r1, #0
 800f324:	4a85      	ldr	r2, [pc, #532]	; (800f53c <__ieee754_pow+0x9a0>)
 800f326:	0063      	lsls	r3, r4, #1
 800f328:	085b      	lsrs	r3, r3, #1
 800f32a:	9102      	str	r1, [sp, #8]
 800f32c:	4293      	cmp	r3, r2
 800f32e:	dd25      	ble.n	800f37c <__ieee754_pow+0x7e0>
 800f330:	4a83      	ldr	r2, [pc, #524]	; (800f540 <__ieee754_pow+0x9a4>)
 800f332:	151b      	asrs	r3, r3, #20
 800f334:	189b      	adds	r3, r3, r2
 800f336:	2280      	movs	r2, #128	; 0x80
 800f338:	0352      	lsls	r2, r2, #13
 800f33a:	4694      	mov	ip, r2
 800f33c:	411a      	asrs	r2, r3
 800f33e:	1914      	adds	r4, r2, r4
 800f340:	4b80      	ldr	r3, [pc, #512]	; (800f544 <__ieee754_pow+0x9a8>)
 800f342:	0060      	lsls	r0, r4, #1
 800f344:	4d80      	ldr	r5, [pc, #512]	; (800f548 <__ieee754_pow+0x9ac>)
 800f346:	0d40      	lsrs	r0, r0, #21
 800f348:	18c0      	adds	r0, r0, r3
 800f34a:	4105      	asrs	r5, r0
 800f34c:	0021      	movs	r1, r4
 800f34e:	43a9      	bics	r1, r5
 800f350:	000b      	movs	r3, r1
 800f352:	4661      	mov	r1, ip
 800f354:	0324      	lsls	r4, r4, #12
 800f356:	0b24      	lsrs	r4, r4, #12
 800f358:	4321      	orrs	r1, r4
 800f35a:	2414      	movs	r4, #20
 800f35c:	1a20      	subs	r0, r4, r0
 800f35e:	4101      	asrs	r1, r0
 800f360:	9102      	str	r1, [sp, #8]
 800f362:	9908      	ldr	r1, [sp, #32]
 800f364:	2200      	movs	r2, #0
 800f366:	2900      	cmp	r1, #0
 800f368:	da02      	bge.n	800f370 <__ieee754_pow+0x7d4>
 800f36a:	9902      	ldr	r1, [sp, #8]
 800f36c:	4249      	negs	r1, r1
 800f36e:	9102      	str	r1, [sp, #8]
 800f370:	0030      	movs	r0, r6
 800f372:	0039      	movs	r1, r7
 800f374:	f7f2 fae4 	bl	8001940 <__aeabi_dsub>
 800f378:	9006      	str	r0, [sp, #24]
 800f37a:	9107      	str	r1, [sp, #28]
 800f37c:	9a04      	ldr	r2, [sp, #16]
 800f37e:	9b05      	ldr	r3, [sp, #20]
 800f380:	9806      	ldr	r0, [sp, #24]
 800f382:	9907      	ldr	r1, [sp, #28]
 800f384:	2600      	movs	r6, #0
 800f386:	f7f1 f8ff 	bl	8000588 <__aeabi_dadd>
 800f38a:	2200      	movs	r2, #0
 800f38c:	0030      	movs	r0, r6
 800f38e:	4b6f      	ldr	r3, [pc, #444]	; (800f54c <__ieee754_pow+0x9b0>)
 800f390:	000f      	movs	r7, r1
 800f392:	f7f2 f869 	bl	8001468 <__aeabi_dmul>
 800f396:	9a06      	ldr	r2, [sp, #24]
 800f398:	9b07      	ldr	r3, [sp, #28]
 800f39a:	9008      	str	r0, [sp, #32]
 800f39c:	9109      	str	r1, [sp, #36]	; 0x24
 800f39e:	0030      	movs	r0, r6
 800f3a0:	0039      	movs	r1, r7
 800f3a2:	f7f2 facd 	bl	8001940 <__aeabi_dsub>
 800f3a6:	0002      	movs	r2, r0
 800f3a8:	000b      	movs	r3, r1
 800f3aa:	9804      	ldr	r0, [sp, #16]
 800f3ac:	9905      	ldr	r1, [sp, #20]
 800f3ae:	f7f2 fac7 	bl	8001940 <__aeabi_dsub>
 800f3b2:	4a67      	ldr	r2, [pc, #412]	; (800f550 <__ieee754_pow+0x9b4>)
 800f3b4:	4b67      	ldr	r3, [pc, #412]	; (800f554 <__ieee754_pow+0x9b8>)
 800f3b6:	f7f2 f857 	bl	8001468 <__aeabi_dmul>
 800f3ba:	4a67      	ldr	r2, [pc, #412]	; (800f558 <__ieee754_pow+0x9bc>)
 800f3bc:	0004      	movs	r4, r0
 800f3be:	000d      	movs	r5, r1
 800f3c0:	0030      	movs	r0, r6
 800f3c2:	0039      	movs	r1, r7
 800f3c4:	4b65      	ldr	r3, [pc, #404]	; (800f55c <__ieee754_pow+0x9c0>)
 800f3c6:	f7f2 f84f 	bl	8001468 <__aeabi_dmul>
 800f3ca:	0002      	movs	r2, r0
 800f3cc:	000b      	movs	r3, r1
 800f3ce:	0020      	movs	r0, r4
 800f3d0:	0029      	movs	r1, r5
 800f3d2:	f7f1 f8d9 	bl	8000588 <__aeabi_dadd>
 800f3d6:	0004      	movs	r4, r0
 800f3d8:	000d      	movs	r5, r1
 800f3da:	0002      	movs	r2, r0
 800f3dc:	000b      	movs	r3, r1
 800f3de:	9808      	ldr	r0, [sp, #32]
 800f3e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f3e2:	f7f1 f8d1 	bl	8000588 <__aeabi_dadd>
 800f3e6:	9a08      	ldr	r2, [sp, #32]
 800f3e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3ea:	0006      	movs	r6, r0
 800f3ec:	000f      	movs	r7, r1
 800f3ee:	f7f2 faa7 	bl	8001940 <__aeabi_dsub>
 800f3f2:	0002      	movs	r2, r0
 800f3f4:	000b      	movs	r3, r1
 800f3f6:	0020      	movs	r0, r4
 800f3f8:	0029      	movs	r1, r5
 800f3fa:	f7f2 faa1 	bl	8001940 <__aeabi_dsub>
 800f3fe:	0032      	movs	r2, r6
 800f400:	9004      	str	r0, [sp, #16]
 800f402:	9105      	str	r1, [sp, #20]
 800f404:	003b      	movs	r3, r7
 800f406:	0030      	movs	r0, r6
 800f408:	0039      	movs	r1, r7
 800f40a:	f7f2 f82d 	bl	8001468 <__aeabi_dmul>
 800f40e:	0004      	movs	r4, r0
 800f410:	000d      	movs	r5, r1
 800f412:	4a53      	ldr	r2, [pc, #332]	; (800f560 <__ieee754_pow+0x9c4>)
 800f414:	4b53      	ldr	r3, [pc, #332]	; (800f564 <__ieee754_pow+0x9c8>)
 800f416:	f7f2 f827 	bl	8001468 <__aeabi_dmul>
 800f41a:	4a53      	ldr	r2, [pc, #332]	; (800f568 <__ieee754_pow+0x9cc>)
 800f41c:	4b53      	ldr	r3, [pc, #332]	; (800f56c <__ieee754_pow+0x9d0>)
 800f41e:	f7f2 fa8f 	bl	8001940 <__aeabi_dsub>
 800f422:	0022      	movs	r2, r4
 800f424:	002b      	movs	r3, r5
 800f426:	f7f2 f81f 	bl	8001468 <__aeabi_dmul>
 800f42a:	4a51      	ldr	r2, [pc, #324]	; (800f570 <__ieee754_pow+0x9d4>)
 800f42c:	4b51      	ldr	r3, [pc, #324]	; (800f574 <__ieee754_pow+0x9d8>)
 800f42e:	f7f1 f8ab 	bl	8000588 <__aeabi_dadd>
 800f432:	0022      	movs	r2, r4
 800f434:	002b      	movs	r3, r5
 800f436:	f7f2 f817 	bl	8001468 <__aeabi_dmul>
 800f43a:	4a4f      	ldr	r2, [pc, #316]	; (800f578 <__ieee754_pow+0x9dc>)
 800f43c:	4b4f      	ldr	r3, [pc, #316]	; (800f57c <__ieee754_pow+0x9e0>)
 800f43e:	f7f2 fa7f 	bl	8001940 <__aeabi_dsub>
 800f442:	0022      	movs	r2, r4
 800f444:	002b      	movs	r3, r5
 800f446:	f7f2 f80f 	bl	8001468 <__aeabi_dmul>
 800f44a:	4a4d      	ldr	r2, [pc, #308]	; (800f580 <__ieee754_pow+0x9e4>)
 800f44c:	4b4d      	ldr	r3, [pc, #308]	; (800f584 <__ieee754_pow+0x9e8>)
 800f44e:	f7f1 f89b 	bl	8000588 <__aeabi_dadd>
 800f452:	0022      	movs	r2, r4
 800f454:	002b      	movs	r3, r5
 800f456:	f7f2 f807 	bl	8001468 <__aeabi_dmul>
 800f45a:	0002      	movs	r2, r0
 800f45c:	000b      	movs	r3, r1
 800f45e:	0030      	movs	r0, r6
 800f460:	0039      	movs	r1, r7
 800f462:	f7f2 fa6d 	bl	8001940 <__aeabi_dsub>
 800f466:	0004      	movs	r4, r0
 800f468:	000d      	movs	r5, r1
 800f46a:	0002      	movs	r2, r0
 800f46c:	000b      	movs	r3, r1
 800f46e:	0030      	movs	r0, r6
 800f470:	0039      	movs	r1, r7
 800f472:	f7f1 fff9 	bl	8001468 <__aeabi_dmul>
 800f476:	2380      	movs	r3, #128	; 0x80
 800f478:	9006      	str	r0, [sp, #24]
 800f47a:	9107      	str	r1, [sp, #28]
 800f47c:	2200      	movs	r2, #0
 800f47e:	0020      	movs	r0, r4
 800f480:	0029      	movs	r1, r5
 800f482:	05db      	lsls	r3, r3, #23
 800f484:	f7f2 fa5c 	bl	8001940 <__aeabi_dsub>
 800f488:	0002      	movs	r2, r0
 800f48a:	000b      	movs	r3, r1
 800f48c:	9806      	ldr	r0, [sp, #24]
 800f48e:	9907      	ldr	r1, [sp, #28]
 800f490:	f7f1 fbe4 	bl	8000c5c <__aeabi_ddiv>
 800f494:	9a04      	ldr	r2, [sp, #16]
 800f496:	9b05      	ldr	r3, [sp, #20]
 800f498:	0004      	movs	r4, r0
 800f49a:	000d      	movs	r5, r1
 800f49c:	0030      	movs	r0, r6
 800f49e:	0039      	movs	r1, r7
 800f4a0:	f7f1 ffe2 	bl	8001468 <__aeabi_dmul>
 800f4a4:	9a04      	ldr	r2, [sp, #16]
 800f4a6:	9b05      	ldr	r3, [sp, #20]
 800f4a8:	f7f1 f86e 	bl	8000588 <__aeabi_dadd>
 800f4ac:	0002      	movs	r2, r0
 800f4ae:	000b      	movs	r3, r1
 800f4b0:	0020      	movs	r0, r4
 800f4b2:	0029      	movs	r1, r5
 800f4b4:	f7f2 fa44 	bl	8001940 <__aeabi_dsub>
 800f4b8:	0032      	movs	r2, r6
 800f4ba:	003b      	movs	r3, r7
 800f4bc:	f7f2 fa40 	bl	8001940 <__aeabi_dsub>
 800f4c0:	0002      	movs	r2, r0
 800f4c2:	000b      	movs	r3, r1
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	4930      	ldr	r1, [pc, #192]	; (800f588 <__ieee754_pow+0x9ec>)
 800f4c8:	f7f2 fa3a 	bl	8001940 <__aeabi_dsub>
 800f4cc:	9b02      	ldr	r3, [sp, #8]
 800f4ce:	051b      	lsls	r3, r3, #20
 800f4d0:	185b      	adds	r3, r3, r1
 800f4d2:	151a      	asrs	r2, r3, #20
 800f4d4:	2a00      	cmp	r2, #0
 800f4d6:	dc26      	bgt.n	800f526 <__ieee754_pow+0x98a>
 800f4d8:	9a02      	ldr	r2, [sp, #8]
 800f4da:	f001 f8ff 	bl	80106dc <scalbn>
 800f4de:	9a00      	ldr	r2, [sp, #0]
 800f4e0:	9b01      	ldr	r3, [sp, #4]
 800f4e2:	f7ff fc2d 	bl	800ed40 <__ieee754_pow+0x1a4>
 800f4e6:	4a29      	ldr	r2, [pc, #164]	; (800f58c <__ieee754_pow+0x9f0>)
 800f4e8:	004b      	lsls	r3, r1, #1
 800f4ea:	085b      	lsrs	r3, r3, #1
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	dc00      	bgt.n	800f4f2 <__ieee754_pow+0x956>
 800f4f0:	e717      	b.n	800f322 <__ieee754_pow+0x786>
 800f4f2:	4b27      	ldr	r3, [pc, #156]	; (800f590 <__ieee754_pow+0x9f4>)
 800f4f4:	18cb      	adds	r3, r1, r3
 800f4f6:	4303      	orrs	r3, r0
 800f4f8:	d009      	beq.n	800f50e <__ieee754_pow+0x972>
 800f4fa:	9800      	ldr	r0, [sp, #0]
 800f4fc:	9901      	ldr	r1, [sp, #4]
 800f4fe:	4a25      	ldr	r2, [pc, #148]	; (800f594 <__ieee754_pow+0x9f8>)
 800f500:	4b25      	ldr	r3, [pc, #148]	; (800f598 <__ieee754_pow+0x9fc>)
 800f502:	f7f1 ffb1 	bl	8001468 <__aeabi_dmul>
 800f506:	4a23      	ldr	r2, [pc, #140]	; (800f594 <__ieee754_pow+0x9f8>)
 800f508:	4b23      	ldr	r3, [pc, #140]	; (800f598 <__ieee754_pow+0x9fc>)
 800f50a:	f7ff fc19 	bl	800ed40 <__ieee754_pow+0x1a4>
 800f50e:	0032      	movs	r2, r6
 800f510:	003b      	movs	r3, r7
 800f512:	f7f2 fa15 	bl	8001940 <__aeabi_dsub>
 800f516:	9a04      	ldr	r2, [sp, #16]
 800f518:	9b05      	ldr	r3, [sp, #20]
 800f51a:	f7f0 ffbb 	bl	8000494 <__aeabi_dcmpge>
 800f51e:	2800      	cmp	r0, #0
 800f520:	d100      	bne.n	800f524 <__ieee754_pow+0x988>
 800f522:	e6fe      	b.n	800f322 <__ieee754_pow+0x786>
 800f524:	e7e9      	b.n	800f4fa <__ieee754_pow+0x95e>
 800f526:	0019      	movs	r1, r3
 800f528:	e7d9      	b.n	800f4de <__ieee754_pow+0x942>
 800f52a:	2300      	movs	r3, #0
 800f52c:	4c16      	ldr	r4, [pc, #88]	; (800f588 <__ieee754_pow+0x9ec>)
 800f52e:	f7ff fbec 	bl	800ed0a <__ieee754_pow+0x16e>
 800f532:	46c0      	nop			; (mov r8, r8)
 800f534:	652b82fe 	.word	0x652b82fe
 800f538:	3c971547 	.word	0x3c971547
 800f53c:	3fe00000 	.word	0x3fe00000
 800f540:	fffffc02 	.word	0xfffffc02
 800f544:	fffffc01 	.word	0xfffffc01
 800f548:	000fffff 	.word	0x000fffff
 800f54c:	3fe62e43 	.word	0x3fe62e43
 800f550:	fefa39ef 	.word	0xfefa39ef
 800f554:	3fe62e42 	.word	0x3fe62e42
 800f558:	0ca86c39 	.word	0x0ca86c39
 800f55c:	be205c61 	.word	0xbe205c61
 800f560:	72bea4d0 	.word	0x72bea4d0
 800f564:	3e663769 	.word	0x3e663769
 800f568:	c5d26bf1 	.word	0xc5d26bf1
 800f56c:	3ebbbd41 	.word	0x3ebbbd41
 800f570:	af25de2c 	.word	0xaf25de2c
 800f574:	3f11566a 	.word	0x3f11566a
 800f578:	16bebd93 	.word	0x16bebd93
 800f57c:	3f66c16c 	.word	0x3f66c16c
 800f580:	5555553e 	.word	0x5555553e
 800f584:	3fc55555 	.word	0x3fc55555
 800f588:	3ff00000 	.word	0x3ff00000
 800f58c:	4090cbff 	.word	0x4090cbff
 800f590:	3f6f3400 	.word	0x3f6f3400
 800f594:	c2f8f359 	.word	0xc2f8f359
 800f598:	01a56e1f 	.word	0x01a56e1f

0800f59c <__ieee754_rem_pio2>:
 800f59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f59e:	004b      	lsls	r3, r1, #1
 800f5a0:	b091      	sub	sp, #68	; 0x44
 800f5a2:	085b      	lsrs	r3, r3, #1
 800f5a4:	9302      	str	r3, [sp, #8]
 800f5a6:	0017      	movs	r7, r2
 800f5a8:	4bb6      	ldr	r3, [pc, #728]	; (800f884 <__ieee754_rem_pio2+0x2e8>)
 800f5aa:	9a02      	ldr	r2, [sp, #8]
 800f5ac:	0004      	movs	r4, r0
 800f5ae:	000d      	movs	r5, r1
 800f5b0:	9109      	str	r1, [sp, #36]	; 0x24
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	dc09      	bgt.n	800f5ca <__ieee754_rem_pio2+0x2e>
 800f5b6:	0002      	movs	r2, r0
 800f5b8:	000b      	movs	r3, r1
 800f5ba:	603a      	str	r2, [r7, #0]
 800f5bc:	607b      	str	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	60ba      	str	r2, [r7, #8]
 800f5c4:	60fb      	str	r3, [r7, #12]
 800f5c6:	2600      	movs	r6, #0
 800f5c8:	e025      	b.n	800f616 <__ieee754_rem_pio2+0x7a>
 800f5ca:	4baf      	ldr	r3, [pc, #700]	; (800f888 <__ieee754_rem_pio2+0x2ec>)
 800f5cc:	9a02      	ldr	r2, [sp, #8]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	dd00      	ble.n	800f5d4 <__ieee754_rem_pio2+0x38>
 800f5d2:	e06e      	b.n	800f6b2 <__ieee754_rem_pio2+0x116>
 800f5d4:	4ead      	ldr	r6, [pc, #692]	; (800f88c <__ieee754_rem_pio2+0x2f0>)
 800f5d6:	4aae      	ldr	r2, [pc, #696]	; (800f890 <__ieee754_rem_pio2+0x2f4>)
 800f5d8:	2d00      	cmp	r5, #0
 800f5da:	dd35      	ble.n	800f648 <__ieee754_rem_pio2+0xac>
 800f5dc:	0020      	movs	r0, r4
 800f5de:	0029      	movs	r1, r5
 800f5e0:	4baa      	ldr	r3, [pc, #680]	; (800f88c <__ieee754_rem_pio2+0x2f0>)
 800f5e2:	f7f2 f9ad 	bl	8001940 <__aeabi_dsub>
 800f5e6:	9b02      	ldr	r3, [sp, #8]
 800f5e8:	0004      	movs	r4, r0
 800f5ea:	000d      	movs	r5, r1
 800f5ec:	42b3      	cmp	r3, r6
 800f5ee:	d015      	beq.n	800f61c <__ieee754_rem_pio2+0x80>
 800f5f0:	4aa8      	ldr	r2, [pc, #672]	; (800f894 <__ieee754_rem_pio2+0x2f8>)
 800f5f2:	4ba9      	ldr	r3, [pc, #676]	; (800f898 <__ieee754_rem_pio2+0x2fc>)
 800f5f4:	f7f2 f9a4 	bl	8001940 <__aeabi_dsub>
 800f5f8:	0002      	movs	r2, r0
 800f5fa:	000b      	movs	r3, r1
 800f5fc:	0020      	movs	r0, r4
 800f5fe:	603a      	str	r2, [r7, #0]
 800f600:	607b      	str	r3, [r7, #4]
 800f602:	0029      	movs	r1, r5
 800f604:	f7f2 f99c 	bl	8001940 <__aeabi_dsub>
 800f608:	4aa2      	ldr	r2, [pc, #648]	; (800f894 <__ieee754_rem_pio2+0x2f8>)
 800f60a:	4ba3      	ldr	r3, [pc, #652]	; (800f898 <__ieee754_rem_pio2+0x2fc>)
 800f60c:	f7f2 f998 	bl	8001940 <__aeabi_dsub>
 800f610:	2601      	movs	r6, #1
 800f612:	60b8      	str	r0, [r7, #8]
 800f614:	60f9      	str	r1, [r7, #12]
 800f616:	0030      	movs	r0, r6
 800f618:	b011      	add	sp, #68	; 0x44
 800f61a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f61c:	22d3      	movs	r2, #211	; 0xd3
 800f61e:	4b9e      	ldr	r3, [pc, #632]	; (800f898 <__ieee754_rem_pio2+0x2fc>)
 800f620:	0552      	lsls	r2, r2, #21
 800f622:	f7f2 f98d 	bl	8001940 <__aeabi_dsub>
 800f626:	4a9d      	ldr	r2, [pc, #628]	; (800f89c <__ieee754_rem_pio2+0x300>)
 800f628:	4b9d      	ldr	r3, [pc, #628]	; (800f8a0 <__ieee754_rem_pio2+0x304>)
 800f62a:	0004      	movs	r4, r0
 800f62c:	000d      	movs	r5, r1
 800f62e:	f7f2 f987 	bl	8001940 <__aeabi_dsub>
 800f632:	0002      	movs	r2, r0
 800f634:	000b      	movs	r3, r1
 800f636:	0020      	movs	r0, r4
 800f638:	603a      	str	r2, [r7, #0]
 800f63a:	607b      	str	r3, [r7, #4]
 800f63c:	0029      	movs	r1, r5
 800f63e:	f7f2 f97f 	bl	8001940 <__aeabi_dsub>
 800f642:	4a96      	ldr	r2, [pc, #600]	; (800f89c <__ieee754_rem_pio2+0x300>)
 800f644:	4b96      	ldr	r3, [pc, #600]	; (800f8a0 <__ieee754_rem_pio2+0x304>)
 800f646:	e7e1      	b.n	800f60c <__ieee754_rem_pio2+0x70>
 800f648:	0020      	movs	r0, r4
 800f64a:	0029      	movs	r1, r5
 800f64c:	4b8f      	ldr	r3, [pc, #572]	; (800f88c <__ieee754_rem_pio2+0x2f0>)
 800f64e:	f7f0 ff9b 	bl	8000588 <__aeabi_dadd>
 800f652:	9b02      	ldr	r3, [sp, #8]
 800f654:	0004      	movs	r4, r0
 800f656:	000d      	movs	r5, r1
 800f658:	42b3      	cmp	r3, r6
 800f65a:	d014      	beq.n	800f686 <__ieee754_rem_pio2+0xea>
 800f65c:	4a8d      	ldr	r2, [pc, #564]	; (800f894 <__ieee754_rem_pio2+0x2f8>)
 800f65e:	4b8e      	ldr	r3, [pc, #568]	; (800f898 <__ieee754_rem_pio2+0x2fc>)
 800f660:	f7f0 ff92 	bl	8000588 <__aeabi_dadd>
 800f664:	0002      	movs	r2, r0
 800f666:	000b      	movs	r3, r1
 800f668:	0020      	movs	r0, r4
 800f66a:	603a      	str	r2, [r7, #0]
 800f66c:	607b      	str	r3, [r7, #4]
 800f66e:	0029      	movs	r1, r5
 800f670:	f7f2 f966 	bl	8001940 <__aeabi_dsub>
 800f674:	4a87      	ldr	r2, [pc, #540]	; (800f894 <__ieee754_rem_pio2+0x2f8>)
 800f676:	4b88      	ldr	r3, [pc, #544]	; (800f898 <__ieee754_rem_pio2+0x2fc>)
 800f678:	f7f0 ff86 	bl	8000588 <__aeabi_dadd>
 800f67c:	2601      	movs	r6, #1
 800f67e:	60b8      	str	r0, [r7, #8]
 800f680:	60f9      	str	r1, [r7, #12]
 800f682:	4276      	negs	r6, r6
 800f684:	e7c7      	b.n	800f616 <__ieee754_rem_pio2+0x7a>
 800f686:	22d3      	movs	r2, #211	; 0xd3
 800f688:	4b83      	ldr	r3, [pc, #524]	; (800f898 <__ieee754_rem_pio2+0x2fc>)
 800f68a:	0552      	lsls	r2, r2, #21
 800f68c:	f7f0 ff7c 	bl	8000588 <__aeabi_dadd>
 800f690:	4a82      	ldr	r2, [pc, #520]	; (800f89c <__ieee754_rem_pio2+0x300>)
 800f692:	4b83      	ldr	r3, [pc, #524]	; (800f8a0 <__ieee754_rem_pio2+0x304>)
 800f694:	0004      	movs	r4, r0
 800f696:	000d      	movs	r5, r1
 800f698:	f7f0 ff76 	bl	8000588 <__aeabi_dadd>
 800f69c:	0002      	movs	r2, r0
 800f69e:	000b      	movs	r3, r1
 800f6a0:	0020      	movs	r0, r4
 800f6a2:	603a      	str	r2, [r7, #0]
 800f6a4:	607b      	str	r3, [r7, #4]
 800f6a6:	0029      	movs	r1, r5
 800f6a8:	f7f2 f94a 	bl	8001940 <__aeabi_dsub>
 800f6ac:	4a7b      	ldr	r2, [pc, #492]	; (800f89c <__ieee754_rem_pio2+0x300>)
 800f6ae:	4b7c      	ldr	r3, [pc, #496]	; (800f8a0 <__ieee754_rem_pio2+0x304>)
 800f6b0:	e7e2      	b.n	800f678 <__ieee754_rem_pio2+0xdc>
 800f6b2:	4b7c      	ldr	r3, [pc, #496]	; (800f8a4 <__ieee754_rem_pio2+0x308>)
 800f6b4:	9a02      	ldr	r2, [sp, #8]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	dd00      	ble.n	800f6bc <__ieee754_rem_pio2+0x120>
 800f6ba:	e0d3      	b.n	800f864 <__ieee754_rem_pio2+0x2c8>
 800f6bc:	0020      	movs	r0, r4
 800f6be:	0029      	movs	r1, r5
 800f6c0:	f000 feee 	bl	80104a0 <fabs>
 800f6c4:	4a78      	ldr	r2, [pc, #480]	; (800f8a8 <__ieee754_rem_pio2+0x30c>)
 800f6c6:	4b79      	ldr	r3, [pc, #484]	; (800f8ac <__ieee754_rem_pio2+0x310>)
 800f6c8:	0004      	movs	r4, r0
 800f6ca:	000d      	movs	r5, r1
 800f6cc:	f7f1 fecc 	bl	8001468 <__aeabi_dmul>
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	4b77      	ldr	r3, [pc, #476]	; (800f8b0 <__ieee754_rem_pio2+0x314>)
 800f6d4:	f7f0 ff58 	bl	8000588 <__aeabi_dadd>
 800f6d8:	f7f2 fce2 	bl	80020a0 <__aeabi_d2iz>
 800f6dc:	0006      	movs	r6, r0
 800f6de:	f7f2 fd15 	bl	800210c <__aeabi_i2d>
 800f6e2:	4a6b      	ldr	r2, [pc, #428]	; (800f890 <__ieee754_rem_pio2+0x2f4>)
 800f6e4:	4b69      	ldr	r3, [pc, #420]	; (800f88c <__ieee754_rem_pio2+0x2f0>)
 800f6e6:	9006      	str	r0, [sp, #24]
 800f6e8:	9107      	str	r1, [sp, #28]
 800f6ea:	f7f1 febd 	bl	8001468 <__aeabi_dmul>
 800f6ee:	0002      	movs	r2, r0
 800f6f0:	000b      	movs	r3, r1
 800f6f2:	0020      	movs	r0, r4
 800f6f4:	0029      	movs	r1, r5
 800f6f6:	f7f2 f923 	bl	8001940 <__aeabi_dsub>
 800f6fa:	4a66      	ldr	r2, [pc, #408]	; (800f894 <__ieee754_rem_pio2+0x2f8>)
 800f6fc:	9004      	str	r0, [sp, #16]
 800f6fe:	9105      	str	r1, [sp, #20]
 800f700:	9806      	ldr	r0, [sp, #24]
 800f702:	9907      	ldr	r1, [sp, #28]
 800f704:	4b64      	ldr	r3, [pc, #400]	; (800f898 <__ieee754_rem_pio2+0x2fc>)
 800f706:	f7f1 feaf 	bl	8001468 <__aeabi_dmul>
 800f70a:	0004      	movs	r4, r0
 800f70c:	000d      	movs	r5, r1
 800f70e:	2e1f      	cmp	r6, #31
 800f710:	dc0f      	bgt.n	800f732 <__ieee754_rem_pio2+0x196>
 800f712:	4a68      	ldr	r2, [pc, #416]	; (800f8b4 <__ieee754_rem_pio2+0x318>)
 800f714:	1e73      	subs	r3, r6, #1
 800f716:	009b      	lsls	r3, r3, #2
 800f718:	589b      	ldr	r3, [r3, r2]
 800f71a:	9a02      	ldr	r2, [sp, #8]
 800f71c:	4293      	cmp	r3, r2
 800f71e:	d008      	beq.n	800f732 <__ieee754_rem_pio2+0x196>
 800f720:	9804      	ldr	r0, [sp, #16]
 800f722:	9905      	ldr	r1, [sp, #20]
 800f724:	0022      	movs	r2, r4
 800f726:	002b      	movs	r3, r5
 800f728:	f7f2 f90a 	bl	8001940 <__aeabi_dsub>
 800f72c:	6038      	str	r0, [r7, #0]
 800f72e:	6079      	str	r1, [r7, #4]
 800f730:	e012      	b.n	800f758 <__ieee754_rem_pio2+0x1bc>
 800f732:	0022      	movs	r2, r4
 800f734:	9804      	ldr	r0, [sp, #16]
 800f736:	9905      	ldr	r1, [sp, #20]
 800f738:	002b      	movs	r3, r5
 800f73a:	f7f2 f901 	bl	8001940 <__aeabi_dsub>
 800f73e:	9b02      	ldr	r3, [sp, #8]
 800f740:	151b      	asrs	r3, r3, #20
 800f742:	9308      	str	r3, [sp, #32]
 800f744:	9a08      	ldr	r2, [sp, #32]
 800f746:	004b      	lsls	r3, r1, #1
 800f748:	0d5b      	lsrs	r3, r3, #21
 800f74a:	1ad3      	subs	r3, r2, r3
 800f74c:	2b10      	cmp	r3, #16
 800f74e:	dc21      	bgt.n	800f794 <__ieee754_rem_pio2+0x1f8>
 800f750:	0002      	movs	r2, r0
 800f752:	000b      	movs	r3, r1
 800f754:	603a      	str	r2, [r7, #0]
 800f756:	607b      	str	r3, [r7, #4]
 800f758:	9804      	ldr	r0, [sp, #16]
 800f75a:	9905      	ldr	r1, [sp, #20]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	683a      	ldr	r2, [r7, #0]
 800f760:	9302      	str	r3, [sp, #8]
 800f762:	9b02      	ldr	r3, [sp, #8]
 800f764:	f7f2 f8ec 	bl	8001940 <__aeabi_dsub>
 800f768:	0022      	movs	r2, r4
 800f76a:	002b      	movs	r3, r5
 800f76c:	f7f2 f8e8 	bl	8001940 <__aeabi_dsub>
 800f770:	000b      	movs	r3, r1
 800f772:	0002      	movs	r2, r0
 800f774:	60ba      	str	r2, [r7, #8]
 800f776:	60fb      	str	r3, [r7, #12]
 800f778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	db00      	blt.n	800f780 <__ieee754_rem_pio2+0x1e4>
 800f77e:	e74a      	b.n	800f616 <__ieee754_rem_pio2+0x7a>
 800f780:	2280      	movs	r2, #128	; 0x80
 800f782:	0612      	lsls	r2, r2, #24
 800f784:	4694      	mov	ip, r2
 800f786:	9b02      	ldr	r3, [sp, #8]
 800f788:	1889      	adds	r1, r1, r2
 800f78a:	4463      	add	r3, ip
 800f78c:	607b      	str	r3, [r7, #4]
 800f78e:	60b8      	str	r0, [r7, #8]
 800f790:	60f9      	str	r1, [r7, #12]
 800f792:	e776      	b.n	800f682 <__ieee754_rem_pio2+0xe6>
 800f794:	22d3      	movs	r2, #211	; 0xd3
 800f796:	9806      	ldr	r0, [sp, #24]
 800f798:	9907      	ldr	r1, [sp, #28]
 800f79a:	4b3f      	ldr	r3, [pc, #252]	; (800f898 <__ieee754_rem_pio2+0x2fc>)
 800f79c:	0552      	lsls	r2, r2, #21
 800f79e:	f7f1 fe63 	bl	8001468 <__aeabi_dmul>
 800f7a2:	0004      	movs	r4, r0
 800f7a4:	000d      	movs	r5, r1
 800f7a6:	0002      	movs	r2, r0
 800f7a8:	000b      	movs	r3, r1
 800f7aa:	9804      	ldr	r0, [sp, #16]
 800f7ac:	9905      	ldr	r1, [sp, #20]
 800f7ae:	f7f2 f8c7 	bl	8001940 <__aeabi_dsub>
 800f7b2:	0002      	movs	r2, r0
 800f7b4:	000b      	movs	r3, r1
 800f7b6:	9002      	str	r0, [sp, #8]
 800f7b8:	9103      	str	r1, [sp, #12]
 800f7ba:	9804      	ldr	r0, [sp, #16]
 800f7bc:	9905      	ldr	r1, [sp, #20]
 800f7be:	f7f2 f8bf 	bl	8001940 <__aeabi_dsub>
 800f7c2:	0022      	movs	r2, r4
 800f7c4:	002b      	movs	r3, r5
 800f7c6:	f7f2 f8bb 	bl	8001940 <__aeabi_dsub>
 800f7ca:	0004      	movs	r4, r0
 800f7cc:	000d      	movs	r5, r1
 800f7ce:	9806      	ldr	r0, [sp, #24]
 800f7d0:	9907      	ldr	r1, [sp, #28]
 800f7d2:	4a32      	ldr	r2, [pc, #200]	; (800f89c <__ieee754_rem_pio2+0x300>)
 800f7d4:	4b32      	ldr	r3, [pc, #200]	; (800f8a0 <__ieee754_rem_pio2+0x304>)
 800f7d6:	f7f1 fe47 	bl	8001468 <__aeabi_dmul>
 800f7da:	0022      	movs	r2, r4
 800f7dc:	002b      	movs	r3, r5
 800f7de:	f7f2 f8af 	bl	8001940 <__aeabi_dsub>
 800f7e2:	0002      	movs	r2, r0
 800f7e4:	000b      	movs	r3, r1
 800f7e6:	0004      	movs	r4, r0
 800f7e8:	000d      	movs	r5, r1
 800f7ea:	9802      	ldr	r0, [sp, #8]
 800f7ec:	9903      	ldr	r1, [sp, #12]
 800f7ee:	f7f2 f8a7 	bl	8001940 <__aeabi_dsub>
 800f7f2:	9a08      	ldr	r2, [sp, #32]
 800f7f4:	004b      	lsls	r3, r1, #1
 800f7f6:	0d5b      	lsrs	r3, r3, #21
 800f7f8:	1ad3      	subs	r3, r2, r3
 800f7fa:	2b31      	cmp	r3, #49	; 0x31
 800f7fc:	dc08      	bgt.n	800f810 <__ieee754_rem_pio2+0x274>
 800f7fe:	0002      	movs	r2, r0
 800f800:	000b      	movs	r3, r1
 800f802:	603a      	str	r2, [r7, #0]
 800f804:	607b      	str	r3, [r7, #4]
 800f806:	9a02      	ldr	r2, [sp, #8]
 800f808:	9b03      	ldr	r3, [sp, #12]
 800f80a:	9204      	str	r2, [sp, #16]
 800f80c:	9305      	str	r3, [sp, #20]
 800f80e:	e7a3      	b.n	800f758 <__ieee754_rem_pio2+0x1bc>
 800f810:	22b8      	movs	r2, #184	; 0xb8
 800f812:	9806      	ldr	r0, [sp, #24]
 800f814:	9907      	ldr	r1, [sp, #28]
 800f816:	4b22      	ldr	r3, [pc, #136]	; (800f8a0 <__ieee754_rem_pio2+0x304>)
 800f818:	0592      	lsls	r2, r2, #22
 800f81a:	f7f1 fe25 	bl	8001468 <__aeabi_dmul>
 800f81e:	0004      	movs	r4, r0
 800f820:	000d      	movs	r5, r1
 800f822:	0002      	movs	r2, r0
 800f824:	000b      	movs	r3, r1
 800f826:	9802      	ldr	r0, [sp, #8]
 800f828:	9903      	ldr	r1, [sp, #12]
 800f82a:	f7f2 f889 	bl	8001940 <__aeabi_dsub>
 800f82e:	0002      	movs	r2, r0
 800f830:	000b      	movs	r3, r1
 800f832:	9004      	str	r0, [sp, #16]
 800f834:	9105      	str	r1, [sp, #20]
 800f836:	9802      	ldr	r0, [sp, #8]
 800f838:	9903      	ldr	r1, [sp, #12]
 800f83a:	f7f2 f881 	bl	8001940 <__aeabi_dsub>
 800f83e:	0022      	movs	r2, r4
 800f840:	002b      	movs	r3, r5
 800f842:	f7f2 f87d 	bl	8001940 <__aeabi_dsub>
 800f846:	0004      	movs	r4, r0
 800f848:	000d      	movs	r5, r1
 800f84a:	9806      	ldr	r0, [sp, #24]
 800f84c:	9907      	ldr	r1, [sp, #28]
 800f84e:	4a1a      	ldr	r2, [pc, #104]	; (800f8b8 <__ieee754_rem_pio2+0x31c>)
 800f850:	4b1a      	ldr	r3, [pc, #104]	; (800f8bc <__ieee754_rem_pio2+0x320>)
 800f852:	f7f1 fe09 	bl	8001468 <__aeabi_dmul>
 800f856:	0022      	movs	r2, r4
 800f858:	002b      	movs	r3, r5
 800f85a:	f7f2 f871 	bl	8001940 <__aeabi_dsub>
 800f85e:	0004      	movs	r4, r0
 800f860:	000d      	movs	r5, r1
 800f862:	e75d      	b.n	800f720 <__ieee754_rem_pio2+0x184>
 800f864:	4b16      	ldr	r3, [pc, #88]	; (800f8c0 <__ieee754_rem_pio2+0x324>)
 800f866:	9a02      	ldr	r2, [sp, #8]
 800f868:	429a      	cmp	r2, r3
 800f86a:	dd2b      	ble.n	800f8c4 <__ieee754_rem_pio2+0x328>
 800f86c:	0022      	movs	r2, r4
 800f86e:	002b      	movs	r3, r5
 800f870:	0020      	movs	r0, r4
 800f872:	0029      	movs	r1, r5
 800f874:	f7f2 f864 	bl	8001940 <__aeabi_dsub>
 800f878:	60b8      	str	r0, [r7, #8]
 800f87a:	60f9      	str	r1, [r7, #12]
 800f87c:	6038      	str	r0, [r7, #0]
 800f87e:	6079      	str	r1, [r7, #4]
 800f880:	e6a1      	b.n	800f5c6 <__ieee754_rem_pio2+0x2a>
 800f882:	46c0      	nop			; (mov r8, r8)
 800f884:	3fe921fb 	.word	0x3fe921fb
 800f888:	4002d97b 	.word	0x4002d97b
 800f88c:	3ff921fb 	.word	0x3ff921fb
 800f890:	54400000 	.word	0x54400000
 800f894:	1a626331 	.word	0x1a626331
 800f898:	3dd0b461 	.word	0x3dd0b461
 800f89c:	2e037073 	.word	0x2e037073
 800f8a0:	3ba3198a 	.word	0x3ba3198a
 800f8a4:	413921fb 	.word	0x413921fb
 800f8a8:	6dc9c883 	.word	0x6dc9c883
 800f8ac:	3fe45f30 	.word	0x3fe45f30
 800f8b0:	3fe00000 	.word	0x3fe00000
 800f8b4:	08011150 	.word	0x08011150
 800f8b8:	252049c1 	.word	0x252049c1
 800f8bc:	397b839a 	.word	0x397b839a
 800f8c0:	7fefffff 	.word	0x7fefffff
 800f8c4:	9a02      	ldr	r2, [sp, #8]
 800f8c6:	0020      	movs	r0, r4
 800f8c8:	1516      	asrs	r6, r2, #20
 800f8ca:	4a27      	ldr	r2, [pc, #156]	; (800f968 <__ieee754_rem_pio2+0x3cc>)
 800f8cc:	18b6      	adds	r6, r6, r2
 800f8ce:	9a02      	ldr	r2, [sp, #8]
 800f8d0:	0533      	lsls	r3, r6, #20
 800f8d2:	1ad5      	subs	r5, r2, r3
 800f8d4:	0029      	movs	r1, r5
 800f8d6:	f7f2 fbe3 	bl	80020a0 <__aeabi_d2iz>
 800f8da:	f7f2 fc17 	bl	800210c <__aeabi_i2d>
 800f8de:	0002      	movs	r2, r0
 800f8e0:	000b      	movs	r3, r1
 800f8e2:	0020      	movs	r0, r4
 800f8e4:	0029      	movs	r1, r5
 800f8e6:	920a      	str	r2, [sp, #40]	; 0x28
 800f8e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f8ea:	f7f2 f829 	bl	8001940 <__aeabi_dsub>
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	4b1e      	ldr	r3, [pc, #120]	; (800f96c <__ieee754_rem_pio2+0x3d0>)
 800f8f2:	f7f1 fdb9 	bl	8001468 <__aeabi_dmul>
 800f8f6:	000d      	movs	r5, r1
 800f8f8:	0004      	movs	r4, r0
 800f8fa:	f7f2 fbd1 	bl	80020a0 <__aeabi_d2iz>
 800f8fe:	f7f2 fc05 	bl	800210c <__aeabi_i2d>
 800f902:	0002      	movs	r2, r0
 800f904:	000b      	movs	r3, r1
 800f906:	0020      	movs	r0, r4
 800f908:	0029      	movs	r1, r5
 800f90a:	920c      	str	r2, [sp, #48]	; 0x30
 800f90c:	930d      	str	r3, [sp, #52]	; 0x34
 800f90e:	f7f2 f817 	bl	8001940 <__aeabi_dsub>
 800f912:	2200      	movs	r2, #0
 800f914:	4b15      	ldr	r3, [pc, #84]	; (800f96c <__ieee754_rem_pio2+0x3d0>)
 800f916:	f7f1 fda7 	bl	8001468 <__aeabi_dmul>
 800f91a:	2503      	movs	r5, #3
 800f91c:	900e      	str	r0, [sp, #56]	; 0x38
 800f91e:	910f      	str	r1, [sp, #60]	; 0x3c
 800f920:	ac0a      	add	r4, sp, #40	; 0x28
 800f922:	2200      	movs	r2, #0
 800f924:	6920      	ldr	r0, [r4, #16]
 800f926:	6961      	ldr	r1, [r4, #20]
 800f928:	2300      	movs	r3, #0
 800f92a:	9502      	str	r5, [sp, #8]
 800f92c:	3c08      	subs	r4, #8
 800f92e:	3d01      	subs	r5, #1
 800f930:	f7f0 fd8c 	bl	800044c <__aeabi_dcmpeq>
 800f934:	2800      	cmp	r0, #0
 800f936:	d1f4      	bne.n	800f922 <__ieee754_rem_pio2+0x386>
 800f938:	4b0d      	ldr	r3, [pc, #52]	; (800f970 <__ieee754_rem_pio2+0x3d4>)
 800f93a:	0032      	movs	r2, r6
 800f93c:	9301      	str	r3, [sp, #4]
 800f93e:	2302      	movs	r3, #2
 800f940:	0039      	movs	r1, r7
 800f942:	9300      	str	r3, [sp, #0]
 800f944:	a80a      	add	r0, sp, #40	; 0x28
 800f946:	9b02      	ldr	r3, [sp, #8]
 800f948:	f000 f988 	bl	800fc5c <__kernel_rem_pio2>
 800f94c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f94e:	0006      	movs	r6, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	db00      	blt.n	800f956 <__ieee754_rem_pio2+0x3ba>
 800f954:	e65f      	b.n	800f616 <__ieee754_rem_pio2+0x7a>
 800f956:	2280      	movs	r2, #128	; 0x80
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	0612      	lsls	r2, r2, #24
 800f95c:	189b      	adds	r3, r3, r2
 800f95e:	607b      	str	r3, [r7, #4]
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	189b      	adds	r3, r3, r2
 800f964:	60fb      	str	r3, [r7, #12]
 800f966:	e68c      	b.n	800f682 <__ieee754_rem_pio2+0xe6>
 800f968:	fffffbea 	.word	0xfffffbea
 800f96c:	41700000 	.word	0x41700000
 800f970:	080111d0 	.word	0x080111d0

0800f974 <__ieee754_sqrt>:
 800f974:	4b56      	ldr	r3, [pc, #344]	; (800fad0 <__ieee754_sqrt+0x15c>)
 800f976:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f978:	0002      	movs	r2, r0
 800f97a:	0005      	movs	r5, r0
 800f97c:	0018      	movs	r0, r3
 800f97e:	000c      	movs	r4, r1
 800f980:	b085      	sub	sp, #20
 800f982:	4008      	ands	r0, r1
 800f984:	4298      	cmp	r0, r3
 800f986:	d10f      	bne.n	800f9a8 <__ieee754_sqrt+0x34>
 800f988:	000b      	movs	r3, r1
 800f98a:	0028      	movs	r0, r5
 800f98c:	f7f1 fd6c 	bl	8001468 <__aeabi_dmul>
 800f990:	0002      	movs	r2, r0
 800f992:	000b      	movs	r3, r1
 800f994:	0028      	movs	r0, r5
 800f996:	0021      	movs	r1, r4
 800f998:	f7f0 fdf6 	bl	8000588 <__aeabi_dadd>
 800f99c:	0005      	movs	r5, r0
 800f99e:	000c      	movs	r4, r1
 800f9a0:	0028      	movs	r0, r5
 800f9a2:	0021      	movs	r1, r4
 800f9a4:	b005      	add	sp, #20
 800f9a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f9a8:	2900      	cmp	r1, #0
 800f9aa:	dc10      	bgt.n	800f9ce <__ieee754_sqrt+0x5a>
 800f9ac:	004b      	lsls	r3, r1, #1
 800f9ae:	085b      	lsrs	r3, r3, #1
 800f9b0:	432b      	orrs	r3, r5
 800f9b2:	d0f5      	beq.n	800f9a0 <__ieee754_sqrt+0x2c>
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	4281      	cmp	r1, r0
 800f9b8:	d100      	bne.n	800f9bc <__ieee754_sqrt+0x48>
 800f9ba:	e080      	b.n	800fabe <__ieee754_sqrt+0x14a>
 800f9bc:	000b      	movs	r3, r1
 800f9be:	0028      	movs	r0, r5
 800f9c0:	f7f1 ffbe 	bl	8001940 <__aeabi_dsub>
 800f9c4:	0002      	movs	r2, r0
 800f9c6:	000b      	movs	r3, r1
 800f9c8:	f7f1 f948 	bl	8000c5c <__aeabi_ddiv>
 800f9cc:	e7e6      	b.n	800f99c <__ieee754_sqrt+0x28>
 800f9ce:	1508      	asrs	r0, r1, #20
 800f9d0:	d075      	beq.n	800fabe <__ieee754_sqrt+0x14a>
 800f9d2:	4b40      	ldr	r3, [pc, #256]	; (800fad4 <__ieee754_sqrt+0x160>)
 800f9d4:	0309      	lsls	r1, r1, #12
 800f9d6:	18c4      	adds	r4, r0, r3
 800f9d8:	2380      	movs	r3, #128	; 0x80
 800f9da:	0b09      	lsrs	r1, r1, #12
 800f9dc:	035b      	lsls	r3, r3, #13
 800f9de:	4319      	orrs	r1, r3
 800f9e0:	07c3      	lsls	r3, r0, #31
 800f9e2:	d403      	bmi.n	800f9ec <__ieee754_sqrt+0x78>
 800f9e4:	0fd3      	lsrs	r3, r2, #31
 800f9e6:	0049      	lsls	r1, r1, #1
 800f9e8:	18c9      	adds	r1, r1, r3
 800f9ea:	0052      	lsls	r2, r2, #1
 800f9ec:	1063      	asrs	r3, r4, #1
 800f9ee:	2400      	movs	r4, #0
 800f9f0:	0049      	lsls	r1, r1, #1
 800f9f2:	9303      	str	r3, [sp, #12]
 800f9f4:	0fd3      	lsrs	r3, r2, #31
 800f9f6:	18cb      	adds	r3, r1, r3
 800f9f8:	2180      	movs	r1, #128	; 0x80
 800f9fa:	2516      	movs	r5, #22
 800f9fc:	0020      	movs	r0, r4
 800f9fe:	0052      	lsls	r2, r2, #1
 800fa00:	0389      	lsls	r1, r1, #14
 800fa02:	1846      	adds	r6, r0, r1
 800fa04:	429e      	cmp	r6, r3
 800fa06:	dc02      	bgt.n	800fa0e <__ieee754_sqrt+0x9a>
 800fa08:	1870      	adds	r0, r6, r1
 800fa0a:	1b9b      	subs	r3, r3, r6
 800fa0c:	1864      	adds	r4, r4, r1
 800fa0e:	0fd6      	lsrs	r6, r2, #31
 800fa10:	005b      	lsls	r3, r3, #1
 800fa12:	3d01      	subs	r5, #1
 800fa14:	18f3      	adds	r3, r6, r3
 800fa16:	0052      	lsls	r2, r2, #1
 800fa18:	0849      	lsrs	r1, r1, #1
 800fa1a:	2d00      	cmp	r5, #0
 800fa1c:	d1f1      	bne.n	800fa02 <__ieee754_sqrt+0x8e>
 800fa1e:	2620      	movs	r6, #32
 800fa20:	2780      	movs	r7, #128	; 0x80
 800fa22:	0029      	movs	r1, r5
 800fa24:	9601      	str	r6, [sp, #4]
 800fa26:	063f      	lsls	r7, r7, #24
 800fa28:	197e      	adds	r6, r7, r5
 800fa2a:	46b4      	mov	ip, r6
 800fa2c:	4283      	cmp	r3, r0
 800fa2e:	dc02      	bgt.n	800fa36 <__ieee754_sqrt+0xc2>
 800fa30:	d114      	bne.n	800fa5c <__ieee754_sqrt+0xe8>
 800fa32:	4296      	cmp	r6, r2
 800fa34:	d812      	bhi.n	800fa5c <__ieee754_sqrt+0xe8>
 800fa36:	4665      	mov	r5, ip
 800fa38:	4666      	mov	r6, ip
 800fa3a:	19ed      	adds	r5, r5, r7
 800fa3c:	9002      	str	r0, [sp, #8]
 800fa3e:	2e00      	cmp	r6, #0
 800fa40:	da03      	bge.n	800fa4a <__ieee754_sqrt+0xd6>
 800fa42:	43ee      	mvns	r6, r5
 800fa44:	0ff6      	lsrs	r6, r6, #31
 800fa46:	1986      	adds	r6, r0, r6
 800fa48:	9602      	str	r6, [sp, #8]
 800fa4a:	1a1b      	subs	r3, r3, r0
 800fa4c:	4562      	cmp	r2, ip
 800fa4e:	4180      	sbcs	r0, r0
 800fa50:	4240      	negs	r0, r0
 800fa52:	1a1b      	subs	r3, r3, r0
 800fa54:	4660      	mov	r0, ip
 800fa56:	1a12      	subs	r2, r2, r0
 800fa58:	9802      	ldr	r0, [sp, #8]
 800fa5a:	19c9      	adds	r1, r1, r7
 800fa5c:	0fd6      	lsrs	r6, r2, #31
 800fa5e:	005b      	lsls	r3, r3, #1
 800fa60:	18f3      	adds	r3, r6, r3
 800fa62:	9e01      	ldr	r6, [sp, #4]
 800fa64:	0052      	lsls	r2, r2, #1
 800fa66:	3e01      	subs	r6, #1
 800fa68:	087f      	lsrs	r7, r7, #1
 800fa6a:	9601      	str	r6, [sp, #4]
 800fa6c:	2e00      	cmp	r6, #0
 800fa6e:	d1db      	bne.n	800fa28 <__ieee754_sqrt+0xb4>
 800fa70:	4313      	orrs	r3, r2
 800fa72:	d003      	beq.n	800fa7c <__ieee754_sqrt+0x108>
 800fa74:	1c4b      	adds	r3, r1, #1
 800fa76:	d127      	bne.n	800fac8 <__ieee754_sqrt+0x154>
 800fa78:	0031      	movs	r1, r6
 800fa7a:	3401      	adds	r4, #1
 800fa7c:	4b16      	ldr	r3, [pc, #88]	; (800fad8 <__ieee754_sqrt+0x164>)
 800fa7e:	1060      	asrs	r0, r4, #1
 800fa80:	18c0      	adds	r0, r0, r3
 800fa82:	0849      	lsrs	r1, r1, #1
 800fa84:	07e3      	lsls	r3, r4, #31
 800fa86:	d502      	bpl.n	800fa8e <__ieee754_sqrt+0x11a>
 800fa88:	2380      	movs	r3, #128	; 0x80
 800fa8a:	061b      	lsls	r3, r3, #24
 800fa8c:	4319      	orrs	r1, r3
 800fa8e:	9b03      	ldr	r3, [sp, #12]
 800fa90:	000d      	movs	r5, r1
 800fa92:	051c      	lsls	r4, r3, #20
 800fa94:	1823      	adds	r3, r4, r0
 800fa96:	001c      	movs	r4, r3
 800fa98:	e782      	b.n	800f9a0 <__ieee754_sqrt+0x2c>
 800fa9a:	0ad1      	lsrs	r1, r2, #11
 800fa9c:	3b15      	subs	r3, #21
 800fa9e:	0552      	lsls	r2, r2, #21
 800faa0:	2900      	cmp	r1, #0
 800faa2:	d0fa      	beq.n	800fa9a <__ieee754_sqrt+0x126>
 800faa4:	2480      	movs	r4, #128	; 0x80
 800faa6:	0364      	lsls	r4, r4, #13
 800faa8:	4221      	tst	r1, r4
 800faaa:	d00a      	beq.n	800fac2 <__ieee754_sqrt+0x14e>
 800faac:	2420      	movs	r4, #32
 800faae:	0016      	movs	r6, r2
 800fab0:	1a24      	subs	r4, r4, r0
 800fab2:	40e6      	lsrs	r6, r4
 800fab4:	1e45      	subs	r5, r0, #1
 800fab6:	4082      	lsls	r2, r0
 800fab8:	4331      	orrs	r1, r6
 800faba:	1b58      	subs	r0, r3, r5
 800fabc:	e789      	b.n	800f9d2 <__ieee754_sqrt+0x5e>
 800fabe:	2300      	movs	r3, #0
 800fac0:	e7ee      	b.n	800faa0 <__ieee754_sqrt+0x12c>
 800fac2:	0049      	lsls	r1, r1, #1
 800fac4:	3001      	adds	r0, #1
 800fac6:	e7ef      	b.n	800faa8 <__ieee754_sqrt+0x134>
 800fac8:	2301      	movs	r3, #1
 800faca:	3101      	adds	r1, #1
 800facc:	4399      	bics	r1, r3
 800face:	e7d5      	b.n	800fa7c <__ieee754_sqrt+0x108>
 800fad0:	7ff00000 	.word	0x7ff00000
 800fad4:	fffffc01 	.word	0xfffffc01
 800fad8:	3fe00000 	.word	0x3fe00000

0800fadc <__kernel_cos>:
 800fadc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fade:	b087      	sub	sp, #28
 800fae0:	9204      	str	r2, [sp, #16]
 800fae2:	9305      	str	r3, [sp, #20]
 800fae4:	004b      	lsls	r3, r1, #1
 800fae6:	085b      	lsrs	r3, r3, #1
 800fae8:	9300      	str	r3, [sp, #0]
 800faea:	23f9      	movs	r3, #249	; 0xf9
 800faec:	9a00      	ldr	r2, [sp, #0]
 800faee:	0007      	movs	r7, r0
 800faf0:	000e      	movs	r6, r1
 800faf2:	059b      	lsls	r3, r3, #22
 800faf4:	429a      	cmp	r2, r3
 800faf6:	da04      	bge.n	800fb02 <__kernel_cos+0x26>
 800faf8:	f7f2 fad2 	bl	80020a0 <__aeabi_d2iz>
 800fafc:	2800      	cmp	r0, #0
 800fafe:	d100      	bne.n	800fb02 <__kernel_cos+0x26>
 800fb00:	e084      	b.n	800fc0c <__kernel_cos+0x130>
 800fb02:	003a      	movs	r2, r7
 800fb04:	0033      	movs	r3, r6
 800fb06:	0038      	movs	r0, r7
 800fb08:	0031      	movs	r1, r6
 800fb0a:	f7f1 fcad 	bl	8001468 <__aeabi_dmul>
 800fb0e:	2200      	movs	r2, #0
 800fb10:	4b40      	ldr	r3, [pc, #256]	; (800fc14 <__kernel_cos+0x138>)
 800fb12:	0004      	movs	r4, r0
 800fb14:	000d      	movs	r5, r1
 800fb16:	f7f1 fca7 	bl	8001468 <__aeabi_dmul>
 800fb1a:	4a3f      	ldr	r2, [pc, #252]	; (800fc18 <__kernel_cos+0x13c>)
 800fb1c:	9002      	str	r0, [sp, #8]
 800fb1e:	9103      	str	r1, [sp, #12]
 800fb20:	4b3e      	ldr	r3, [pc, #248]	; (800fc1c <__kernel_cos+0x140>)
 800fb22:	0020      	movs	r0, r4
 800fb24:	0029      	movs	r1, r5
 800fb26:	f7f1 fc9f 	bl	8001468 <__aeabi_dmul>
 800fb2a:	4a3d      	ldr	r2, [pc, #244]	; (800fc20 <__kernel_cos+0x144>)
 800fb2c:	4b3d      	ldr	r3, [pc, #244]	; (800fc24 <__kernel_cos+0x148>)
 800fb2e:	f7f0 fd2b 	bl	8000588 <__aeabi_dadd>
 800fb32:	0022      	movs	r2, r4
 800fb34:	002b      	movs	r3, r5
 800fb36:	f7f1 fc97 	bl	8001468 <__aeabi_dmul>
 800fb3a:	4a3b      	ldr	r2, [pc, #236]	; (800fc28 <__kernel_cos+0x14c>)
 800fb3c:	4b3b      	ldr	r3, [pc, #236]	; (800fc2c <__kernel_cos+0x150>)
 800fb3e:	f7f1 feff 	bl	8001940 <__aeabi_dsub>
 800fb42:	0022      	movs	r2, r4
 800fb44:	002b      	movs	r3, r5
 800fb46:	f7f1 fc8f 	bl	8001468 <__aeabi_dmul>
 800fb4a:	4a39      	ldr	r2, [pc, #228]	; (800fc30 <__kernel_cos+0x154>)
 800fb4c:	4b39      	ldr	r3, [pc, #228]	; (800fc34 <__kernel_cos+0x158>)
 800fb4e:	f7f0 fd1b 	bl	8000588 <__aeabi_dadd>
 800fb52:	0022      	movs	r2, r4
 800fb54:	002b      	movs	r3, r5
 800fb56:	f7f1 fc87 	bl	8001468 <__aeabi_dmul>
 800fb5a:	4a37      	ldr	r2, [pc, #220]	; (800fc38 <__kernel_cos+0x15c>)
 800fb5c:	4b37      	ldr	r3, [pc, #220]	; (800fc3c <__kernel_cos+0x160>)
 800fb5e:	f7f1 feef 	bl	8001940 <__aeabi_dsub>
 800fb62:	0022      	movs	r2, r4
 800fb64:	002b      	movs	r3, r5
 800fb66:	f7f1 fc7f 	bl	8001468 <__aeabi_dmul>
 800fb6a:	4a35      	ldr	r2, [pc, #212]	; (800fc40 <__kernel_cos+0x164>)
 800fb6c:	4b35      	ldr	r3, [pc, #212]	; (800fc44 <__kernel_cos+0x168>)
 800fb6e:	f7f0 fd0b 	bl	8000588 <__aeabi_dadd>
 800fb72:	0022      	movs	r2, r4
 800fb74:	002b      	movs	r3, r5
 800fb76:	f7f1 fc77 	bl	8001468 <__aeabi_dmul>
 800fb7a:	0022      	movs	r2, r4
 800fb7c:	002b      	movs	r3, r5
 800fb7e:	f7f1 fc73 	bl	8001468 <__aeabi_dmul>
 800fb82:	9a04      	ldr	r2, [sp, #16]
 800fb84:	9b05      	ldr	r3, [sp, #20]
 800fb86:	0004      	movs	r4, r0
 800fb88:	000d      	movs	r5, r1
 800fb8a:	0038      	movs	r0, r7
 800fb8c:	0031      	movs	r1, r6
 800fb8e:	f7f1 fc6b 	bl	8001468 <__aeabi_dmul>
 800fb92:	0002      	movs	r2, r0
 800fb94:	000b      	movs	r3, r1
 800fb96:	0020      	movs	r0, r4
 800fb98:	0029      	movs	r1, r5
 800fb9a:	f7f1 fed1 	bl	8001940 <__aeabi_dsub>
 800fb9e:	4b2a      	ldr	r3, [pc, #168]	; (800fc48 <__kernel_cos+0x16c>)
 800fba0:	9a00      	ldr	r2, [sp, #0]
 800fba2:	0004      	movs	r4, r0
 800fba4:	000d      	movs	r5, r1
 800fba6:	429a      	cmp	r2, r3
 800fba8:	dc0d      	bgt.n	800fbc6 <__kernel_cos+0xea>
 800fbaa:	0002      	movs	r2, r0
 800fbac:	000b      	movs	r3, r1
 800fbae:	9802      	ldr	r0, [sp, #8]
 800fbb0:	9903      	ldr	r1, [sp, #12]
 800fbb2:	f7f1 fec5 	bl	8001940 <__aeabi_dsub>
 800fbb6:	0002      	movs	r2, r0
 800fbb8:	2000      	movs	r0, #0
 800fbba:	000b      	movs	r3, r1
 800fbbc:	4923      	ldr	r1, [pc, #140]	; (800fc4c <__kernel_cos+0x170>)
 800fbbe:	f7f1 febf 	bl	8001940 <__aeabi_dsub>
 800fbc2:	b007      	add	sp, #28
 800fbc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbc6:	4b22      	ldr	r3, [pc, #136]	; (800fc50 <__kernel_cos+0x174>)
 800fbc8:	9a00      	ldr	r2, [sp, #0]
 800fbca:	2600      	movs	r6, #0
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	dc1b      	bgt.n	800fc08 <__kernel_cos+0x12c>
 800fbd0:	0013      	movs	r3, r2
 800fbd2:	4a20      	ldr	r2, [pc, #128]	; (800fc54 <__kernel_cos+0x178>)
 800fbd4:	4694      	mov	ip, r2
 800fbd6:	4463      	add	r3, ip
 800fbd8:	001f      	movs	r7, r3
 800fbda:	0032      	movs	r2, r6
 800fbdc:	003b      	movs	r3, r7
 800fbde:	2000      	movs	r0, #0
 800fbe0:	491a      	ldr	r1, [pc, #104]	; (800fc4c <__kernel_cos+0x170>)
 800fbe2:	f7f1 fead 	bl	8001940 <__aeabi_dsub>
 800fbe6:	0032      	movs	r2, r6
 800fbe8:	003b      	movs	r3, r7
 800fbea:	9000      	str	r0, [sp, #0]
 800fbec:	9101      	str	r1, [sp, #4]
 800fbee:	9802      	ldr	r0, [sp, #8]
 800fbf0:	9903      	ldr	r1, [sp, #12]
 800fbf2:	f7f1 fea5 	bl	8001940 <__aeabi_dsub>
 800fbf6:	0022      	movs	r2, r4
 800fbf8:	002b      	movs	r3, r5
 800fbfa:	f7f1 fea1 	bl	8001940 <__aeabi_dsub>
 800fbfe:	0002      	movs	r2, r0
 800fc00:	000b      	movs	r3, r1
 800fc02:	9800      	ldr	r0, [sp, #0]
 800fc04:	9901      	ldr	r1, [sp, #4]
 800fc06:	e7da      	b.n	800fbbe <__kernel_cos+0xe2>
 800fc08:	4f13      	ldr	r7, [pc, #76]	; (800fc58 <__kernel_cos+0x17c>)
 800fc0a:	e7e6      	b.n	800fbda <__kernel_cos+0xfe>
 800fc0c:	2000      	movs	r0, #0
 800fc0e:	490f      	ldr	r1, [pc, #60]	; (800fc4c <__kernel_cos+0x170>)
 800fc10:	e7d7      	b.n	800fbc2 <__kernel_cos+0xe6>
 800fc12:	46c0      	nop			; (mov r8, r8)
 800fc14:	3fe00000 	.word	0x3fe00000
 800fc18:	be8838d4 	.word	0xbe8838d4
 800fc1c:	bda8fae9 	.word	0xbda8fae9
 800fc20:	bdb4b1c4 	.word	0xbdb4b1c4
 800fc24:	3e21ee9e 	.word	0x3e21ee9e
 800fc28:	809c52ad 	.word	0x809c52ad
 800fc2c:	3e927e4f 	.word	0x3e927e4f
 800fc30:	19cb1590 	.word	0x19cb1590
 800fc34:	3efa01a0 	.word	0x3efa01a0
 800fc38:	16c15177 	.word	0x16c15177
 800fc3c:	3f56c16c 	.word	0x3f56c16c
 800fc40:	5555554c 	.word	0x5555554c
 800fc44:	3fa55555 	.word	0x3fa55555
 800fc48:	3fd33332 	.word	0x3fd33332
 800fc4c:	3ff00000 	.word	0x3ff00000
 800fc50:	3fe90000 	.word	0x3fe90000
 800fc54:	ffe00000 	.word	0xffe00000
 800fc58:	3fd20000 	.word	0x3fd20000

0800fc5c <__kernel_rem_pio2>:
 800fc5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc5e:	4cd0      	ldr	r4, [pc, #832]	; (800ffa0 <__kernel_rem_pio2+0x344>)
 800fc60:	44a5      	add	sp, r4
 800fc62:	930d      	str	r3, [sp, #52]	; 0x34
 800fc64:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800fc66:	0014      	movs	r4, r2
 800fc68:	009a      	lsls	r2, r3, #2
 800fc6a:	4bce      	ldr	r3, [pc, #824]	; (800ffa4 <__kernel_rem_pio2+0x348>)
 800fc6c:	900e      	str	r0, [sp, #56]	; 0x38
 800fc6e:	58d3      	ldr	r3, [r2, r3]
 800fc70:	9107      	str	r1, [sp, #28]
 800fc72:	9308      	str	r3, [sp, #32]
 800fc74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800fc76:	3b01      	subs	r3, #1
 800fc78:	930c      	str	r3, [sp, #48]	; 0x30
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	9300      	str	r3, [sp, #0]
 800fc7e:	0023      	movs	r3, r4
 800fc80:	3314      	adds	r3, #20
 800fc82:	db04      	blt.n	800fc8e <__kernel_rem_pio2+0x32>
 800fc84:	2118      	movs	r1, #24
 800fc86:	1ee0      	subs	r0, r4, #3
 800fc88:	f7f0 fae4 	bl	8000254 <__divsi3>
 800fc8c:	9000      	str	r0, [sp, #0]
 800fc8e:	2218      	movs	r2, #24
 800fc90:	9b00      	ldr	r3, [sp, #0]
 800fc92:	4252      	negs	r2, r2
 800fc94:	3301      	adds	r3, #1
 800fc96:	435a      	muls	r2, r3
 800fc98:	1913      	adds	r3, r2, r4
 800fc9a:	9302      	str	r3, [sp, #8]
 800fc9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fc9e:	9b00      	ldr	r3, [sp, #0]
 800fca0:	ae26      	add	r6, sp, #152	; 0x98
 800fca2:	1a9d      	subs	r5, r3, r2
 800fca4:	002c      	movs	r4, r5
 800fca6:	9b08      	ldr	r3, [sp, #32]
 800fca8:	189f      	adds	r7, r3, r2
 800fcaa:	1b63      	subs	r3, r4, r5
 800fcac:	429f      	cmp	r7, r3
 800fcae:	da17      	bge.n	800fce0 <__kernel_rem_pio2+0x84>
 800fcb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fcb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fcb4:	9304      	str	r3, [sp, #16]
 800fcb6:	ab76      	add	r3, sp, #472	; 0x1d8
 800fcb8:	930a      	str	r3, [sp, #40]	; 0x28
 800fcba:	2301      	movs	r3, #1
 800fcbc:	1a9b      	subs	r3, r3, r2
 800fcbe:	930b      	str	r3, [sp, #44]	; 0x2c
 800fcc0:	ab28      	add	r3, sp, #160	; 0xa0
 800fcc2:	930f      	str	r3, [sp, #60]	; 0x3c
 800fcc4:	9a04      	ldr	r2, [sp, #16]
 800fcc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcc8:	189b      	adds	r3, r3, r2
 800fcca:	9a08      	ldr	r2, [sp, #32]
 800fccc:	429a      	cmp	r2, r3
 800fcce:	db31      	blt.n	800fd34 <__kernel_rem_pio2+0xd8>
 800fcd0:	9b04      	ldr	r3, [sp, #16]
 800fcd2:	2400      	movs	r4, #0
 800fcd4:	00de      	lsls	r6, r3, #3
 800fcd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fcd8:	2500      	movs	r5, #0
 800fcda:	2700      	movs	r7, #0
 800fcdc:	199e      	adds	r6, r3, r6
 800fcde:	e01e      	b.n	800fd1e <__kernel_rem_pio2+0xc2>
 800fce0:	2c00      	cmp	r4, #0
 800fce2:	db07      	blt.n	800fcf4 <__kernel_rem_pio2+0x98>
 800fce4:	9aa5      	ldr	r2, [sp, #660]	; 0x294
 800fce6:	00a3      	lsls	r3, r4, #2
 800fce8:	58d0      	ldr	r0, [r2, r3]
 800fcea:	f7f2 fa0f 	bl	800210c <__aeabi_i2d>
 800fcee:	c603      	stmia	r6!, {r0, r1}
 800fcf0:	3401      	adds	r4, #1
 800fcf2:	e7da      	b.n	800fcaa <__kernel_rem_pio2+0x4e>
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	2100      	movs	r1, #0
 800fcf8:	e7f9      	b.n	800fcee <__kernel_rem_pio2+0x92>
 800fcfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fcfc:	00f9      	lsls	r1, r7, #3
 800fcfe:	1859      	adds	r1, r3, r1
 800fd00:	6808      	ldr	r0, [r1, #0]
 800fd02:	6849      	ldr	r1, [r1, #4]
 800fd04:	6832      	ldr	r2, [r6, #0]
 800fd06:	6873      	ldr	r3, [r6, #4]
 800fd08:	f7f1 fbae 	bl	8001468 <__aeabi_dmul>
 800fd0c:	0002      	movs	r2, r0
 800fd0e:	000b      	movs	r3, r1
 800fd10:	0020      	movs	r0, r4
 800fd12:	0029      	movs	r1, r5
 800fd14:	f7f0 fc38 	bl	8000588 <__aeabi_dadd>
 800fd18:	0004      	movs	r4, r0
 800fd1a:	000d      	movs	r5, r1
 800fd1c:	3701      	adds	r7, #1
 800fd1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fd20:	3e08      	subs	r6, #8
 800fd22:	429f      	cmp	r7, r3
 800fd24:	dde9      	ble.n	800fcfa <__kernel_rem_pio2+0x9e>
 800fd26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd28:	c330      	stmia	r3!, {r4, r5}
 800fd2a:	930a      	str	r3, [sp, #40]	; 0x28
 800fd2c:	9b04      	ldr	r3, [sp, #16]
 800fd2e:	3301      	adds	r3, #1
 800fd30:	9304      	str	r3, [sp, #16]
 800fd32:	e7c7      	b.n	800fcc4 <__kernel_rem_pio2+0x68>
 800fd34:	9b08      	ldr	r3, [sp, #32]
 800fd36:	aa12      	add	r2, sp, #72	; 0x48
 800fd38:	009b      	lsls	r3, r3, #2
 800fd3a:	189b      	adds	r3, r3, r2
 800fd3c:	9310      	str	r3, [sp, #64]	; 0x40
 800fd3e:	9b00      	ldr	r3, [sp, #0]
 800fd40:	0098      	lsls	r0, r3, #2
 800fd42:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800fd44:	181b      	adds	r3, r3, r0
 800fd46:	930f      	str	r3, [sp, #60]	; 0x3c
 800fd48:	9b08      	ldr	r3, [sp, #32]
 800fd4a:	9304      	str	r3, [sp, #16]
 800fd4c:	9b04      	ldr	r3, [sp, #16]
 800fd4e:	aa76      	add	r2, sp, #472	; 0x1d8
 800fd50:	00db      	lsls	r3, r3, #3
 800fd52:	18d3      	adds	r3, r2, r3
 800fd54:	681c      	ldr	r4, [r3, #0]
 800fd56:	685d      	ldr	r5, [r3, #4]
 800fd58:	ab12      	add	r3, sp, #72	; 0x48
 800fd5a:	9300      	str	r3, [sp, #0]
 800fd5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800fd5e:	9b04      	ldr	r3, [sp, #16]
 800fd60:	9211      	str	r2, [sp, #68]	; 0x44
 800fd62:	930a      	str	r3, [sp, #40]	; 0x28
 800fd64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	dc74      	bgt.n	800fe54 <__kernel_rem_pio2+0x1f8>
 800fd6a:	0020      	movs	r0, r4
 800fd6c:	0029      	movs	r1, r5
 800fd6e:	9a02      	ldr	r2, [sp, #8]
 800fd70:	f000 fcb4 	bl	80106dc <scalbn>
 800fd74:	23ff      	movs	r3, #255	; 0xff
 800fd76:	2200      	movs	r2, #0
 800fd78:	059b      	lsls	r3, r3, #22
 800fd7a:	0004      	movs	r4, r0
 800fd7c:	000d      	movs	r5, r1
 800fd7e:	f7f1 fb73 	bl	8001468 <__aeabi_dmul>
 800fd82:	f000 fb99 	bl	80104b8 <floor>
 800fd86:	2200      	movs	r2, #0
 800fd88:	4b87      	ldr	r3, [pc, #540]	; (800ffa8 <__kernel_rem_pio2+0x34c>)
 800fd8a:	f7f1 fb6d 	bl	8001468 <__aeabi_dmul>
 800fd8e:	0002      	movs	r2, r0
 800fd90:	000b      	movs	r3, r1
 800fd92:	0020      	movs	r0, r4
 800fd94:	0029      	movs	r1, r5
 800fd96:	f7f1 fdd3 	bl	8001940 <__aeabi_dsub>
 800fd9a:	000d      	movs	r5, r1
 800fd9c:	0004      	movs	r4, r0
 800fd9e:	f7f2 f97f 	bl	80020a0 <__aeabi_d2iz>
 800fda2:	900b      	str	r0, [sp, #44]	; 0x2c
 800fda4:	f7f2 f9b2 	bl	800210c <__aeabi_i2d>
 800fda8:	000b      	movs	r3, r1
 800fdaa:	0002      	movs	r2, r0
 800fdac:	0029      	movs	r1, r5
 800fdae:	0020      	movs	r0, r4
 800fdb0:	f7f1 fdc6 	bl	8001940 <__aeabi_dsub>
 800fdb4:	9b02      	ldr	r3, [sp, #8]
 800fdb6:	0006      	movs	r6, r0
 800fdb8:	000f      	movs	r7, r1
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	dd74      	ble.n	800fea8 <__kernel_rem_pio2+0x24c>
 800fdbe:	2118      	movs	r1, #24
 800fdc0:	9b04      	ldr	r3, [sp, #16]
 800fdc2:	aa12      	add	r2, sp, #72	; 0x48
 800fdc4:	3b01      	subs	r3, #1
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	589a      	ldr	r2, [r3, r2]
 800fdca:	9802      	ldr	r0, [sp, #8]
 800fdcc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800fdce:	1a09      	subs	r1, r1, r0
 800fdd0:	0010      	movs	r0, r2
 800fdd2:	4108      	asrs	r0, r1
 800fdd4:	1824      	adds	r4, r4, r0
 800fdd6:	4088      	lsls	r0, r1
 800fdd8:	a912      	add	r1, sp, #72	; 0x48
 800fdda:	1a12      	subs	r2, r2, r0
 800fddc:	505a      	str	r2, [r3, r1]
 800fdde:	2317      	movs	r3, #23
 800fde0:	9902      	ldr	r1, [sp, #8]
 800fde2:	940b      	str	r4, [sp, #44]	; 0x2c
 800fde4:	1a5b      	subs	r3, r3, r1
 800fde6:	411a      	asrs	r2, r3
 800fde8:	920a      	str	r2, [sp, #40]	; 0x28
 800fdea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	dd6d      	ble.n	800fecc <__kernel_rem_pio2+0x270>
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fdf4:	2080      	movs	r0, #128	; 0x80
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800fdfa:	4b6c      	ldr	r3, [pc, #432]	; (800ffac <__kernel_rem_pio2+0x350>)
 800fdfc:	0014      	movs	r4, r2
 800fdfe:	469c      	mov	ip, r3
 800fe00:	2501      	movs	r5, #1
 800fe02:	0440      	lsls	r0, r0, #17
 800fe04:	9b04      	ldr	r3, [sp, #16]
 800fe06:	4293      	cmp	r3, r2
 800fe08:	dd00      	ble.n	800fe0c <__kernel_rem_pio2+0x1b0>
 800fe0a:	e098      	b.n	800ff3e <__kernel_rem_pio2+0x2e2>
 800fe0c:	9b02      	ldr	r3, [sp, #8]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	dd05      	ble.n	800fe1e <__kernel_rem_pio2+0x1c2>
 800fe12:	2b01      	cmp	r3, #1
 800fe14:	d100      	bne.n	800fe18 <__kernel_rem_pio2+0x1bc>
 800fe16:	e0a8      	b.n	800ff6a <__kernel_rem_pio2+0x30e>
 800fe18:	2b02      	cmp	r3, #2
 800fe1a:	d100      	bne.n	800fe1e <__kernel_rem_pio2+0x1c2>
 800fe1c:	e0b0      	b.n	800ff80 <__kernel_rem_pio2+0x324>
 800fe1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe20:	2b02      	cmp	r3, #2
 800fe22:	d153      	bne.n	800fecc <__kernel_rem_pio2+0x270>
 800fe24:	0032      	movs	r2, r6
 800fe26:	003b      	movs	r3, r7
 800fe28:	2000      	movs	r0, #0
 800fe2a:	4961      	ldr	r1, [pc, #388]	; (800ffb0 <__kernel_rem_pio2+0x354>)
 800fe2c:	f7f1 fd88 	bl	8001940 <__aeabi_dsub>
 800fe30:	0006      	movs	r6, r0
 800fe32:	000f      	movs	r7, r1
 800fe34:	2c00      	cmp	r4, #0
 800fe36:	d049      	beq.n	800fecc <__kernel_rem_pio2+0x270>
 800fe38:	9a02      	ldr	r2, [sp, #8]
 800fe3a:	2000      	movs	r0, #0
 800fe3c:	495c      	ldr	r1, [pc, #368]	; (800ffb0 <__kernel_rem_pio2+0x354>)
 800fe3e:	f000 fc4d 	bl	80106dc <scalbn>
 800fe42:	0002      	movs	r2, r0
 800fe44:	000b      	movs	r3, r1
 800fe46:	0030      	movs	r0, r6
 800fe48:	0039      	movs	r1, r7
 800fe4a:	f7f1 fd79 	bl	8001940 <__aeabi_dsub>
 800fe4e:	0006      	movs	r6, r0
 800fe50:	000f      	movs	r7, r1
 800fe52:	e03b      	b.n	800fecc <__kernel_rem_pio2+0x270>
 800fe54:	2200      	movs	r2, #0
 800fe56:	4b57      	ldr	r3, [pc, #348]	; (800ffb4 <__kernel_rem_pio2+0x358>)
 800fe58:	0020      	movs	r0, r4
 800fe5a:	0029      	movs	r1, r5
 800fe5c:	f7f1 fb04 	bl	8001468 <__aeabi_dmul>
 800fe60:	f7f2 f91e 	bl	80020a0 <__aeabi_d2iz>
 800fe64:	f7f2 f952 	bl	800210c <__aeabi_i2d>
 800fe68:	2200      	movs	r2, #0
 800fe6a:	4b53      	ldr	r3, [pc, #332]	; (800ffb8 <__kernel_rem_pio2+0x35c>)
 800fe6c:	0006      	movs	r6, r0
 800fe6e:	000f      	movs	r7, r1
 800fe70:	f7f1 fafa 	bl	8001468 <__aeabi_dmul>
 800fe74:	0002      	movs	r2, r0
 800fe76:	000b      	movs	r3, r1
 800fe78:	0020      	movs	r0, r4
 800fe7a:	0029      	movs	r1, r5
 800fe7c:	f7f1 fd60 	bl	8001940 <__aeabi_dsub>
 800fe80:	f7f2 f90e 	bl	80020a0 <__aeabi_d2iz>
 800fe84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe86:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fe88:	c301      	stmia	r3!, {r0}
 800fe8a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fe8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe8e:	0030      	movs	r0, r6
 800fe90:	3b01      	subs	r3, #1
 800fe92:	930a      	str	r3, [sp, #40]	; 0x28
 800fe94:	00db      	lsls	r3, r3, #3
 800fe96:	18d3      	adds	r3, r2, r3
 800fe98:	0039      	movs	r1, r7
 800fe9a:	681a      	ldr	r2, [r3, #0]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	f7f0 fb73 	bl	8000588 <__aeabi_dadd>
 800fea2:	0004      	movs	r4, r0
 800fea4:	000d      	movs	r5, r1
 800fea6:	e75d      	b.n	800fd64 <__kernel_rem_pio2+0x108>
 800fea8:	9b02      	ldr	r3, [sp, #8]
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d107      	bne.n	800febe <__kernel_rem_pio2+0x262>
 800feae:	9b04      	ldr	r3, [sp, #16]
 800feb0:	aa12      	add	r2, sp, #72	; 0x48
 800feb2:	3b01      	subs	r3, #1
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	5898      	ldr	r0, [r3, r2]
 800feb8:	15c3      	asrs	r3, r0, #23
 800feba:	930a      	str	r3, [sp, #40]	; 0x28
 800febc:	e795      	b.n	800fdea <__kernel_rem_pio2+0x18e>
 800febe:	2200      	movs	r2, #0
 800fec0:	4b3e      	ldr	r3, [pc, #248]	; (800ffbc <__kernel_rem_pio2+0x360>)
 800fec2:	f7f0 fae7 	bl	8000494 <__aeabi_dcmpge>
 800fec6:	2800      	cmp	r0, #0
 800fec8:	d136      	bne.n	800ff38 <__kernel_rem_pio2+0x2dc>
 800feca:	900a      	str	r0, [sp, #40]	; 0x28
 800fecc:	2200      	movs	r2, #0
 800fece:	2300      	movs	r3, #0
 800fed0:	0030      	movs	r0, r6
 800fed2:	0039      	movs	r1, r7
 800fed4:	f7f0 faba 	bl	800044c <__aeabi_dcmpeq>
 800fed8:	2800      	cmp	r0, #0
 800feda:	d100      	bne.n	800fede <__kernel_rem_pio2+0x282>
 800fedc:	e0b9      	b.n	8010052 <__kernel_rem_pio2+0x3f6>
 800fede:	2200      	movs	r2, #0
 800fee0:	9b04      	ldr	r3, [sp, #16]
 800fee2:	3b01      	subs	r3, #1
 800fee4:	9300      	str	r3, [sp, #0]
 800fee6:	9908      	ldr	r1, [sp, #32]
 800fee8:	428b      	cmp	r3, r1
 800feea:	da52      	bge.n	800ff92 <__kernel_rem_pio2+0x336>
 800feec:	2a00      	cmp	r2, #0
 800feee:	d100      	bne.n	800fef2 <__kernel_rem_pio2+0x296>
 800fef0:	e095      	b.n	801001e <__kernel_rem_pio2+0x3c2>
 800fef2:	9b02      	ldr	r3, [sp, #8]
 800fef4:	aa12      	add	r2, sp, #72	; 0x48
 800fef6:	3b18      	subs	r3, #24
 800fef8:	9302      	str	r3, [sp, #8]
 800fefa:	9b00      	ldr	r3, [sp, #0]
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	589b      	ldr	r3, [r3, r2]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d100      	bne.n	800ff06 <__kernel_rem_pio2+0x2aa>
 800ff04:	e0a1      	b.n	801004a <__kernel_rem_pio2+0x3ee>
 800ff06:	2000      	movs	r0, #0
 800ff08:	9a02      	ldr	r2, [sp, #8]
 800ff0a:	4929      	ldr	r1, [pc, #164]	; (800ffb0 <__kernel_rem_pio2+0x354>)
 800ff0c:	f000 fbe6 	bl	80106dc <scalbn>
 800ff10:	0006      	movs	r6, r0
 800ff12:	000f      	movs	r7, r1
 800ff14:	9c00      	ldr	r4, [sp, #0]
 800ff16:	2c00      	cmp	r4, #0
 800ff18:	db00      	blt.n	800ff1c <__kernel_rem_pio2+0x2c0>
 800ff1a:	e0d9      	b.n	80100d0 <__kernel_rem_pio2+0x474>
 800ff1c:	2600      	movs	r6, #0
 800ff1e:	9d00      	ldr	r5, [sp, #0]
 800ff20:	2d00      	cmp	r5, #0
 800ff22:	da00      	bge.n	800ff26 <__kernel_rem_pio2+0x2ca>
 800ff24:	e10c      	b.n	8010140 <__kernel_rem_pio2+0x4e4>
 800ff26:	ab76      	add	r3, sp, #472	; 0x1d8
 800ff28:	00ef      	lsls	r7, r5, #3
 800ff2a:	2400      	movs	r4, #0
 800ff2c:	18ff      	adds	r7, r7, r3
 800ff2e:	2300      	movs	r3, #0
 800ff30:	9302      	str	r3, [sp, #8]
 800ff32:	9403      	str	r4, [sp, #12]
 800ff34:	2400      	movs	r4, #0
 800ff36:	e0f4      	b.n	8010122 <__kernel_rem_pio2+0x4c6>
 800ff38:	2302      	movs	r3, #2
 800ff3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ff3c:	e758      	b.n	800fdf0 <__kernel_rem_pio2+0x194>
 800ff3e:	9b00      	ldr	r3, [sp, #0]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	2c00      	cmp	r4, #0
 800ff44:	d10b      	bne.n	800ff5e <__kernel_rem_pio2+0x302>
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d003      	beq.n	800ff52 <__kernel_rem_pio2+0x2f6>
 800ff4a:	9c00      	ldr	r4, [sp, #0]
 800ff4c:	1ac3      	subs	r3, r0, r3
 800ff4e:	6023      	str	r3, [r4, #0]
 800ff50:	002b      	movs	r3, r5
 800ff52:	9c00      	ldr	r4, [sp, #0]
 800ff54:	3201      	adds	r2, #1
 800ff56:	3404      	adds	r4, #4
 800ff58:	9400      	str	r4, [sp, #0]
 800ff5a:	001c      	movs	r4, r3
 800ff5c:	e752      	b.n	800fe04 <__kernel_rem_pio2+0x1a8>
 800ff5e:	4661      	mov	r1, ip
 800ff60:	1acb      	subs	r3, r1, r3
 800ff62:	9900      	ldr	r1, [sp, #0]
 800ff64:	600b      	str	r3, [r1, #0]
 800ff66:	0023      	movs	r3, r4
 800ff68:	e7f3      	b.n	800ff52 <__kernel_rem_pio2+0x2f6>
 800ff6a:	9b04      	ldr	r3, [sp, #16]
 800ff6c:	aa12      	add	r2, sp, #72	; 0x48
 800ff6e:	3b01      	subs	r3, #1
 800ff70:	009b      	lsls	r3, r3, #2
 800ff72:	589a      	ldr	r2, [r3, r2]
 800ff74:	9200      	str	r2, [sp, #0]
 800ff76:	0252      	lsls	r2, r2, #9
 800ff78:	0a52      	lsrs	r2, r2, #9
 800ff7a:	a912      	add	r1, sp, #72	; 0x48
 800ff7c:	505a      	str	r2, [r3, r1]
 800ff7e:	e74e      	b.n	800fe1e <__kernel_rem_pio2+0x1c2>
 800ff80:	9b04      	ldr	r3, [sp, #16]
 800ff82:	aa12      	add	r2, sp, #72	; 0x48
 800ff84:	3b01      	subs	r3, #1
 800ff86:	009b      	lsls	r3, r3, #2
 800ff88:	589a      	ldr	r2, [r3, r2]
 800ff8a:	9200      	str	r2, [sp, #0]
 800ff8c:	0292      	lsls	r2, r2, #10
 800ff8e:	0a92      	lsrs	r2, r2, #10
 800ff90:	e7f3      	b.n	800ff7a <__kernel_rem_pio2+0x31e>
 800ff92:	0099      	lsls	r1, r3, #2
 800ff94:	a812      	add	r0, sp, #72	; 0x48
 800ff96:	5809      	ldr	r1, [r1, r0]
 800ff98:	3b01      	subs	r3, #1
 800ff9a:	430a      	orrs	r2, r1
 800ff9c:	e7a3      	b.n	800fee6 <__kernel_rem_pio2+0x28a>
 800ff9e:	46c0      	nop			; (mov r8, r8)
 800ffa0:	fffffd84 	.word	0xfffffd84
 800ffa4:	08011318 	.word	0x08011318
 800ffa8:	40200000 	.word	0x40200000
 800ffac:	00ffffff 	.word	0x00ffffff
 800ffb0:	3ff00000 	.word	0x3ff00000
 800ffb4:	3e700000 	.word	0x3e700000
 800ffb8:	41700000 	.word	0x41700000
 800ffbc:	3fe00000 	.word	0x3fe00000
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	9910      	ldr	r1, [sp, #64]	; 0x40
 800ffc4:	009a      	lsls	r2, r3, #2
 800ffc6:	4252      	negs	r2, r2
 800ffc8:	588a      	ldr	r2, [r1, r2]
 800ffca:	2a00      	cmp	r2, #0
 800ffcc:	d0f8      	beq.n	800ffc0 <__kernel_rem_pio2+0x364>
 800ffce:	9a04      	ldr	r2, [sp, #16]
 800ffd0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ffd2:	1c57      	adds	r7, r2, #1
 800ffd4:	1854      	adds	r4, r2, r1
 800ffd6:	00e4      	lsls	r4, r4, #3
 800ffd8:	aa26      	add	r2, sp, #152	; 0x98
 800ffda:	1914      	adds	r4, r2, r4
 800ffdc:	9a04      	ldr	r2, [sp, #16]
 800ffde:	18d3      	adds	r3, r2, r3
 800ffe0:	9304      	str	r3, [sp, #16]
 800ffe2:	9b04      	ldr	r3, [sp, #16]
 800ffe4:	42bb      	cmp	r3, r7
 800ffe6:	da00      	bge.n	800ffea <__kernel_rem_pio2+0x38e>
 800ffe8:	e6b0      	b.n	800fd4c <__kernel_rem_pio2+0xf0>
 800ffea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ffec:	00bb      	lsls	r3, r7, #2
 800ffee:	58d0      	ldr	r0, [r2, r3]
 800fff0:	f7f2 f88c 	bl	800210c <__aeabi_i2d>
 800fff4:	2200      	movs	r2, #0
 800fff6:	2300      	movs	r3, #0
 800fff8:	0026      	movs	r6, r4
 800fffa:	2500      	movs	r5, #0
 800fffc:	6020      	str	r0, [r4, #0]
 800fffe:	6061      	str	r1, [r4, #4]
 8010000:	9200      	str	r2, [sp, #0]
 8010002:	9301      	str	r3, [sp, #4]
 8010004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010006:	429d      	cmp	r5, r3
 8010008:	dd0b      	ble.n	8010022 <__kernel_rem_pio2+0x3c6>
 801000a:	00fb      	lsls	r3, r7, #3
 801000c:	aa76      	add	r2, sp, #472	; 0x1d8
 801000e:	18d3      	adds	r3, r2, r3
 8010010:	3701      	adds	r7, #1
 8010012:	9900      	ldr	r1, [sp, #0]
 8010014:	9a01      	ldr	r2, [sp, #4]
 8010016:	3408      	adds	r4, #8
 8010018:	6019      	str	r1, [r3, #0]
 801001a:	605a      	str	r2, [r3, #4]
 801001c:	e7e1      	b.n	800ffe2 <__kernel_rem_pio2+0x386>
 801001e:	2301      	movs	r3, #1
 8010020:	e7cf      	b.n	800ffc2 <__kernel_rem_pio2+0x366>
 8010022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010024:	00e9      	lsls	r1, r5, #3
 8010026:	1859      	adds	r1, r3, r1
 8010028:	6808      	ldr	r0, [r1, #0]
 801002a:	6849      	ldr	r1, [r1, #4]
 801002c:	6832      	ldr	r2, [r6, #0]
 801002e:	6873      	ldr	r3, [r6, #4]
 8010030:	f7f1 fa1a 	bl	8001468 <__aeabi_dmul>
 8010034:	0002      	movs	r2, r0
 8010036:	000b      	movs	r3, r1
 8010038:	9800      	ldr	r0, [sp, #0]
 801003a:	9901      	ldr	r1, [sp, #4]
 801003c:	f7f0 faa4 	bl	8000588 <__aeabi_dadd>
 8010040:	3501      	adds	r5, #1
 8010042:	9000      	str	r0, [sp, #0]
 8010044:	9101      	str	r1, [sp, #4]
 8010046:	3e08      	subs	r6, #8
 8010048:	e7dc      	b.n	8010004 <__kernel_rem_pio2+0x3a8>
 801004a:	9b00      	ldr	r3, [sp, #0]
 801004c:	3b01      	subs	r3, #1
 801004e:	9300      	str	r3, [sp, #0]
 8010050:	e74f      	b.n	800fef2 <__kernel_rem_pio2+0x296>
 8010052:	9b02      	ldr	r3, [sp, #8]
 8010054:	0030      	movs	r0, r6
 8010056:	425a      	negs	r2, r3
 8010058:	0039      	movs	r1, r7
 801005a:	f000 fb3f 	bl	80106dc <scalbn>
 801005e:	2200      	movs	r2, #0
 8010060:	4bb6      	ldr	r3, [pc, #728]	; (801033c <__kernel_rem_pio2+0x6e0>)
 8010062:	0004      	movs	r4, r0
 8010064:	000d      	movs	r5, r1
 8010066:	f7f0 fa15 	bl	8000494 <__aeabi_dcmpge>
 801006a:	2800      	cmp	r0, #0
 801006c:	d025      	beq.n	80100ba <__kernel_rem_pio2+0x45e>
 801006e:	2200      	movs	r2, #0
 8010070:	4bb3      	ldr	r3, [pc, #716]	; (8010340 <__kernel_rem_pio2+0x6e4>)
 8010072:	0020      	movs	r0, r4
 8010074:	0029      	movs	r1, r5
 8010076:	f7f1 f9f7 	bl	8001468 <__aeabi_dmul>
 801007a:	f7f2 f811 	bl	80020a0 <__aeabi_d2iz>
 801007e:	9b04      	ldr	r3, [sp, #16]
 8010080:	0006      	movs	r6, r0
 8010082:	009f      	lsls	r7, r3, #2
 8010084:	f7f2 f842 	bl	800210c <__aeabi_i2d>
 8010088:	2200      	movs	r2, #0
 801008a:	4bac      	ldr	r3, [pc, #688]	; (801033c <__kernel_rem_pio2+0x6e0>)
 801008c:	f7f1 f9ec 	bl	8001468 <__aeabi_dmul>
 8010090:	0002      	movs	r2, r0
 8010092:	000b      	movs	r3, r1
 8010094:	0020      	movs	r0, r4
 8010096:	0029      	movs	r1, r5
 8010098:	f7f1 fc52 	bl	8001940 <__aeabi_dsub>
 801009c:	f7f2 f800 	bl	80020a0 <__aeabi_d2iz>
 80100a0:	ab12      	add	r3, sp, #72	; 0x48
 80100a2:	51d8      	str	r0, [r3, r7]
 80100a4:	9b04      	ldr	r3, [sp, #16]
 80100a6:	aa12      	add	r2, sp, #72	; 0x48
 80100a8:	3301      	adds	r3, #1
 80100aa:	9300      	str	r3, [sp, #0]
 80100ac:	9b02      	ldr	r3, [sp, #8]
 80100ae:	3318      	adds	r3, #24
 80100b0:	9302      	str	r3, [sp, #8]
 80100b2:	9b00      	ldr	r3, [sp, #0]
 80100b4:	009b      	lsls	r3, r3, #2
 80100b6:	509e      	str	r6, [r3, r2]
 80100b8:	e725      	b.n	800ff06 <__kernel_rem_pio2+0x2aa>
 80100ba:	9b04      	ldr	r3, [sp, #16]
 80100bc:	0020      	movs	r0, r4
 80100be:	0029      	movs	r1, r5
 80100c0:	009e      	lsls	r6, r3, #2
 80100c2:	f7f1 ffed 	bl	80020a0 <__aeabi_d2iz>
 80100c6:	ab12      	add	r3, sp, #72	; 0x48
 80100c8:	5198      	str	r0, [r3, r6]
 80100ca:	9b04      	ldr	r3, [sp, #16]
 80100cc:	9300      	str	r3, [sp, #0]
 80100ce:	e71a      	b.n	800ff06 <__kernel_rem_pio2+0x2aa>
 80100d0:	00e5      	lsls	r5, r4, #3
 80100d2:	ab76      	add	r3, sp, #472	; 0x1d8
 80100d4:	aa12      	add	r2, sp, #72	; 0x48
 80100d6:	195d      	adds	r5, r3, r5
 80100d8:	00a3      	lsls	r3, r4, #2
 80100da:	5898      	ldr	r0, [r3, r2]
 80100dc:	f7f2 f816 	bl	800210c <__aeabi_i2d>
 80100e0:	0032      	movs	r2, r6
 80100e2:	003b      	movs	r3, r7
 80100e4:	f7f1 f9c0 	bl	8001468 <__aeabi_dmul>
 80100e8:	2200      	movs	r2, #0
 80100ea:	6028      	str	r0, [r5, #0]
 80100ec:	6069      	str	r1, [r5, #4]
 80100ee:	4b94      	ldr	r3, [pc, #592]	; (8010340 <__kernel_rem_pio2+0x6e4>)
 80100f0:	0030      	movs	r0, r6
 80100f2:	0039      	movs	r1, r7
 80100f4:	f7f1 f9b8 	bl	8001468 <__aeabi_dmul>
 80100f8:	3c01      	subs	r4, #1
 80100fa:	0006      	movs	r6, r0
 80100fc:	000f      	movs	r7, r1
 80100fe:	e70a      	b.n	800ff16 <__kernel_rem_pio2+0x2ba>
 8010100:	4b90      	ldr	r3, [pc, #576]	; (8010344 <__kernel_rem_pio2+0x6e8>)
 8010102:	00e1      	lsls	r1, r4, #3
 8010104:	1859      	adds	r1, r3, r1
 8010106:	6808      	ldr	r0, [r1, #0]
 8010108:	6849      	ldr	r1, [r1, #4]
 801010a:	cf0c      	ldmia	r7!, {r2, r3}
 801010c:	f7f1 f9ac 	bl	8001468 <__aeabi_dmul>
 8010110:	0002      	movs	r2, r0
 8010112:	000b      	movs	r3, r1
 8010114:	9802      	ldr	r0, [sp, #8]
 8010116:	9903      	ldr	r1, [sp, #12]
 8010118:	f7f0 fa36 	bl	8000588 <__aeabi_dadd>
 801011c:	9002      	str	r0, [sp, #8]
 801011e:	9103      	str	r1, [sp, #12]
 8010120:	3401      	adds	r4, #1
 8010122:	9b08      	ldr	r3, [sp, #32]
 8010124:	429c      	cmp	r4, r3
 8010126:	dc01      	bgt.n	801012c <__kernel_rem_pio2+0x4d0>
 8010128:	42a6      	cmp	r6, r4
 801012a:	dae9      	bge.n	8010100 <__kernel_rem_pio2+0x4a4>
 801012c:	00f3      	lsls	r3, r6, #3
 801012e:	aa4e      	add	r2, sp, #312	; 0x138
 8010130:	18d3      	adds	r3, r2, r3
 8010132:	3d01      	subs	r5, #1
 8010134:	9902      	ldr	r1, [sp, #8]
 8010136:	9a03      	ldr	r2, [sp, #12]
 8010138:	3601      	adds	r6, #1
 801013a:	6019      	str	r1, [r3, #0]
 801013c:	605a      	str	r2, [r3, #4]
 801013e:	e6ef      	b.n	800ff20 <__kernel_rem_pio2+0x2c4>
 8010140:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010142:	2b02      	cmp	r3, #2
 8010144:	dc0b      	bgt.n	801015e <__kernel_rem_pio2+0x502>
 8010146:	2b00      	cmp	r3, #0
 8010148:	dd00      	ble.n	801014c <__kernel_rem_pio2+0x4f0>
 801014a:	e08a      	b.n	8010262 <__kernel_rem_pio2+0x606>
 801014c:	d055      	beq.n	80101fa <__kernel_rem_pio2+0x59e>
 801014e:	2007      	movs	r0, #7
 8010150:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010152:	4003      	ands	r3, r0
 8010154:	0018      	movs	r0, r3
 8010156:	239f      	movs	r3, #159	; 0x9f
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	449d      	add	sp, r3
 801015c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801015e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010160:	2b03      	cmp	r3, #3
 8010162:	d1f4      	bne.n	801014e <__kernel_rem_pio2+0x4f2>
 8010164:	9b00      	ldr	r3, [sp, #0]
 8010166:	00dc      	lsls	r4, r3, #3
 8010168:	ab4e      	add	r3, sp, #312	; 0x138
 801016a:	191c      	adds	r4, r3, r4
 801016c:	0025      	movs	r5, r4
 801016e:	9b00      	ldr	r3, [sp, #0]
 8010170:	9302      	str	r3, [sp, #8]
 8010172:	9b02      	ldr	r3, [sp, #8]
 8010174:	3d08      	subs	r5, #8
 8010176:	2b00      	cmp	r3, #0
 8010178:	dd00      	ble.n	801017c <__kernel_rem_pio2+0x520>
 801017a:	e083      	b.n	8010284 <__kernel_rem_pio2+0x628>
 801017c:	9d00      	ldr	r5, [sp, #0]
 801017e:	3c08      	subs	r4, #8
 8010180:	2d01      	cmp	r5, #1
 8010182:	dd00      	ble.n	8010186 <__kernel_rem_pio2+0x52a>
 8010184:	e0a0      	b.n	80102c8 <__kernel_rem_pio2+0x66c>
 8010186:	2400      	movs	r4, #0
 8010188:	0021      	movs	r1, r4
 801018a:	9b00      	ldr	r3, [sp, #0]
 801018c:	2b01      	cmp	r3, #1
 801018e:	dd00      	ble.n	8010192 <__kernel_rem_pio2+0x536>
 8010190:	e0b8      	b.n	8010304 <__kernel_rem_pio2+0x6a8>
 8010192:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010194:	9f4e      	ldr	r7, [sp, #312]	; 0x138
 8010196:	9e4f      	ldr	r6, [sp, #316]	; 0x13c
 8010198:	9d50      	ldr	r5, [sp, #320]	; 0x140
 801019a:	9851      	ldr	r0, [sp, #324]	; 0x144
 801019c:	2b00      	cmp	r3, #0
 801019e:	d000      	beq.n	80101a2 <__kernel_rem_pio2+0x546>
 80101a0:	e0be      	b.n	8010320 <__kernel_rem_pio2+0x6c4>
 80101a2:	0033      	movs	r3, r6
 80101a4:	003a      	movs	r2, r7
 80101a6:	9e07      	ldr	r6, [sp, #28]
 80101a8:	6032      	str	r2, [r6, #0]
 80101aa:	6073      	str	r3, [r6, #4]
 80101ac:	002a      	movs	r2, r5
 80101ae:	0003      	movs	r3, r0
 80101b0:	60b2      	str	r2, [r6, #8]
 80101b2:	60f3      	str	r3, [r6, #12]
 80101b4:	0022      	movs	r2, r4
 80101b6:	000b      	movs	r3, r1
 80101b8:	6132      	str	r2, [r6, #16]
 80101ba:	6173      	str	r3, [r6, #20]
 80101bc:	e7c7      	b.n	801014e <__kernel_rem_pio2+0x4f2>
 80101be:	9b00      	ldr	r3, [sp, #0]
 80101c0:	aa4e      	add	r2, sp, #312	; 0x138
 80101c2:	00db      	lsls	r3, r3, #3
 80101c4:	18d3      	adds	r3, r2, r3
 80101c6:	0028      	movs	r0, r5
 80101c8:	681a      	ldr	r2, [r3, #0]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	0021      	movs	r1, r4
 80101ce:	f7f0 f9db 	bl	8000588 <__aeabi_dadd>
 80101d2:	0005      	movs	r5, r0
 80101d4:	000c      	movs	r4, r1
 80101d6:	9b00      	ldr	r3, [sp, #0]
 80101d8:	3b01      	subs	r3, #1
 80101da:	9300      	str	r3, [sp, #0]
 80101dc:	9b00      	ldr	r3, [sp, #0]
 80101de:	2b00      	cmp	r3, #0
 80101e0:	daed      	bge.n	80101be <__kernel_rem_pio2+0x562>
 80101e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d002      	beq.n	80101ee <__kernel_rem_pio2+0x592>
 80101e8:	2380      	movs	r3, #128	; 0x80
 80101ea:	061b      	lsls	r3, r3, #24
 80101ec:	18e4      	adds	r4, r4, r3
 80101ee:	002a      	movs	r2, r5
 80101f0:	0023      	movs	r3, r4
 80101f2:	9907      	ldr	r1, [sp, #28]
 80101f4:	600a      	str	r2, [r1, #0]
 80101f6:	604b      	str	r3, [r1, #4]
 80101f8:	e7a9      	b.n	801014e <__kernel_rem_pio2+0x4f2>
 80101fa:	9da4      	ldr	r5, [sp, #656]	; 0x290
 80101fc:	002c      	movs	r4, r5
 80101fe:	e7ed      	b.n	80101dc <__kernel_rem_pio2+0x580>
 8010200:	00e3      	lsls	r3, r4, #3
 8010202:	aa4e      	add	r2, sp, #312	; 0x138
 8010204:	18d3      	adds	r3, r2, r3
 8010206:	0030      	movs	r0, r6
 8010208:	681a      	ldr	r2, [r3, #0]
 801020a:	685b      	ldr	r3, [r3, #4]
 801020c:	0029      	movs	r1, r5
 801020e:	f7f0 f9bb 	bl	8000588 <__aeabi_dadd>
 8010212:	0006      	movs	r6, r0
 8010214:	000d      	movs	r5, r1
 8010216:	3c01      	subs	r4, #1
 8010218:	2c00      	cmp	r4, #0
 801021a:	daf1      	bge.n	8010200 <__kernel_rem_pio2+0x5a4>
 801021c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801021e:	0029      	movs	r1, r5
 8010220:	2b00      	cmp	r3, #0
 8010222:	d002      	beq.n	801022a <__kernel_rem_pio2+0x5ce>
 8010224:	2380      	movs	r3, #128	; 0x80
 8010226:	061b      	lsls	r3, r3, #24
 8010228:	18e9      	adds	r1, r5, r3
 801022a:	0032      	movs	r2, r6
 801022c:	000b      	movs	r3, r1
 801022e:	9907      	ldr	r1, [sp, #28]
 8010230:	2401      	movs	r4, #1
 8010232:	600a      	str	r2, [r1, #0]
 8010234:	604b      	str	r3, [r1, #4]
 8010236:	984e      	ldr	r0, [sp, #312]	; 0x138
 8010238:	994f      	ldr	r1, [sp, #316]	; 0x13c
 801023a:	002b      	movs	r3, r5
 801023c:	f7f1 fb80 	bl	8001940 <__aeabi_dsub>
 8010240:	0006      	movs	r6, r0
 8010242:	000d      	movs	r5, r1
 8010244:	9b00      	ldr	r3, [sp, #0]
 8010246:	42a3      	cmp	r3, r4
 8010248:	da0f      	bge.n	801026a <__kernel_rem_pio2+0x60e>
 801024a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801024c:	2b00      	cmp	r3, #0
 801024e:	d002      	beq.n	8010256 <__kernel_rem_pio2+0x5fa>
 8010250:	2380      	movs	r3, #128	; 0x80
 8010252:	061b      	lsls	r3, r3, #24
 8010254:	18ed      	adds	r5, r5, r3
 8010256:	0032      	movs	r2, r6
 8010258:	002b      	movs	r3, r5
 801025a:	9907      	ldr	r1, [sp, #28]
 801025c:	608a      	str	r2, [r1, #8]
 801025e:	60cb      	str	r3, [r1, #12]
 8010260:	e775      	b.n	801014e <__kernel_rem_pio2+0x4f2>
 8010262:	2600      	movs	r6, #0
 8010264:	9c00      	ldr	r4, [sp, #0]
 8010266:	0035      	movs	r5, r6
 8010268:	e7d6      	b.n	8010218 <__kernel_rem_pio2+0x5bc>
 801026a:	00e3      	lsls	r3, r4, #3
 801026c:	aa4e      	add	r2, sp, #312	; 0x138
 801026e:	18d3      	adds	r3, r2, r3
 8010270:	0030      	movs	r0, r6
 8010272:	681a      	ldr	r2, [r3, #0]
 8010274:	685b      	ldr	r3, [r3, #4]
 8010276:	0029      	movs	r1, r5
 8010278:	f7f0 f986 	bl	8000588 <__aeabi_dadd>
 801027c:	3401      	adds	r4, #1
 801027e:	0006      	movs	r6, r0
 8010280:	000d      	movs	r5, r1
 8010282:	e7df      	b.n	8010244 <__kernel_rem_pio2+0x5e8>
 8010284:	9b02      	ldr	r3, [sp, #8]
 8010286:	68ae      	ldr	r6, [r5, #8]
 8010288:	68ef      	ldr	r7, [r5, #12]
 801028a:	3b01      	subs	r3, #1
 801028c:	9302      	str	r3, [sp, #8]
 801028e:	682a      	ldr	r2, [r5, #0]
 8010290:	686b      	ldr	r3, [r5, #4]
 8010292:	9204      	str	r2, [sp, #16]
 8010294:	9305      	str	r3, [sp, #20]
 8010296:	9804      	ldr	r0, [sp, #16]
 8010298:	9905      	ldr	r1, [sp, #20]
 801029a:	0032      	movs	r2, r6
 801029c:	003b      	movs	r3, r7
 801029e:	f7f0 f973 	bl	8000588 <__aeabi_dadd>
 80102a2:	0002      	movs	r2, r0
 80102a4:	000b      	movs	r3, r1
 80102a6:	9008      	str	r0, [sp, #32]
 80102a8:	9109      	str	r1, [sp, #36]	; 0x24
 80102aa:	9804      	ldr	r0, [sp, #16]
 80102ac:	9905      	ldr	r1, [sp, #20]
 80102ae:	f7f1 fb47 	bl	8001940 <__aeabi_dsub>
 80102b2:	0032      	movs	r2, r6
 80102b4:	003b      	movs	r3, r7
 80102b6:	f7f0 f967 	bl	8000588 <__aeabi_dadd>
 80102ba:	9a08      	ldr	r2, [sp, #32]
 80102bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102be:	60a8      	str	r0, [r5, #8]
 80102c0:	60e9      	str	r1, [r5, #12]
 80102c2:	602a      	str	r2, [r5, #0]
 80102c4:	606b      	str	r3, [r5, #4]
 80102c6:	e754      	b.n	8010172 <__kernel_rem_pio2+0x516>
 80102c8:	6826      	ldr	r6, [r4, #0]
 80102ca:	6867      	ldr	r7, [r4, #4]
 80102cc:	68a2      	ldr	r2, [r4, #8]
 80102ce:	68e3      	ldr	r3, [r4, #12]
 80102d0:	0030      	movs	r0, r6
 80102d2:	0039      	movs	r1, r7
 80102d4:	9202      	str	r2, [sp, #8]
 80102d6:	9303      	str	r3, [sp, #12]
 80102d8:	f7f0 f956 	bl	8000588 <__aeabi_dadd>
 80102dc:	0002      	movs	r2, r0
 80102de:	000b      	movs	r3, r1
 80102e0:	9004      	str	r0, [sp, #16]
 80102e2:	9105      	str	r1, [sp, #20]
 80102e4:	0030      	movs	r0, r6
 80102e6:	0039      	movs	r1, r7
 80102e8:	f7f1 fb2a 	bl	8001940 <__aeabi_dsub>
 80102ec:	9a02      	ldr	r2, [sp, #8]
 80102ee:	9b03      	ldr	r3, [sp, #12]
 80102f0:	f7f0 f94a 	bl	8000588 <__aeabi_dadd>
 80102f4:	9a04      	ldr	r2, [sp, #16]
 80102f6:	9b05      	ldr	r3, [sp, #20]
 80102f8:	60a0      	str	r0, [r4, #8]
 80102fa:	60e1      	str	r1, [r4, #12]
 80102fc:	6022      	str	r2, [r4, #0]
 80102fe:	6063      	str	r3, [r4, #4]
 8010300:	3d01      	subs	r5, #1
 8010302:	e73c      	b.n	801017e <__kernel_rem_pio2+0x522>
 8010304:	9b00      	ldr	r3, [sp, #0]
 8010306:	aa4e      	add	r2, sp, #312	; 0x138
 8010308:	00db      	lsls	r3, r3, #3
 801030a:	18d3      	adds	r3, r2, r3
 801030c:	0020      	movs	r0, r4
 801030e:	681a      	ldr	r2, [r3, #0]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	f7f0 f939 	bl	8000588 <__aeabi_dadd>
 8010316:	9b00      	ldr	r3, [sp, #0]
 8010318:	0004      	movs	r4, r0
 801031a:	3b01      	subs	r3, #1
 801031c:	9300      	str	r3, [sp, #0]
 801031e:	e734      	b.n	801018a <__kernel_rem_pio2+0x52e>
 8010320:	9b07      	ldr	r3, [sp, #28]
 8010322:	9a07      	ldr	r2, [sp, #28]
 8010324:	601f      	str	r7, [r3, #0]
 8010326:	2380      	movs	r3, #128	; 0x80
 8010328:	061b      	lsls	r3, r3, #24
 801032a:	18f6      	adds	r6, r6, r3
 801032c:	18c0      	adds	r0, r0, r3
 801032e:	18c9      	adds	r1, r1, r3
 8010330:	6056      	str	r6, [r2, #4]
 8010332:	6095      	str	r5, [r2, #8]
 8010334:	60d0      	str	r0, [r2, #12]
 8010336:	6114      	str	r4, [r2, #16]
 8010338:	6151      	str	r1, [r2, #20]
 801033a:	e708      	b.n	801014e <__kernel_rem_pio2+0x4f2>
 801033c:	41700000 	.word	0x41700000
 8010340:	3e700000 	.word	0x3e700000
 8010344:	080112d8 	.word	0x080112d8

08010348 <__kernel_sin>:
 8010348:	b5f0      	push	{r4, r5, r6, r7, lr}
 801034a:	b089      	sub	sp, #36	; 0x24
 801034c:	9202      	str	r2, [sp, #8]
 801034e:	9303      	str	r3, [sp, #12]
 8010350:	22f9      	movs	r2, #249	; 0xf9
 8010352:	004b      	lsls	r3, r1, #1
 8010354:	0007      	movs	r7, r0
 8010356:	000e      	movs	r6, r1
 8010358:	085b      	lsrs	r3, r3, #1
 801035a:	0592      	lsls	r2, r2, #22
 801035c:	4293      	cmp	r3, r2
 801035e:	da03      	bge.n	8010368 <__kernel_sin+0x20>
 8010360:	f7f1 fe9e 	bl	80020a0 <__aeabi_d2iz>
 8010364:	2800      	cmp	r0, #0
 8010366:	d04c      	beq.n	8010402 <__kernel_sin+0xba>
 8010368:	003a      	movs	r2, r7
 801036a:	0033      	movs	r3, r6
 801036c:	0038      	movs	r0, r7
 801036e:	0031      	movs	r1, r6
 8010370:	f7f1 f87a 	bl	8001468 <__aeabi_dmul>
 8010374:	0004      	movs	r4, r0
 8010376:	000d      	movs	r5, r1
 8010378:	0002      	movs	r2, r0
 801037a:	000b      	movs	r3, r1
 801037c:	0038      	movs	r0, r7
 801037e:	0031      	movs	r1, r6
 8010380:	f7f1 f872 	bl	8001468 <__aeabi_dmul>
 8010384:	4a39      	ldr	r2, [pc, #228]	; (801046c <__kernel_sin+0x124>)
 8010386:	9000      	str	r0, [sp, #0]
 8010388:	9101      	str	r1, [sp, #4]
 801038a:	4b39      	ldr	r3, [pc, #228]	; (8010470 <__kernel_sin+0x128>)
 801038c:	0020      	movs	r0, r4
 801038e:	0029      	movs	r1, r5
 8010390:	f7f1 f86a 	bl	8001468 <__aeabi_dmul>
 8010394:	4a37      	ldr	r2, [pc, #220]	; (8010474 <__kernel_sin+0x12c>)
 8010396:	4b38      	ldr	r3, [pc, #224]	; (8010478 <__kernel_sin+0x130>)
 8010398:	f7f1 fad2 	bl	8001940 <__aeabi_dsub>
 801039c:	0022      	movs	r2, r4
 801039e:	002b      	movs	r3, r5
 80103a0:	f7f1 f862 	bl	8001468 <__aeabi_dmul>
 80103a4:	4a35      	ldr	r2, [pc, #212]	; (801047c <__kernel_sin+0x134>)
 80103a6:	4b36      	ldr	r3, [pc, #216]	; (8010480 <__kernel_sin+0x138>)
 80103a8:	f7f0 f8ee 	bl	8000588 <__aeabi_dadd>
 80103ac:	0022      	movs	r2, r4
 80103ae:	002b      	movs	r3, r5
 80103b0:	f7f1 f85a 	bl	8001468 <__aeabi_dmul>
 80103b4:	4a33      	ldr	r2, [pc, #204]	; (8010484 <__kernel_sin+0x13c>)
 80103b6:	4b34      	ldr	r3, [pc, #208]	; (8010488 <__kernel_sin+0x140>)
 80103b8:	f7f1 fac2 	bl	8001940 <__aeabi_dsub>
 80103bc:	0022      	movs	r2, r4
 80103be:	002b      	movs	r3, r5
 80103c0:	f7f1 f852 	bl	8001468 <__aeabi_dmul>
 80103c4:	4b31      	ldr	r3, [pc, #196]	; (801048c <__kernel_sin+0x144>)
 80103c6:	4a32      	ldr	r2, [pc, #200]	; (8010490 <__kernel_sin+0x148>)
 80103c8:	f7f0 f8de 	bl	8000588 <__aeabi_dadd>
 80103cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80103ce:	9004      	str	r0, [sp, #16]
 80103d0:	9105      	str	r1, [sp, #20]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d119      	bne.n	801040a <__kernel_sin+0xc2>
 80103d6:	0002      	movs	r2, r0
 80103d8:	000b      	movs	r3, r1
 80103da:	0020      	movs	r0, r4
 80103dc:	0029      	movs	r1, r5
 80103de:	f7f1 f843 	bl	8001468 <__aeabi_dmul>
 80103e2:	4a2c      	ldr	r2, [pc, #176]	; (8010494 <__kernel_sin+0x14c>)
 80103e4:	4b2c      	ldr	r3, [pc, #176]	; (8010498 <__kernel_sin+0x150>)
 80103e6:	f7f1 faab 	bl	8001940 <__aeabi_dsub>
 80103ea:	9a00      	ldr	r2, [sp, #0]
 80103ec:	9b01      	ldr	r3, [sp, #4]
 80103ee:	f7f1 f83b 	bl	8001468 <__aeabi_dmul>
 80103f2:	0002      	movs	r2, r0
 80103f4:	000b      	movs	r3, r1
 80103f6:	0038      	movs	r0, r7
 80103f8:	0031      	movs	r1, r6
 80103fa:	f7f0 f8c5 	bl	8000588 <__aeabi_dadd>
 80103fe:	0007      	movs	r7, r0
 8010400:	000e      	movs	r6, r1
 8010402:	0038      	movs	r0, r7
 8010404:	0031      	movs	r1, r6
 8010406:	b009      	add	sp, #36	; 0x24
 8010408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801040a:	2200      	movs	r2, #0
 801040c:	9802      	ldr	r0, [sp, #8]
 801040e:	9903      	ldr	r1, [sp, #12]
 8010410:	4b22      	ldr	r3, [pc, #136]	; (801049c <__kernel_sin+0x154>)
 8010412:	f7f1 f829 	bl	8001468 <__aeabi_dmul>
 8010416:	9a04      	ldr	r2, [sp, #16]
 8010418:	9b05      	ldr	r3, [sp, #20]
 801041a:	9006      	str	r0, [sp, #24]
 801041c:	9107      	str	r1, [sp, #28]
 801041e:	9800      	ldr	r0, [sp, #0]
 8010420:	9901      	ldr	r1, [sp, #4]
 8010422:	f7f1 f821 	bl	8001468 <__aeabi_dmul>
 8010426:	0002      	movs	r2, r0
 8010428:	000b      	movs	r3, r1
 801042a:	9806      	ldr	r0, [sp, #24]
 801042c:	9907      	ldr	r1, [sp, #28]
 801042e:	f7f1 fa87 	bl	8001940 <__aeabi_dsub>
 8010432:	0022      	movs	r2, r4
 8010434:	002b      	movs	r3, r5
 8010436:	f7f1 f817 	bl	8001468 <__aeabi_dmul>
 801043a:	9a02      	ldr	r2, [sp, #8]
 801043c:	9b03      	ldr	r3, [sp, #12]
 801043e:	f7f1 fa7f 	bl	8001940 <__aeabi_dsub>
 8010442:	4a14      	ldr	r2, [pc, #80]	; (8010494 <__kernel_sin+0x14c>)
 8010444:	0004      	movs	r4, r0
 8010446:	000d      	movs	r5, r1
 8010448:	9800      	ldr	r0, [sp, #0]
 801044a:	9901      	ldr	r1, [sp, #4]
 801044c:	4b12      	ldr	r3, [pc, #72]	; (8010498 <__kernel_sin+0x150>)
 801044e:	f7f1 f80b 	bl	8001468 <__aeabi_dmul>
 8010452:	0002      	movs	r2, r0
 8010454:	000b      	movs	r3, r1
 8010456:	0020      	movs	r0, r4
 8010458:	0029      	movs	r1, r5
 801045a:	f7f0 f895 	bl	8000588 <__aeabi_dadd>
 801045e:	0002      	movs	r2, r0
 8010460:	000b      	movs	r3, r1
 8010462:	0038      	movs	r0, r7
 8010464:	0031      	movs	r1, r6
 8010466:	f7f1 fa6b 	bl	8001940 <__aeabi_dsub>
 801046a:	e7c8      	b.n	80103fe <__kernel_sin+0xb6>
 801046c:	5acfd57c 	.word	0x5acfd57c
 8010470:	3de5d93a 	.word	0x3de5d93a
 8010474:	8a2b9ceb 	.word	0x8a2b9ceb
 8010478:	3e5ae5e6 	.word	0x3e5ae5e6
 801047c:	57b1fe7d 	.word	0x57b1fe7d
 8010480:	3ec71de3 	.word	0x3ec71de3
 8010484:	19c161d5 	.word	0x19c161d5
 8010488:	3f2a01a0 	.word	0x3f2a01a0
 801048c:	3f811111 	.word	0x3f811111
 8010490:	1110f8a6 	.word	0x1110f8a6
 8010494:	55555549 	.word	0x55555549
 8010498:	3fc55555 	.word	0x3fc55555
 801049c:	3fe00000 	.word	0x3fe00000

080104a0 <fabs>:
 80104a0:	004b      	lsls	r3, r1, #1
 80104a2:	0859      	lsrs	r1, r3, #1
 80104a4:	4770      	bx	lr
	...

080104a8 <finite>:
 80104a8:	4b02      	ldr	r3, [pc, #8]	; (80104b4 <finite+0xc>)
 80104aa:	0048      	lsls	r0, r1, #1
 80104ac:	0840      	lsrs	r0, r0, #1
 80104ae:	18c0      	adds	r0, r0, r3
 80104b0:	0fc0      	lsrs	r0, r0, #31
 80104b2:	4770      	bx	lr
 80104b4:	80100000 	.word	0x80100000

080104b8 <floor>:
 80104b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80104ba:	004b      	lsls	r3, r1, #1
 80104bc:	4a3d      	ldr	r2, [pc, #244]	; (80105b4 <floor+0xfc>)
 80104be:	0d5b      	lsrs	r3, r3, #21
 80104c0:	189f      	adds	r7, r3, r2
 80104c2:	4684      	mov	ip, r0
 80104c4:	000e      	movs	r6, r1
 80104c6:	000d      	movs	r5, r1
 80104c8:	0004      	movs	r4, r0
 80104ca:	9001      	str	r0, [sp, #4]
 80104cc:	2f13      	cmp	r7, #19
 80104ce:	dc34      	bgt.n	801053a <floor+0x82>
 80104d0:	2f00      	cmp	r7, #0
 80104d2:	da16      	bge.n	8010502 <floor+0x4a>
 80104d4:	4a38      	ldr	r2, [pc, #224]	; (80105b8 <floor+0x100>)
 80104d6:	4b39      	ldr	r3, [pc, #228]	; (80105bc <floor+0x104>)
 80104d8:	4660      	mov	r0, ip
 80104da:	0031      	movs	r1, r6
 80104dc:	f7f0 f854 	bl	8000588 <__aeabi_dadd>
 80104e0:	2200      	movs	r2, #0
 80104e2:	2300      	movs	r3, #0
 80104e4:	f7ef ffcc 	bl	8000480 <__aeabi_dcmpgt>
 80104e8:	2800      	cmp	r0, #0
 80104ea:	d007      	beq.n	80104fc <floor+0x44>
 80104ec:	2e00      	cmp	r6, #0
 80104ee:	da5d      	bge.n	80105ac <floor+0xf4>
 80104f0:	0073      	lsls	r3, r6, #1
 80104f2:	085b      	lsrs	r3, r3, #1
 80104f4:	431c      	orrs	r4, r3
 80104f6:	d001      	beq.n	80104fc <floor+0x44>
 80104f8:	2400      	movs	r4, #0
 80104fa:	4d31      	ldr	r5, [pc, #196]	; (80105c0 <floor+0x108>)
 80104fc:	46a4      	mov	ip, r4
 80104fe:	002e      	movs	r6, r5
 8010500:	e029      	b.n	8010556 <floor+0x9e>
 8010502:	4b30      	ldr	r3, [pc, #192]	; (80105c4 <floor+0x10c>)
 8010504:	413b      	asrs	r3, r7
 8010506:	9300      	str	r3, [sp, #0]
 8010508:	400b      	ands	r3, r1
 801050a:	4303      	orrs	r3, r0
 801050c:	d023      	beq.n	8010556 <floor+0x9e>
 801050e:	4a2a      	ldr	r2, [pc, #168]	; (80105b8 <floor+0x100>)
 8010510:	4b2a      	ldr	r3, [pc, #168]	; (80105bc <floor+0x104>)
 8010512:	4660      	mov	r0, ip
 8010514:	0031      	movs	r1, r6
 8010516:	f7f0 f837 	bl	8000588 <__aeabi_dadd>
 801051a:	2200      	movs	r2, #0
 801051c:	2300      	movs	r3, #0
 801051e:	f7ef ffaf 	bl	8000480 <__aeabi_dcmpgt>
 8010522:	2800      	cmp	r0, #0
 8010524:	d0ea      	beq.n	80104fc <floor+0x44>
 8010526:	2e00      	cmp	r6, #0
 8010528:	da03      	bge.n	8010532 <floor+0x7a>
 801052a:	2380      	movs	r3, #128	; 0x80
 801052c:	035b      	lsls	r3, r3, #13
 801052e:	413b      	asrs	r3, r7
 8010530:	18f5      	adds	r5, r6, r3
 8010532:	9b00      	ldr	r3, [sp, #0]
 8010534:	2400      	movs	r4, #0
 8010536:	439d      	bics	r5, r3
 8010538:	e7e0      	b.n	80104fc <floor+0x44>
 801053a:	2f33      	cmp	r7, #51	; 0x33
 801053c:	dd0f      	ble.n	801055e <floor+0xa6>
 801053e:	2380      	movs	r3, #128	; 0x80
 8010540:	00db      	lsls	r3, r3, #3
 8010542:	429f      	cmp	r7, r3
 8010544:	d107      	bne.n	8010556 <floor+0x9e>
 8010546:	0002      	movs	r2, r0
 8010548:	000b      	movs	r3, r1
 801054a:	4660      	mov	r0, ip
 801054c:	0031      	movs	r1, r6
 801054e:	f7f0 f81b 	bl	8000588 <__aeabi_dadd>
 8010552:	4684      	mov	ip, r0
 8010554:	000e      	movs	r6, r1
 8010556:	4660      	mov	r0, ip
 8010558:	0031      	movs	r1, r6
 801055a:	b003      	add	sp, #12
 801055c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801055e:	4a1a      	ldr	r2, [pc, #104]	; (80105c8 <floor+0x110>)
 8010560:	189b      	adds	r3, r3, r2
 8010562:	2201      	movs	r2, #1
 8010564:	4252      	negs	r2, r2
 8010566:	40da      	lsrs	r2, r3
 8010568:	9200      	str	r2, [sp, #0]
 801056a:	4210      	tst	r0, r2
 801056c:	d0f3      	beq.n	8010556 <floor+0x9e>
 801056e:	4a12      	ldr	r2, [pc, #72]	; (80105b8 <floor+0x100>)
 8010570:	4b12      	ldr	r3, [pc, #72]	; (80105bc <floor+0x104>)
 8010572:	4660      	mov	r0, ip
 8010574:	0031      	movs	r1, r6
 8010576:	f7f0 f807 	bl	8000588 <__aeabi_dadd>
 801057a:	2200      	movs	r2, #0
 801057c:	2300      	movs	r3, #0
 801057e:	f7ef ff7f 	bl	8000480 <__aeabi_dcmpgt>
 8010582:	2800      	cmp	r0, #0
 8010584:	d0ba      	beq.n	80104fc <floor+0x44>
 8010586:	2e00      	cmp	r6, #0
 8010588:	da02      	bge.n	8010590 <floor+0xd8>
 801058a:	2f14      	cmp	r7, #20
 801058c:	d103      	bne.n	8010596 <floor+0xde>
 801058e:	3501      	adds	r5, #1
 8010590:	9b00      	ldr	r3, [sp, #0]
 8010592:	439c      	bics	r4, r3
 8010594:	e7b2      	b.n	80104fc <floor+0x44>
 8010596:	2334      	movs	r3, #52	; 0x34
 8010598:	1bdf      	subs	r7, r3, r7
 801059a:	3b33      	subs	r3, #51	; 0x33
 801059c:	40bb      	lsls	r3, r7
 801059e:	18e4      	adds	r4, r4, r3
 80105a0:	9b01      	ldr	r3, [sp, #4]
 80105a2:	429c      	cmp	r4, r3
 80105a4:	419b      	sbcs	r3, r3
 80105a6:	425b      	negs	r3, r3
 80105a8:	18f5      	adds	r5, r6, r3
 80105aa:	e7f1      	b.n	8010590 <floor+0xd8>
 80105ac:	2400      	movs	r4, #0
 80105ae:	0025      	movs	r5, r4
 80105b0:	e7a4      	b.n	80104fc <floor+0x44>
 80105b2:	46c0      	nop			; (mov r8, r8)
 80105b4:	fffffc01 	.word	0xfffffc01
 80105b8:	8800759c 	.word	0x8800759c
 80105bc:	7e37e43c 	.word	0x7e37e43c
 80105c0:	bff00000 	.word	0xbff00000
 80105c4:	000fffff 	.word	0x000fffff
 80105c8:	fffffbed 	.word	0xfffffbed

080105cc <rint>:
 80105cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105ce:	004a      	lsls	r2, r1, #1
 80105d0:	4e3e      	ldr	r6, [pc, #248]	; (80106cc <rint+0x100>)
 80105d2:	0d52      	lsrs	r2, r2, #21
 80105d4:	b085      	sub	sp, #20
 80105d6:	1996      	adds	r6, r2, r6
 80105d8:	000d      	movs	r5, r1
 80105da:	0003      	movs	r3, r0
 80105dc:	9101      	str	r1, [sp, #4]
 80105de:	0fcc      	lsrs	r4, r1, #31
 80105e0:	2e13      	cmp	r6, #19
 80105e2:	dc57      	bgt.n	8010694 <rint+0xc8>
 80105e4:	2e00      	cmp	r6, #0
 80105e6:	da2a      	bge.n	801063e <rint+0x72>
 80105e8:	004a      	lsls	r2, r1, #1
 80105ea:	0852      	lsrs	r2, r2, #1
 80105ec:	4302      	orrs	r2, r0
 80105ee:	d024      	beq.n	801063a <rint+0x6e>
 80105f0:	030a      	lsls	r2, r1, #12
 80105f2:	0b12      	lsrs	r2, r2, #12
 80105f4:	4302      	orrs	r2, r0
 80105f6:	4253      	negs	r3, r2
 80105f8:	4313      	orrs	r3, r2
 80105fa:	2280      	movs	r2, #128	; 0x80
 80105fc:	0c4d      	lsrs	r5, r1, #17
 80105fe:	0312      	lsls	r2, r2, #12
 8010600:	0b1b      	lsrs	r3, r3, #12
 8010602:	4013      	ands	r3, r2
 8010604:	046d      	lsls	r5, r5, #17
 8010606:	432b      	orrs	r3, r5
 8010608:	0019      	movs	r1, r3
 801060a:	4b31      	ldr	r3, [pc, #196]	; (80106d0 <rint+0x104>)
 801060c:	00e2      	lsls	r2, r4, #3
 801060e:	189b      	adds	r3, r3, r2
 8010610:	681e      	ldr	r6, [r3, #0]
 8010612:	685f      	ldr	r7, [r3, #4]
 8010614:	0002      	movs	r2, r0
 8010616:	000b      	movs	r3, r1
 8010618:	0030      	movs	r0, r6
 801061a:	0039      	movs	r1, r7
 801061c:	f7ef ffb4 	bl	8000588 <__aeabi_dadd>
 8010620:	9002      	str	r0, [sp, #8]
 8010622:	9103      	str	r1, [sp, #12]
 8010624:	9802      	ldr	r0, [sp, #8]
 8010626:	9903      	ldr	r1, [sp, #12]
 8010628:	003b      	movs	r3, r7
 801062a:	0032      	movs	r2, r6
 801062c:	f7f1 f988 	bl	8001940 <__aeabi_dsub>
 8010630:	004b      	lsls	r3, r1, #1
 8010632:	085b      	lsrs	r3, r3, #1
 8010634:	07e4      	lsls	r4, r4, #31
 8010636:	4323      	orrs	r3, r4
 8010638:	0019      	movs	r1, r3
 801063a:	b005      	add	sp, #20
 801063c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801063e:	4a25      	ldr	r2, [pc, #148]	; (80106d4 <rint+0x108>)
 8010640:	4132      	asrs	r2, r6
 8010642:	0017      	movs	r7, r2
 8010644:	400f      	ands	r7, r1
 8010646:	4307      	orrs	r7, r0
 8010648:	d0f7      	beq.n	801063a <rint+0x6e>
 801064a:	0852      	lsrs	r2, r2, #1
 801064c:	0011      	movs	r1, r2
 801064e:	4029      	ands	r1, r5
 8010650:	430b      	orrs	r3, r1
 8010652:	d00a      	beq.n	801066a <rint+0x9e>
 8010654:	2300      	movs	r3, #0
 8010656:	2e13      	cmp	r6, #19
 8010658:	d101      	bne.n	801065e <rint+0x92>
 801065a:	2380      	movs	r3, #128	; 0x80
 801065c:	061b      	lsls	r3, r3, #24
 801065e:	2780      	movs	r7, #128	; 0x80
 8010660:	02ff      	lsls	r7, r7, #11
 8010662:	4137      	asrs	r7, r6
 8010664:	4395      	bics	r5, r2
 8010666:	432f      	orrs	r7, r5
 8010668:	9701      	str	r7, [sp, #4]
 801066a:	9901      	ldr	r1, [sp, #4]
 801066c:	001a      	movs	r2, r3
 801066e:	000b      	movs	r3, r1
 8010670:	4917      	ldr	r1, [pc, #92]	; (80106d0 <rint+0x104>)
 8010672:	00e4      	lsls	r4, r4, #3
 8010674:	190c      	adds	r4, r1, r4
 8010676:	6865      	ldr	r5, [r4, #4]
 8010678:	6824      	ldr	r4, [r4, #0]
 801067a:	0020      	movs	r0, r4
 801067c:	0029      	movs	r1, r5
 801067e:	f7ef ff83 	bl	8000588 <__aeabi_dadd>
 8010682:	9002      	str	r0, [sp, #8]
 8010684:	9103      	str	r1, [sp, #12]
 8010686:	9802      	ldr	r0, [sp, #8]
 8010688:	9903      	ldr	r1, [sp, #12]
 801068a:	0022      	movs	r2, r4
 801068c:	002b      	movs	r3, r5
 801068e:	f7f1 f957 	bl	8001940 <__aeabi_dsub>
 8010692:	e7d2      	b.n	801063a <rint+0x6e>
 8010694:	2e33      	cmp	r6, #51	; 0x33
 8010696:	dd08      	ble.n	80106aa <rint+0xde>
 8010698:	2380      	movs	r3, #128	; 0x80
 801069a:	00db      	lsls	r3, r3, #3
 801069c:	429e      	cmp	r6, r3
 801069e:	d1cc      	bne.n	801063a <rint+0x6e>
 80106a0:	0002      	movs	r2, r0
 80106a2:	000b      	movs	r3, r1
 80106a4:	f7ef ff70 	bl	8000588 <__aeabi_dadd>
 80106a8:	e7c7      	b.n	801063a <rint+0x6e>
 80106aa:	2601      	movs	r6, #1
 80106ac:	4d0a      	ldr	r5, [pc, #40]	; (80106d8 <rint+0x10c>)
 80106ae:	4276      	negs	r6, r6
 80106b0:	1952      	adds	r2, r2, r5
 80106b2:	40d6      	lsrs	r6, r2
 80106b4:	4206      	tst	r6, r0
 80106b6:	d0c0      	beq.n	801063a <rint+0x6e>
 80106b8:	0876      	lsrs	r6, r6, #1
 80106ba:	4206      	tst	r6, r0
 80106bc:	d0d5      	beq.n	801066a <rint+0x9e>
 80106be:	2180      	movs	r1, #128	; 0x80
 80106c0:	05c9      	lsls	r1, r1, #23
 80106c2:	4111      	asrs	r1, r2
 80106c4:	43b3      	bics	r3, r6
 80106c6:	430b      	orrs	r3, r1
 80106c8:	e7cf      	b.n	801066a <rint+0x9e>
 80106ca:	46c0      	nop			; (mov r8, r8)
 80106cc:	fffffc01 	.word	0xfffffc01
 80106d0:	08011328 	.word	0x08011328
 80106d4:	000fffff 	.word	0x000fffff
 80106d8:	fffffbed 	.word	0xfffffbed

080106dc <scalbn>:
 80106dc:	004b      	lsls	r3, r1, #1
 80106de:	b570      	push	{r4, r5, r6, lr}
 80106e0:	0d5b      	lsrs	r3, r3, #21
 80106e2:	0014      	movs	r4, r2
 80106e4:	000a      	movs	r2, r1
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d10d      	bne.n	8010706 <scalbn+0x2a>
 80106ea:	004b      	lsls	r3, r1, #1
 80106ec:	085b      	lsrs	r3, r3, #1
 80106ee:	4303      	orrs	r3, r0
 80106f0:	d010      	beq.n	8010714 <scalbn+0x38>
 80106f2:	4b27      	ldr	r3, [pc, #156]	; (8010790 <scalbn+0xb4>)
 80106f4:	2200      	movs	r2, #0
 80106f6:	f7f0 feb7 	bl	8001468 <__aeabi_dmul>
 80106fa:	4b26      	ldr	r3, [pc, #152]	; (8010794 <scalbn+0xb8>)
 80106fc:	429c      	cmp	r4, r3
 80106fe:	da0a      	bge.n	8010716 <scalbn+0x3a>
 8010700:	4a25      	ldr	r2, [pc, #148]	; (8010798 <scalbn+0xbc>)
 8010702:	4b26      	ldr	r3, [pc, #152]	; (801079c <scalbn+0xc0>)
 8010704:	e019      	b.n	801073a <scalbn+0x5e>
 8010706:	4d26      	ldr	r5, [pc, #152]	; (80107a0 <scalbn+0xc4>)
 8010708:	42ab      	cmp	r3, r5
 801070a:	d108      	bne.n	801071e <scalbn+0x42>
 801070c:	0002      	movs	r2, r0
 801070e:	000b      	movs	r3, r1
 8010710:	f7ef ff3a 	bl	8000588 <__aeabi_dadd>
 8010714:	bd70      	pop	{r4, r5, r6, pc}
 8010716:	000a      	movs	r2, r1
 8010718:	004b      	lsls	r3, r1, #1
 801071a:	0d5b      	lsrs	r3, r3, #21
 801071c:	3b36      	subs	r3, #54	; 0x36
 801071e:	4d21      	ldr	r5, [pc, #132]	; (80107a4 <scalbn+0xc8>)
 8010720:	18e3      	adds	r3, r4, r3
 8010722:	42ab      	cmp	r3, r5
 8010724:	dd0c      	ble.n	8010740 <scalbn+0x64>
 8010726:	4c20      	ldr	r4, [pc, #128]	; (80107a8 <scalbn+0xcc>)
 8010728:	4d20      	ldr	r5, [pc, #128]	; (80107ac <scalbn+0xd0>)
 801072a:	2900      	cmp	r1, #0
 801072c:	da01      	bge.n	8010732 <scalbn+0x56>
 801072e:	4c1e      	ldr	r4, [pc, #120]	; (80107a8 <scalbn+0xcc>)
 8010730:	4d1f      	ldr	r5, [pc, #124]	; (80107b0 <scalbn+0xd4>)
 8010732:	0020      	movs	r0, r4
 8010734:	0029      	movs	r1, r5
 8010736:	4a1c      	ldr	r2, [pc, #112]	; (80107a8 <scalbn+0xcc>)
 8010738:	4b1c      	ldr	r3, [pc, #112]	; (80107ac <scalbn+0xd0>)
 801073a:	f7f0 fe95 	bl	8001468 <__aeabi_dmul>
 801073e:	e7e9      	b.n	8010714 <scalbn+0x38>
 8010740:	2b00      	cmp	r3, #0
 8010742:	dd05      	ble.n	8010750 <scalbn+0x74>
 8010744:	4c1b      	ldr	r4, [pc, #108]	; (80107b4 <scalbn+0xd8>)
 8010746:	051b      	lsls	r3, r3, #20
 8010748:	4022      	ands	r2, r4
 801074a:	431a      	orrs	r2, r3
 801074c:	0011      	movs	r1, r2
 801074e:	e7e1      	b.n	8010714 <scalbn+0x38>
 8010750:	001d      	movs	r5, r3
 8010752:	3535      	adds	r5, #53	; 0x35
 8010754:	da13      	bge.n	801077e <scalbn+0xa2>
 8010756:	4a18      	ldr	r2, [pc, #96]	; (80107b8 <scalbn+0xdc>)
 8010758:	0fcb      	lsrs	r3, r1, #31
 801075a:	4294      	cmp	r4, r2
 801075c:	dd08      	ble.n	8010770 <scalbn+0x94>
 801075e:	4812      	ldr	r0, [pc, #72]	; (80107a8 <scalbn+0xcc>)
 8010760:	4912      	ldr	r1, [pc, #72]	; (80107ac <scalbn+0xd0>)
 8010762:	2b00      	cmp	r3, #0
 8010764:	d001      	beq.n	801076a <scalbn+0x8e>
 8010766:	4810      	ldr	r0, [pc, #64]	; (80107a8 <scalbn+0xcc>)
 8010768:	4911      	ldr	r1, [pc, #68]	; (80107b0 <scalbn+0xd4>)
 801076a:	4a0f      	ldr	r2, [pc, #60]	; (80107a8 <scalbn+0xcc>)
 801076c:	4b0f      	ldr	r3, [pc, #60]	; (80107ac <scalbn+0xd0>)
 801076e:	e7e4      	b.n	801073a <scalbn+0x5e>
 8010770:	4809      	ldr	r0, [pc, #36]	; (8010798 <scalbn+0xbc>)
 8010772:	490a      	ldr	r1, [pc, #40]	; (801079c <scalbn+0xc0>)
 8010774:	2b00      	cmp	r3, #0
 8010776:	d0c3      	beq.n	8010700 <scalbn+0x24>
 8010778:	4807      	ldr	r0, [pc, #28]	; (8010798 <scalbn+0xbc>)
 801077a:	4910      	ldr	r1, [pc, #64]	; (80107bc <scalbn+0xe0>)
 801077c:	e7c0      	b.n	8010700 <scalbn+0x24>
 801077e:	4c0d      	ldr	r4, [pc, #52]	; (80107b4 <scalbn+0xd8>)
 8010780:	3336      	adds	r3, #54	; 0x36
 8010782:	4022      	ands	r2, r4
 8010784:	051b      	lsls	r3, r3, #20
 8010786:	4313      	orrs	r3, r2
 8010788:	0019      	movs	r1, r3
 801078a:	2200      	movs	r2, #0
 801078c:	4b0c      	ldr	r3, [pc, #48]	; (80107c0 <scalbn+0xe4>)
 801078e:	e7d4      	b.n	801073a <scalbn+0x5e>
 8010790:	43500000 	.word	0x43500000
 8010794:	ffff3cb0 	.word	0xffff3cb0
 8010798:	c2f8f359 	.word	0xc2f8f359
 801079c:	01a56e1f 	.word	0x01a56e1f
 80107a0:	000007ff 	.word	0x000007ff
 80107a4:	000007fe 	.word	0x000007fe
 80107a8:	8800759c 	.word	0x8800759c
 80107ac:	7e37e43c 	.word	0x7e37e43c
 80107b0:	fe37e43c 	.word	0xfe37e43c
 80107b4:	800fffff 	.word	0x800fffff
 80107b8:	0000c350 	.word	0x0000c350
 80107bc:	81a56e1f 	.word	0x81a56e1f
 80107c0:	3c900000 	.word	0x3c900000

080107c4 <_getpid>:
 80107c4:	2258      	movs	r2, #88	; 0x58
 80107c6:	2001      	movs	r0, #1
 80107c8:	4b01      	ldr	r3, [pc, #4]	; (80107d0 <_getpid+0xc>)
 80107ca:	4240      	negs	r0, r0
 80107cc:	601a      	str	r2, [r3, #0]
 80107ce:	4770      	bx	lr
 80107d0:	200026fc 	.word	0x200026fc

080107d4 <_kill>:
 80107d4:	2258      	movs	r2, #88	; 0x58
 80107d6:	2001      	movs	r0, #1
 80107d8:	4b01      	ldr	r3, [pc, #4]	; (80107e0 <_kill+0xc>)
 80107da:	4240      	negs	r0, r0
 80107dc:	601a      	str	r2, [r3, #0]
 80107de:	4770      	bx	lr
 80107e0:	200026fc 	.word	0x200026fc

080107e4 <_exit>:
 80107e4:	e7fe      	b.n	80107e4 <_exit>
	...

080107e8 <_init>:
 80107e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107ea:	46c0      	nop			; (mov r8, r8)
 80107ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107ee:	bc08      	pop	{r3}
 80107f0:	469e      	mov	lr, r3
 80107f2:	4770      	bx	lr

080107f4 <_fini>:
 80107f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107f6:	46c0      	nop			; (mov r8, r8)
 80107f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80107fa:	bc08      	pop	{r3}
 80107fc:	469e      	mov	lr, r3
 80107fe:	4770      	bx	lr
